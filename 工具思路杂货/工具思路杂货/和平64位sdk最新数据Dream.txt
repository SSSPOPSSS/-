Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 16]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 16]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 16]
	FString StreamingLevelsPrefix;//[Offset: 0x98, Size: 16]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xa8, Size: 8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xb0, Size: 8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xb8, Size: 8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xc0, Size: 8]
	WorldRegionManager RegionManager;//[Offset: 0x188, Size: 520]
	WorldParallelismManager ParallelismManager;//[Offset: 0x390, Size: 240]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x480, Size: 8]
	Actor*[] ActiveLevelActors;//[Offset: 0x4c0, Size: 16]
	NavigationSystem* NavigationSystem;//[Offset: 0x4d0, Size: 8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x4d8, Size: 8]
	GameStateBase* GameState;//[Offset: 0x4e0, Size: 8]
	AISystemBase* AISystem;//[Offset: 0x4e8, Size: 8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x4f0, Size: 8]
	Level*[] Levels;//[Offset: 0x4f8, Size: 16]
	LevelCollection[] LevelCollections;//[Offset: 0x508, Size: 16]
	Level* CurrentLevel;//[Offset: 0x520, Size: 8]
	GameInstance* OwningGameInstance;//[Offset: 0x528, Size: 8]
	bool bSupportParallelWorlds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x538, Size: 16]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x548, Size: 8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x550, Size: 8]
	WorldComposition* WorldComposition;//[Offset: 0xda8, Size: 8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdfe, Size: 1]

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0xffffff8f20d162a8

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xc0, Size: 8]
	Model* Model;//[Offset: 0xc8, Size: 8]
	ModelComponent*[] ModelComponents;//[Offset: 0xd0, Size: 16]
	LevelActorContainer* ActorCluster;//[Offset: 0xe0, Size: 8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe8, Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xec, Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xf0, Size: 8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf8, Size: 8]
	NavigationObjectBase* NavListEnd;//[Offset: 0x100, Size: 8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x108, Size: 16]
	float LightmapTotalSize;//[Offset: 0x118, Size: 4]
	float ShadowmapTotalSize;//[Offset: 0x11c, Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x120, Size: 16]
	Guid[] StreamingTextureGuids;//[Offset: 0x130, Size: 16]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x21c, Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x230, Size: 8]
	IntVector LightBuildLevelOffset;//[Offset: 0x238, Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 1]
	bool bPVSDirty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x290, Size: 8]
	AssetUserData*[] AssetUserData;//[Offset: 0x2a0, Size: 16]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x6c0, Size: 8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x2c8, Size: 4]
	float MinDrawDistance;//[Offset: 0x2cc, Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x2d0, Size: 4]
	bool bUseAsPVSOC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	bool bUsePVSOC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 1]
	float CachedMaxDrawDistance;//[Offset: 0x2d8, Size: 4]
	byte DepthPriorityGroup;//[Offset: 0x2dc, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2dd, Size: 1]
	enum LightmapType;//[Offset: 0x2de, Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e0, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e0, Size: 1]
	bool bUpdateOverlapEventsWhenMove;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e0, Size: 1]
	bool bUseSingleSweep;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2e0, Size: 1]
	enum OverrideQueryMobilityType;//[Offset: 0x2e1, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e2, Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e2, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e2, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e2, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e2, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e2, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2e2, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2e2, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e3, Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e3, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e3, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e3, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e3, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e3, Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2e3, Size: 1]
	bool bIdeaOutlineUseNormalInVertexColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2e3, Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4, Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x2e8, Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x2fc, Size: 4]
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 1]
	enum DrawDyeingMode;//[Offset: 0x301, Size: 1]
	LinearColor VisibleDyeingColor;//[Offset: 0x304, Size: 16]
	LinearColor OccludedDyeingColor;//[Offset: 0x314, Size: 16]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x324, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x324, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x324, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x324, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x324, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x324, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x325, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x325, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x325, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x325, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x325, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x325, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x325, Size: 1]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x325, Size: 1]
	bool bNearCascade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x326, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x326, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x326, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x326, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x326, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x326, Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x326, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x326, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x327, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x327, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x327, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x327, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x327, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x327, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x327, Size: 1]
	bool bUpdateTransformUseTeleportPhysics;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x327, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x329, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x32b, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x32c, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x32d, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x330, Size: 4]
	int TranslucencySortPriority;//[Offset: 0x334, Size: 4]
	int VisibilityId;//[Offset: 0x338, Size: 4]
	int InstaneBaseVisibilityId;//[Offset: 0x33c, Size: 4]
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x348, Size: 4]
	float BoundsScale;//[Offset: 0x350, Size: 4]
	float OCBoundsScale;//[Offset: 0x354, Size: 4]
	int OCBoundsExtent;//[Offset: 0x358, Size: 4]
	float LastSubmitTime;//[Offset: 0x35c, Size: 4]
	float LastRenderTime;//[Offset: 0x360, Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x364, Size: 4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x368, Size: 16]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x378, Size: 16]
	BodyInstance BodyInstance;//[Offset: 0x3a8, Size: 416]
	delegate OnComponentHit;//[Offset: 0x548, Size: 16]
	delegate OnComponentBeginOverlap;//[Offset: 0x558, Size: 16]
	delegate OnComponentEndOverlap;//[Offset: 0x568, Size: 16]
	delegate OnComponentWake;//[Offset: 0x578, Size: 16]
	delegate OnComponentSleep;//[Offset: 0x588, Size: 16]
	delegate OnBeginCursorOver;//[Offset: 0x5a8, Size: 16]
	delegate OnEndCursorOver;//[Offset: 0x5b8, Size: 16]
	delegate OnClicked;//[Offset: 0x5c8, Size: 16]
	delegate OnReleased;//[Offset: 0x5d8, Size: 16]
	delegate OnInputTouchBegin;//[Offset: 0x5e8, Size: 16]
	delegate OnInputTouchEnd;//[Offset: 0x5f8, Size: 16]
	delegate OnInputTouchEnter;//[Offset: 0x608, Size: 16]
	delegate OnInputTouchLeave;//[Offset: 0x618, Size: 16]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x640, Size: 8]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x648, Size: 88]
	bool bIgnoreOtherCanBeOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	void WakeRigidBody(FName BoneName);// 0x679cb34
	void WakeAllRigidBodies();// 0x679cb18
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x679ca84
	void SetVisibleDyeingColor(out const LinearColor InColor);// 0x679c9fc
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x679c980
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x679c8fc
	void SetSimulatePhysics(bool bSimulate);// 0x679c870
	void SetRenderInMono(bool bValue);// 0x679c7ec
	void SetRenderInMainPass(bool bValue);// 0x679c768
	void SetRenderCustomDepth(bool bValue);// 0x679c6e4
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x679c660
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x679c5dc
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x679c4d8
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x679c3c8
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x679c2b8
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x679c1ac
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x679c0a0
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x679bf80
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x679be60
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x679bddc
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x679bd58
	void SetOccludedDyeingColor(out const LinearColor InColor);// 0x679bcd0
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x679bc44
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x679bb88
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x679bac8
	void SetMassScale(FName BoneName, float InMassScale);// 0x679ba08
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x679b904
	void SetLockedAxis(byte LockedAxis);// 0x679b880
	void SetLinearDamping(float InDamping);// 0x679b7fc
	void SetIdeaOutlineUseNormalInVertexColor(bool bNewUseNormalInVertexColor);// 0x679b778
	void SetEnableGravity(bool bGravityEnabled);// 0x679b6ec
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x679b668
	void SetDrawDyeingMode(enum InDrawDyeingMode);// 0x679b5ec
	void SetDrawDyeing(bool bNewDrawOutline);// 0x679b568
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x679b4ec
	void SetCustomDepthStencilValue(int Value);// 0x679b470
	void SetCullDistance(float NewCullDistance);// 0x679b3f4
	void SetConstraintMode(byte ConstraintMode);// 0x679b370
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x679b2b0
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x679b22c
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x679b1a8
	void SetCollisionObjectType(byte Channel);// 0x679b124
	void SetCollisionEnabled(byte NewType);// 0x679b0a0
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x679afe0
	void SetCastShadow(bool NewCastShadow);// 0x679af5c
	void SetBoundsScale(float NewBoundsScale);// 0x679aee0
	void SetAngularDamping(float InDamping);// 0x679ae5c
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x679ad8c
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x679aca4
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x679ab98
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x679aab0
	void SetAllMassScale(float InMassScale);// 0x679aa2c
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x679a950
	void PutRigidBodyToSleep(FName BoneName);// 0x679a8d4
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x679a80c
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x679a738
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x679a464
	bool K2_IsQueryCollisionEnabled();// 0x679a41c
	bool K2_IsPhysicsCollisionEnabled();// 0x679a3d4
	bool K2_IsCollisionEnabled();// 0x679a390
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x679a300
	bool IsOverlappingActor(const Actor* Other);// 0x679a270
	bool IsGravityEnabled();// 0x679a230
	bool IsAnyRigidBodyAwake();// 0x679a1f0
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x679a130
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x679a070
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x679a028
	PhysicalMaterial* GetPhysMaterial(int Item);// 0x6799f94
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x6799ec0
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x6799e30
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x6799da0
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x6799cfc
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x6799c58
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x6799bc4
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x6799ae4
	int GetNumMaterials();// 0x6799aa8
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x67999c8
	MaterialInterface* GetMaterial(int ElementIndex);// 0x6799934
	float GetMassScale(FName BoneName);// 0x67998a0
	float GetMass();// 0x6799864
	float GetLinearDamping();// 0x6799828
	Vector GetInertiaTensor(FName BoneName);// 0x6799790
	byte GetCollisionResponseToChannel(byte Channel);// 0x67996fc
	FName GetCollisionProfileName();// 0x67996c8
	byte GetCollisionObjectType();// 0x679968c
	byte GetCollisionEnabled();// 0x6799650
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x6799514
	Vector GetCenterOfMass(FName BoneName);// 0x6799484
	float GetAngularDamping();// 0x6799448
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x6799378
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x67992a8
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x6799214
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x6799194
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x6799114
	void ClearMoveIgnoreComponents();// 0x67990e8
	void ClearMoveIgnoreActors();// 0x67990d4
	bool CanCharacterStepUp(Pawn* Pawn);// 0x679903c
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x6798f38
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x6798e20
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x6798d1c
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x6798b9c
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x6798a1c
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x6798910
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x6798804
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x67986f8
	void AddForceAtLocation_AssumesLocked(Vector Force, Vector Location, FName BoneName);// 0x67985ec
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x67984e0
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x67983d4
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x67982c8
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x67981a8
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x679809c

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0x128, Size: 8]
	SceneComponent* AttachParent;//[Offset: 0x130, Size: 8]
	FName AttachSocketName;//[Offset: 0x138, Size: 8]
	SceneComponent*[] AttachChildren;//[Offset: 0x140, Size: 16]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0x150, Size: 16]
	Vector RelativeLocation;//[Offset: 0x18c, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x198, Size: 12]
	Vector RelativeScale3D;//[Offset: 0x1a4, Size: 12]
	Vector ComponentVelocity;//[Offset: 0x210, Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21c, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21c, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x21c, Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x21c, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x21c, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21d, Size: 1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21d, Size: 1]
	bool bForceUpdateChildCompTransform;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21d, Size: 1]
	bool bEnableUpdateTransformOption;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21d, Size: 1]
	byte Mobility;//[Offset: 0x21f, Size: 1]
	byte DetailMode;//[Offset: 0x220, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x270, Size: 16]
	enum UpdateTransformOption;//[Offset: 0x2b8, Size: 1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x67b3084
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x67b2fbc
	void SetWorldScale3D(Vector NewScale);// 0x67b2f3c
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren, bool bForceNoPropagate);// 0x67b2e20
	void SetRelativeScale3D(Vector NewScale3D);// 0x67b2d98
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x67b2cc4
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x67b2bb0
	void ResetRelativeTransform();// 0x67b2b9c
	void OnRep_Visibility(bool OldValue);// 0x67b2b18
	void OnRep_Transform();// 0x67b2b04
	void OnRep_AttachSocketName();// 0x67b2af0
	void OnRep_AttachParent();// 0x67b2adc
	void OnRep_AttachChildren();// 0x67b2ac8
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b2920
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b27b0
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b25fc
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b2484
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b22dc
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b216c
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b1fb8
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b1e40
	void K2_SetMobility(byte NewMobility);// 0x67b1dc4
	Transform K2_GetComponentToWorld();// 0x67b1d70
	Vector K2_GetComponentScale();// 0x67b1d38
	Rotator K2_GetComponentRotation();// 0x67b1d00
	Vector K2_GetComponentLocation();// 0x67b1cc8
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x67b1b90
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x67b19d0
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x67b1888
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b16e0
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b1570
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b13f8
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b1288
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b1110
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b0f68
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b0df8
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67b0c80
	bool IsVisible();// 0x67b0c40
	bool IsSimulatingPhysics(FName BoneName);// 0x67b0ba8
	bool IsAnySimulatingPhysics();// 0x67b0b68
	Vector GetUpVector();// 0x67b0b30
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x67b0a48
	Rotator GetSocketRotation(FName InSocketName);// 0x67b09b0
	Quat GetSocketQuaternion(FName InSocketName);// 0x67b0914
	Vector GetSocketLocation(FName InSocketName);// 0x67b087c
	Vector GetRightVector();// 0x67b0844
	Transform GetRelativeTransform();// 0x67b07f0
	PhysicsVolume* GetPhysicsVolume();// 0x67b07bc
	void GetParentComponents(out SceneComponent*[] Parents);// 0x67b0728
	int GetNumChildrenComponents();// 0x67b06f4
	Vector GetForwardVector();// 0x67b06bc
	Vector GetComponentVelocity();// 0x67b067c
	Transform GetComponentTransformViewTranslatedBP();// 0x67b0658
	Transform GetComponentLocal(out const Transform LocalTransform);// 0x67b058c
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x67b04a8
	SceneComponent* GetChildComponent(int ChildIndex);// 0x67b041c
	FName GetAttachSocketName();// 0x67b0400
	SceneComponent* GetAttachParent();// 0x67b03e4
	FName[] GetAllSocketNames();// 0x67b0364
	bool DoesSocketExist(FName InSocketName);// 0x67b02cc
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x67b01f4

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x38, Size: 88]
	FName[] ComponentTags;//[Offset: 0x90, Size: 16]
	float NetUpdateFrequency;//[Offset: 0xa0, Size: 4]
	bool bAllowBPReceiveTickEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0xa8, Size: 16]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 1]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb8, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb8, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 1]
	enum CreationMethod;//[Offset: 0xbd, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0xc0, Size: 16]
	delegate OnComponentActivated;//[Offset: 0xf0, Size: 16]
	delegate OnComponentDeactivated;//[Offset: 0x100, Size: 16]
	void ToggleActive();// 0x6629fe0
	void SetTickGroup(byte NewTickGroup);// 0x6629f64
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x6629ee0
	void SetIsReplicated(bool ShouldReplicate);// 0x6629e5c
	void SetComponentTickInterval(float TickInterval);// 0x6629de0
	void SetComponentTickEnabled(bool bEnabled);// 0x6629d54
	void SetAutoActivate(bool bNewAutoActivate);// 0x6629cc8
	void SetActive(bool bNewActive, bool bReset);// 0x6629bf0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6629b6c
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6629ae8
	void ReceiveTick(float DeltaSeconds);// 0xffffff8f20d162a8
	void ReceiveEndPlay(byte EndPlayReason);// 0xffffff8f20d162a8
	void ReceiveBeginPlay();// 0xffffff8f20d162a8
	void OnRep_Replicates();// 0x6629ad4
	void OnRep_IsActive();// 0x6629ac0
	void K2_DestroyComponent(Object* Object);// 0x6629a44
	bool IsComponentTickEnabled();// 0x6629a0c
	bool IsBeingDestroyed();// 0x66299ec
	bool IsActive();// 0x66299ac
	Actor* GetOwner();// 0x6629990
	float GetComponentTickInterval();// 0x662995c
	void ForceNetUpdate();// 0x6629940
	void Deactivate();// 0x6629924
	bool ComponentHasTag(FName Tag);// 0x6629894
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6629810
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x662978c
	void Activate(bool bReset);// 0x6629700

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 4]
	float G;//[Offset: 0x4, Size: 4]
	float B;//[Offset: 0x8, Size: 4]
	float A;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 1]
	byte EndTickGroup;//[Offset: 0x9, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bPureLogicTick;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	float TickInterval;//[Offset: 0x40, Size: 4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 72]
	FName BoneName;//[Offset: 0x70, Size: 8]
	byte PhysicsType;//[Offset: 0x78, Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x79, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x79, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x79, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x79, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x79, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x80, Size: 8]
	bool bUsedPhysSimpleStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	StaticMesh*[] PhysSimpleStaticMeshList;//[Offset: 0x90, Size: 16]
	byte CollisionReponse;//[Offset: 0xa0, Size: 1]
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa1, Size: 1]
	byte[] SphereCollisionEnabledList;//[Offset: 0xa8, Size: 16]
	byte[] CapsuleCollisionEnabledList;//[Offset: 0xb8, Size: 16]
	byte[] BoxCollisionEnabledList;//[Offset: 0xc8, Size: 16]
	byte[] ConvexCollisionEnabledList;//[Offset: 0xd8, Size: 16]
	byte[] TriMeshesCollisionEnabledList;//[Offset: 0xe8, Size: 16]
	byte CollisionTraceFlag;//[Offset: 0xf8, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0x100, Size: 416]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x2a0, Size: 16]
	float BuildScale;//[Offset: 0x2b0, Size: 4]
	Vector BuildScale3D;//[Offset: 0x2b4, Size: 12]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 16]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 16]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 16]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 16]

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 64]
	Vector Center;//[Offset: 0x60, Size: 12]
	float Radius;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: KShapeElem

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 16]
	Plane YPlane;//[Offset: 0x10, Size: 16]
	Plane ZPlane;//[Offset: 0x20, Size: 16]
	Plane WPlane;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 64]
	Quat Orientation;//[Offset: 0x60, Size: 16]
	Vector Center;//[Offset: 0x70, Size: 12]
	Rotator Rotation;//[Offset: 0x7c, Size: 12]
	float X;//[Offset: 0x88, Size: 4]
	float Y;//[Offset: 0x8c, Size: 4]
	float Z;//[Offset: 0x90, Size: 4]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 4]
	float Yaw;//[Offset: 0x4, Size: 4]
	float Roll;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 64]
	Quat Orientation;//[Offset: 0x60, Size: 16]
	Vector Center;//[Offset: 0x70, Size: 12]
	Rotator Rotation;//[Offset: 0x7c, Size: 12]
	float Radius;//[Offset: 0x88, Size: 4]
	float Length;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x20, Size: 16]
	Box ElemBox;//[Offset: 0x30, Size: 28]
	Transform Transform;//[Offset: 0x50, Size: 48]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 12]
	Vector Max;//[Offset: 0xc, Size: 12]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 16]
	Vector Translation;//[Offset: 0x10, Size: 12]
	Vector Scale3D;//[Offset: 0x20, Size: 12]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float Restitution;//[Offset: 0x30, Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float Density;//[Offset: 0x38, Size: 4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 8]
	byte SurfaceType;//[Offset: 0x50, Size: 1]
	float TireFrictionScale;//[Offset: 0x54, Size: 4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 16]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 8]
	float FrictionScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 8]

--------------------------------
Class: StaticMesh.Object
	MeshPerLODBiasArray[] PerLODBiasTypeInfo;//[Offset: 0x40, Size: 16]
	int MinLOD;//[Offset: 0x50, Size: 4]
	MaterialInterface*[] Materials;//[Offset: 0x58, Size: 16]
	StaticMaterial[] StaticMaterials;//[Offset: 0x68, Size: 16]
	float LightmapUVDensity;//[Offset: 0x78, Size: 4]
	int LightMapResolution;//[Offset: 0x7c, Size: 4]
	int LightMapCoordinateIndex;//[Offset: 0x80, Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x84, Size: 4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x90, Size: 8]
	int LODForCollision;//[Offset: 0x98, Size: 4]
	float CullingScreenSize;//[Offset: 0x9c, Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bLazyLoadBulkData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa1, Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa4, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 1]
	bool bCompressData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe4, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0xe8, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	int EncodeBits_Position;//[Offset: 0x110, Size: 4]
	int EncodeBits_TexCoord;//[Offset: 0x114, Size: 4]
	int EncodeBits_Normal;//[Offset: 0x118, Size: 4]
	int EncodeBits_Generic;//[Offset: 0x11c, Size: 4]
	int EncodeBits_VertexColor;//[Offset: 0x120, Size: 4]
	int EncodeSpeed;//[Offset: 0x124, Size: 4]
	int DecodeSpeed;//[Offset: 0x128, Size: 4]
	StaticMeshSocket*[] Sockets;//[Offset: 0x140, Size: 16]
	Vector PositiveBoundsExtension;//[Offset: 0x160, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x16c, Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x178, Size: 28]
	BoxSphereBounds[] SubLocalBounds;//[Offset: 0x198, Size: 16]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x1a8, Size: 16]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x1b8, Size: 12]
	bool bUseQuantization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x1c8, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1d0, Size: 16]
	NavCollision* NavCollision;//[Offset: 0x1e0, Size: 8]
	StaticSimpleMaterial[] SimpleMaterials;//[Offset: 0x1e8, Size: 16]
	int GetNumSections(int InLOD);// 0x67da574
	int GetNumLODs();// 0x67da540
	int GetMaterialIndex(FName MaterialSlotName);// 0x67da4b4
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x67da428
	BoxSphereBounds GetBounds();// 0x67da3dc
	Box GetBoundingBox();// 0x67da390

--------------------------------
Class: MeshPerLODBiasArray
	enum[] LODBiasArray;//[Offset: 0x0, Size: 16]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x30, Size: 8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x48, Size: 20]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 16]
	void SetStreamingTextureMipOffset(int NewMipOffset, bool SizeLimited);// 0x6743420
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x67432d0
	PhysicalMaterial* GetPhysicalMaterial();// 0x6743294
	Material* GetBaseMaterial();// 0x6743260

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 36]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 16]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 16]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float EmissiveBoost;//[Offset: 0x4, Size: 4]
	float DiffuseBoost;//[Offset: 0x8, Size: 4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 4]
	int UVChannelIndex;//[Offset: 0x4, Size: 4]
	FName TextureName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x78, Size: 8]
	ColorMaterialInput DiffuseColor;//[Offset: 0x80, Size: 64]
	ColorMaterialInput SpecularColor;//[Offset: 0xc0, Size: 64]
	ColorMaterialInput BaseColor;//[Offset: 0x100, Size: 64]
	ScalarMaterialInput Metallic;//[Offset: 0x140, Size: 64]
	ScalarMaterialInput Specular;//[Offset: 0x180, Size: 64]
	ScalarMaterialInput Roughness;//[Offset: 0x1c0, Size: 64]
	VectorMaterialInput Normal;//[Offset: 0x200, Size: 72]
	ColorMaterialInput EmissiveColor;//[Offset: 0x248, Size: 64]
	ScalarMaterialInput Opacity;//[Offset: 0x288, Size: 64]
	ScalarMaterialInput OpacityMask;//[Offset: 0x2c8, Size: 64]
	byte MaterialDomain;//[Offset: 0x308, Size: 1]
	byte BlendMode;//[Offset: 0x309, Size: 1]
	byte DecalBlendMode;//[Offset: 0x30a, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x30b, Size: 1]
	byte ShadingModel;//[Offset: 0x30c, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x310, Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x314, Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	byte OITBlendMode;//[Offset: 0x319, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x320, Size: 72]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x368, Size: 72]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x3b0, Size: 64]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x3f0, Size: 64]
	ScalarMaterialInput ClearCoat;//[Offset: 0x430, Size: 64]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x470, Size: 64]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x4b0, Size: 64]
	ScalarMaterialInput Refraction;//[Offset: 0x4f0, Size: 64]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x530, Size: 72]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x770, Size: 64]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x7b0, Size: 64]
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x7f0, Size: 80]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x840, Size: 80]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x890, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x890, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x890, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x890, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x890, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x890, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x890, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x894, Size: 4]
	byte TranslucencyLightingMode;//[Offset: 0x898, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x89c, Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a0, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x8a4, Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x8a8, Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x8ac, Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x8b0, Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x8b4, Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x8b8, Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x8c8, Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cc, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cc, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cc, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cc, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cc, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cc, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cc, Size: 1]
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cc, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cd, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cd, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cd, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cd, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cd, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cd, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cd, Size: 1]
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cd, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ce, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8ce, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8ce, Size: 1]
	bool bUsedWithQuantizedMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8ce, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8ce, Size: 1]
	bool bUsedWithInstancedWidget;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8ce, Size: 1]
	bool bUsedWithInstancedPDSurface;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8ce, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8ce, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cf, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cf, Size: 1]
	bool bUsedWithPPRBackgroud;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cf, Size: 1]
	bool bUsedWithSurfelInjectColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cf, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cf, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cf, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cf, Size: 1]
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cf, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d0, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d0, Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d0, Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d0, Size: 1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d0, Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d0, Size: 1]
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d0, Size: 1]
	bool bUseAsDrawToRenderTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d0, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d1, Size: 1]
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d1, Size: 1]
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d1, Size: 1]
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d1, Size: 1]
	bool bUsedGrassInstnaceColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d1, Size: 1]
	bool bUsedVertexPointLight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d1, Size: 1]
	bool bUsedWithPhotonShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d1, Size: 1]
	bool bUsedWithPhotonShadowPCSS;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d1, Size: 1]
	bool bUsedDynamicObjectVertexLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d2, Size: 1]
	bool bUsedWithDynamicBatching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d2, Size: 1]
	bool bUsedWithDynamicMergeSkeletalMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d2, Size: 1]
	byte ShadowOverride;//[Offset: 0x8d3, Size: 1]
	byte SimpleVertexNormalSituation;//[Offset: 0x8d4, Size: 1]
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d5, Size: 1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d5, Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d5, Size: 1]
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d5, Size: 1]
	bool bGPUSkinForceUseBonesUniformBuffer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d5, Size: 1]
	bool bUseAsTranslucentEarlyZ;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d5, Size: 1]
	bool bLiteRough;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d5, Size: 1]
	bool bUseSimpleSkyLight;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d5, Size: 1]
	bool bACESOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d6, Size: 1]
	bool bEmissionOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d6, Size: 1]
	bool bInstL2WOnlyTranslation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d6, Size: 1]
	bool bUseLiteFog;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d6, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d6, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d6, Size: 1]
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d6, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d6, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x8d7, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d8, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d8, Size: 1]
	float MaxDisplacement;//[Offset: 0x8dc, Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e0, Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8e0, Size: 1]
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8e0, Size: 1]
	int EditorX;//[Offset: 0x8e4, Size: 4]
	int EditorY;//[Offset: 0x8e8, Size: 4]
	int EditorPitch;//[Offset: 0x8ec, Size: 4]
	int EditorYaw;//[Offset: 0x8f0, Size: 4]
	MaterialExpression*[] Expressions;//[Offset: 0x8f8, Size: 16]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x908, Size: 16]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x918, Size: 16]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x928, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x928, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x928, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x928, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x928, Size: 1]
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x928, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x928, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x928, Size: 1]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x929, Size: 1]
	bool bAllowLandscapeVertexMorph;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x929, Size: 1]
	bool bUseLandscapeVertexHole;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x929, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x92c, Size: 4]
	byte BlendableLocation;//[Offset: 0x930, Size: 1]
	int BlendablePriority;//[Offset: 0x934, Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 1]
	byte RefractionMode;//[Offset: 0x939, Size: 1]
	float RefractionDepthBias;//[Offset: 0x93c, Size: 4]
	bool bOceanFoam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x940, Size: 1]
	bool bEnableMeshClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x940, Size: 1]
	Guid stateID;//[Offset: 0x944, Size: 16]
	Texture*[] ExpressionTextureReferences;//[Offset: 0xa50, Size: 16]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	Color Constant;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x8, Size: 16]
	int Mask;//[Offset: 0x18, Size: 4]
	int MaskR;//[Offset: 0x1c, Size: 4]
	int MaskG;//[Offset: 0x20, Size: 4]
	int MaskB;//[Offset: 0x24, Size: 4]
	int MaskA;//[Offset: 0x28, Size: 4]
	FName ExpressionName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	float Constant;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	Vector Constant;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	float ConstantX;//[Offset: 0x3c, Size: 4]
	float ConstantY;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x8, Size: 16]
	int Mask;//[Offset: 0x18, Size: 4]
	int MaskR;//[Offset: 0x1c, Size: 4]
	int MaskG;//[Offset: 0x20, Size: 4]
	int MaskB;//[Offset: 0x24, Size: 4]
	int MaskA;//[Offset: 0x28, Size: 4]
	FName ExpressionName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	Vector4 Constant;//[Offset: 0x40, Size: 16]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 8]
	MaterialFunction* Function;//[Offset: 0x30, Size: 8]
	FString Desc;//[Offset: 0x38, Size: 16]
	Color BorderColor;//[Offset: 0x48, Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c, Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4c, Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d, Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d, Size: 1]
	ExpressionOutput[] Outputs;//[Offset: 0x50, Size: 16]

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x28, Size: 16]
	FString Description;//[Offset: 0x38, Size: 16]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x50, Size: 16]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 4]
	int B;//[Offset: 0x4, Size: 4]
	int C;//[Offset: 0x8, Size: 4]
	int D;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0, Size: 16]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]

--------------------------------
Class: MaterialFunctionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialFunction* Function;//[Offset: 0x10, Size: 8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x28, Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 16]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 16]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Guid ID;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 16]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x30, Size: 16]
	int LODBias;//[Offset: 0x40, Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x44, Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x48, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x50, Size: 16]
	int CachedCombinedLODBias;//[Offset: 0x60, Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 1]
	byte CompressionSettings;//[Offset: 0x65, Size: 1]
	byte Filter;//[Offset: 0x66, Size: 1]
	byte LODGroup;//[Offset: 0x67, Size: 1]
	byte CrunchSetting;//[Offset: 0x68, Size: 1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 1]
	float CrunchCompressionAmount;//[Offset: 0x6c, Size: 4]
	byte BasisSetting;//[Offset: 0x70, Size: 1]
	bool bOverrideBasisCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 1]
	float BasisCompressionAmount;//[Offset: 0x74, Size: 4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 8]
	FString SubPathString;//[Offset: 0x8, Size: 16]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 12]
	Vector RelativeScale;//[Offset: 0x48, Size: 12]
	FString Tag;//[Offset: 0x58, Size: 16]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 12]
	Vector BoxExtent;//[Offset: 0xc, Size: 12]
	float SphereRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x78, Size: 16]
	NavCollisionBox[] BoxCollision;//[Offset: 0x88, Size: 16]
	class NavArea* AreaClass;//[Offset: 0x98, Size: 8]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float Height;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 12]
	Vector Extent;//[Offset: 0xc, Size: 12]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x28, Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x2c, Size: 4]
	Color DrawColor;//[Offset: 0x30, Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x34, Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x39, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x39, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x39, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x39, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: StaticSimpleMaterial
	int MaterialIndex;//[Offset: 0x0, Size: 4]
	MaterialInterface* SimpleMaterial;//[Offset: 0x8, Size: 8]

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x21, Size: 1]
	byte DOFMode;//[Offset: 0x22, Size: 1]
	byte CollisionEnabled;//[Offset: 0x23, Size: 1]
	FName CollisionProfileName;//[Offset: 0x28, Size: 8]
	CollisionResponse CollisionResponses;//[Offset: 0x30, Size: 56]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69, Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x69, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x69, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x69, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x69, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x69, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x69, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6a, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6a, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6a, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6a, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6a, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6a, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6a, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6a, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b, Size: 1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6b, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6b, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6b, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x6c, Size: 4]
	float MassInKgOverride;//[Offset: 0x78, Size: 4]
	float LinearDamping;//[Offset: 0x7c, Size: 4]
	float AngularDamping;//[Offset: 0x80, Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x84, Size: 12]
	Vector COMNudge;//[Offset: 0x90, Size: 12]
	float MassScale;//[Offset: 0x9c, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0xa0, Size: 12]
	bool bUsedPhysSimpleStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	byte ObjectType;//[Offset: 0xad, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xc0, Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xd0, Size: 8]
	float MaxAngularVelocity;//[Offset: 0xd8, Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xdc, Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0xe0, Size: 4]
	float PhysicsBlendWeight;//[Offset: 0xe4, Size: 4]
	int PositionSolverIterationCount;//[Offset: 0xe8, Size: 4]
	int VelocitySolverIterationCount;//[Offset: 0x138, Size: 4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x1, Size: 32]
	ResponseChannel[] ResponseArray;//[Offset: 0x28, Size: 16]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 8]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 8]
	FName MemberName;//[Offset: 0x8, Size: 8]
	Guid MemberGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x420, Size: 4]
	int Priority;//[Offset: 0x424, Size: 4]
	float FluidFriction;//[Offset: 0x428, Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42c, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x42c, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x3e8, Size: 1]
	Color BrushColor;//[Offset: 0x3ec, Size: 4]
	int PolyFlags;//[Offset: 0x3f0, Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f4, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f4, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f4, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f4, Size: 1]
	Model* Brush;//[Offset: 0x3f8, Size: 8]
	BrushComponent* BrushComponent;//[Offset: 0x400, Size: 8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x408, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x410, Size: 16]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x30, Size: 88]
	float CustomTimeDilation;//[Offset: 0x88, Size: 4]
	bool bAllowBPReceiveTickEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d, Size: 1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d, Size: 1]
	bool bConsideredHidden;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d, Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d, Size: 1]
	bool bFastDistBasedNetRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d, Size: 1]
	bool bGroupBasedNetRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e, Size: 1]
	bool bLazyNetReplication;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8e, Size: 1]
	bool bClientSimulatedRelevancy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8e, Size: 1]
	float NetCullFactorSquared;//[Offset: 0x90, Size: 4]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x94, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x94, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x94, Size: 1]
	bool bCanBeBaseForCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x95, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x95, Size: 1]
	FName[] OptimizeDuplicatedComponentName;//[Offset: 0x98, Size: 16]
	bool bRemoveStaticChildActorComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 1]
	byte RemoteRole;//[Offset: 0xaa, Size: 1]
	Actor* Owner;//[Offset: 0xb0, Size: 8]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 1]
	uint32 WorldParallelismID;//[Offset: 0xbc, Size: 4]
	ScriptNetworkReplicatedPropertyWrapper ScriptNetworkReplicatedPropertyWrapper;//[Offset: 0xc8, Size: 16]
	FName NetDriverName;//[Offset: 0xe8, Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0xf0, Size: 52]
	float InitialLifeSpan;//[Offset: 0x124, Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0x128, Size: 72]
	byte Role;//[Offset: 0x170, Size: 1]
	byte NetDormancy;//[Offset: 0x171, Size: 1]
	byte AutoReceiveInput;//[Offset: 0x172, Size: 1]
	int InputPriority;//[Offset: 0x174, Size: 4]
	InputComponent* InputComponent;//[Offset: 0x178, Size: 8]
	float NetCullDistanceSquared;//[Offset: 0x180, Size: 4]
	int NetTag;//[Offset: 0x184, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x18c, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x190, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x194, Size: 4]
	float NetPriority;//[Offset: 0x19c, Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a4, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a4, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a4, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a4, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a4, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a4, Size: 1]
	bool bForcedRelevancyCheckForReplay;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a4, Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a5, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a5, Size: 1]
	bool bCanCachedInWorldSpecialActorList;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a5, Size: 1]
	bool bShouldDumpCallstackWhenMovingfast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a5, Size: 1]
	float CollisionCheckMoveDisStep;//[Offset: 0x1a8, Size: 4]
	float CollisionCheckMoveDegreeStep;//[Offset: 0x1ac, Size: 4]
	float CollisionCheckCircleRadius;//[Offset: 0x1b0, Size: 4]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b4, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1b4, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1b4, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1b4, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x1b5, Size: 1]
	Pawn* Instigator;//[Offset: 0x1c0, Size: 8]
	Actor*[] Children;//[Offset: 0x1c8, Size: 16]
	SceneComponent* RootComponent;//[Offset: 0x1d8, Size: 8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x1e0, Size: 16]
	FName[] Layers;//[Offset: 0x1f8, Size: 16]
	ChildActorComponent* ParentComponent;//[Offset: 0x208, Size: 8]
	FName[] Tags;//[Offset: 0x210, Size: 16]
	uint64 HiddenEditorViews;//[Offset: 0x220, Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x228, Size: 16]
	delegate OnTakePointDamage;//[Offset: 0x238, Size: 16]
	delegate OnActorBeginOverlap;//[Offset: 0x248, Size: 16]
	delegate OnActorEndOverlap;//[Offset: 0x258, Size: 16]
	delegate OnBeginCursorOver;//[Offset: 0x268, Size: 16]
	delegate OnEndCursorOver;//[Offset: 0x278, Size: 16]
	delegate OnClicked;//[Offset: 0x288, Size: 16]
	delegate OnReleased;//[Offset: 0x298, Size: 16]
	delegate OnInputTouchBegin;//[Offset: 0x2a8, Size: 16]
	delegate OnInputTouchEnd;//[Offset: 0x2b8, Size: 16]
	delegate OnInputTouchEnter;//[Offset: 0x2c8, Size: 16]
	delegate OnInputTouchLeave;//[Offset: 0x2d8, Size: 16]
	delegate OnActorHit;//[Offset: 0x2e8, Size: 16]
	delegate OnDestroyed;//[Offset: 0x2f8, Size: 16]
	delegate OnEndPlay;//[Offset: 0x308, Size: 16]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x3b8, Size: 16]
	ActorComponent*[] InstanceComponents;//[Offset: 0x3c8, Size: 16]
	bool WasRecentlyRendered(float Tolerance);// 0x66264b8
	void UserConstructionScript();// 0xffffff8f20d162a8
	void TearOff();// 0x662649c
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x66263e8
	void SetTickGroup(byte NewTickGroup);// 0x662636c
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x66262e8
	void SetReplicates(bool bInReplicates);// 0x6626264
	void SetReplicateMovement(bool bInReplicateMovement);// 0x66261d8
	void SetOwner(Actor* NewOwner);// 0x6626154
	void SetNetDormancy(byte NewDormancy);// 0x66260d8
	void SetLifeSpan(float InLifespan);// 0x6626054
	void SetActorTickInterval(float TickInterval);// 0x6625fd8
	void SetActorTickEnabled(bool bEnabled);// 0x6625f54
	void SetActorSimulatedRelevancy(bool bIsRelevant);// 0x6625ed0
	void SetActorScale3D(Vector NewScale3D);// 0x6625e50
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x6625dd0
	void SetActorHiddenInGame(bool bNewHidden);// 0x6625d44
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x6625cc0
	void ServerSendScriptNetworkRemoteContent_Unreliable(const ScriptNetworkRemoteContent Content);// 0x6625c04
	void ServerSendScriptNetworkRemoteContent(const ScriptNetworkRemoteContent Content);// 0x6625b48
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6625ac4
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6625a40
	void ReceiveTick(float DeltaSeconds);// 0xffffff8f20d162a8
	void ReceiveScriptNetworkRemoteContent(out const ScriptNetworkRemoteContent Content);// 0x66259a8
	void ReceiveReInitForReplay();// 0xffffff8f20d162a8
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff8f20d162a8
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0xffffff8f20d162a8
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0xffffff8f20d162a8
	void ReceiveEndPlay(byte EndPlayReason);// 0xffffff8f20d162a8
	void ReceiveDestroyed();// 0xffffff8f20d162a8
	void ReceiveBeginPlay();// 0xffffff8f20d162a8
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff8f20d162a8
	void ReceiveActorSimulatedRelevant(bool bIsRelevant, bool bConsiderHidden);// 0xffffff8f20d162a8
	void ReceiveActorOnReleased(Key ButtonReleased);// 0xffffff8f20d162a8
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0xffffff8f20d162a8
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0xffffff8f20d162a8
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0xffffff8f20d162a8
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0xffffff8f20d162a8
	void ReceiveActorOnClicked(Key ButtonPressed);// 0xffffff8f20d162a8
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0xffffff8f20d162a8
	void ReceiveActorEndCursorOver();// 0xffffff8f20d162a8
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0xffffff8f20d162a8
	void ReceiveActorBeginCursorOver();// 0xffffff8f20d162a8
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x662589c
	void OnRep_TearOff();// 0x6625880
	void OnRep_ScriptNetworkReplicatedPropertyWrapper();// 0x662586c
	void OnRep_Role();// 0x6625850
	void OnRep_ReplicateMovement();// 0x6625834
	void OnRep_ReplicatedMovement();// 0x6625818
	void OnRep_RemoteRole();// 0x66257fc
	void OnRep_Owner();// 0x66257e0
	void OnRep_Instigator();// 0x66257c4
	void OnRep_Hidden();// 0x66257a8
	void OnRep_CanBeDamaged();// 0x662578c
	void OnRep_AttachmentReplication();// 0x6625770
	void OnActorSimulatedRelevant(bool bIsRelevant, bool bConsiderHidden);// 0x6625698
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x6625524
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x6625498
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x66253c4
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6625208
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x6625134
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6624f8c
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6624e1c
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6624ca4
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6624adc
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6624950
	void K2_OnReset();// 0xffffff8f20d162a8
	void K2_OnEndViewTarget(PlayerController* PC);// 0xffffff8f20d162a8
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0xffffff8f20d162a8
	SceneComponent* K2_GetRootComponent();// 0x6624934
	Rotator K2_GetActorRotation();// 0x6624868
	Vector K2_GetActorLocation();// 0x6624824
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x6624730
	void K2_DestroyComponent(ActorComponent* Component);// 0x66246b4
	void K2_DestroyActor();// 0x6624698
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x66244ec
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x6624340
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x662420c
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x66240d8
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6623f30
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6623dc0
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6623c48
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6623aa0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6623930
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x66237b8
	bool IsOverlappingActor(const Actor* Other);// 0x6623728
	bool IsChildActor();// 0x66236f0
	bool IsActorTickEnabled();// 0x66236b8
	bool IsActorBeingDestroyed();// 0x6623698
	bool HasAuthority();// 0x6623674
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x66235e8
	Vector GetVelocity();// 0x66235a8
	Transform GetTransform();// 0x662356c
	bool GetTickableWhenPaused();// 0x6623534
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x66234a8
	byte GetRole();// 0x6623474
	byte GetRemoteRole();// 0x6623458
	ChildActorComponent* GetParentComponent();// 0x6623424
	Actor* GetParentActor();// 0x66233f0
	Actor* GetOwner();// 0x66233d4
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x6623340
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x6623260
	byte GetLocalRole();// 0x6623244
	float GetLifeSpan();// 0x6623208
	Controller* GetInstigatorController();// 0x66231d4
	Pawn* GetInstigator();// 0x66231a0
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x6623034
	float GetInputAxisValue(const FName InputAxisName);// 0x6622fa8
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x6622e40
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x6622db4
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x6622d28
	float GetGameTimeSinceCreation();// 0x6622cf4
	float GetDotProductTo(const Actor* OtherActor);// 0x6622c68
	float GetDistanceTo(const Actor* OtherActor);// 0x6622bdc
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x6622ad4
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x6622a04
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x6622978
	FName GetAttachParentSocketName();// 0x6622944
	Actor* GetAttachParentActor();// 0x6622910
	void GetAttachedActors(out Actor*[] OutActors);// 0x662287c
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x6622794
	Vector GetActorUpVector();// 0x6622740
	float GetActorTimeDilation();// 0x662270c
	float GetActorTickInterval();// 0x66226d8
	Vector GetActorScale3D();// 0x66226a0
	Vector GetActorRightVector();// 0x662264c
	Vector GetActorRelativeScale3D();// 0x6622614
	Vector GetActorForwardVector();// 0x66225c0
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x66224d4
	bool GetActorEnableCollision();// 0x66224b4
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x6622384
	void ForceNetUpdate();// 0x6622368
	void ForceNetConsider();// 0x662234c
	void FlushNetDormancy();// 0x6622338
	void EnableInput(PlayerController* PlayerController);// 0x66222b4
	void DisableInput(PlayerController* PlayerController);// 0x6622230
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x66221ac
	void ClientSendScriptNetworkRemoteContent_Unreliable(const ScriptNetworkRemoteContent Content);// 0x662211c
	void ClientSendScriptNetworkRemoteContent(const ScriptNetworkRemoteContent Content);// 0x662208c
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6622008
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6621f84
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x6621e08
	bool ActorHasTag(FName Tag);// 0x6621d78

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x6a8, Size: 8]
	BodySetup* BrushBodySetup;//[Offset: 0x6b0, Size: 8]
	Vector PrePivot;//[Offset: 0x6b8, Size: 12]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int SelectionIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ScriptNetworkReplicatedPropertyWrapper

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 12]
	Vector AngularVelocity;//[Offset: 0xc, Size: 12]
	Vector Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 12]
	Rotator RotationOffset;//[Offset: 0x20, Size: 12]
	FName AttachSocket;//[Offset: 0x30, Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 8]
	Actor* AttachParent_Direct;//[Offset: 0x40, Size: 8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x66c80c8
	bool WasControllerKeyJustPressed(Key Key);// 0x66c7f5c
	bool IsControllerKeyDown(Key Key);// 0x66c7df0
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x66c7c80
	Vector GetControllerVectorKeyState(Key Key);// 0x66c7b14
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x66c7a30
	float GetControllerKeyTimeDown(Key Key);// 0x66c78c8
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x66c77a8
	float GetControllerAnalogKeyState(Key Key);// 0x66c7640

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f0, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f0, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f0, Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 1]
	float BaseEyeHeight;//[Offset: 0x3f4, Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x3f8, Size: 1]
	enum AutoPossessAI;//[Offset: 0x3f9, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x400, Size: 8]
	PlayerState* PlayerState;//[Offset: 0x408, Size: 8]
	byte RemoteViewPitch;//[Offset: 0x410, Size: 1]
	Controller* LastHitBy;//[Offset: 0x418, Size: 8]
	Controller* Controller;//[Offset: 0x420, Size: 8]
	delegate OnControllerArrived;//[Offset: 0x430, Size: 16]
	delegate OnPawnClientRestart;//[Offset: 0x448, Size: 16]
	Vector ControlInputVector;//[Offset: 0x458, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x464, Size: 12]
	void SpawnDefaultController();// 0x677a410
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x677a384
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x677a2b4
	void ReceiveUnpossessed(Controller* OldController);// 0xffffff8f20d162a8
	void ReceivePossessed(Controller* NewController);// 0xffffff8f20d162a8
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x677a170
	void OnRep_PlayerState();// 0x677a154
	void OnRep_Controller();// 0x677a138
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x677a024
	Vector K2_GetMovementInputVector();// 0x6779fec
	bool IsPlayerControlled();// 0x6779fac
	bool IsMoveInputIgnored();// 0x6779f6c
	bool IsLocallyControlled();// 0x6779f2c
	bool IsControlled();// 0x6779ef4
	Vector GetPendingMovementInputVector();// 0x6779ebc
	Vector GetNavAgentLocation();// 0x6779e7c
	PawnMovementComponent* GetMovementComponent();// 0x6779e40
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x6779dc4
	Vector GetLastMovementInputVector();// 0x6779d8c
	Rotator GetControlRotation();// 0x6779d4c
	Controller* GetController();// 0x6779d30
	Rotator GetBaseAimRotation();// 0x6779cf0
	void DetachFromControllerPendingDestroy();// 0x6779cd4
	Vector ConsumeMovementInputVector();// 0x6779c94
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x6779b88
	void AddControllerYawInput(float Val);// 0x6779b04
	void AddControllerRollInput(float Val);// 0x6779a80
	void AddControllerPitchInput(float Val);// 0x67799fc

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x3f0, Size: 8]
	Character* Character;//[Offset: 0x400, Size: 8]
	PlayerState* PlayerState;//[Offset: 0x408, Size: 8]
	SceneComponent* TransformComponent;//[Offset: 0x410, Size: 8]
	Rotator ControlRotation;//[Offset: 0x418, Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x424, Size: 1]
	FName StateName;//[Offset: 0x430, Size: 8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x438, Size: 16]
	void UnPossess();// 0x667d684
	void StopMovement();// 0x667d668
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x667d57c
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x667d4f0
	void SetIgnoreLookInput(bool bNewLookInput);// 0x667d464
	void SetControlRotation(out const Rotator NewRotation);// 0x667d3d4
	void ResetIgnoreMoveInput();// 0x667d3b8
	void ResetIgnoreLookInput();// 0x667d39c
	void ResetIgnoreInputFlags();// 0x667d380
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0xffffff8f20d162a8
	void Possess(Pawn* InPawn);// 0x667d2fc
	void OnRep_PlayerState();// 0x667d2e0
	void OnRep_Pawn();// 0x667d2c4
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x667d1a4
	Pawn* K2_GetPawn();// 0x667d170
	bool IsPlayerController();// 0x667d150
	bool IsMoveInputIgnored();// 0x667d110
	bool IsLookInputIgnored();// 0x667d0d0
	bool IsLocalPlayerController();// 0x667d080
	bool IsLocalController();// 0x667d040
	Actor* GetViewTarget();// 0x667d004
	Rotator GetDesiredRotation();// 0x667cfc4
	Rotator GetControlRotation();// 0x667cf84
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x667cebc
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x667cdf4
	PlayerController* CastToPlayerController();// 0x667cdc0

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x470, Size: 8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x478, Size: 8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x480, Size: 8]
	BasedMovementInfo BasedMovement;//[Offset: 0x488, Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x4b8, Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x4e8, Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x4ec, Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x500, Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x510, Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x514, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 1]
	float CrouchedEyeHeight;//[Offset: 0x518, Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51c, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51c, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x51c, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x51c, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x51c, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x51c, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x51c, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x51c, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51d, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x520, Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x524, Size: 4]
	int JumpMaxCount;//[Offset: 0x528, Size: 4]
	int JumpCurrentCount;//[Offset: 0x52c, Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x530, Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x538, Size: 16]
	delegate MovementModeChangedDelegate;//[Offset: 0x558, Size: 16]
	delegate OnCharacterMovementUpdated;//[Offset: 0x568, Size: 16]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x578, Size: 256]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x680, Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x6c0, Size: 16]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x6d0, Size: 352]
	void UnCrouch(bool bClientSimulation);// 0x6670d18
	void StopJumping();// 0x6670cfc
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x6670c78
	void SetReplicateMovement(bool bInReplicateMovement);// 0x6670bec
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x6670b60
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x6670a54
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x66708c4
	void OnRep_RootMotion();// 0x66708b0
	void OnRep_ReplicatedBasedMovement();// 0x6670894
	void OnRep_IsCrouched();// 0x6670878
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xffffff8f20d162a8
	void OnLanded(out const HitResult Hit);// 0xffffff8f20d162a8
	void OnJumped();// 0x667085c
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x6670740
	void K2_UpdateCustomMovement(float DeltaTime);// 0xffffff8f20d162a8
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xffffff8f20d162a8
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0xffffff8f20d162a8
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xffffff8f20d162a8
	void Jump();// 0x6670724
	bool IsPlayingRootMotion();// 0x66706ec
	bool IsPlayingNetworkedRootMotionMontage();// 0x66706b4
	bool IsJumpProvidingForce();// 0x6670674
	AnimMontage* GetCurrentMontage();// 0x6670640
	Vector GetBaseTranslationOffset();// 0x6670618
	Rotator GetBaseRotationOffsetRotator();// 0x66705c4
	float GetAnimRootMotionTranslationScale();// 0x6670590
	void Crouch(bool bClientSimulation);// 0x6670504
	void ClientCheatWalk();// 0x66704e8
	void ClientCheatGhost();// 0x66704cc
	void ClientCheatFly();// 0x66704b0
	bool CanJumpInternal();// 0x6670470
	bool CanJump();// 0x6670438
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x6670370

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x8f0, Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x8f8, Size: 8]
	class AnimInstance* AnimClass;//[Offset: 0x900, Size: 8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x908, Size: 8]
	AnimInstance*[] SubInstances;//[Offset: 0x910, Size: 16]
	AnimInstance*[] NewSubInstances;//[Offset: 0x920, Size: 16]
	AnimInstance*[] DirtySubInstances;//[Offset: 0x930, Size: 16]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x940, Size: 8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x948, Size: 24]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x998, Size: 16]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x9a8, Size: 16]
	float GlobalAnimRateScale;//[Offset: 0x9d8, Size: 4]
	enum UseAsyncScene;//[Offset: 0x9dc, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9dd, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x9de, Size: 1]
	int UpdateKinematicBonesRate;//[Offset: 0x9e0, Size: 4]
	byte PhysicsTransformUpdateMode;//[Offset: 0x9e4, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e5, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9e5, Size: 1]
	bool bNeedUpdatePhysicsTickRegisteredState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e6, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e7, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9e7, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9e7, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9e7, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x9e8, Size: 16]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9f8, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9f8, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9f8, Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9f8, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9f8, Size: 1]
	float ClothBlendWeight;//[Offset: 0x9fc, Size: 4]
	Vector RootBoneTranslation;//[Offset: 0xa04, Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa10, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa10, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa10, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa12, Size: 1]
	BodySetup* BodySetup;//[Offset: 0xa18, Size: 8]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa21, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa21, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa21, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa21, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa21, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa21, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa21, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa21, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0xa22, Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0xa24, Size: 12]
	delegate OnConstraintBroken;//[Offset: 0xa38, Size: 16]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0xb30, Size: 8]
	float TeleportDistanceThreshold;//[Offset: 0xb38, Size: 4]
	float TeleportRotationThreshold;//[Offset: 0xb3c, Size: 4]
	delegate OnAnimInitialized;//[Offset: 0xc78, Size: 16]
	AnimSequence* SequenceToPlay;//[Offset: 0xd68, Size: 8]
	AnimationAsset* AnimToPlay;//[Offset: 0xd70, Size: 8]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd78, Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd78, Size: 1]
	float DefaultPosition;//[Offset: 0xd7c, Size: 4]
	float DefaultPlayRate;//[Offset: 0xd80, Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0xd84, Size: 4]
	float LastPoseTickTime;//[Offset: 0xd88, Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc0, Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc2, Size: 1]
	bool bIsEnableBatchSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf1, Size: 1]
	DynamicBatchSectionInfo[] BatchSectionList;//[Offset: 0xdf8, Size: 16]
	MaterialInterface*[] OriginalMaterials;//[Offset: 0xe08, Size: 16]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x67bc99c
	void SuspendClothingSimulation();// 0x67bc988
	void Stop();// 0x67bc974
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x67bc8c4
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x67bc840
	void SetTeleportRotationThreshold(float Threshold);// 0x67bc7c4
	void SetTeleportDistanceThreshold(float Threshold);// 0x67bc748
	void SetPosition(float InPos, bool bFireNotifies);// 0x67bc688
	void SetPlayRate(float Rate);// 0x67bc60c
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x67bc590
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x67bc47c
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x67bc380
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x67bc2fc
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x67bc1f0
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x67bc128
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x67bc0a4
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x67bbfe4
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x67bbeec
	void SetClothMaxDistanceScale(float Scale);// 0x67bbe70
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x67bbda0
	void SetAnimInstanceClass(class Object NewClass);// 0x67bbd24
	void SetAnimationMode(byte InAnimationMode);// 0x67bbca8
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x67bbc2c
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x67bbb00
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x67bba18
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x67bb994
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x67bb880
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x67bb76c
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x67bb638
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x67bb5b4
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x67bb4f4
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x67bb3d4
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x67bb278
	void ResumeClothingSimulation();// 0x67bb264
	void ResetClothTeleportMode();// 0x67bb250
	void ResetAllowedAnimCurveEvaluation();// 0x67bb23c
	void ResetAllBodiesSimulatePhysics();// 0x67bb228
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x67bb168
	void Play(bool bLooping);// 0x67bb0e4
	void PauseIMSimulation(int InPauseFrameCount);// 0x67bb068
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x67baee8
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x67bacec
	bool IsSectionBatched(int LODIndex);// 0x67bac54
	bool IsPlaying();// 0x67bac1c
	bool IsClothingSimulationSuspended();// 0x67babe4
	bool IsBodyGravityEnabled(FName BoneName);// 0x67bab54
	float GetTeleportRotationThreshold();// 0x67bab20
	float GetTeleportDistanceThreshold();// 0x67baaec
	AnimInstance*[] GetSubAnimInstances();// 0x67baa6c
	Vector GetSkeletalCenterOfMass();// 0x67baa34
	AnimInstance* GetPostProcessInstance();// 0x67baa00
	float GetPosition();// 0x67ba9cc
	float GetPlayRate();// 0x67ba998
	AnimInstance*[] GetNewSubAnimInstances();// 0x67ba918
	float GetMorphTarget(FName MorphTargetName);// 0x67ba88c
	bool GetDisableAnimCurves();// 0x67ba868
	AnimInstance*[] GetDirtySubAnimInstances();// 0x67ba7e8
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x67ba678
	float GetClothMaxDistanceScale();// 0x67ba644
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x67ba574
	AnimInstance* GetAnimInstance();// 0x67ba540
	float GetAnimationPosition(AnimationAsset* Animation);// 0x67ba4b4
	byte GetAnimationMode();// 0x67ba480
	AnimInstance*[] GetAllSubAnimInstances();// 0x67ba400
	bool GetAllowedAnimCurveEvaluate();// 0x67ba3e0
	void ForceClothNextUpdateTeleportAndReset();// 0x67ba3cc
	void ForceClothNextUpdateTeleport();// 0x67ba3b8
	FName FindConstraintBoneName(int ConstraintIndex);// 0x67ba32c
	void ClearMorphTargets();// 0x67ba318
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x67ba214
	void BindClothToMasterPoseComponent();// 0x67ba200
	void BatchSectionsWithAtlas(int LodIdx, bool IsBatchSection);// 0x67ba140
	void AutoBatchSection(int LodIdx, int[] BatchIndices, bool IsBatchSection);// 0x67b9fdc
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x67b9f1c
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x67b9dc4
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x67b9c6c
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x67b9b54

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x6d0, Size: 8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x6d8, Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x740, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x768, Size: 8]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x770, Size: 1]
	int ForcedLodModel;//[Offset: 0x774, Size: 4]
	int MinLodModel;//[Offset: 0x778, Size: 4]
	int MaxLodModel;//[Offset: 0x77c, Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x790, Size: 16]
	float StreamingDistanceMultiplier;//[Offset: 0x7a0, Size: 4]
	Color WireframeColor;//[Offset: 0x7a4, Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a8, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7a8, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7a8, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7a8, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c0, Size: 1]
	byte UpdateBoundsRate;//[Offset: 0x7c1, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c3, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c3, Size: 1]
	byte MeshComponentUpdateFlag;//[Offset: 0x7c4, Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c5, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c6, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d4, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d4, Size: 1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x7d5, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d6, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d6, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x7d8, Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc, Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x7f4, Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x811, Size: 1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x812, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x813, Size: 1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x814, Size: 1]
	bool bOverrideAnimUpdateRateParameters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x815, Size: 1]
	AnimUpdateRateParameters CustomAnimUpdateRateParams;//[Offset: 0x818, Size: 144]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x67c2c60
	void UnHideBoneByName(FName BoneName);// 0x67c2be4
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x67c2a44
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x67c28a4
	void SwitchToOverrideSkinWeights(int LODIndex);// 0x67c2828
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x67c2754
	bool SetSkinWeightProfile(FName InProfileName);// 0x67c26c4
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x67c25f0
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose, bool bCheckBoneMap);// 0x67c24dc
	void SetRenderStatic(bool bNewValue);// 0x67c2458
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x67c2390
	void SetMinLOD(int InNewMinLOD);// 0x67c2314
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent);// 0x67c2298
	void SetForcedLOD(int InNewForcedLOD);// 0x67c221c
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x67c2198
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x67c2114
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x67c2098
	void RemoveMasterPoseComponent();// 0x67c2084
	void OnSkinnedMeshComponentMeshInited__DelegateSignature(int PredicatedLOD);// 0xffffff8f20d162a8
	void OnSkinnedMeshComponentLODResourceUpdated__DelegateSignature(int PredicatedLOD);// 0xffffff8f20d162a8
	bool IsUsingSkinWeightProfile();// 0x67c2064
	bool IsSectionBatched(int LODIndex);// 0x67c1fcc
	bool IsBoneHiddenByName(FName BoneName);// 0x67c1f3c
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x67c1e84
	bool HasSkinweightProfileByName(FName InProfileName);// 0x67c1dec
	FName GetSocketBoneName(FName InSocketName);// 0x67c1d60
	SkeletalMesh* GetSkeletalMesh();// 0x67c1d24
	FName GetParentBone(FName BoneName);// 0x67c1c98
	int GetNumLODs();// 0x67c1c64
	int GetNumBones();// 0x67c1c30
	FName GetCurrentSkinWeightProfileName();// 0x67c1c14
	Transform GetBoneTransform(int BoneIndex);// 0x67c1b70
	FName GetBoneName(int BoneIndex);// 0x67c1ae4
	Vector GetBoneLocation(FName BoneName, byte Space);// 0x67c1a18
	int GetBoneIndex(FName BoneName);// 0x67c198c
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x67c1824
	void EnableMeshClipPlane(out const Plane ClipPlane);// 0x67c1798
	void DisableMeshClipPlane();// 0x67c1784
	void ClearVertexColorOverride(int LODIndex);// 0x67c1708
	void ClearSkinWeightProfile();// 0x67c16f4
	void ClearSkinWeightOverride(int LODIndex);// 0x67c1678
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x67c15b0

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x6a8, Size: 16]
	bool bIsEnableRetrieveDefaultMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x674898c
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x67488d4
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x67487c8
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x6748730
	FName[] GetMaterialSlotNames();// 0x67486a8
	MaterialInterface*[] GetMaterials();// 0x6748620
	int GetMaterialIndex(FName MaterialSlotName);// 0x674858c

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x48, Size: 8]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int EncodeBits_Position;//[Offset: 0x54, Size: 4]
	int EncodeBits_TexCoord;//[Offset: 0x58, Size: 4]
	int EncodeBits_Normal;//[Offset: 0x5c, Size: 4]
	int EncodeBits_Generic;//[Offset: 0x60, Size: 4]
	int EncodeBits_VertexColor;//[Offset: 0x64, Size: 4]
	int EncodeSpeed;//[Offset: 0x68, Size: 4]
	int DecodeSpeed;//[Offset: 0x6c, Size: 4]
	BoxSphereBounds ImportedBounds;//[Offset: 0x70, Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x8c, Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0xa8, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xb4, Size: 12]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool bCompressData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0xc4, Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0x150, Size: 16]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0x160, Size: 16]
	byte SkelMirrorAxis;//[Offset: 0x170, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0x171, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0x178, Size: 16]
	MeshPerLODBiasArray[] PerLODBiasTypeInfo;//[Offset: 0x188, Size: 16]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x198, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x198, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x198, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x198, Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x198, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x1a0, Size: 8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x1a8, Size: 8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x1b0, Size: 8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x1b8, Size: 16]
	bool LodModelsHasSkinweight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	MorphTarget*[] MorphTargets;//[Offset: 0x1d0, Size: 16]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x350, Size: 16]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x360, Size: 8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x368, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x378, Size: 16]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x390, Size: 16]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x3b0, Size: 16]
	int NumSockets();// 0x67b61fc
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x67b6128
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x67b609c
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x67b6010
	BoxSphereBounds GetImportedBounds();// 0x67b5fc4
	BoxSphereBounds GetBounds();// 0x67b5f78
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x67b5ea0
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x67b5e14

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x30, Size: 16]
	Transform[] RefLocalPoses;//[Offset: 0x40, Size: 16]
	Guid VirtualBoneGuid;//[Offset: 0x160, Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x170, Size: 16]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x180, Size: 16]
	SmartNameContainer SmartNames;//[Offset: 0x1e0, Size: 80]
	BlendProfile*[] BlendProfiles;//[Offset: 0x248, Size: 16]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x258, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x330, Size: 16]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 8]
	int ParentIndex;//[Offset: 0x8, Size: 4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 8]
	FName TargetBoneName;//[Offset: 0x8, Size: 8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 8]
	FName BoneName;//[Offset: 0x30, Size: 8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 12]
	Vector RelativeScale;//[Offset: 0x50, Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x67be638
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x67be5a8

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 16]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float BlendScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 8]
	FName[] SlotNames;//[Offset: 0x8, Size: 16]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 8]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	FName MaterialSlotName;//[Offset: 0x10, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x30, Size: 24]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float LODHysteresis;//[Offset: 0x4, Size: 4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 16]
	Vector4[] UVOffsets;//[Offset: 0x38, Size: 16]
	bool[] bEnableShadowCasting;//[Offset: 0x50, Size: 16]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x60, Size: 16]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x78, Size: 368]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x1e8, Size: 168]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x290, Size: 576]
	FName[] RemovedBones;//[Offset: 0x4d0, Size: 16]
	BoneReference[] BonesToRemove;//[Offset: 0x4e0, Size: 16]
	AnimSequence* BakePose;//[Offset: 0x4f0, Size: 8]
	FString SourceImportFilename;//[Offset: 0x4f8, Size: 16]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x508, Size: 1]

--------------------------------
Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0, Size: 1]
	byte CustomLeftRightAxis;//[Offset: 0x1, Size: 1]
	FName CustomLeftRightBoneName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 4]
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 4]
	int ScreenSize;//[Offset: 0xc, Size: 4]
	float WeldingThreshold;//[Offset: 0x10, Size: 4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float NormalsThreshold;//[Offset: 0x18, Size: 4]
	byte SilhouetteImportance;//[Offset: 0x1c, Size: 1]
	byte TextureImportance;//[Offset: 0x1d, Size: 1]
	byte ShadingImportance;//[Offset: 0x1e, Size: 1]
	byte SkinningImportance;//[Offset: 0x1f, Size: 1]
	float BoneReductionRatio;//[Offset: 0x20, Size: 4]
	int MaxBonesPerVertex;//[Offset: 0x24, Size: 4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x30, Size: 16]
	int BaseLOD;//[Offset: 0x40, Size: 4]
	int LODChainLastIndex;//[Offset: 0x44, Size: 4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x50, Size: 128]
	MaterialProxySettings MaterialSettings;//[Offset: 0xd0, Size: 148]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x168, Size: 8]

--------------------------------
Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte MaterialLODType;//[Offset: 0x1, Size: 1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte TextureWidth;//[Offset: 0x3, Size: 1]
	byte TextureHeight;//[Offset: 0x4, Size: 1]
	byte SamplingQuality;//[Offset: 0x5, Size: 1]
	int GutterSpace;//[Offset: 0x8, Size: 4]
	byte TextureStrech;//[Offset: 0xc, Size: 1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10, Size: 16]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x28, Size: 88]

--------------------------------
Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0, Size: 1]
	byte Caster;//[Offset: 0x1, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte ColorChannels;//[Offset: 0x3, Size: 1]
	int BitsPerChannel;//[Offset: 0x4, Size: 4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: OutputMaterialInfo

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 8]
	byte TextureSizingType;//[Offset: 0x8, Size: 1]
	float GutterSpace;//[Offset: 0xc, Size: 4]
	enum SamplingQuality;//[Offset: 0x10, Size: 1]
	enum UVStrech;//[Offset: 0x11, Size: 1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	float MetallicConstant;//[Offset: 0x18, Size: 4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float RoughnessConstant;//[Offset: 0x20, Size: 4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float SpecularConstant;//[Offset: 0x28, Size: 4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float OpacityConstant;//[Offset: 0x30, Size: 4]
	float AOConstant;//[Offset: 0x34, Size: 4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float OpacityMaskConstant;//[Offset: 0x3c, Size: 4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float AmbientOcclusionConstant;//[Offset: 0x44, Size: 4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48, Size: 8]
	IntPoint NormalTextureSize;//[Offset: 0x50, Size: 8]
	IntPoint MetallicTextureSize;//[Offset: 0x58, Size: 8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60, Size: 8]
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 8]
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 8]
	byte MaterialMergeType;//[Offset: 0x90, Size: 1]
	byte BlendMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa0, Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xa8, Size: 16]
	float StreamableFirstChunkSize;//[Offset: 0xc8, Size: 4]
	float StreamableFollowingChunkSize;//[Offset: 0xcc, Size: 4]
	float OverrideChunkFreeTime;//[Offset: 0xd0, Size: 4]
	float OverrideFollowingChunkSize;//[Offset: 0xd4, Size: 4]
	bool bForceUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x1fc, Size: 1]
	byte RefPoseType;//[Offset: 0x1fd, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x200, Size: 8]
	int RefFrameIndex;//[Offset: 0x208, Size: 4]
	int EncodingPkgVersion;//[Offset: 0x20c, Size: 4]
	FName RetargetSource;//[Offset: 0x210, Size: 8]
	enum Interpolation;//[Offset: 0x218, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x21a, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21b, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x220, Size: 16]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x78, Size: 16]
	float SequenceLength;//[Offset: 0x88, Size: 4]
	float RateScale;//[Offset: 0x8c, Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x90, Size: 16]
	float GetPlayLength();// 0x663fb10

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x30, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x58, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 16]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 4]
	FName NotifyName;//[Offset: 0x40, Size: 8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 8]
	float Duration;//[Offset: 0x58, Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 48]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	byte MontageTickType;//[Offset: 0x91, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bTriggerOnSequenceChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	bool bBroadcastOverPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	int TrackIndex;//[Offset: 0xa4, Size: 4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 8]
	int SlotIndex;//[Offset: 0x10, Size: 4]
	int SegmentIndex;//[Offset: 0x14, Size: 4]
	byte LinkMethod;//[Offset: 0x18, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 4]
	float SegmentLength;//[Offset: 0x20, Size: 4]
	float LinkValue;//[Offset: 0x24, Size: 4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 8]

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa0, Size: 56]
	float BlendInTime;//[Offset: 0xd8, Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 56]
	float BlendOutTime;//[Offset: 0x118, Size: 4]
	float BlendOutTriggerTime;//[Offset: 0x11c, Size: 4]
	InputBlendPose FilteredBones;//[Offset: 0x120, Size: 16]
	FName SyncGroup;//[Offset: 0x130, Size: 8]
	int SyncSlotIndex;//[Offset: 0x138, Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0x140, Size: 32]
	CompositeSection[] CompositeSections;//[Offset: 0x160, Size: 16]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x170, Size: 16]
	BranchingPoint[] BranchingPoints;//[Offset: 0x180, Size: 16]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x192, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x198, Size: 16]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x1a8, Size: 16]
	FString[] IgnoreNotifyType;//[Offset: 0x1b8, Size: 16]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1c8, Size: 40]
	FName TimeStretchCurveName;//[Offset: 0x1f0, Size: 8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x8, Size: 8]
	float BlendTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 112]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	float GetFloatValue(float InTime);// 0x66822a0

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x667eb28
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x667ea44

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x58, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x59, Size: 1]
	float DefaultValue;//[Offset: 0x5c, Size: 4]
	RichCurveKey[] Keys;//[Offset: 0x60, Size: 16]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 80]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Value;//[Offset: 0x8, Size: 4]
	float ArriveTangent;//[Offset: 0xc, Size: 4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 4]
	float LeaveTangent;//[Offset: 0x14, Size: 4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 4]

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 16]

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0, Size: 8]
	int BlendDepth;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 8]
	float StartTime;//[Offset: 0x38, Size: 4]
	FName NextSectionName;//[Offset: 0x40, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 16]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 8]
	float StartPos;//[Offset: 0x8, Size: 4]
	float AnimStartTime;//[Offset: 0xc, Size: 4]
	float AnimEndTime;//[Offset: 0x10, Size: 4]
	float AnimPlayRate;//[Offset: 0x14, Size: 4]
	int LoopingCount;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 8]
	float DisplayTime;//[Offset: 0x38, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 4]
	float TriggerTime;//[Offset: 0x4, Size: 4]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 16]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 4]
	float Alpha;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xffffff8f20d162a8
	FString GetNotifyName();// 0x663dff0

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0xffffff8f20d162a8
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xffffff8f20d162a8
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0xffffff8f20d162a8
	FString GetNotifyName();// 0x663e844

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x20, Size: 112]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 8]
	SmartName Name;//[Offset: 0x8, Size: 16]
	int CurveTypeFlags;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ScreenSize;//[Offset: 0x4, Size: 4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float HardAngleThreshold;//[Offset: 0xc, Size: 4]
	int MergeDistance;//[Offset: 0x10, Size: 4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float ClippingLevel;//[Offset: 0x18, Size: 4]
	int AxisIndex;//[Offset: 0x1c, Size: 4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x28, Size: 128]

--------------------------------
Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum LevelOfDetailType;//[Offset: 0x1, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x8, Size: 368]
	MeshProxySettings ProxySettings;//[Offset: 0x178, Size: 196]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4, Size: 148]
	int TextureWidth;//[Offset: 0x98, Size: 4]
	int TextureHeight;//[Offset: 0x9c, Size: 4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float MergeDistance;//[Offset: 0xa8, Size: 4]
	float HardAngleThreshold;//[Offset: 0xac, Size: 4]
	int LightMapResolution;//[Offset: 0xb0, Size: 4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 1]
	byte LandscapeCullingPrecision;//[Offset: 0xb8, Size: 1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	int LODGroupIndex;//[Offset: 0xbc, Size: 4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	enum AggregatorMode;//[Offset: 0xc1, Size: 1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x28, Size: 16]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x38, Size: 16]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x48, Size: 16]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x100, Size: 8]
	BodySetup*[] BodySetup;//[Offset: 0x108, Size: 16]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bClientOnlyBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x373, Size: 1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x378, Size: 16]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 40]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 4]
	float PositionStrength;//[Offset: 0x14, Size: 4]
	float VelocityStrength;//[Offset: 0x18, Size: 4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 4]
	float MaxAngularForce;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 440]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 16]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 260]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 8]
	Vector Pos1;//[Offset: 0x30, Size: 12]
	Vector PriAxis1;//[Offset: 0x3c, Size: 12]
	Vector SecAxis1;//[Offset: 0x48, Size: 12]
	Vector Pos2;//[Offset: 0x54, Size: 12]
	Vector PriAxis2;//[Offset: 0x60, Size: 12]
	Vector SecAxis2;//[Offset: 0x6c, Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 260]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 4]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float Restitution;//[Offset: 0x8, Size: 4]
	float ContactDistance;//[Offset: 0xc, Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 4]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 12]
	Vector VelocityTarget;//[Offset: 0xc, Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float MaxForce;//[Offset: 0x8, Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 12]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 260]
	FName ProfileName;//[Offset: 0x108, Size: 8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x28, Size: 80]
	Blueprint* SourceAsset;//[Offset: 0x78, Size: 40]

--------------------------------
Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0, Size: 8]
	Transform SourceToTargetTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	class Object* ParentClass;//[Offset: 0x50, Size: 8]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x58, Size: 8]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x68, Size: 8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x70, Size: 16]
	TimelineTemplate*[] Timelines;//[Offset: 0x80, Size: 16]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x90, Size: 8]
	byte BlueprintType;//[Offset: 0x98, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x9c, Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	Guid BlueprintGUID;//[Offset: 0x3c, Size: 16]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 16]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 16]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 8]
	SCS_Node* RootNode;//[Offset: 0x50, Size: 8]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x58, Size: 16]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 80]
	FName VariableName;//[Offset: 0x88, Size: 8]
	FName AttachToName;//[Offset: 0x90, Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x98, Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0xa0, Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0xb0, Size: 16]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xc0, Size: 16]
	Guid VariableGuid;//[Offset: 0xd0, Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	FName NativeComponentName;//[Offset: 0xe8, Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	FName InternalVariableName;//[Offset: 0xf8, Size: 8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 8]
	FString DataValue;//[Offset: 0x8, Size: 16]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 4]
	byte LengthMode;//[Offset: 0x2c, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 16]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 16]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 16]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 16]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 16]
	Guid TimelineGuid;//[Offset: 0x80, Size: 16]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0x10, Size: 8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x10, Size: 8]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x10, Size: 8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 112]
	Vector GetVectorValue(float InTime);// 0x66835a0

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 112]
	LinearColor GetLinearColorValue(float InTime);// 0x6682740

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 16]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 16]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 32]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 80]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 8]
	FName SCSVariableName;//[Offset: 0x8, Size: 8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0, Size: 8]
	FString ApexFileName;//[Offset: 0x8, Size: 16]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x1c, Size: 80]

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0, Size: 4]
	float HorizontalResistance;//[Offset: 0x4, Size: 4]
	float BendResistance;//[Offset: 0x8, Size: 4]
	float ShearResistance;//[Offset: 0xc, Size: 4]
	float Friction;//[Offset: 0x10, Size: 4]
	float Damping;//[Offset: 0x14, Size: 4]
	float TetherStiffness;//[Offset: 0x18, Size: 4]
	float TetherLimit;//[Offset: 0x1c, Size: 4]
	float Drag;//[Offset: 0x20, Size: 4]
	float StiffnessFrequency;//[Offset: 0x24, Size: 4]
	float GravityScale;//[Offset: 0x28, Size: 4]
	float MassScale;//[Offset: 0x2c, Size: 4]
	float InertiaBlend;//[Offset: 0x30, Size: 4]
	float SelfCollisionThickness;//[Offset: 0x34, Size: 4]
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 4]
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 4]
	float SolverFrequency;//[Offset: 0x40, Size: 4]
	float FiberCompression;//[Offset: 0x44, Size: 4]
	float FiberExpansion;//[Offset: 0x48, Size: 4]
	float FiberResistance;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x28, Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x30, Size: 8]
	byte RootMotionMode;//[Offset: 0x38, Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x40, Size: 16]
	delegate OnMontageStarted;//[Offset: 0x50, Size: 16]
	delegate OnMontageEnded;//[Offset: 0x60, Size: 16]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x70, Size: 16]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x180, Size: 16]
	bool bIsOnlyMasterTriggerNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool bIsMaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	AnimInstance* ParentAnimInstance;//[Offset: 0x3cc, Size: 8]
	AnimInstance*[] SubAnimInstances;//[Offset: 0x3d8, Size: 16]
	AnimInstance*[] SubAnimInstancesTempRef;//[Offset: 0x3e8, Size: 16]
	AnimSequenceBase*[] CachedSwitchNotifySequence;//[Offset: 0x3f8, Size: 16]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x6636b68
	Pawn* TryGetPawnOwner();// 0x6636b2c
	void TriggerAllSequenceSwitchNotify();// 0x6636b18
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x6636a58
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x66369a0
	void SetRootMotionMode(byte Value);// 0x663691c
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x6636864
	void SavePoseSnapshot(FName SnapshotName);// 0x66367e0
	void ResetSubAnimNodeAnimClass(FName SubInstanceSlotName);// 0x6636764
	AnimInstance* ReplaceSubAnimNodeAnimClass(FName SubInstanceSlotName, class AnimInstance NewAnimClass);// 0x66366a0
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x663647c
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x66362cc
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x663620c
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x6636154
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x663609c
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x6635fa4
	void Montage_Resume(const AnimMontage* Montage);// 0x6635f28
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x6635de0
	void Montage_Pause(const AnimMontage* Montage);// 0x6635d64
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x6635cb0
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x6635bf4
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x6635b5c
	bool Montage_IsActive(const AnimMontage* Montage);// 0x6635acc
	float Montage_GetPosition(const AnimMontage* Montage);// 0x6635a40
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x66359b4
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x66358f0
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x6635860
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x66357d4
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x6635748
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x6635678
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x6635530
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x6635468
	bool IsAnyMontagePlaying();// 0x6635430
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x6635368
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x6635254
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x66351b8
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x66350b8
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x6634fb8
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x6634eb8
	float GetRelevantAnimTime(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x6634db8
	float GetRelevantAnimLength(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x6634cb8
	SkeletalMeshComponent* GetOwningComponent();// 0x6634c84
	Actor* GetOwningActor();// 0x6634c50
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x6634b8c
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x6634ac8
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x6634a04
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x6634940
	float GetInstanceMachineWeight(int MachineIndex);// 0x66348b4
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x6634828
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x663479c
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x6634710
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x6634684
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x66345f8
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x663456c
	float GetCurveValue(FName CurveName);// 0x66344e0
	FName GetCurrentStateName(int MachineIndex);// 0x6634454
	AnimMontage* GetCurrentActiveMontage();// 0x6634420
	AnimMontage* GetCurMontageBySlot(FName SlotName);// 0x6634394
	void ForceTriggerAnimEndedEvent();// 0x6634380
	void ClearMorphTargets();// 0x663436c
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x6634280
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0xffffff8f20d162a8
	void BlueprintPostEvaluateAnimation();// 0xffffff8f20d162a8
	void BlueprintInitializeAnimation();// 0xffffff8f20d162a8
	void BlueprintBeginPlay();// 0xffffff8f20d162a8

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 16]
	FName[] BoneNames;//[Offset: 0x10, Size: 16]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 8]
	FName SnapshotName;//[Offset: 0x28, Size: 8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 8]
	FName NextMarkerName;//[Offset: 0x8, Size: 8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 16]
	Guid AssetGuid;//[Offset: 0x38, Size: 16]

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 8]
	bool DefaultProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AnimUpdateRateParameters
	int UpdateRate;//[Offset: 0x4, Size: 4]
	int EvaluationRate;//[Offset: 0x8, Size: 4]
	bool bInterpolateSkippedFrames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bShouldUseLodMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bShouldUseMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bSkipUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bSkipEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	float TickedPoseOffestTime;//[Offset: 0x10, Size: 4]
	float AdditionalTime;//[Offset: 0x14, Size: 4]
	int BaseNonRenderedUpdateRate;//[Offset: 0x1c, Size: 4]
	int BaseNonRenderedUpdateRateHigh;//[Offset: 0x20, Size: 4]
	float MaxDistFromMainChar;//[Offset: 0x24, Size: 4]
	float[] BaseVisibleDistanceFactorThesholds;//[Offset: 0x28, Size: 16]
	<int,int> LODToFrameSkipMap;//[Offset: 0x38, Size: 80]
	int MaxEvalRateForInterpolation;//[Offset: 0x88, Size: 4]
	enum ShiftBucket;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 4]
	byte Weights;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	float SavedPosition;//[Offset: 0xc, Size: 4]
	float SavedPlayRate;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: DynamicBatchSectionInfo
	MaterialBatchInfo[] TransientMatInfo;//[Offset: 0x28, Size: 16]
	MaterialInterface*[] BatchMatList;//[Offset: 0x38, Size: 16]
	<int,MaterialInstanceDynamic*> CacheAtlasMaterials;//[Offset: 0x48, Size: 80]

--------------------------------
Class: MaterialBatchInfo
	<enum,DynamicAtlasTexture2D*> AtlasTextures;//[Offset: 0x8, Size: 80]

--------------------------------
Class: DynamicAtlasTexture2D.Texture2D.Texture.Object

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xd8, Size: 4]
	int LevelIndex;//[Offset: 0xdc, Size: 4]
	int FirstResourceMemMip;//[Offset: 0xe0, Size: 4]
	IntPoint ImportedSize;//[Offset: 0xe4, Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xf0, Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfa, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfa, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfa, Size: 1]
	byte AddressX;//[Offset: 0xfb, Size: 1]
	byte AddressY;//[Offset: 0xfc, Size: 1]
	int Blueprint_GetSizeY();// 0x67e187c
	int Blueprint_GetSizeX();// 0x67e1848

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x67428c0
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x674280c
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x6742754
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x6742664
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x67425d4
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x6742548
	float K2_GetScalarParameterValue(FName ParameterName);// 0x67424bc
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x6742440
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x67423c4
	void CopyInterpParameters(MaterialInstance* Source);// 0x6742348

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	int MeshLogicType;//[Offset: 0x74, Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x78, Size: 8]
	MaterialInterface* Parent;//[Offset: 0x80, Size: 8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x90, Size: 16]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xa0, Size: 16]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0xb0, Size: 16]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xc0, Size: 16]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0xd0, Size: 80]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x124, Size: 16]
	Texture*[] PermutationTextureReferences;//[Offset: 0x158, Size: 16]

--------------------------------
Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Font* FontValue;//[Offset: 0x8, Size: 8]
	int FontPage;//[Offset: 0x10, Size: 4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 16]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 16]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 16]
	int IsRemapped;//[Offset: 0x58, Size: 4]
	float EmScale;//[Offset: 0x5c, Size: 4]
	float Ascent;//[Offset: 0x60, Size: 4]
	float Descent;//[Offset: 0x64, Size: 4]
	float Leading;//[Offset: 0x68, Size: 4]
	int Kerning;//[Offset: 0x6c, Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 168]
	int NumCharacters;//[Offset: 0x118, Size: 4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 16]
	float ScalingFactor;//[Offset: 0x130, Size: 4]
	int LegacyFontSize;//[Offset: 0x134, Size: 4]
	FName LegacyFontName;//[Offset: 0x138, Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 32]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 4]
	int StartV;//[Offset: 0x4, Size: 4]
	int USize;//[Offset: 0x8, Size: 4]
	int VSize;//[Offset: 0xc, Size: 4]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 16]
	float Height;//[Offset: 0x10, Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	byte CharacterSet;//[Offset: 0x15, Size: 1]
	FString Chars;//[Offset: 0x18, Size: 16]
	FString UnicodeRange;//[Offset: 0x28, Size: 16]
	FString CharsFilePath;//[Offset: 0x38, Size: 16]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 16]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	int TexturePageWidth;//[Offset: 0x70, Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 4]
	int XPadding;//[Offset: 0x78, Size: 4]
	int YPadding;//[Offset: 0x7c, Size: 4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	int Kerning;//[Offset: 0x94, Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 16]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x10, Size: 16]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 16]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 8]
	FontData Font;//[Offset: 0x8, Size: 32]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 16]
	enum Hinting;//[Offset: 0x10, Size: 1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 8]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 16]
	FString Cultures;//[Offset: 0x28, Size: 16]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 16]
	float ScalingFactor;//[Offset: 0x10, Size: 4]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Texture* ParameterValue;//[Offset: 0x8, Size: 8]
	Guid ExpressionGUID;//[Offset: 0x10, Size: 16]

--------------------------------
Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 16]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 4]
	byte BlendMode;//[Offset: 0xc, Size: 1]
	byte ShadingModel;//[Offset: 0xd, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x1f0, Size: 8]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 1]
	float GravityScale;//[Offset: 0x1fc, Size: 4]
	float MaxStepHeight;//[Offset: 0x200, Size: 4]
	float JumpZVelocity;//[Offset: 0x204, Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x208, Size: 4]
	float WalkableFloorAngle;//[Offset: 0x20c, Size: 4]
	float WalkableFloorZ;//[Offset: 0x210, Size: 4]
	byte MovementMode;//[Offset: 0x214, Size: 1]
	byte CustomMovementMode;//[Offset: 0x215, Size: 1]
	float GroundFriction;//[Offset: 0x250, Size: 4]
	float MaxWalkSpeed;//[Offset: 0x254, Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x258, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x25c, Size: 4]
	float MaxFlySpeed;//[Offset: 0x260, Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x264, Size: 4]
	float MaxAcceleration;//[Offset: 0x268, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x26c, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x270, Size: 4]
	float BrakingFriction;//[Offset: 0x274, Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x27c, Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x280, Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x284, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x288, Size: 4]
	float AirControl;//[Offset: 0x28c, Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x290, Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x294, Size: 4]
	float FallingLateralFriction;//[Offset: 0x298, Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x29c, Size: 4]
	float Buoyancy;//[Offset: 0x2a0, Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x2a4, Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x2a8, Size: 4]
	Rotator RotationRate;//[Offset: 0x2ac, Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b8, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b8, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b8, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b9, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b9, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b9, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b9, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b9, Size: 1]
	bool bForceNoSimulatePrediction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b9, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b9, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x2c0, Size: 8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x2c8, Size: 4]
	float OutofWaterZ;//[Offset: 0x2cc, Size: 4]
	float Mass;//[Offset: 0x2d0, Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x2dc, Size: 4]
	float InitialPushForceFactor;//[Offset: 0x2e0, Size: 4]
	float PushForceFactor;//[Offset: 0x2e4, Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x2e8, Size: 4]
	float TouchForceFactor;//[Offset: 0x2ec, Size: 4]
	float MinTouchForce;//[Offset: 0x2f0, Size: 4]
	float MaxTouchForce;//[Offset: 0x2f4, Size: 4]
	float RepulsionForce;//[Offset: 0x2f8, Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x300, Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x304, Size: 4]
	Vector Acceleration;//[Offset: 0x308, Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x314, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x320, Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x330, Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x33c, Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x340, Size: 12]
	Vector PendingForceToApply;//[Offset: 0x34c, Size: 12]
	float AnalogInputModifier;//[Offset: 0x358, Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x364, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x368, Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x36c, Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x370, Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x374, Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x378, Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x37c, Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x380, Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x384, Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x388, Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x38c, Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x390, Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x394, Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x398, Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x39d, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x3a0, Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x3a4, Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x3a8, Size: 152]
	byte DefaultLandMovementMode;//[Offset: 0x440, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x441, Size: 1]
	byte GroundMovementMode;//[Offset: 0x442, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x443, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x443, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x443, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x443, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x443, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x443, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x443, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x443, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x444, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x444, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x444, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x444, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x444, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x444, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x444, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x444, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x445, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x445, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x445, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x445, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x445, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x445, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x445, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x446, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x446, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x446, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x458, Size: 4]
	Vector RequestedVelocity;//[Offset: 0x45c, Size: 12]
	int AvoidanceUID;//[Offset: 0x468, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x46c, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x470, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x474, Size: 4]
	float AvoidanceWeight;//[Offset: 0x478, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x47c, Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x528, Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x52c, Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x530, Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x534, Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x538, Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x53c, Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x540, Size: 88]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x5a8, Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x5b0, Size: 256]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x740, Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x780, Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78d, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x6676fe4
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x6676f68
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x6676ea8
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x6676e20
	void SetGroupsToIgnore(int GroupFlags);// 0x6676da4
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x6676d1c
	void SetGroupsToAvoid(int GroupFlags);// 0x6676ca0
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x6676c18
	void SetAvoidanceGroup(int GroupFlags);// 0x6676b9c
	void SetAvoidanceEnabled(bool bEnable);// 0x6676b18
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x66769dc
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x6676608
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x6676234
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x6675f7c
	float K2_GetWalkableFloorZ();// 0x6675f48
	float K2_GetWalkableFloorAngle();// 0x6675f14
	float K2_GetModifiedMaxAcceleration();// 0x6675ed8
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x6675de8
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x6675c48
	bool IsWalking();// 0x6675c08
	bool IsWalkable(out const HitResult Hit);// 0x6675b4c
	float GetValidPerchRadius();// 0x6675b18
	float GetPerchRadiusThreshold();// 0x6675ae4
	PrimitiveComponent* GetMovementBase();// 0x6675ab0
	float GetMinAnalogSpeed();// 0x6675a74
	float GetMaxJumpHeightWithJumpTime();// 0x6675a38
	float GetMaxJumpHeight();// 0x66759fc
	float GetMaxBrakingDeceleration();// 0x66759c0
	float GetMaxAcceleration();// 0x6675984
	Vector GetImpartedMovementBaseVelocity();// 0x6675944
	Vector GetCurrentAcceleration();// 0x667590c
	Character* GetCharacterOwner();// 0x66758f0
	float GetAnalogInputModifier();// 0x66758bc
	void DisableMovement();// 0x66758a0
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6675698
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6675310
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6675054
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6674e08
	void ClientAckGoodMove(float TimeStamp);// 0x6674d84
	void ClearAccumulatedForces();// 0x6674d68
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6674b88
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x6674a44
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x6674974
	void AddForce(Vector Force);// 0x66748ec

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x1a0, Size: 8]
	Vector K2_GetInputVector();// 0x677b100
	bool IsMoveInputIgnored();// 0x677b0c0
	Vector GetPendingInputVector();// 0x677b088
	Pawn* GetPawnOwner();// 0x677b054
	Vector GetLastInputVector();// 0x677b01c
	Vector ConsumeInputVector();// 0x677afdc
	void AddInputVector(Vector WorldVector, bool bForce);// 0x677af0c

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x160, Size: 40]
	float FixedPathBrakingDistance;//[Offset: 0x188, Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18c, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18c, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18c, Size: 1]
	MovementProperties MovementState;//[Offset: 0x190, Size: 4]
	void StopMovementKeepPathing();// 0x6759cb0
	void StopActiveMovement();// 0x6759c94
	bool IsSwimming();// 0x6759c54
	bool IsMovingOnGround();// 0x6759c14
	bool IsFlying();// 0x6759bd4
	bool IsFalling();// 0x6759b94
	bool IsCrouching();// 0x6759b54

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0x120, Size: 8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0x128, Size: 8]
	Vector Velocity;//[Offset: 0x134, Size: 12]
	Vector PlaneConstraintNormal;//[Offset: 0x140, Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0x14c, Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x158, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x158, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x158, Size: 1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x158, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x158, Size: 1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x158, Size: 1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x158, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0x15b, Size: 1]
	void StopMovementImmediately();// 0x674b284
	void SnapUpdatedComponentToPlane();// 0x674b268
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x674b1e4
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x674b15c
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x674b0d4
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x674b004
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x674af78
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x674aef4
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x674ae70
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x674aca8
	float K2_GetModifiedMaxSpeed();// 0x674ac6c
	float K2_GetMaxSpeedModifier();// 0x674ac30
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x674ab98
	Vector GetPlaneConstraintOrigin();// 0x674ab58
	Vector GetPlaneConstraintNormal();// 0x674ab18
	enum GetPlaneConstraintAxisSetting();// 0x674aafc
	PhysicsVolume* GetPhysicsVolume();// 0x674aac0
	float GetMaxSpeed();// 0x674aa84
	float GetGravityZ();// 0x674aa48
	Vector ConstrainNormalToPlane(Vector Normal);// 0x674a9ac
	Vector ConstrainLocationToPlane(Vector Location);// 0x674a910
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x674a874

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 4]
	float AgentHeight;//[Offset: 0x8, Size: 4]
	float AgentStepHeight;//[Offset: 0xc, Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x18, Size: 8]
	int AgentType;//[Offset: 0x20, Size: 4]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x3e8, Size: 8]
	NavDataConfig NavDataConfig;//[Offset: 0x3f0, Size: 96]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x450, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x450, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x450, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x450, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x451, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x454, Size: 4]
	int AgentType;//[Offset: 0x458, Size: 4]
	uint32 DataVersion;//[Offset: 0x45c, Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x530, Size: 16]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x28, Size: 8]
	Color Color;//[Offset: 0x30, Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x34, Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x40, Size: 8]
	SoftClassPath NavigationDataClassName;//[Offset: 0x48, Size: 24]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 16]
	int AreaID;//[Offset: 0x10, Size: 4]
	class Object* AreaClass;//[Offset: 0x18, Size: 8]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 4]
	float LineDist;//[Offset: 0x8, Size: 4]
	HitResult HitResult;//[Offset: 0x10, Size: 136]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 12]
	float PenetrationDepth;//[Offset: 0x54, Size: 4]
	int Item;//[Offset: 0x58, Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 8]
	Actor* Actor;//[Offset: 0x64, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x6c, Size: 8]
	FName BoneName;//[Offset: 0x78, Size: 8]
	int FaceIndex;//[Offset: 0x80, Size: 4]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0xec, Size: 12]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0xf9, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x6c0, Size: 4]
	float CapsuleRadius;//[Offset: 0x6c4, Size: 4]
	float CapsuleHeight;//[Offset: 0x6c8, Size: 4]
	void SetCapsuleSize(float InRadius, float inHalfHeight, bool bUpdateOverlaps);// 0x666f21c
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x666f158
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x666f094
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x666efa4
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x666eebc
	float GetUnscaledCapsuleRadius();// 0x666eea0
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x666ee7c
	float GetUnscaledCapsuleHalfHeight();// 0x666ee60
	float GetShapeScale();// 0x666ee00
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x666ecc0
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x666eb88
	float GetScaledCapsuleRadius();// 0x666eb20
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x666eab0
	float GetScaledCapsuleHalfHeight();// 0x666ea48

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x6a4, Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x6a8, Size: 8]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b0, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b0, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6b0, Size: 1]
	class NavArea* AreaClass;//[Offset: 0x6b8, Size: 8]

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 8]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 12]
	Rotator Rotation;//[Offset: 0x1c, Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 352]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 8]
	float Position;//[Offset: 0x10, Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 12]
	Rotator Rotation;//[Offset: 0x20, Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 256]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x148, Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x154, Size: 12]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x3e8, Size: 4]
	byte Ping;//[Offset: 0x3ec, Size: 1]
	FString PlayerName;//[Offset: 0x3f0, Size: 16]
	int PlayerID;//[Offset: 0x410, Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x414, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x414, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x414, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x414, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x414, Size: 1]
	int StartTime;//[Offset: 0x418, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x420, Size: 8]
	FString SavedNetworkAddress;//[Offset: 0x430, Size: 16]
	UniqueNetIdRepl UniqueId;//[Offset: 0x440, Size: 24]
	int PingBucketSize;//[Offset: 0x460, Size: 4]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0xffffff8f20d162a8
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0xffffff8f20d162a8
	void OnRep_UniqueId();// 0x6794030
	void OnRep_Score();// 0x6794014
	void OnRep_PlayerName();// 0x6793ff8
	void OnRep_bIsInactive();// 0x6793fdc

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	float DamageImpulse;//[Offset: 0x2c, Size: 4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 4]
	float DamageFalloff;//[Offset: 0x38, Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x448, Size: 8]
	Pawn* AcknowledgedPawn;//[Offset: 0x458, Size: 8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x460, Size: 8]
	HUD* MyHUD;//[Offset: 0x470, Size: 8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x478, Size: 8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x480, Size: 8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 1]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x48c, Size: 4]
	Actor*[] HiddenActors;//[Offset: 0x490, Size: 16]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x4a0, Size: 16]
	float LastSpectatorStateSynchTime;//[Offset: 0x4b4, Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x4b8, Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x4c4, Size: 12]
	int ClientCap;//[Offset: 0x4d0, Size: 4]
	CheatManager* CheatManager;//[Offset: 0x4d8, Size: 8]
	class CheatManager* CheatClass;//[Offset: 0x4e0, Size: 8]
	PlayerInput* PlayerInput;//[Offset: 0x4e8, Size: 8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x4f0, Size: 16]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x590, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x591, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x5d0, Size: 8]
	NetConnection* NetConnection;//[Offset: 0x5d8, Size: 8]
	float InputYawScale;//[Offset: 0x5ec, Size: 4]
	float InputPitchScale;//[Offset: 0x5f0, Size: 4]
	float InputRollScale;//[Offset: 0x5f4, Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f8, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f8, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f8, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5f8, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5f8, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5f8, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x5fc, Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x600, Size: 16]
	byte DefaultMouseCursor;//[Offset: 0x610, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x611, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x612, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x613, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x614, Size: 4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x628, Size: 1]
	bool bActiveReplayViewer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x628, Size: 1]
	bool bEnableReplayRecord;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x628, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x6a8, Size: 8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6b0, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x6c8, Size: 8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x718, Size: 8]
	Vector SpawnLocation;//[Offset: 0x720, Size: 12]
	bool bIsActorChannelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool bIsDemoViewController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x736, Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x738, Size: 2]
	bool bNeedResetCameraOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73a, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x678ea80
	bool WasInputKeyJustPressed(Key Key);// 0x678e914
	void ToggleSpeaking(bool bInSpeaking);// 0x678e888
	void SwitchLevel(FString URL);// 0x678e7fc
	void StopHapticEffect(enum Hand);// 0x678e780
	void StartFire(byte FireModeNum);// 0x678e6fc
	void SetVirtualJoystickVisibility(bool bVisible);// 0x678e670
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x678e4f4
	void SetName(FString S);// 0x678e468
	void SetMouseLocation(const int X, const int Y);// 0x678e3b4
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x678e2fc
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x678e20c
	void SetControllerLightColor(Color Color);// 0x678e194
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x678dfe8
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x678deec
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x678ddd8
	void ServerViewPrevPlayer();// 0x678dd78
	void ServerViewNextPlayer();// 0x678dd18
	void ServerVerifyViewTarget();// 0x678dcb8
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x678dbc4
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x678dac8
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x678d874
	void ServerToggleAILogging();// 0x678d814
	void ServerShortTimeout();// 0x678d7b4
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x678d6f0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x678d5f0
	void ServerRestartPlayer();// 0x678d590
	void ServerPause();// 0x678d530
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x678d490
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x678d23c
	void ServerCheckClientPossessionReliable();// 0x678d1dc
	void ServerCheckClientPossession();// 0x678d17c
	void ServerChangeName(FString S);// 0x678d0c4
	void ServerCamera(FName NewMode);// 0x678d014
	void ServerAcknowledgePossession(Pawn* P);// 0x678cf64
	void SendToConsole(FString Command);// 0x678ced8
	void RestartLevel();// 0x678cebc
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x678cd94
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x678cc5c
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x678c9ec
	void Pause();// 0x678c9d0
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x678c944
	void LocalTravel(FString URL);// 0x678c8b8
	bool IsInputKeyDown(Key Key);// 0x678c74c
	void InitVirtualJoystickBySetting();// 0x678c730
	void GetViewportSize(out int SizeX, out int SizeY);// 0x678c64c
	SpectatorPawn* GetSpectatorPawn();// 0x678c630
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x678c540
	Vector GetInputVectorKeyState(Key Key);// 0x678c3d4
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x678c264
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x678c180
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x678bfe4
	float GetInputKeyTimeDown(Key Key);// 0x678be7c
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x678bd5c
	float GetInputAnalogKeyState(Key Key);// 0x678bbf4
	HUD* GetHUD();// 0x678bbc0
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x678ba28
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x678b8b8
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x678b748
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x678b5ec
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x678b4b8
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x678b384
	Vector GetFocalLocation();// 0x678b344
	void FOV(float NewFOV);// 0x678b2c0
	void FadeOutVirtualJoystick(float FadeDuration);// 0x678b244
	void FadeInVirtualJoystick(float FadeDuration);// 0x678b1c8
	void EnableCheats();// 0x678b1ac
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x678b03c
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x678af44
	void ConsoleKey(Key Key);// 0x678ade4
	void ClientWasKicked(const FText KickReason);// 0x678ad04
	void ClientVoiceHandshakeComplete();// 0x678ace8
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x678ab4c
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x678a9bc
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x678a868
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x678a71c
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x678a5d8
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x678a51c
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x678a454
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x678a3d0
	void ClientStartOnlineSession();// 0x678a3b4
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x678a330
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x678a224
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x678a198
	void ClientSetHUD(class HUD NewHUDClass);// 0x678a114
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x678a018
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x6789eb0
	void ClientSetCameraMode(FName NewCamMode);// 0x6789e2c
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x6789ca8
	void ClientSetBlockOnAsyncLoading();// 0x6789c8c
	void ClientReturnToMainMenu(FString ReturnReason);// 0x6789c00
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x6789b7c
	void ClientRestart(Pawn* NewPawn);// 0x6789af8
	void ClientReset();// 0x6789adc
	void ClientRepObjRef(Object* Object);// 0x6789a58
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x67898e8
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x67897a0
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x678968c
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x6789550
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x6789458
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x6789308
	void ClientPlayCameraShakeWithWorldLocation(class CameraShake Shake, Vector WorldLocation, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x678918c
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6789054
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x6788de0
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x6788c50
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x6788b48
	void ClientIgnoreMoveInput(bool bIgnore);// 0x6788abc
	void ClientIgnoreLookInput(bool bIgnore);// 0x6788a30
	void ClientGotoState(FName NewState);// 0x67889ac
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x67888e4
	void ClientForceGarbageCollection();// 0x67888c8
	void ClientFlushLevelStreaming();// 0x67888b4
	void ClientEndOnlineSession();// 0x6788898
	void ClientEnableNetworkVoice(bool bEnable);// 0x678880c
	void ClientCommitMapChange();// 0x67887f0
	void ClientClearCameraLensEffects();// 0x67887d4
	void ClientCapBandwidth(int Cap);// 0x6788750
	void ClientCancelPendingMapChange();// 0x6788734
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x6788630
	void ClearAudioListenerOverride();// 0x678861c
	void Camera(FName NewMode);// 0x6788598
	void AddYawInput(float Val);// 0x6788514
	void AddRollInput(float Val);// 0x6788490
	void AddPitchInput(float Val);// 0x678840c
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x6788388

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 8]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x3e8, Size: 8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f0, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f0, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f0, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f0, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x3f8, Size: 16]
	FName[] DebugDisplay;//[Offset: 0x410, Size: 16]
	FName[] ToggledDebugCategories;//[Offset: 0x420, Size: 16]
	Canvas* Canvas;//[Offset: 0x430, Size: 8]
	Canvas* DebugCanvas;//[Offset: 0x438, Size: 8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x440, Size: 16]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x450, Size: 8]
	Actor* ShowDebugTargetActor;//[Offset: 0x458, Size: 8]
	void ShowHUD();// 0x66c25f4
	void ShowDebugToggleSubCategory(FName Category);// 0x66c2578
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x66c24fc
	void ShowDebug(FName DebugType);// 0x66c2478
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x66c23b8
	void RemoveAllDebugStrings();// 0x66c23a4
	void ReceiveHitBoxRelease(const FName BoxName);// 0xffffff8f20d162a8
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0xffffff8f20d162a8
	void ReceiveHitBoxClick(const FName BoxName);// 0xffffff8f20d162a8
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0xffffff8f20d162a8
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0xffffff8f20d162a8
	Vector Project(Vector Location);// 0x66c2310
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x66c2168
	PlayerController* GetOwningPlayerController();// 0x66c2134
	Pawn* GetOwningPawn();// 0x66c2100
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x66c1ef8
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x66c1d88
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x66c19b4
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x66c17c0
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x66c165c
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x66c13bc
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x66c11d8
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x66c0e84
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x66c0cdc
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x66c0b78
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x66c0a04
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x66c06ac

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 4]
	float OrgY;//[Offset: 0x2c, Size: 4]
	float ClipX;//[Offset: 0x30, Size: 4]
	float ClipY;//[Offset: 0x34, Size: 4]
	Color DrawColor;//[Offset: 0x38, Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	int SizeX;//[Offset: 0x40, Size: 4]
	int SizeY;//[Offset: 0x44, Size: 4]
	Plane ColorModulate;//[Offset: 0x50, Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x666dafc
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x666da28
	Vector K2_Project(Vector WorldLocation);// 0x666d994
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x666d878
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x666d620
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x666d30c
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x666d1a8
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x666d08c
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x666ceb4
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x666cd84
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x666cc98
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x666c8a8
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x666c784

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 16]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 16]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 16]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 12]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 12]
	FString DebugText;//[Offset: 0x20, Size: 16]
	float TimeRemaining;//[Offset: 0x30, Size: 4]
	float Duration;//[Offset: 0x34, Size: 4]
	Color TextColor;//[Offset: 0x38, Size: 4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 12]
	Font* Font;//[Offset: 0x50, Size: 8]
	float FontScale;//[Offset: 0x58, Size: 4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x3e8, Size: 8]
	SceneComponent* TransformComponent;//[Offset: 0x3f0, Size: 8]
	float DefaultFOV;//[Offset: 0x400, Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x408, Size: 4]
	float DefaultAspectRatio;//[Offset: 0x410, Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x460, Size: 1472]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0xa20, Size: 1472]
	TViewTarget ViewTarget;//[Offset: 0xfe0, Size: 1488]
	TViewTarget PendingViewTarget;//[Offset: 0x15b0, Size: 1488]
	CameraModifier*[] ModifierList;//[Offset: 0x1b98, Size: 16]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x1ba8, Size: 16]
	float FreeCamDistance;//[Offset: 0x1bb8, Size: 4]
	Vector FreeCamOffset;//[Offset: 0x1bbc, Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x1bc8, Size: 12]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x1be8, Size: 16]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1bf8, Size: 8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1c00, Size: 8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1c40, Size: 16]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x1c60, Size: 16]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x1c70, Size: 16]
	CameraActor* AnimCameraActor;//[Offset: 0x1c80, Size: 8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c88, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c88, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c88, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c89, Size: 1]
	float ViewPitchMin;//[Offset: 0x1c8c, Size: 4]
	float ViewPitchMax;//[Offset: 0x1c90, Size: 4]
	float ViewYawMin;//[Offset: 0x1c94, Size: 4]
	float ViewYawMax;//[Offset: 0x1c98, Size: 4]
	float ViewRollMin;//[Offset: 0x1c9c, Size: 4]
	float ViewRollMax;//[Offset: 0x1ca0, Size: 4]
	Transform BaseCamAnimTrans;//[Offset: 0x1cb0, Size: 48]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x6785fc0
	void StopCameraFade();// 0x6785fa4
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x6785edc
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x6785e14
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x6785d4c
	void StopAllCameraShakes(bool bImmediately);// 0x6785cc0
	void StopAllCameraAnims(bool bImmediate);// 0x6785c34
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x6785a70
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x678596c
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x67858d4
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x6785850
	CameraShake* PlayCameraShakeWithWorldLocation(class CameraShake ShakeClass, Vector WorldLocation, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x67856c4
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x678557c
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x67852bc
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x6785150
	void OnPhotographySessionStart();// 0x6785134
	void OnPhotographySessionEnd();// 0x6785118
	void OnPhotographyMultiPartCaptureStart();// 0x67850fc
	void OnPhotographyMultiPartCaptureEnd();// 0x67850e0
	PlayerController* GetOwningPlayerController();// 0x67850a4
	float GetFOVAngle();// 0x6785068
	Rotator GetCameraRotation();// 0x6785030
	Vector GetCameraLocation();// 0x6784ff8
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass, bool bIncludeSuper);// 0x6784f20
	void ClearCameraLensEffects();// 0x6784f04
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0xffffff8f20d162a8
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x6784e70
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x6784ddc

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1456]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector LocationLocalSpace;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	float FOV;//[Offset: 0x24, Size: 4]
	float OrthoWidth;//[Offset: 0x28, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 4]
	float AspectRatio;//[Offset: 0x34, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	byte ProjectionMode;//[Offset: 0x39, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1376]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5a0, Size: 8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_RadialBlurCenterPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 1]
	bool bOverride_SRTOcclusionContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 1]
	bool bOverride_SRTOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 1]
	bool bOverride_SRTSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_SRTSpecularMinOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_SRTOcclusionTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 1]
	float WhiteTemp;//[Offset: 0x18, Size: 4]
	float WhiteTint;//[Offset: 0x1c, Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 16]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 16]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 16]
	Vector4 ColorGain;//[Offset: 0x50, Size: 16]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 16]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 4]
	float FilmSlope;//[Offset: 0x174, Size: 4]
	float FilmToe;//[Offset: 0x178, Size: 4]
	float FilmShoulder;//[Offset: 0x17c, Size: 4]
	float FilmBlackClip;//[Offset: 0x180, Size: 4]
	float FilmWhiteClip;//[Offset: 0x184, Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x188, Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x198, Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1a8, Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1ac, Size: 4]
	float FilmSaturation;//[Offset: 0x1b0, Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4, Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4, Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4, Size: 16]
	float FilmContrast;//[Offset: 0x1e4, Size: 4]
	float FilmToeAmount;//[Offset: 0x1e8, Size: 4]
	float FilmHealAmount;//[Offset: 0x1ec, Size: 4]
	float FilmDynamicRange;//[Offset: 0x1f0, Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x1f4, Size: 16]
	float SceneFringeIntensity;//[Offset: 0x204, Size: 4]
	byte BloomMethod;//[Offset: 0x208, Size: 1]
	float BloomIntensity;//[Offset: 0x20c, Size: 4]
	float BloomThreshold;//[Offset: 0x210, Size: 4]
	float BloomSizeScale;//[Offset: 0x214, Size: 4]
	float Bloom1Size;//[Offset: 0x218, Size: 4]
	float Bloom2Size;//[Offset: 0x21c, Size: 4]
	float Bloom3Size;//[Offset: 0x220, Size: 4]
	float Bloom4Size;//[Offset: 0x224, Size: 4]
	float Bloom5Size;//[Offset: 0x228, Size: 4]
	float Bloom6Size;//[Offset: 0x22c, Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x230, Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x240, Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x250, Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x260, Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x270, Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x280, Size: 16]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 8]
	float BloomConvolutionSize;//[Offset: 0x298, Size: 4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x29c, Size: 8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a4, Size: 12]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b0, Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b4, Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b8, Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2bc, Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2c0, Size: 8]
	float BloomDirtMaskIntensity;//[Offset: 0x2c8, Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2cc, Size: 16]
	Vector2D RadialBlurCenterPos;//[Offset: 0x2dc, Size: 8]
	float RadialBlurIntensity;//[Offset: 0x2e4, Size: 4]
	float RadialBlurDistance;//[Offset: 0x2e8, Size: 4]
	LinearColor AmbientCubemapTint;//[Offset: 0x2ec, Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2fc, Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x300, Size: 8]
	byte AutoExposureMethod;//[Offset: 0x308, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x30c, Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x310, Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x314, Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x318, Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x31c, Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x320, Size: 4]
	float AutoExposureBias;//[Offset: 0x324, Size: 4]
	float HistogramLogMin;//[Offset: 0x328, Size: 4]
	float HistogramLogMax;//[Offset: 0x32c, Size: 4]
	float LensFlareIntensity;//[Offset: 0x330, Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x334, Size: 16]
	float LensFlareBokehSize;//[Offset: 0x344, Size: 4]
	int LensFlareCount;//[Offset: 0x348, Size: 4]
	float LensFlareThreshold;//[Offset: 0x34c, Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x350, Size: 8]
	LinearColor LensFlareTints;//[Offset: 0x358, Size: 16]
	float VignetteIntensity;//[Offset: 0x3d8, Size: 4]
	float GrainJitter;//[Offset: 0x3dc, Size: 4]
	float GrainIntensity;//[Offset: 0x3e0, Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x3e4, Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3e8, Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x3ec, Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3f4, Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3f8, Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x3fc, Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x400, Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x404, Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x408, Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x40c, Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x410, Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x414, Size: 4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x418, Size: 16]
	float SRTIndirectLightingIntensity;//[Offset: 0x428, Size: 4]
	float SRTMaxOcclusionDistance;//[Offset: 0x42c, Size: 4]
	float SRTOcclusionContrast;//[Offset: 0x430, Size: 4]
	float SRTOcclusionExponent;//[Offset: 0x434, Size: 4]
	float SRTMinOcclusion;//[Offset: 0x438, Size: 4]
	float SRTSpecularOcclusionExponent;//[Offset: 0x43c, Size: 4]
	float SRTSpecularMinOcclusion;//[Offset: 0x440, Size: 4]
	LinearColor SRTOcclusionTint;//[Offset: 0x444, Size: 16]
	float SRTFilterSmoothness;//[Offset: 0x454, Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x458, Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x468, Size: 4]
	float ColorGradingIntensity;//[Offset: 0x46c, Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x470, Size: 8]
	byte DepthOfFieldMethod;//[Offset: 0x478, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x479, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x47c, Size: 4]
	float DepthOfFieldSensorWidth;//[Offset: 0x480, Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x484, Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x488, Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x48c, Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x490, Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x494, Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x498, Size: 4]
	float DepthOfFieldScale;//[Offset: 0x49c, Size: 4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x4a0, Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4a4, Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4a8, Size: 4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x4b0, Size: 8]
	float DepthOfFieldOcclusion;//[Offset: 0x4b8, Size: 4]
	float DepthOfFieldColorThreshold;//[Offset: 0x4bc, Size: 4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x4c0, Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4c4, Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4c8, Size: 4]
	float MotionBlurAmount;//[Offset: 0x4cc, Size: 4]
	float MotionBlurMax;//[Offset: 0x4d0, Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x4d4, Size: 4]
	float LPVIntensity;//[Offset: 0x4d8, Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x4dc, Size: 4]
	float LPVSize;//[Offset: 0x4e0, Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4e4, Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4e8, Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x4ec, Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4f0, Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4f4, Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4f8, Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4fc, Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x500, Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x504, Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x508, Size: 4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x50c, Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x510, Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x514, Size: 4]
	float LPVFadeRange;//[Offset: 0x518, Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x51c, Size: 4]
	float ScreenPercentage;//[Offset: 0x520, Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x528, Size: 16]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x538, Size: 4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x53c, Size: 4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x540, Size: 4]
	Object*[] Blendables;//[Offset: 0x548, Size: 16]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 16]

--------------------------------
Class: WeightedBlendable
	float weight;//[Offset: 0x0, Size: 4]
	Object* Object;//[Offset: 0x8, Size: 8]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1456]
	PlayerState* PlayerState;//[Offset: 0x5c0, Size: 8]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	byte Priority;//[Offset: 0x29, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 8]
	float AlphaInTime;//[Offset: 0x38, Size: 4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 4]
	float Alpha;//[Offset: 0x40, Size: 4]
	bool IsDisabled();// 0x666aea4
	Actor* GetViewTarget();// 0x666ae68
	void EnableModifier();// 0x666ae4c
	void DisableModifier(bool bImmediate);// 0x666adc0
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0xffffff8f20d162a8
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0xffffff8f20d162a8

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x438, Size: 8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x440, Size: 8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x448, Size: 8]
	Transform RelativeTransform;//[Offset: 0x450, Size: 48]
	float BaseFOV;//[Offset: 0x480, Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x484, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x484, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x488, Size: 16]
	float DistFromCamera;//[Offset: 0x498, Size: 4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x3e8, Size: 8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f0, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f0, Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x3f8, Size: 16]
	delegate OnParticleBurst;//[Offset: 0x408, Size: 16]
	delegate OnParticleDeath;//[Offset: 0x418, Size: 16]
	delegate OnParticleCollide;//[Offset: 0x428, Size: 16]
	void ToggleActive();// 0x6692d08
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x6692c48
	void SetTemplate(ParticleSystem* NewTemplate);// 0x6692bc4
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x6692b10
	void SetFloatParameter(FName ParameterName, float Param);// 0x6692a58
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x66929a0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x66928ec
	void OnRep_bCurrentlyActive();// 0x66928d0
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x669284c
	bool IsActive();// 0x6692814
	void Deactivate();// 0x6692800
	void Activate();// 0x66927ec

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x28, Size: 1]
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 4]
	float WarmUpTime;//[Offset: 0x34, Size: 4]
	float WarmupTickRate;//[Offset: 0x38, Size: 4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 16]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 8]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x64, Size: 4]
	bool bUseDeviceConstBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	byte LODMethod;//[Offset: 0x69, Size: 1]
	float[] LODDistances;//[Offset: 0x70, Size: 16]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x88, Size: 16]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x9c, Size: 28]
	float SecondsBeforeInactive;//[Offset: 0xb8, Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 1]
	float Delay;//[Offset: 0xc0, Size: 4]
	float DelayLow;//[Offset: 0xc4, Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xcc, Size: 4]
	enum InsignificantReaction;//[Offset: 0xd0, Size: 1]
	float InsignificanceDelay;//[Offset: 0xd4, Size: 4]
	enum MaxSignificanceLevel;//[Offset: 0xd8, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xdc, Size: 12]
	float MacroUVRadius;//[Offset: 0xe8, Size: 4]
	byte OcclusionBoundsMethod;//[Offset: 0xec, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xf0, Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0x110, Size: 16]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x120, Size: 16]
	bool ContainsEmitterType(class Object TypeData);// 0x6774280

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x38, Size: 16]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	int PeakActiveParticles;//[Offset: 0x4c, Size: 4]
	int InitialAllocationCount;//[Offset: 0x50, Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x54, Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 4]
	float GPUToCPUEmitterSpawnRateScale;//[Offset: 0x5c, Size: 4]
	byte DetailMode;//[Offset: 0x60, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 1]
	enum SignificanceLevel;//[Offset: 0x62, Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 16]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 16]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 16]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 16]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 16]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 16]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 4]
	int ActualPeakParticles;//[Offset: 0xb8, Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 8]
	Vector EmitterOrigin;//[Offset: 0x38, Size: 12]
	Rotator EmitterRotation;//[Offset: 0x44, Size: 12]
	byte ScreenAlignment;//[Offset: 0x50, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x54, Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x58, Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 1]
	byte SortMode;//[Offset: 0x5d, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e, Size: 1]
	float EmitterDuration;//[Offset: 0x60, Size: 4]
	float EmitterDurationLow;//[Offset: 0x64, Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	int EmitterLoops;//[Offset: 0x6c, Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x70, Size: 56]
	byte ParticleBurstMethod;//[Offset: 0xa8, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xb0, Size: 16]
	float EmitterDelay;//[Offset: 0xc0, Size: 4]
	float EmitterDelayLow;//[Offset: 0xc4, Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 1]
	byte InterpolationMethod;//[Offset: 0xc9, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xcc, Size: 4]
	int SubImages_Vertical;//[Offset: 0xd0, Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 1]
	float RandomImageTime;//[Offset: 0xd8, Size: 4]
	int RandomImageChanges;//[Offset: 0xdc, Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xe4, Size: 12]
	float MacroUVRadius;//[Offset: 0xf0, Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 1]
	int MaxDrawCount;//[Offset: 0xf8, Size: 4]
	enum UVFlippingMode;//[Offset: 0xfc, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0x100, Size: 8]
	byte BoundingMode;//[Offset: 0x108, Size: 1]
	byte OpacitySourceMode;//[Offset: 0x109, Size: 1]
	float AlphaThreshold;//[Offset: 0x10c, Size: 4]
	int CutoutSubImagesX;//[Offset: 0x110, Size: 4]
	int CutoutSubImagesY;//[Offset: 0x114, Size: 4]
	byte EmitterNormalsMode;//[Offset: 0x118, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0x11c, Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0x128, Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x138, Size: 16]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x148, Size: 16]
	bool bUseComputeRaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 1]
	byte LODValidity;//[Offset: 0x2a, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 4]
	float MaxValue;//[Offset: 0x2c, Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x30, Size: 8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 40]

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 1]
	byte EntryCount;//[Offset: 0x1, Size: 1]
	byte EntryStride;//[Offset: 0x2, Size: 1]
	byte SubEntryStride;//[Offset: 0x3, Size: 1]
	float TimeScale;//[Offset: 0x4, Size: 4]
	float TimeBias;//[Offset: 0x8, Size: 4]
	float[] Values;//[Offset: 0x10, Size: 16]
	byte LockFlag;//[Offset: 0x20, Size: 1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 4]
	int CountLow;//[Offset: 0x4, Size: 4]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 56]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 56]
	byte ParticleBurstMethod;//[Offset: 0xa0, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xa8, Size: 16]
	RawDistributionFloat BurstScale;//[Offset: 0xb8, Size: 56]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 16]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 4]
	int ParticleFrequency;//[Offset: 0x8, Size: 4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 16]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 80]
	OrbitOptions OffsetOptions;//[Offset: 0x80, Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x88, Size: 80]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 80]
	OrbitOptions RotationRateOptions;//[Offset: 0x130, Size: 4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 4]
	float MaxValue;//[Offset: 0x2c, Size: 4]
	Vector MinValueVec;//[Offset: 0x30, Size: 12]
	Vector MaxValueVec;//[Offset: 0x3c, Size: 12]
	DistributionVector* Distribution;//[Offset: 0x48, Size: 8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 1]
	FName EventName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x6a8, Size: 8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x6b0, Size: 16]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x6c0, Size: 16]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6d0, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d1, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6d1, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6d1, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6d1, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d2, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6d2, Size: 1]
	byte LODMethod;//[Offset: 0x6d5, Size: 1]
	enum RequiredSignificance;//[Offset: 0x6d6, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x6d8, Size: 16]
	delegate OnParticleSpawn;//[Offset: 0x6e8, Size: 16]
	delegate OnParticleBurst;//[Offset: 0x6f8, Size: 16]
	delegate OnParticleDeath;//[Offset: 0x708, Size: 16]
	delegate OnParticleCollide;//[Offset: 0x718, Size: 16]
	Vector OldPosition;//[Offset: 0x728, Size: 12]
	Vector PartSysVelocity;//[Offset: 0x734, Size: 12]
	float WarmUpTime;//[Offset: 0x740, Size: 4]
	float WarmupTickRate;//[Offset: 0x744, Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x74c, Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x754, Size: 4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x778, Size: 16]
	float CustomTimeDilation;//[Offset: 0x790, Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x7e8, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x7f0, Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x7f8, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x7f9, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x7fa, Size: 1]
	delegate OnSystemFinished;//[Offset: 0x828, Size: 16]
	bool bForceNoAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 1]
	void SetWarmUp(float WarmUpTime, float WarmUpRate);// 0x6776608
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x6776548
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x677641c
	void SetTemplate(ParticleSystem* NewTemplate);// 0x67763a0
	void SetSocketName(FName InSocketName);// 0x6776324
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x6776270
	void SetFloatParameter(FName ParameterName, float Param);// 0x67761b8
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x67760f0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x6776038
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x6775f34
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x6775e38
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x6775d34
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x6775c30
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x6775b34
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x6775a30
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x6775968
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x6775858
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x67756d0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x677561c
	void RewindEmitterInstances();// 0x6775600
	void ManuallyTickComponent(float DeltaTime);// 0x6775584
	int GetNumActiveParticles();// 0x6775550
	MaterialInterface* GetNamedMaterial(FName InName);// 0x67754bc
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x677539c
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x6775280
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x6775160
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x6775040
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x6774f24
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x6774e04
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x6774d1c
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x6774b94
	void EndTrails();// 0x6774b80
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x6774ab4
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x6774988

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 8]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 4]
	float Scalar_Low;//[Offset: 0x10, Size: 4]
	Vector Vector;//[Offset: 0x14, Size: 12]
	Vector Vector_Low;//[Offset: 0x20, Size: 12]
	Color Color;//[Offset: 0x2c, Size: 4]
	Actor* Actor;//[Offset: 0x30, Size: 8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 16]
	int ActiveTab;//[Offset: 0x38, Size: 4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 16]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 16]
	float ViewStartInput;//[Offset: 0x20, Size: 4]
	float ViewEndInput;//[Offset: 0x24, Size: 4]
	float ViewStartOutput;//[Offset: 0x28, Size: 4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 8]
	Color CurveColor;//[Offset: 0x8, Size: 4]
	FString CurveName;//[Offset: 0x10, Size: 16]
	int bHideCurve;//[Offset: 0x20, Size: 4]
	int bColorCurve;//[Offset: 0x24, Size: 4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 4]
	int bClamp;//[Offset: 0x2c, Size: 4]
	float ClampLow;//[Offset: 0x30, Size: 4]
	float ClampHigh;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 16]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 8]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x48, Size: 16]
	float SplitScreenShakeScale;//[Offset: 0x58, Size: 4]
	<class CameraShake,CacheCameraShakeData> CacheShakeInsMap;//[Offset: 0x60, Size: 80]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float OscillationDuration;//[Offset: 0x2c, Size: 4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 36]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 12]
	float AnimPlayRate;//[Offset: 0x8c, Size: 4]
	float AnimScale;//[Offset: 0x90, Size: 4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 8]
	float shakeScale;//[Offset: 0x148, Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 8]
	CurveFloat* AttenuationFloatCurve;//[Offset: 0x158, Size: 8]
	void ReceiveStopShake(bool bImmediately);// 0xffffff8f20d162a8
	void ReceivePlayShake(float Scale);// 0xffffff8f20d162a8
	bool ReceiveIsFinished();// 0x666c084
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0xffffff8f20d162a8

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 12]
	FOscillator Yaw;//[Offset: 0xc, Size: 12]
	FOscillator Roll;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 4]
	float Frequency;//[Offset: 0x4, Size: 4]
	byte InitialOffset;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 12]
	FOscillator Y;//[Offset: 0xc, Size: 12]
	FOscillator Z;//[Offset: 0x18, Size: 12]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 8]
	float AnimLength;//[Offset: 0x30, Size: 4]
	Box BoundingBox;//[Offset: 0x34, Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	float BaseFOV;//[Offset: 0x54, Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 1376]
	float BasePostProcessBlendWeight;//[Offset: 0x5c0, Size: 4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 16]
	FName GroupName;//[Offset: 0x40, Size: 8]
	Color GroupColor;//[Offset: 0x48, Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 16]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 8]
	byte ActiveCondition;//[Offset: 0x50, Size: 1]
	FString TrackTitle;//[Offset: 0x58, Size: 16]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 8]
	float PlayRate;//[Offset: 0x50, Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 8]
	byte PlaySpace;//[Offset: 0x78, Size: 1]
	void Stop(bool bImmediate);// 0x66695f8
	void SetScale(float NewDuration);// 0x666957c
	void SetDuration(float NewDuration);// 0x6669500
	void SetCurrentTime(float NewTime);// 0x6669484

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 8]
	Actor* GroupActor;//[Offset: 0x30, Size: 8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 16]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 24]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 24]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 16]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 8]
	float LinCurveTension;//[Offset: 0xb8, Size: 4]
	float AngCurveTension;//[Offset: 0xbc, Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 1]
	byte RotMode;//[Offset: 0xc1, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 16]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 4]
	Vector OutVal;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 16]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 12]
	Rotator ResetRotation;//[Offset: 0x34, Size: 12]

--------------------------------
Class: CacheCameraShakeData
	CameraShake*[] InsList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x3e8, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x3f0, Size: 8]
	SceneComponent* SceneComponent;//[Offset: 0x3f8, Size: 8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x408, Size: 1]
	float AspectRatio;//[Offset: 0x40c, Size: 4]
	float FOVAngle;//[Offset: 0x410, Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x414, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x420, Size: 1376]
	int GetAutoActivatePlayerIndex();// 0x6668dfc

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x2bc, Size: 4]
	float OrthoWidth;//[Offset: 0x2c0, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c4, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x2c8, Size: 4]
	float AspectRatio;//[Offset: 0x2cc, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 1]
	byte ProjectionMode;//[Offset: 0x2d1, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x2d4, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2e0, Size: 1376]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x898, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x666a330
	void SetProjectionMode(byte InProjectionMode);// 0x666a2b8
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x666a240
	void SetOrthoWidth(float InOrthoWidth);// 0x666a1c8
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x666a150
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x666a0d8
	void SetFieldOfView(float InFieldOfView);// 0x666a054
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x6669fc8
	void SetAspectRatio(float InAspectRatio);// 0x6669f50
	void SetActive(bool bNewActive, bool bReset);// 0x6669e78
	void RemoveBlendable(interface classNone InBlendableObject);// 0x6669de0
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x6669c78
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x6669bfc
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x6669b24

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 8]
	void Walk();// 0x66793c8
	void ViewSelf();// 0x66793ac
	void ViewPlayer(FString S);// 0x6679320
	void ViewClass(class Actor DesiredClass);// 0x667929c
	void ViewActor(FName actorName);// 0x6679218
	void ToggleDebugCamera();// 0x66791fc
	void ToggleAILogging();// 0x66791e0
	void TestCollisionDistance();// 0x66791c4
	void Teleport();// 0x66791a8
	void Summon(FString ClassName);// 0x667911c
	void StreamLevelOut(FName PackageName);// 0x6679098
	void StreamLevelIn(FName PackageName);// 0x6679014
	void Slomo(float NewTimeDilation);// 0x6678f90
	void SetWorldOrigin();// 0x6678f7c
	void SetNavDrawDistance(float DrawDistance);// 0x6678f00
	void SetMouseSensitivityToDefault();// 0x6678eec
	void ServerToggleAILogging();// 0x6678e8c
	void ReceiveInitCheatManager();// 0xffffff8f20d162a8
	void ReceiveEndPlay();// 0xffffff8f20d162a8
	void RebuildNavigation();// 0x6678e70
	void PlayersOnly();// 0x6678e54
	void OnlyLoadLevel(FName PackageName);// 0x6678dd0
	void LogLoc();// 0x6678db4
	void InvertMouse();// 0x6678da0
	void God();// 0x6678d84
	void Ghost();// 0x6678d68
	void FreezeFrame(float Delay);// 0x6678ce4
	void Fly();// 0x6678cc8
	void FlushLog();// 0x6678cac
	void EnableDebugCamera();// 0x6678c90
	void DumpVoiceMutingState();// 0x6678c74
	void DumpPartyState();// 0x6678c58
	void DumpOnlineSessionState();// 0x6678c3c
	void DumpChatState();// 0x6678c20
	void DisableDebugCamera();// 0x6678c04
	void DestroyTarget();// 0x6678be8
	void DestroyPawns(class Pawn aClass);// 0x6678b64
	void DestroyAllPawnsExceptTarget();// 0x6678b48
	void DestroyAll(class Actor aClass);// 0x6678ac4
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x6678a08
	void DebugCapsuleSweepPawn();// 0x66789ec
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x6678960
	void DebugCapsuleSweepClear();// 0x6678944
	void DebugCapsuleSweepChannel(byte Channel);// 0x66788c0
	void DebugCapsuleSweepCapture();// 0x66788a4
	void DebugCapsuleSweep();// 0x6678888
	void DamageTarget(float DamageAmount);// 0x6678804
	void CheatScript(FString ScriptName);// 0x667872c
	void ChangeSize(float F);// 0x66786a8
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x6678524
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x667837c
	void BugIt(FString ScreenShotDescription);// 0x66782f0

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x750, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x750, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x758, Size: 8]
	float SpeedScale;//[Offset: 0x780, Size: 4]
	float InitialMaxSpeed;//[Offset: 0x784, Size: 4]
	float InitialAccel;//[Offset: 0x788, Size: 4]
	float InitialDecel;//[Offset: 0x78c, Size: 4]
	void ToggleDisplay();// 0x66852d8
	void ShowDebugSelectedInfo();// 0x66852bc
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x6685240
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0xffffff8f20d162a8
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0xffffff8f20d162a8
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0xffffff8f20d162a8
	Actor* GetSelectedActor();// 0x668520c

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x6a4, Size: 4]
	float FrustumAngle;//[Offset: 0x6a8, Size: 4]
	float FrustumAspectRatio;//[Offset: 0x6ac, Size: 4]
	float FrustumStartDist;//[Offset: 0x6b0, Size: 4]
	float FrustumEndDist;//[Offset: 0x6b4, Size: 4]
	Texture* Texture;//[Offset: 0x6b8, Size: 8]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	InputTouchCacheData[] InputTouchCacheDataList;//[Offset: 0x1a8, Size: 16]
	KeyBind[] DebugExecBindings;//[Offset: 0x1c8, Size: 16]
	FName[] InvertedAxis;//[Offset: 0x208, Size: 16]
	void SetMouseSensitivity(const float Sensitivity);// 0x67936f0
	void SetBind(FName BindName, FString Command);// 0x679362c
	void InvertAxisKey(const Key AxisKey);// 0x67934d4
	void InvertAxis(const FName AxisName);// 0x6793458
	void ClearSmoothing();// 0x6793444

--------------------------------
Class: InputTouchCacheData
	int ITCDHandle;//[Offset: 0x0, Size: 4]
	int ITCDType;//[Offset: 0x4, Size: 4]
	Vector2D ITCDTouchLocation;//[Offset: 0x8, Size: 8]
	int ITCDTouchpadIndex;//[Offset: 0x10, Size: 4]
	float ITCDforce;//[Offset: 0x14, Size: 4]
	float ITCDTimeStamp;//[Offset: 0x18, Size: 4]

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 24]
	FString Command;//[Offset: 0x18, Size: 16]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 16]
	float Duration;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 120]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 112]
	CurveFloat* ExternalCurve;//[Offset: 0x70, Size: 8]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 16]
	NetDriver* Driver;//[Offset: 0x58, Size: 8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 16]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 16]
	Actor* ViewTarget;//[Offset: 0x90, Size: 8]
	Actor* OwningActor;//[Offset: 0x98, Size: 8]
	int MaxPacket;//[Offset: 0xa0, Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0x158, Size: 24]
	double LastReceiveTime;//[Offset: 0x1d8, Size: 8]
	Channel*[] ChannelsToTick;//[Offset: 0x65e40, Size: 16]
	float AsyncReplicatedActorSpawnDistA;//[Offset: 0x65e7c, Size: 4]
	float AsyncReplicatedActorSpawnDistB;//[Offset: 0x65e80, Size: 4]
	float SpawnReplicatedActorThreshold;//[Offset: 0x65e84, Size: 4]
	int SpawnReplicatedActorMaxFrameDelay;//[Offset: 0x65e88, Size: 4]
	bool bOpenClientClampDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65e8c, Size: 1]
	float ClientClampDeltaTimeMin;//[Offset: 0x65e90, Size: 4]
	float ClientClampDeltaTimeMax;//[Offset: 0x65e94, Size: 4]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x65f00, Size: 8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 16]
	int MaxDownloadSize;//[Offset: 0x40, Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x48, Size: 4]
	int MaxInternetClientRate;//[Offset: 0x4c, Size: 4]
	int MaxClientRate;//[Offset: 0x50, Size: 4]
	float ServerTravelPause;//[Offset: 0x54, Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x58, Size: 4]
	float RelevantTimeout;//[Offset: 0x5c, Size: 4]
	float KeepAliveTime;//[Offset: 0x60, Size: 4]
	float InitialConnectTimeout;//[Offset: 0x64, Size: 4]
	int IgnoreNetReadyReplicateActorCount;//[Offset: 0x68, Size: 4]
	float ConnectionTimeout;//[Offset: 0x6c, Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x70, Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x78, Size: 8]
	NetConnection*[] ClientConnections;//[Offset: 0x80, Size: 16]
	World* World;//[Offset: 0xa8, Size: 8]
	class Object* NetConnectionClass;//[Offset: 0xd0, Size: 8]
	Property* RoleProperty;//[Offset: 0xd8, Size: 8]
	Property* RemoteRoleProperty;//[Offset: 0xe0, Size: 8]
	FName NetDriverName;//[Offset: 0xe8, Size: 8]
	float Time;//[Offset: 0x138, Size: 4]
	bool bOpenClientClampDriverDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	float ClientClampDriverDeltaTimeMin;//[Offset: 0x140, Size: 4]
	float ClientClampDriverDeltaTimeMax;//[Offset: 0x144, Size: 4]

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 8]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 16]
	float ActiveOpacity;//[Offset: 0x38, Size: 4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 4]
	float TimeUntilReset;//[Offset: 0x44, Size: 4]
	float ActivationDelay;//[Offset: 0x48, Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float StartupDelay;//[Offset: 0x50, Size: 4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 8]
	Texture2D* Image2;//[Offset: 0x8, Size: 8]
	SlateBrush Brush1;//[Offset: 0x10, Size: 120]
	SlateBrush Brush2;//[Offset: 0x88, Size: 120]
	Vector2D Center;//[Offset: 0x100, Size: 8]
	Vector2D VisualSize;//[Offset: 0x108, Size: 8]
	Vector2D ThumbSize;//[Offset: 0x110, Size: 8]
	Vector2D InteractionSize;//[Offset: 0x118, Size: 8]
	Vector2D InputScale;//[Offset: 0x120, Size: 8]
	Key MainInputKey;//[Offset: 0x128, Size: 24]
	Key AltInputKey;//[Offset: 0x140, Size: 24]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 8]
	Margin Margin;//[Offset: 0x10, Size: 16]
	SlateColor TintColor;//[Offset: 0x20, Size: 40]
	Object* ResourceObject;//[Offset: 0x48, Size: 8]
	FName ResourceName;//[Offset: 0x50, Size: 8]
	Box2D UVRegion;//[Offset: 0x58, Size: 20]
	byte DrawAs;//[Offset: 0x6c, Size: 1]
	byte Tiling;//[Offset: 0x6d, Size: 1]
	byte Mirroring;//[Offset: 0x6e, Size: 1]
	byte ImageType;//[Offset: 0x6f, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 4]
	float Top;//[Offset: 0x4, Size: 4]
	float Right;//[Offset: 0x8, Size: 4]
	float Bottom;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 16]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 8]
	Vector2D Max;//[Offset: 0x8, Size: 8]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x470, Size: 4]
	float BaseLookUpRate;//[Offset: 0x474, Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x478, Size: 8]
	SphereComponent* CollisionComponent;//[Offset: 0x480, Size: 8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x488, Size: 8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x490, Size: 1]
	void TurnAtRate(float Rate);// 0x6687eb0
	void MoveUp_World(float Val);// 0x6687e2c
	void MoveRight(float Val);// 0x6687da8
	void MoveForward(float Val);// 0x6687d24
	void LookUpAtRate(float Rate);// 0x6687ca8

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x6c0, Size: 4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x67cd2d0
	float GetUnscaledSphereRadius();// 0x67cd2b4
	float GetShapeScale();// 0x67cd254
	float GetScaledSphereRadius();// 0x67cd1ec

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x6cc, Size: 4]
	int PreviousLODLevel;//[Offset: 0x6d0, Size: 4]
	int MinLOD;//[Offset: 0x6d4, Size: 4]
	int MaxLOD;//[Offset: 0x6d8, Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x6e0, Size: 8]
	Vector TightBoundsOrigin;//[Offset: 0x6e8, Size: 12]
	Vector TightBoundsBoxExtent;//[Offset: 0x6f4, Size: 12]
	float TightBoundsSphereRadius;//[Offset: 0x700, Size: 4]
	bool bEnableSimpleMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704, Size: 1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x705, Size: 1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x705, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x705, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x705, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x705, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x705, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x705, Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x705, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x706, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x706, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x706, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x706, Size: 1]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x706, Size: 1]
	bool bUseAsOccluderIgnoreMobility;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x706, Size: 1]
	bool bCanBeOccludeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x706, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x708, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x70c, Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x710, Size: 16]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x720, Size: 16]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x738, Size: 80]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x788, Size: 24]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x7a0, Size: 20]
	Actor*[] AffectPointLightBPActors;//[Offset: 0x7b8, Size: 16]
	StaticMeshPointLightVertexDataBuffer[] PointLightStaticMeshLODResources;//[Offset: 0x7c8, Size: 16]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x67db234
	void SetForcedLodModel(int NewForcedLodModel);// 0x67db1b8
	int SetDynamicInstancingParameter(int MaterialIndex, FString Name, out const Vector4 Value);// 0x67db090
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x67db014
	void SetDirty();// 0x67db000
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x67daf84
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x67dae98
	void CheckSwitchSimpleMaterial();// 0x67dae84

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x20, Size: 16]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 12]
	PackedNormal Normal;//[Offset: 0xc, Size: 4]
	Color Color;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0, Size: 1]
	byte Y;//[Offset: 0x1, Size: 1]
	byte Z;//[Offset: 0x2, Size: 1]
	byte W;//[Offset: 0x3, Size: 1]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 4]
	float TexelFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 4]
	float EmissiveBoost;//[Offset: 0xc, Size: 4]
	float DiffuseBoost;//[Offset: 0x10, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 4]
	float LightmapBoost;//[Offset: 0x4, Size: 4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8, Size: 4]
	float SunIntensity;//[Offset: 0xc, Size: 4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StaticMeshPointLightVertexDataBuffer
	byte[] VertexData;//[Offset: 0x0, Size: 16]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x128, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x138, Size: 16]
	SlateColor ForegroundColor;//[Offset: 0x148, Size: 40]
	delegate ForegroundColorDelegate;//[Offset: 0x170, Size: 16]
	Margin Padding;//[Offset: 0x180, Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x190, Size: 16]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1a0, Size: 16]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1b0, Size: 16]
	WidgetTree* WidgetTree;//[Offset: 0x1c0, Size: 8]
	bool bOptimiseAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	int Priority;//[Offset: 0x1cc, Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d0, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d0, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d0, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d0, Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d0, Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d0, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x1d8, Size: 8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1e0, Size: 16]
	void UnregisterInputComponent();// 0x5a145cc
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x5a144f4
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x5a1441c
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x5a143a0
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x5a14324
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xffffff8f20d162a8
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x5a14264
	void StopListeningForAllInputActions();// 0x5a14250
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x5a141d4
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x5a14118
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x5a14060
	void SetPadding(Margin InPadding);// 0x5a13fe4
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x5a13f68
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x5a13eec
	void SetOffsetsInViewport(Margin Margin);// 0x5a13e70
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x5a13db8
	void SetInputActionPriority(int NewPriority);// 0x5a13d3c
	void SetInputActionBlocking(bool bShouldBlock);// 0x5a13cb8
	void SetForegroundColor(SlateColor InForegroundColor);// 0x5a13b4c
	void SetDesiredSizeInViewport(Vector2D Size);// 0x5a13ad4
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x5a13a58
	void SetAnchorsInViewport(Anchors Anchors);// 0x5a139dc
	void SetAlignmentInViewport(Vector2D Alignment);// 0x5a13964
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x5a138e8
	void RemoveFromViewport();// 0x5a138d4
	void RegisterInputComponent();// 0x5a138c0
	void PreConstruct(bool IsDesignTime);// 0xffffff8f20d162a8
	void PlaySound(SoundBase* SoundToPlay);// 0x5a13844
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x5a136a0
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x5a13534
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x5a134a8
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff8f20d162a8
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff8f20d162a8
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0xffffff8f20d162a8
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff8f20d162a8
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0xffffff8f20d162a8
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8f20d162a8
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xffffff8f20d162a8
	void OnPaint(out PaintContext Context);// 0xffffff8f20d162a8
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8f20d162a8
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8f20d162a8
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0xffffff8f20d162a8
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8f20d162a8
	void OnMouseCaptureLost();// 0xffffff8f20d162a8
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8f20d162a8
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8f20d162a8
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0xffffff8f20d162a8
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0xffffff8f20d162a8
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xffffff8f20d162a8
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xffffff8f20d162a8
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0xffffff8f20d162a8
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0xffffff8f20d162a8
	void OnFocusLost(FocusEvent InFocusEvent);// 0xffffff8f20d162a8
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8f20d162a8
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8f20d162a8
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8f20d162a8
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8f20d162a8
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0xffffff8f20d162a8
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8f20d162a8
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x5a13424
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x5a133a0
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0xffffff8f20d162a8
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0xffffff8f20d162a8
	static UserWidget* NewWidgetObjectBP(Object* Outer, class Object UserWidgetClass);// 0x5a132ec
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x5a13188
	void JumpAnimation(WidgetAnimation* InAnimation, float JumpAtTime);// 0x5a130d0
	bool IsPlayingAnimation();// 0x5a130ac
	bool IsListeningForInputAction(FName ActionName);// 0x5a1301c
	bool IsInViewport();// 0x5a12fe4
	bool IsInteractable();// 0xffffff8f20d162a8
	bool IsAnyAnimationPlaying();// 0x5a12fac
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x5a12f1c
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x5a12e8c
	Widget* GetWidgetFromName(out const FName Name);// 0x5a12df0
	Widget* GetVariableWidgetFromName(out const FName Name);// 0x5a12d54
	void GetTypedChildrenOfWidget(Widget* Parent, FString Type, out Widget*[] Children);// 0x5a12bd8
	Pawn* GetOwningPlayerPawn();// 0x5a12ba4
	PlayerController* GetOwningPlayer();// 0x5a12b68
	LocalPlayer* GetOwningLocalPlayer();// 0x5a12b34
	bool GetIsVisible();// 0x5a12afc
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x5a12a70
	Anchors GetAnchorsInViewport();// 0x5a12a38
	Vector2D GetAlignmentInViewport();// 0x5a12a04
	void Destruct();// 0xffffff8f20d162a8
	void Construct();// 0xffffff8f20d162a8
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x5a1292c
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x5a12854
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x5a12704
	void AddToViewport(int ZOrder);// 0x5a12688
	bool AddToPlayerScreen(int ZOrder);// 0x5a125f8

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 16]
	FText ToolTipText;//[Offset: 0x40, Size: 24]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 16]
	bool IgnorePixelSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	delegate IgnorePixelSnappingDelegate;//[Offset: 0x98, Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0xa8, Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0xc4, Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcc, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcc, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xcc, Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xcc, Size: 1]
	byte UsedLayerPolicy;//[Offset: 0xcd, Size: 1]
	byte PreservedLayerNum;//[Offset: 0xce, Size: 1]
	byte FixedLayerPolicy;//[Offset: 0xcf, Size: 1]
	byte FixedLayerNum;//[Offset: 0xd0, Size: 1]
	bool IngoreRectMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd1, Size: 1]
	byte Cursor;//[Offset: 0xd2, Size: 1]
	enum Clipping;//[Offset: 0xd3, Size: 1]
	enum Visibility;//[Offset: 0xd4, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xd8, Size: 8]
	PropertyBinding*[] NativeBindings;//[Offset: 0x108, Size: 16]
	void SubAdvancedCollapsedCount(byte Num);// 0x5a1a248
	void SetWriteSceneZBuffer(bool bInWriteSceneZBuffer);// 0x5a1a1c4
	void SetVisibility(enum InVisibility);// 0x5a1a140
	void SetUserFocus(PlayerController* PlayerController);// 0x5a1a0c4
	void SetToolTipText(out const FText InToolTipText);// 0x5a19fdc
	void SetToolTip(Widget* Widget);// 0x5a19f60
	void SetRenderTranslation(Vector2D Translation);// 0x5a19ee8
	void SetRenderTransformPivot(Vector2D Pivot);// 0x5a19e70
	void SetRenderTransform(WidgetTransform InTransform);// 0x5a19dc4
	void SetRenderShear(Vector2D Shear);// 0x5a19d4c
	void SetRenderScale(Vector2D Scale);// 0x5a19cd4
	void SetRenderAngle(float angle);// 0x5a19c58
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x5a19b64
	void SetKeyboardFocus();// 0x5a19b50
	void SetIsEnabled(bool bInIsEnabled);// 0x5a19ac4
	void SetIgnorePixelSnapping(bool Ignore);// 0x5a19a40
	void SetCursor(byte InCursor);// 0x5a199c4
	void SetClipping(enum InClipping);// 0x5a19948
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x5a19890
	void SetAdvancedCollapsed(bool IsAdvancedCollapsed);// 0x5a1980c
	void ResetCursor();// 0x5a197f8
	void RemoveFromParent();// 0x5a197dc
	EventReply OnReply__DelegateSignature();// 0xffffff8f20d162a8
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8f20d162a8
	bool IsVisible();// 0x5a197a4
	bool IsHovered();// 0x5a1976c
	void InvalidateLayoutAndVolatility();// 0x5a19758
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x5a196c8
	bool HasUserFocus(PlayerController* PlayerController);// 0x5a19638
	bool HasMouseCapture();// 0x5a19600
	bool HasKeyboardFocus();// 0x5a195c8
	bool HasFocusedDescendants();// 0x5a19590
	bool HasAnyUserFocus();// 0x5a19558
	Widget* GetWidget__DelegateSignature();// 0xffffff8f20d162a8
	enum GetVisibility();// 0x5a19524
	FText GetText__DelegateSignature();// 0xffffff8f20d162a8
	enum GetSlateVisibility__DelegateSignature();// 0xffffff8f20d162a8
	SlateColor GetSlateColor__DelegateSignature();// 0xffffff8f20d162a8
	SlateBrush GetSlateBrush__DelegateSignature();// 0xffffff8f20d162a8
	PanelWidget* GetParent();// 0x5a194f0
	PlayerController* GetOwningPlayer();// 0x5a194b4
	byte GetMouseCursor__DelegateSignature();// 0xffffff8f20d162a8
	LinearColor GetLinearColor__DelegateSignature();// 0xffffff8f20d162a8
	bool GetIsEnabled();// 0x5a1947c
	int GetInt32__DelegateSignature();// 0xffffff8f20d162a8
	float GetFloat__DelegateSignature();// 0xffffff8f20d162a8
	Vector2D GetDesiredSize();// 0x5a19448
	enum GetClipping();// 0x5a19414
	enum GetCheckBoxState__DelegateSignature();// 0xffffff8f20d162a8
	Geometry GetCachedGeometry();// 0x5a193dc
	Geometry GetCachedAllottedGeometry();// 0x5a193a4
	bool GetBool__DelegateSignature();// 0xffffff8f20d162a8
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0xffffff8f20d162a8
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0xffffff8f20d162a8
	void ForceVolatile(bool bForce);// 0x5a19320
	void ForceLayoutPrepass();// 0x5a1930c
	void AddAdvancedCollapsedCount(byte Num);// 0x5a19278

--------------------------------
Class: Visual.Object

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x370, Size: 8]
	void SetUserTag(FName InUserTag);// 0x5a0bf6c
	FName GetUserTag();// 0x5a0bf50

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x2e0, Size: 16]
	delegate OnAnimationFinished;//[Offset: 0x2f0, Size: 16]
	MovieScene* MovieScene;//[Offset: 0x300, Size: 8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x308, Size: 16]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x5a1b75c
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x5a1b684
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x5a1b608
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x5a1b58c
	float GetStartTime();// 0x5a1b558
	float GetEndTime();// 0x5a1b524
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x5a1b44c
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x5a1b374

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x50, Size: 544]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x270, Size: 2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x278, Size: 80]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 16]

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 80]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 48]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 160]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x170, Size: 168]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 16]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	int EvaluationRunSide;//[Offset: 0x14, Size: 4]
	MovieSceneSegment[] Segments;//[Offset: 0x18, Size: 16]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x28, Size: 16]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x38, Size: 56]
	FName EvaluationGroup;//[Offset: 0x70, Size: 8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0, Size: 16]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 16]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 16]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 16]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 4]
	int NumInitPtrs;//[Offset: 0x4, Size: 4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 16]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 12]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]
	uint32 SectionIdentifier;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 80]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 80]

--------------------------------
Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0, Size: 8]
	Object* SequenceKeyObject;//[Offset: 0x8, Size: 8]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x10, Size: 8]
	Guid SourceSequenceSignature;//[Offset: 0x18, Size: 16]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x28, Size: 4]
	FloatRange PreRollRange;//[Offset: 0x2c, Size: 16]
	FloatRange PostRollRange;//[Offset: 0x3c, Size: 16]
	int HierarchicalBias;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 16]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x8, Size: 80]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x58, Size: 80]

--------------------------------
Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0, Size: 16]

--------------------------------
Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 16]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 16]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 16]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x80, Size: 16]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x90, Size: 8]
	FloatRange SelectionRange;//[Offset: 0x98, Size: 16]
	FloatRange PlaybackRange;//[Offset: 0xa8, Size: 16]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	float FixedFrameInterval;//[Offset: 0xbc, Size: 4]
	float InTime;//[Offset: 0xc0, Size: 4]
	float OutTime;//[Offset: 0xc4, Size: 4]
	float StartTime;//[Offset: 0xc8, Size: 4]
	float EndTime;//[Offset: 0xcc, Size: 4]

--------------------------------
Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 16]
	Object* ObjectTemplate;//[Offset: 0x20, Size: 8]
	Guid[] ChildPossessables;//[Offset: 0x28, Size: 16]
	enum Ownership;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 16]
	class Object* PossessedObjectClass;//[Offset: 0x20, Size: 8]
	Guid ParentGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 16]
	FString BindingName;//[Offset: 0x10, Size: 16]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 4]
	int EvaluationRunSide;//[Offset: 0x54, Size: 4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 16]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 8]
	Widget* Content;//[Offset: 0x8, Size: 8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 8]
	int[] VariableWidgetMarks;//[Offset: 0x30, Size: 16]
	Widget*[] AllWidgets;//[Offset: 0x50, Size: 16]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 8]
	delegate Delegate;//[Offset: 0x8, Size: 16]
	enum AnimationEvent;//[Offset: 0x18, Size: 1]
	FName UserTag;//[Offset: 0x20, Size: 8]

--------------------------------
Class: Geometry

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x58, Size: 8]
	byte AspectRatioAxisConstraint;//[Offset: 0x7c, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x80, Size: 8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	int ControllerId;//[Offset: 0x108, Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x38, Size: 8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x40, Size: 16]
	World* World;//[Offset: 0x78, Size: 8]
	GameInstance* GameInstance;//[Offset: 0x80, Size: 8]
	void SSSwapControllers();// 0x66bef78
	void ShowTitleSafeArea();// 0x66bef5c
	void SetConsoleTarget(int PlayerIndex);// 0x66beed8

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 16]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 8]
	class Object* WithinClass;//[Offset: 0x8, Size: 8]

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x38, Size: 16]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x48, Size: 16]
	OnlineSession* OnlineSession;//[Offset: 0x58, Size: 8]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	void ReceiveShutdown();// 0xffffff8f20d162a8
	void ReceiveInit();// 0xffffff8f20d162a8
	void HandleTravelError(byte FailureType);// 0xffffff8f20d162a8
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0xffffff8f20d162a8
	void DebugRemovePlayer(int ControllerId);// 0x66a87c8
	void DebugCreatePlayer(int ControllerId);// 0x66a8744

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 8]
	Vector2D Maximum;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x38, Size: 8]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x40, Size: 12]
	byte MaxConcurrentResolutionRule;//[Offset: 0x4c, Size: 1]
	int MaxConcurrentPlayCount;//[Offset: 0x50, Size: 4]
	float Duration;//[Offset: 0x54, Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x58, Size: 8]
	float Priority;//[Offset: 0x60, Size: 4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x68, Size: 8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x70, Size: 16]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x80, Size: 8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x88, Size: 16]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 40]
	SoundClass*[] ChildClasses;//[Offset: 0x50, Size: 16]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x60, Size: 16]
	SoundClass* ParentClass;//[Offset: 0x70, Size: 8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 4]
	float Pitch;//[Offset: 0x4, Size: 4]
	float StereoBleed;//[Offset: 0x8, Size: 4]
	float LFEBleed;//[Offset: 0xc, Size: 4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	byte OutputTarget;//[Offset: 0x25, Size: 1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float EQPriority;//[Offset: 0x2c, Size: 4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 56]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x68, Size: 16]
	float InitialDelay;//[Offset: 0x78, Size: 4]
	float FadeInTime;//[Offset: 0x7c, Size: 4]
	float Duration;//[Offset: 0x80, Size: 4]
	float FadeOutTime;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 4]
	float Gain0;//[Offset: 0xc, Size: 4]
	float Bandwidth0;//[Offset: 0x10, Size: 4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 4]
	float Gain1;//[Offset: 0x18, Size: 4]
	float Bandwidth1;//[Offset: 0x1c, Size: 4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 4]
	float Gain2;//[Offset: 0x24, Size: 4]
	float Bandwidth2;//[Offset: 0x28, Size: 4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 4]
	float Gain3;//[Offset: 0x30, Size: 4]
	float Bandwidth3;//[Offset: 0x34, Size: 4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 4]
	float PitchAdjuster;//[Offset: 0xc, Size: 4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 12]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x5, Size: 1]
	float VolumeScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 696]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa4, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa4, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa4, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa4, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa4, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa4, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa4, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa5, Size: 1]
	byte DistanceType;//[Offset: 0xa6, Size: 1]
	float OmniRadius;//[Offset: 0xa8, Size: 4]
	float StereoSpread;//[Offset: 0xac, Size: 4]
	byte SpatializationAlgorithm;//[Offset: 0xb0, Size: 1]
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0xb8, Size: 8]
	float RadiusMin;//[Offset: 0xc0, Size: 4]
	float RadiusMax;//[Offset: 0xc4, Size: 4]
	float LPFRadiusMin;//[Offset: 0xc8, Size: 4]
	float LPFRadiusMax;//[Offset: 0xcc, Size: 4]
	enum AbsorptionMethod;//[Offset: 0xd0, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd8, Size: 120]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x150, Size: 120]
	float LPFFrequencyAtMin;//[Offset: 0x1c8, Size: 4]
	float LPFFrequencyAtMax;//[Offset: 0x1cc, Size: 4]
	float HPFFrequencyAtMin;//[Offset: 0x1d0, Size: 4]
	float HPFFrequencyAtMax;//[Offset: 0x1d4, Size: 4]
	float FocusAzimuth;//[Offset: 0x1d8, Size: 4]
	float NonFocusAzimuth;//[Offset: 0x1dc, Size: 4]
	float FocusDistanceScale;//[Offset: 0x1e0, Size: 4]
	float NonFocusDistanceScale;//[Offset: 0x1e4, Size: 4]
	float FocusPriorityScale;//[Offset: 0x1e8, Size: 4]
	float NonFocusPriorityScale;//[Offset: 0x1ec, Size: 4]
	float FocusVolumeAttenuation;//[Offset: 0x1f0, Size: 4]
	float NonFocusVolumeAttenuation;//[Offset: 0x1f4, Size: 4]
	float FocusAttackInterpSpeed;//[Offset: 0x1f8, Size: 4]
	float FocusReleaseInterpSpeed;//[Offset: 0x1fc, Size: 4]
	byte OcclusionTraceChannel;//[Offset: 0x200, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x204, Size: 4]
	float OcclusionVolumeAttenuation;//[Offset: 0x208, Size: 4]
	float OcclusionInterpolationTime;//[Offset: 0x20c, Size: 4]
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x210, Size: 8]
	enum ReverbSendMethod;//[Offset: 0x218, Size: 1]
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x220, Size: 8]
	float ReverbWetLevelMin;//[Offset: 0x228, Size: 4]
	float ReverbWetLevelMax;//[Offset: 0x22c, Size: 4]
	float ReverbDistanceMin;//[Offset: 0x230, Size: 4]
	float ReverbDistanceMax;//[Offset: 0x234, Size: 4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 120]
	float ManualReverbSendLevel;//[Offset: 0x2b0, Size: 4]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x10, Size: 120]
	byte AttenuationShape;//[Offset: 0x88, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0x8c, Size: 4]
	Vector AttenuationShapeExtents;//[Offset: 0x90, Size: 12]
	float ConeOffset;//[Offset: 0x9c, Size: 4]
	float FalloffDistance;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x28, Size: 16]
	SoundSubmix* ParentSubmix;//[Offset: 0x38, Size: 8]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x40, Size: 16]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSubmix* SoundSubmix;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 16]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x27c, Size: 1]
	float SourceBusDuration;//[Offset: 0x280, Size: 4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x284, Size: 1]

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x9c, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 1]
	int StreamingPriority;//[Offset: 0xa4, Size: 4]
	bool bMature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa8, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa8, Size: 1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa8, Size: 1]
	byte SoundGroup;//[Offset: 0xaa, Size: 1]
	FString SpokenText;//[Offset: 0xb0, Size: 16]
	float SubtitlePriority;//[Offset: 0xc0, Size: 4]
	float Volume;//[Offset: 0xc4, Size: 4]
	float Pitch;//[Offset: 0xc8, Size: 4]
	int NumChannels;//[Offset: 0xcc, Size: 4]
	int SampleRate;//[Offset: 0xd0, Size: 4]
	int RawPCMDataSize;//[Offset: 0xd4, Size: 4]
	SubtitleCue[] Subtitles;//[Offset: 0xd8, Size: 16]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0xe8, Size: 16]
	CurveTable* Curves;//[Offset: 0xf8, Size: 8]
	CurveTable* InternalCurves;//[Offset: 0x100, Size: 8]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 24]
	float Time;//[Offset: 0x18, Size: 4]

--------------------------------
Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 16]
	SubtitleCue[] Subtitles;//[Offset: 0x10, Size: 16]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 16]
	Object* Payload;//[Offset: 0x38, Size: 8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 8]
	enum Pivot;//[Offset: 0x48, Size: 1]
	Vector2D Offset;//[Offset: 0x4c, Size: 8]
	delegate OnDrop;//[Offset: 0x58, Size: 16]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 16]
	delegate OnDragged;//[Offset: 0x78, Size: 16]
	void Drop(out const PointerEvent PointerEvent);// 0x59f525c
	void Dragged(out const PointerEvent PointerEvent);// 0x59f5118
	void DragCancelled(out const PointerEvent PointerEvent);// 0x59f4fd4

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 8]
	Widget* Content;//[Offset: 0x30, Size: 8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x120, Size: 16]
	bool RemoveChildAt(int Index);// 0x59fef98
	bool RemoveChild(Widget* Content);// 0x59fef08
	bool HasChild(Widget* Content);// 0x59fee78
	bool HasAnyChildren();// 0x59fee40
	int GetChildrenCount();// 0x59fee0c
	int GetChildIndex(Widget* Content);// 0x59fed80
	Widget* GetChildAt(int Index);// 0x59fecf4
	void ClearChildren();// 0x59fece0
	PanelSlot* AddChild(Widget* Content);// 0x59fec54

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 8]
	Vector2D Scale;//[Offset: 0x8, Size: 8]
	Vector2D Shear;//[Offset: 0x10, Size: 8]
	float angle;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 24]
	WidgetNavigationData Down;//[Offset: 0x40, Size: 24]
	WidgetNavigationData Left;//[Offset: 0x58, Size: 24]
	WidgetNavigationData Right;//[Offset: 0x70, Size: 24]
	WidgetNavigationData Next;//[Offset: 0x88, Size: 24]
	WidgetNavigationData Previous;//[Offset: 0xa0, Size: 24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 8]
	Widget* Widget;//[Offset: 0x10, Size: 8]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 16]
	FName DestinationProperty;//[Offset: 0x40, Size: 8]

--------------------------------
Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 16]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* Struct;//[Offset: 0x10, Size: 8]
	Field* Field;//[Offset: 0x18, Size: 8]

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 4]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 4]
	int UUID;//[Offset: 0x4, Size: 4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 8]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x3e8, Size: 8]
	FName MatineeControllerName;//[Offset: 0x3f0, Size: 8]
	float PlayRate;//[Offset: 0x3f8, Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fc, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3fc, Size: 1]
	float ForceStartPosition;//[Offset: 0x400, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x404, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x404, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x404, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x404, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x404, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x404, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x404, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x404, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x408, Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40c, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40c, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40c, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40c, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x410, Size: 16]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x420, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x428, Size: 16]
	CameraCutInfo[] CameraCuts;//[Offset: 0x438, Size: 16]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x448, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x448, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x448, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x448, Size: 1]
	float InterpPosition;//[Offset: 0x44c, Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x454, Size: 1]
	delegate OnPlay;//[Offset: 0x458, Size: 16]
	delegate OnStop;//[Offset: 0x468, Size: 16]
	delegate OnPause;//[Offset: 0x478, Size: 16]
	void Stop();// 0x6744fd8
	void SetPosition(float NewPosition, bool bJump);// 0x6744f18
	void SetLoopingState(bool bNewLooping);// 0x6744e8c
	void Reverse();// 0x6744e70
	void Play();// 0x6744e54
	void Pause();// 0x6744e38
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x6744d1c
	void ChangePlaybackDirection();// 0x6744d00

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 4]
	float PathBuildTime;//[Offset: 0x2c, Size: 4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 16]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 8]
	float EdSectionStart;//[Offset: 0x48, Size: 4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 16]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 8]
	Actor*[] Actors;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	float TimeStamp;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x2c0, Size: 8]
	Actor* ChildActor;//[Offset: 0x2c8, Size: 8]
	bool bAllowTemplateModification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	Actor* ChildActorTemplate;//[Offset: 0x2d8, Size: 8]
	bool IsDestoryChildActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	delegate OnChildActorRep;//[Offset: 0x2f8, Size: 16]
	bool bKeepChildActorComponet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool bEnableReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 1]
	bool bDumpChildActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a, Size: 1]
	void SetChildActorClass(class Actor InClass);// 0x667a96c
	void OnRep_ChildActor();// 0x667a958

--------------------------------
Class: ScriptNetworkRemoteContent
	byte[] Content;//[Offset: 0x0, Size: 16]
	int ContentNumBits;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 16]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e8, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0xffffff8f20d162a8
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x6724314
	bool RemoteEvent(FName EventName);// 0x672427c
	void LevelReset();// 0xffffff8f20d162a8

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
	int Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x3f0, Size: 8]
	BillboardComponent* GoodSprite;//[Offset: 0x3f8, Size: 8]
	BillboardComponent* BadSprite;//[Offset: 0x400, Size: 8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x408, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x6a8, Size: 8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b0, Size: 1]
	float ScreenSize;//[Offset: 0x6b4, Size: 4]
	float U;//[Offset: 0x6b8, Size: 4]
	float UL;//[Offset: 0x6bc, Size: 4]
	float V;//[Offset: 0x6c0, Size: 4]
	float VL;//[Offset: 0x6c4, Size: 4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x6655090
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x6654f24
	void SetSprite(Texture2D* NewSprite);// 0x6654ea0

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	Vector2D[] FOVCulling;//[Offset: 0x3f8, Size: 16]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x408, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x408, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x408, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x408, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x408, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x408, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x408, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x408, Size: 1]
	float KillZ;//[Offset: 0x40c, Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x410, Size: 8]
	float WorldGravityZ;//[Offset: 0x418, Size: 4]
	float GlobalGravityZ;//[Offset: 0x41c, Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x420, Size: 8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x428, Size: 8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x430, Size: 8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x438, Size: 8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x440, Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x444, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x448, Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x454, Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x458, Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 1]
	float MaxWorldSize;//[Offset: 0x460, Size: 4]
	int RegionSizeNear;//[Offset: 0x464, Size: 4]
	int RegionSizeFar;//[Offset: 0x468, Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46d, Size: 1]
	bool UnlimitedRegionZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46e, Size: 1]
	int Graduation;//[Offset: 0x470, Size: 4]
	int CompositionSize;//[Offset: 0x474, Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x478, Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47c, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47c, Size: 1]
	int VisibilityCellSize;//[Offset: 0x480, Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x484, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x485, Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x488, Size: 80]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x4d8, Size: 100]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x540, Size: 24]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x558, Size: 36]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x580, Size: 8]
	float WorldToMeters;//[Offset: 0x588, Size: 4]
	float MonoCullingDistance;//[Offset: 0x58c, Size: 4]
	BookMark* BookMarks;//[Offset: 0x590, Size: 8]
	float TimeDilation;//[Offset: 0x5e0, Size: 4]
	float MatineeTimeDilation;//[Offset: 0x5e4, Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x5e8, Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x5ec, Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x5f0, Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x5f4, Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x5f8, Size: 4]
	PlayerState* Pauser;//[Offset: 0x600, Size: 8]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x608, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x608, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x610, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x620, Size: 16]
	float[] LODRelativeDistances;//[Offset: 0x630, Size: 16]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 1]
	int WorldCompositionNums;//[Offset: 0x644, Size: 4]
	int CompositionBlockLength;//[Offset: 0x648, Size: 4]
	bool bEnableObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 1]
	void OnRep_WorldGravityZ();// 0x67f3124

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x3f0, Size: 16]
	class GameSession* GameSessionClass;//[Offset: 0x400, Size: 8]
	class GameStateBase* GameStateClass;//[Offset: 0x408, Size: 8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x410, Size: 8]
	class PlayerState* PlayerStateClass;//[Offset: 0x418, Size: 8]
	class HUD* HUDClass;//[Offset: 0x420, Size: 8]
	class Pawn* DefaultPawnClass;//[Offset: 0x428, Size: 8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x430, Size: 8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x438, Size: 8]
	GameSession* GameSession;//[Offset: 0x440, Size: 8]
	GameStateBase* GameState;//[Offset: 0x448, Size: 8]
	FText DefaultPlayerName;//[Offset: 0x450, Size: 24]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x468, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x468, Size: 1]
	void StartPlay();// 0x66aa924
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x66aa858
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x66aa760
	bool ShouldReset(Actor* ActorToReset);// 0x66aa6c8
	void ReturnToMainMenuHost();// 0x66aa6ac
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x66aa5c4
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x66aa508
	void RestartPlayer(Controller* NewPlayer);// 0x66aa484
	void ResetLevel();// 0x66aa468
	bool PlayerCanRestart(PlayerController* Player);// 0x66aa3d0
	bool MustSpectate(PlayerController* NewPlayerController);// 0x66aa338
	void K2_PostLogin(PlayerController* NewPlayer);// 0xffffff8f20d162a8
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0xffffff8f20d162a8
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0xffffff8f20d162a8
	void K2_OnLogout(Controller* ExitingController);// 0xffffff8f20d162a8
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0xffffff8f20d162a8
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x66aa264
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x66aa1a8
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x66aa124
	bool HasMatchStarted();// 0x66aa0e4
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x66aa060
	int GetNumSpectators();// 0x66aa024
	int GetNumPlayers();// 0x66a9fe8
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x66a9f54
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x66a9e78
	Actor* ChoosePlayerStart(Controller* Player);// 0x66a9de4
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x66a9cd4
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x66a9c04

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x3e8, Size: 4]
	int MaxPlayers;//[Offset: 0x3ec, Size: 4]
	int MaxPartySize;//[Offset: 0x3f0, Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x3f4, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f5, Size: 1]
	FName SessionName;//[Offset: 0x3f8, Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x3e8, Size: 8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x3f0, Size: 8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x3f8, Size: 8]
	PlayerState*[] PlayerArray;//[Offset: 0x400, Size: 16]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x414, Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x418, Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x41c, Size: 4]
	bool bRecordControllerReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	void OnRep_SpectatorClass();// 0x66bc04c
	void OnRep_ReplicatedWorldTimeSeconds();// 0x66bc030
	void OnRep_ReplicatedHasBegunPlay();// 0x66bc014
	void OnRep_RecordControllerReplay();// 0x66bbff8
	void OnRep_GameModeClass();// 0x66bbfdc
	bool HasMatchStarted();// 0x66bbf9c
	bool HasBegunPlay();// 0x66bbf5c
	float GetServerWorldTimeSecondsForReplay();// 0x66bbf28
	float GetServerWorldTimeSeconds();// 0x66bbeec
	float GetPlayerStartTime(Controller* Controller);// 0x66bbe58
	float GetPlayerRespawnDelay(Controller* Controller);// 0x66bbdc4

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x3e8, Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x3ec, Size: 4]
	int TotalNetBandwidth;//[Offset: 0x3f0, Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x3f4, Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x3f8, Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fc, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3fc, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x400, Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x404, Size: 4]
	int BadPingThreshold;//[Offset: 0x408, Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x40c, Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x410, Size: 4]
	float PercentForBadPing;//[Offset: 0x414, Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x418, Size: 4]
	float MoveRepSize;//[Offset: 0x41c, Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x420, Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x424, Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x428, Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x42c, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x430, Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x434, Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x438, Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x43c, Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x440, Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x444, Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x44c, Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x454, Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x458, Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x45c, Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x460, Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x465, Size: 1]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 4]
	float DiffuseBoost;//[Offset: 0x20, Size: 4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30, Size: 4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 4]
	float OcclusionExponent;//[Offset: 0x40, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 4]
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bUseSimpleLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]

--------------------------------
Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0, Size: 1]
	int NumCoarseSamples;//[Offset: 0x4, Size: 4]
	int NumSamples;//[Offset: 0x8, Size: 4]
	int NumLightingBounces;//[Offset: 0xc, Size: 4]
	float LightmapBoost;//[Offset: 0x10, Size: 4]
	float SunHardness;//[Offset: 0x14, Size: 4]
	enum BakingMode;//[Offset: 0x18, Size: 1]
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	float LocalOcclusionRadius;//[Offset: 0x1c, Size: 4]
	float LocalOcclusionFallOff;//[Offset: 0x20, Size: 4]
	float LocalOcclusionDistribution;//[Offset: 0x24, Size: 4]
	float LocalOcclusionFadeRatio;//[Offset: 0x28, Size: 4]
	int LocalOcclusionRes;//[Offset: 0x2c, Size: 4]
	int LocalOcclusionMultiple;//[Offset: 0x30, Size: 4]
	float LocalOcclusionPower;//[Offset: 0x34, Size: 4]
	int LocalOcclusionDenoising;//[Offset: 0x38, Size: 4]
	int LocalOcclusionDilation;//[Offset: 0x3c, Size: 4]
	int NumDenoisingIterators;//[Offset: 0x40, Size: 4]
	int NumDilationIterators;//[Offset: 0x44, Size: 4]
	int DirectLightDenoising;//[Offset: 0x48, Size: 4]
	float RayTraceMaxDistance;//[Offset: 0x4c, Size: 4]
	float RayTraceBias;//[Offset: 0x50, Size: 4]
	float RetraceDistance;//[Offset: 0x54, Size: 4]
	float SmallestTexelRadius;//[Offset: 0x58, Size: 4]
	uint32 AreaLightSampleCount;//[Offset: 0x5c, Size: 4]
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bWithGrayDiffuse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	byte ReverbType;//[Offset: 0x1, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 8]
	float Volume;//[Offset: 0x10, Size: 4]
	float FadeTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 4]
	float Diffusion;//[Offset: 0x2c, Size: 4]
	float Gain;//[Offset: 0x30, Size: 4]
	float GainHF;//[Offset: 0x34, Size: 4]
	float DecayTime;//[Offset: 0x38, Size: 4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 4]
	float ReflectionsGain;//[Offset: 0x40, Size: 4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 4]
	float LateGain;//[Offset: 0x48, Size: 4]
	float LateDelay;//[Offset: 0x4c, Size: 4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 4]
	float ExteriorTime;//[Offset: 0x8, Size: 4]
	float ExteriorLPF;//[Offset: 0xc, Size: 4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 4]
	float InteriorVolume;//[Offset: 0x14, Size: 4]
	float InteriorTime;//[Offset: 0x18, Size: 4]
	float InteriorLPF;//[Offset: 0x1c, Size: 4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	FString[] HiddenLevels;//[Offset: 0x40, Size: 16]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 8]
	Actor* InViewer;//[Offset: 0x8, Size: 8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 8]
	Vector ViewLocation;//[Offset: 0x18, Size: 12]
	Vector ViewDir;//[Offset: 0x24, Size: 12]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x28, Size: 8]
	World* WorldAsset;//[Offset: 0x30, Size: 40]
	FName PackageNameToLoad;//[Offset: 0x58, Size: 8]
	FName[] LODPackageNames;//[Offset: 0x60, Size: 16]
	Transform LevelTransform;//[Offset: 0x80, Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	int LevelLODIndex;//[Offset: 0xb4, Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 1]
	Color DrawColor;//[Offset: 0xbc, Size: 4]
	LinearColor LevelColor;//[Offset: 0xc0, Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 16]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 4]
	FString[] Keywords;//[Offset: 0xe8, Size: 16]
	delegate OnLevelLoaded;//[Offset: 0xf8, Size: 16]
	delegate OnLevelUnloaded;//[Offset: 0x108, Size: 16]
	delegate OnLevelShown;//[Offset: 0x118, Size: 16]
	delegate OnLevelHidden;//[Offset: 0x128, Size: 16]
	Level* LoadedLevel;//[Offset: 0x138, Size: 8]
	Level* PendingUnloadLevel;//[Offset: 0x140, Size: 8]
	Level*[] UnloadingLevels;//[Offset: 0x148, Size: 16]
	bool IsStreamingStatePending();// 0x6724bc4
	bool IsLevelVisible();// 0x6724b8c
	bool IsLevelLoaded();// 0x6724b68
	FName GetWorldAssetPackageFName();// 0x6724b34
	Level* GetLoadedLevel();// 0x6724b18
	LevelScriptActor* GetLevelScriptActor();// 0x6724ae4
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x6724a04

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x420, Size: 16]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x430, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x430, Size: 1]
	byte StreamingUsage;//[Offset: 0x431, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x620, Size: 80]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x974, Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ad, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x9c8, Size: 8]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 8]
	Level* Level;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: WorldRegionManager
	World* World;//[Offset: 0xf8, Size: 8]
	<RegionID,RegionObjectItemList> RegionIDToObjectList_Static;//[Offset: 0x100, Size: 80]
	<RegionID,RegionObjectItemList> RegionIDToObjectList_NonStatic;//[Offset: 0x150, Size: 80]
	<Object*,RegionID> ObjectToRegionID_NonStatic;//[Offset: 0x1a0, Size: 80]

--------------------------------
Class: RegionID

--------------------------------
Class: RegionObjectItemList
	RegionObjectItem[] List;//[Offset: 0x0, Size: 16]

--------------------------------
Class: RegionObjectItem
	Object* Target;//[Offset: 0x0, Size: 8]

--------------------------------
Class: WorldParallelismManager
	World* World;//[Offset: 0x38, Size: 8]
	ParallelWorldPlayerInfo[] Players;//[Offset: 0x40, Size: 16]
	<uint32,GameModeBase*> ParallelGameModes;//[Offset: 0x50, Size: 80]
	<uint32,GameStateBase*> ParallelGameStates;//[Offset: 0xa0, Size: 80]

--------------------------------
Class: ParallelWorldPlayerInfo
	uint32 WorldParallelismID;//[Offset: 0x0, Size: 4]
	FString PlayerName;//[Offset: 0x8, Size: 16]
	PlayerController* PlayerController;//[Offset: 0x18, Size: 8]

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x28, Size: 8]
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 8]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x68, Size: 8]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x70, Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x70, Size: 1]
	enum DataGatheringMode;//[Offset: 0x71, Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72, Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x74, Size: 4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x78, Size: 16]
	float DirtyAreasUpdateFreq;//[Offset: 0x88, Size: 4]
	NavigationData*[] NavDataSet;//[Offset: 0x90, Size: 16]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0xa0, Size: 16]
	delegate OnNavDataRegisteredEvent;//[Offset: 0x110, Size: 16]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0x120, Size: 16]
	enum OperationMode;//[Offset: 0x1fc, Size: 1]
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x675408c
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x6754010
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x6753f4c
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x6753ea0
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x6753e24
	void SetGeometryGatheringMode(enum NewMode);// 0x6753da8
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x6753d94
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x6753ca4
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x6753b10
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x6753a94
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x6753894
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x67536ac
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x67534cc
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x67532ec
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x675326c
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x67531ec
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6753060
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6752ed4
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector pathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6752cdc
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector pathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6752ae4
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x6752a68
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector pathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x67528c8
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x6752704

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: DynamicGenerateTargetNavigation
	Vector TargetLocation;//[Offset: 0x0, Size: 12]
	float GenerateRadiusMin;//[Offset: 0xc, Size: 4]
	float GenerateRadiusMax;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 16]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 8]
	float TravelCostOverride;//[Offset: 0x8, Size: 4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x420, Size: 4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 16]
	Vector[] PathPoints;//[Offset: 0x38, Size: 16]
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 1]
	bool IsValid();// 0x6751bdc
	bool IsStringPulled();// 0x6751ba4
	bool IsPartial();// 0x6751b6c
	float GetPathLength();// 0x6751b38
	float GetPathCost();// 0x6751b04
	FString GetDebugString();// 0x6751a84
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x6751a00
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x6751938

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 24]
	FName AISystemModuleName;//[Offset: 0x40, Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 4]
	float TestHeightDifference;//[Offset: 0x44, Size: 4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x66549c4
	int GetObjectCount();// 0x6654990
	int GetNewAvoidanceUID();// 0x665495c
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x66548cc

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 8]
	<Level*> Levels;//[Offset: 0x28, Size: 80]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 8]
	World* World;//[Offset: 0x38, Size: 8]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0xe0, Size: 16]
	double TilesStreamingTimeThreshold;//[Offset: 0xf0, Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	float RebaseOriginDistance;//[Offset: 0xfc, Size: 4]
	float TileBoundsVerifyScale;//[Offset: 0x100, Size: 4]
	bool bFlushPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	FString[] ServerExcludedLevels;//[Offset: 0x108, Size: 16]
	FString[] ClientExcludedLevels;//[Offset: 0x118, Size: 16]
	FString[] UGCWhiteListSubLevelPaths;//[Offset: 0x128, Size: 16]
	FString[] DeviceExcludedLevels;//[Offset: 0x138, Size: 16]

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x410, Size: 8]

--------------------------------
Class: Editor_login_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3f0, Size: 8]
	void InitSplashUI();// 0xffffff8f20d162a8
	void InpActEvt_Escape_K2Node_InputKeyEvent(Key Key);// 0xffffff8f20d162a8
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0xffffff8f20d162a8
	void ReceiveBeginPlay();// 0xffffff8f20d162a8
	void ExecuteUbergraph_Editor_login(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue2, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess2, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, int CallFunc_GetDeviceLevel_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess3, LuaClassObj* CallFunc_GetLuaObject_ReturnValue, Key K2Node_InputKeyEvent_Key, GameInstance* CallFunc_GetGameInstance_ReturnValue3, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess4, GameInstance* CallFunc_GetGameInstance_ReturnValue4, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance3, bool K2Node_DynamicCast_bSuccess5, FrontendUtils* CallFunc_GetUtils_ReturnValue, bool CallFunc_UseStartupLevel_ReturnValue, Key K2Node_InputKeyEvent_Key2);// 0xffffff8f20d162a8
	UAEUserWidget* loginWindow;//[Offset: 0x3f8, Size: 8]
	CameraActor* CameraActorLogin_ExecuteUbergraph_Editor_login_RefProperty;//[Offset: 0x400, Size: 8]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x200, Size: 216]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x308, Size: 8]
	UIMsgRouter* AssociatedUIMsgRouter;//[Offset: 0x310, Size: 8]
	bool StopRecordingReplayByType(enum ReplayType);// 0x42e5f3c
	bool StartRecordingReplayByType(enum ReplayType, bool bSkipConditionCheck, enum RecordCondition, FString TargetName);// 0x42e5ddc
	void StartLocalReplayContex();// 0x42e5dc8
	void LocalReplayRecordingStop();// 0x42e5db4
	void LocalReplayRecording(FString ReplayFile);// 0x42e5d30
	void LocalReplayPlaying(FString ReplayFile);// 0x42e5cac
	float GetWeatherTime();// 0x42e5c90
	int GetWeatherID();// 0x42e5c74
	FString GetGameID();// 0x42e5be8
	int GetDeviceLevel();// 0x42e5bac
	FrontendHUD* GetAssociatedFrontendHUD();// 0x42e5b78
	void ClientStartLuaDebuger(bool bDebugDS, FString IP, int Port);// 0x42e5a20
	void AkEvents();// 0x42e5a0c
	void AkBanks();// 0x42e59f8

--------------------------------
Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 16]
	uint64 RoleID;//[Offset: 0x10, Size: 8]
	FString GameSvrId;//[Offset: 0x18, Size: 16]
	FString GameAppID;//[Offset: 0x28, Size: 16]
	int8 AreaID;//[Offset: 0x38, Size: 1]
	int8 PlatID;//[Offset: 0x39, Size: 1]
	FString ZoneID;//[Offset: 0x40, Size: 16]
	uint64 BattleID;//[Offset: 0x50, Size: 8]
	uint64 GameID;//[Offset: 0x58, Size: 8]
	FString BattleServerIP;//[Offset: 0x60, Size: 16]
	uint32 BattleServerPort;//[Offset: 0x70, Size: 4]
	FString UserName;//[Offset: 0x78, Size: 16]
	FString PicURL;//[Offset: 0x88, Size: 16]
	uint32 PlayerKey;//[Offset: 0x98, Size: 4]
	int SubModeId;//[Offset: 0x9c, Size: 4]
	int8 WeatherID;//[Offset: 0xa4, Size: 1]
	FString WeatherLevelName;//[Offset: 0xa8, Size: 16]
	float WeatherTime;//[Offset: 0xb8, Size: 4]
	int[] MrpcsData;//[Offset: 0xc0, Size: 16]
	uint32 loginChannel;//[Offset: 0xd4, Size: 4]

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x40, Size: 8]
	FString FrontendUtilsClassName;//[Offset: 0x50, Size: 16]
	FrontendUtils* Utils;//[Offset: 0x60, Size: 8]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x68, Size: 16]
	<FName,LogicManagerBase*> LogicManagerMap;//[Offset: 0x78, Size: 80]
	int UnusedWidgetMinCount;//[Offset: 0xc8, Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0xcc, Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0xd0, Size: 4]
	FName CurrentGameStatus;//[Offset: 0xe8, Size: 8]
	FName PendingGameStatus;//[Offset: 0xf0, Size: 8]
	FName FromGameStatus;//[Offset: 0xf8, Size: 8]
	FString LatestGameStatusURL;//[Offset: 0x108, Size: 16]
	World* CurrentGameStatusWorld;//[Offset: 0x118, Size: 8]
	FrontendHUDExtension* Extension;//[Offset: 0x120, Size: 8]
	void UninstallExtension();// 0x6926c84
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x6926b5c
	void OnWidgetAnimationFinished(FString AnimName);// 0x6926ad0
	void OnPreLoadMap(FString MapName);// 0x6926a44
	void OnPostLoadMapWithWorld(World* World);// 0x69269c0
	void OnLoadMapWorldCleanup(FString MapName);// 0x6926934
	void OnGameViewportClientCreated();// 0x6926920
	void OnClientGameModeStartPlay(FString GameModeName);// 0x6926894
	World* GetWorld();// 0x6926858
	FrontendUtils* GetUtils();// 0x6926824
	PlayerController* GetPlayerController();// 0x69267f0
	LogicManagerBase*[] GetLogicManagerList();// 0x692676c
	LogicManagerBase* GetLogicManagerByName(FName LogicManagerTagName);// 0x69266e0
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x6926654
	GameViewportClient* GetGameViewportClient();// 0x6926620
	GameMode* GetGameMode();// 0x69265ec
	FrontendHUDExtension* GetExtension();// 0x69265b8
	FrontendHUDExtension* ExtendHUD(class Object InClass);// 0x692652c
	void ClearLogicManagerByName(FString managerName);// 0x6926454
	void BroadcastMsgWithTarget(FString strMsg, FString module, out const FName TargetName);// 0x6926330
	void BroadCastMSG(FString strMsg, FString module);// 0x6926258

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 8]
	FName CurrentSceneCameraName;//[Offset: 0x48, Size: 8]
	CameraActor*[] SceneCameraList;//[Offset: 0x50, Size: 16]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x60, Size: 80]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0xb0, Size: 16]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0xc0, Size: 80]
	PointLight*[] ScenePointLightList;//[Offset: 0x110, Size: 16]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0x120, Size: 80]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x170, Size: 80]
	<FName,Actor*> SceneMatChangeableMeshMap;//[Offset: 0x1c0, Size: 80]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x278, Size: 16]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x288, Size: 8]
	Object* GlobalUIEventDispatcher;//[Offset: 0x290, Size: 8]
	FString GlobalUIContainerClassName;//[Offset: 0x298, Size: 16]
	FName[] GlobalUIContainerNames;//[Offset: 0x2a8, Size: 16]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x2b8, Size: 80]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x308, Size: 16]
	<FName,UAEWidgetContainer*> GlobalPushUIRelations;//[Offset: 0x318, Size: 80]
	void UnRegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x69286d4
	void SwitchSceneCameraToTransform(Transform targetTrans, byte ProjectionMode, float FOV, float BlendTime, bool bForce);// 0x6928534
	void SwitchSceneCamera(FName SceneCameraName, float BlendTime, bool bForce);// 0x6928438
	void SetSceneSkyLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color);// 0x69282e0
	void SetScenePointLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x6928110
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x6927f78
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x6927ec4
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x6927e10
	void RegisterSceneMatChangeableMesh(FName MeshName, Actor* Mesh);// 0x6927d5c
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x6927ca8
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x6927bf4
	void PopAllPushedUI();// 0x6927be0
	void OnAllSceneCamerasRegistered();// 0x6927bc4
	bool IsSameCamera(Transform targetTrans, byte ProjectionMode, float FOV);// 0x6927a8c
	bool IsPushedPanel(out const FName managerName);// 0x69279ec
	void HideAllOtherPanelExceptOwnThisWidget(const Widget* Widget, bool Hide);// 0x692792c
	bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);// 0x6927848
	FString GetUIStackTopSrcTag();// 0x69277c8
	FString GetUIStackTopDstTag();// 0x6927748
	FString GetUIStackTop();// 0x69276c8
	Actor* GetSceneMatChangeableMeshByIdx(FName MeshName);// 0x692763c
	int GetPushedUICount();// 0x6927608
	FrontendHUD* GetOwningFrontendHUD();// 0x69275d4
	Object* GetGlobalUIEventDispatcher();// 0x69275a0
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x6927514
	CameraActor* GetCurrentSceneCamera();// 0x69274e0
	void ClearLobbyAsset();// 0x69274cc

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x3e8, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	void ToggleEnabled();// 0x6725fb8
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x6725f38
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x6725ebc
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x6725e40
	void SetLightColor(LinearColor NewLightColor);// 0x6725dc4
	void SetEnabled(bool bSetEnabled);// 0x6725d40
	void SetCastShadows(bool bNewValue);// 0x6725cbc
	void SetBrightness(float NewBrightness);// 0x6725c40
	void SetAffectTranslucentLighting(bool bNewValue);// 0x6725bbc
	void OnRep_bEnabled();// 0x6725ba0
	bool IsEnabled();// 0x6725b68
	LinearColor GetLightColor();// 0x6725b30
	float GetBrightness();// 0x6725afc

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x2e4, Size: 4]
	float MaxDrawDistance;//[Offset: 0x2e8, Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x2ec, Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 1]
	int ShadowMapChannel;//[Offset: 0x2f4, Size: 4]
	float MinRoughness;//[Offset: 0x2fc, Size: 4]
	float ShadowResolutionScale;//[Offset: 0x300, Size: 4]
	int LightPriority;//[Offset: 0x304, Size: 4]
	float ShadowBias;//[Offset: 0x308, Size: 4]
	float ShadowSharpen;//[Offset: 0x30c, Size: 4]
	float ContactShadowLength;//[Offset: 0x310, Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x314, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x315, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x318, Size: 8]
	Vector LightFunctionScale;//[Offset: 0x320, Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x330, Size: 8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 1]
	float IESBrightnessScale;//[Offset: 0x33c, Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x340, Size: 4]
	float DisabledBrightness;//[Offset: 0x344, Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 1]
	float BloomScale;//[Offset: 0x34c, Size: 4]
	float BloomThreshold;//[Offset: 0x350, Size: 4]
	Color BloomTint;//[Offset: 0x354, Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x35c, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x6726de4
	void SetTemperature(float NewTemperature);// 0x6726d68
	void SetShadowBias(float NewValue);// 0x6726cec
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x6726c6c
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x6726bf0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x6726b74
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x6726af8
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x6726a38
	void SetIntensity(float NewIntensity);// 0x67269bc
	void SetIndirectLightingIntensity(float NewIntensity);// 0x6726940
	void SetIESTexture(TextureLightProfile* NewValue);// 0x67268c4
	void SetEnableLightShaftBloom(bool bNewValue);// 0x6726840
	void SetBloomTint(Color NewValue);// 0x67267c8
	void SetBloomThreshold(float NewValue);// 0x672674c
	void SetBloomScale(float NewValue);// 0x67266d0
	void SetAffectTranslucentLighting(bool bNewValue);// 0x672664c
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x67265c8
	void ForceUpdateShadowState();// 0x67265b4

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x2bc, Size: 16]
	float Brightness;//[Offset: 0x2cc, Size: 4]
	float Intensity;//[Offset: 0x2d0, Size: 4]
	Color LightColor;//[Offset: 0x2d4, Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d8, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d8, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d8, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d8, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d8, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x2dc, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x2e0, Size: 4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x67294e8
	void SetCastShadows(bool bNewValue);// 0x6729464
	LinearColor GetLightColor();// 0x672942c

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0x11c, Size: 4]
	float TextureMultiplier;//[Offset: 0x120, Size: 4]

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x3f8, Size: 8]
	void SetRadius(float NewRadius);// 0x67946ac
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x6794630

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x3ec, Size: 4]
	float AttenuationRadius;//[Offset: 0x3f0, Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f4, Size: 1]
	float LightFalloffExponent;//[Offset: 0x3f8, Size: 4]
	float SourceRadius;//[Offset: 0x3fc, Size: 4]
	float SoftSourceRadius;//[Offset: 0x400, Size: 4]
	float SourceLength;//[Offset: 0x404, Size: 4]
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x408, Size: 1]
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x408, Size: 1]
	float RectLightSourceWidth;//[Offset: 0x40c, Size: 4]
	float RectLightSourceHeight;//[Offset: 0x410, Size: 4]
	bool bEnableForVertexPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x414, Size: 1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x418, Size: 12]
	void SetSourceRadius(float bNewValue);// 0x6794f50
	void SetSourceLength(float NewValue);// 0x6794ed4
	void SetSoftSourceRadius(float bNewValue);// 0x6794e58
	void SetSimulateRectLight(bool NewValue);// 0x6794dd4
	void SetSimulatePortalLight(bool NewValue);// 0x6794d50
	void SetRectLightSourceWidth(float NewValue);// 0x6794cd4
	void SetRectLightSourceHeight(float NewValue);// 0x6794c58
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x6794bdc
	void SetAttenuationRadius(float NewRadius);// 0x6794b60

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 4]
	float ShadowExponent;//[Offset: 0x4, Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x3e8, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	void OnRep_bEnabled();// 0x67c3c64

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x2e4, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x2e8, Size: 8]
	float SourceCubemapAngle;//[Offset: 0x2f0, Size: 4]
	int CubemapResolution;//[Offset: 0x2f4, Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x2f8, Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x300, Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x310, Size: 4]
	float Contrast;//[Offset: 0x314, Size: 4]
	float OcclusionExponent;//[Offset: 0x318, Size: 4]
	float MinOcclusion;//[Offset: 0x31c, Size: 4]
	Color OcclusionTint;//[Offset: 0x320, Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x324, Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x3c8, Size: 8]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x67c45fc
	void SetOcclusionTint(out const Color InTint);// 0x67c4574
	void SetOcclusionExponent(float InOcclusionExponent);// 0x67c44f8
	void SetOcclusionContrast(float InOcclusionContrast);// 0x67c447c
	void SetMinOcclusion(float InMinOcclusion);// 0x67c4400
	void SetLightColor(LinearColor NewLightColor);// 0x67c4384
	void SetIntensity(float NewIntensity);// 0x67c4308
	void SetIndirectLightingIntensity(float NewIntensity);// 0x67c428c
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x67c419c
	void SetCubemap(TextureCube* NewCubemap);// 0x67c4120
	void RecaptureSky();// 0x67c410c

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UAEUserWidget*[] WidgetList;//[Offset: 0x428, Size: 16]
	void RemoveWidgetInternal(UAEUserWidget* Widget);// 0x692e134
	void RemoveWidget(UAEUserWidget* Widget);// 0x692e0b8
	void AddWidgetInternal(UAEUserWidget* Widget);// 0x692e034
	void AddWidget(UAEUserWidget* Widget);// 0x692dfb8

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x240, Size: 8]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x248, Size: 8]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x250, Size: 8]
	UAEUserWidget* ParentWidget;//[Offset: 0x258, Size: 8]
	Property*[] Params;//[Offset: 0x300, Size: 16]
	FName IndexName;//[Offset: 0x320, Size: 8]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x328, Size: 40]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x350, Size: 40]
	bool bLimitTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	float TickRate;//[Offset: 0x37c, Size: 4]
	GMCommand[] GMCommandList;//[Offset: 0x380, Size: 16]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 1]
	bool bConsiderPawnStateChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool needCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	Vector2D ScreenPos;//[Offset: 0x3a0, Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x3a8, Size: 8]
	delegate OnMouseButtonDownHandler;//[Offset: 0x3b0, Size: 16]
	delegate OnMouseButtonUpHandler;//[Offset: 0x3c0, Size: 16]
	FString WidgetTlogName;//[Offset: 0x3d0, Size: 16]
	enum FadingStatus;//[Offset: 0x3e9, Size: 1]
	float CurrentOpacity;//[Offset: 0x3ec, Size: 4]
	float FadingInTime;//[Offset: 0x3f0, Size: 4]
	float FadingOutTime;//[Offset: 0x3f4, Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 1]
	int StandWidth;//[Offset: 0x3fc, Size: 4]
	int StandHeight;//[Offset: 0x400, Size: 4]
	bool bReceiveOnTouchBeganEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	bool bReceiveOnTouchEndedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	bool Visible();// 0x692c778
	void UnRegistTouchEvent();// 0x692c764
	void UnRegistFromGameFrontendHUD();// 0x692c748
	void SynchronizeBlueprintProperties();// 0xffffff8f20d162a8
	void Show();// 0x692c734
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x692c6b8
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x692c63c
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x692c510
	void RespawnInitWidget();// 0x692c4f4
	void RegistTouchEvent();// 0x692c4e0
	void RegistToGameFrontendHUD();// 0x692c4c4
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x692c404
	void ReceiveShow();// 0xffffff8f20d162a8
	void ReceivePreDestroy();// 0xffffff8f20d162a8
	void ReceiveHide();// 0xffffff8f20d162a8
	void ReceivedNetObjEvent(FString NetObj);// 0xffffff8f20d162a8
	void ReceivedInitWidget();// 0xffffff8f20d162a8
	void PostLocalMainCharInitialized(PlayerController* InPlayerController);// 0xffffff8f20d162a8
	void OnViewportTouchEnded(int touchIndex, Vector2D touchLocation);// 0x692c348
	void OnViewportTouchBegan(int touchIndex, Vector2D touchLocation);// 0x692c28c
	void OnRightClicked(Vector2D TempScreenPos);// 0xffffff8f20d162a8
	void OnFadeOutFinished();// 0x692c270
	void OnFadeInFinished();// 0x692c254
	void OnDoubleClicked(Vector2D TempScreenPos);// 0xffffff8f20d162a8
	void OnClicked(Vector2D TempScreenPos);// 0xffffff8f20d162a8
	static void InvalidateAllWidgets();// 0x692c240
	void InitWidget(bool Recursive, bool DynamicCreation, bool TopWidget);// 0x692c12c
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x692c070
	void Hide();// 0x692c05c
	void HandleUIMessageBattle(FString UIMessage);// 0x692bfd8
	void HandleUIMessage(FString UIMessage);// 0x692bf54
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains, bool bUseStartWith);// 0x692bdec
	Margin GetUIAdaptation();// 0x692bdb4
	UAEUserWidget* GetParentWidget();// 0x692bd80
	PlayerController* GetOwningPlayer();// 0x692bd44
	LogicManagerBase* GetOwningLogicManager();// 0x692bd10
	FrontendHUD* GetOwningFrontendHUD();// 0x692bcdc
	FName GetOwnerModuleName();// 0x692bca4
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x692bc18
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x692bb08
	UserWidget* GetChildWidget(FString WName);// 0x692ba74
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x692b9f0
	void ClearFunctionCache();// 0x692b9dc
	void BP_DestroyWidget();// 0x692b9c8
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x692b90c
	void AddUIFunctionToParent(FString UIMessage, Widget* Child);// 0x692b848
	void AddAllUIFunctionToParent(Widget* Child);// 0x692b7cc

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x38, Size: 8]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	int iUIControlState;//[Offset: 0x48, Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x4c, Size: 4]
	int SceneCameraBlendTime;//[Offset: 0x50, Size: 4]
	int DefaultSceneInfoIdx;//[Offset: 0x54, Size: 4]
	FName[] GameStatusList;//[Offset: 0x68, Size: 16]
	class Object[] WidgetUClassList;//[Offset: 0xf8, Size: 16]
	<FString,class Object> ReplaceUClassList;//[Offset: 0x108, Size: 80]
	UAEUserWidget*[] WidgetList;//[Offset: 0x158, Size: 16]
	<FName,WidgetsMapList> WidgetsMap;//[Offset: 0x1b8, Size: 80]
	<FString,UAEUserWidget*> SingleWidgetMap;//[Offset: 0x208, Size: 80]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x6929c9c
	bool IsEnableRemoveDynamicWidgets();// 0x6929c64
	int GetSceneCameraBlendTime();// 0x6929c30
	FrontendHUD* GetOwningFrontendHUD();// 0x6929bfc
	int GetDefaultSceneCamera();// 0x6929bc8
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x6929a7c
	void ClearUIMessageCache(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x6929930

--------------------------------
Class: WidgetsMapList
	UAEUserWidget*[] Widgets;//[Offset: 0x0, Size: 16]

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 16]
	FName ContainerName;//[Offset: 0x10, Size: 8]
	int ZOrder;//[Offset: 0x18, Size: 4]
	UAEUserWidget* Widget;//[Offset: 0x20, Size: 8]

--------------------------------
Class: GMCommand
	FString Name;//[Offset: 0x0, Size: 16]
	FString Cmd;//[Offset: 0x10, Size: 16]
	FString DefaultParam;//[Offset: 0x20, Size: 16]
	FString Server;//[Offset: 0x30, Size: 16]
	FString Tips;//[Offset: 0x40, Size: 16]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x6ca, Size: 1]
	enum TimingPolicy;//[Offset: 0x6cb, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x6d0, Size: 8]
	IntPoint DrawSize;//[Offset: 0x6d8, Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	bool bCheckLowDeviceQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e2, Size: 1]
	float RedrawTime;//[Offset: 0x6e4, Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x6f0, Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 1]
	Vector2D Pivot;//[Offset: 0x6fc, Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x705, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x708, Size: 8]
	LinearColor BackgroundColor;//[Offset: 0x710, Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x720, Size: 16]
	float OpacityFromTexture;//[Offset: 0x730, Size: 4]
	enum BlendMode;//[Offset: 0x734, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x735, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x736, Size: 1]
	UserWidget* Widget;//[Offset: 0x738, Size: 8]
	BodySetup* BodySetup;//[Offset: 0x760, Size: 8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x768, Size: 8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x770, Size: 8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x778, Size: 8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x780, Size: 8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x788, Size: 8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x790, Size: 8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x798, Size: 8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x7a0, Size: 8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a9, Size: 1]
	FName SharedLayerName;//[Offset: 0x7b0, Size: 8]
	int LayerZOrder;//[Offset: 0x7b8, Size: 4]
	enum GeometryMode;//[Offset: 0x7bc, Size: 1]
	float CylinderArcAngle;//[Offset: 0x7c0, Size: 4]
	Vector FlipVector;//[Offset: 0x7c4, Size: 12]
	void SetWidget(UserWidget* Widget);// 0x5a21848
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x5a217cc
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x5a21750
	void SetDrawSize(Vector2D Size);// 0x5a216d8
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x5a2165c
	void RequestRedraw();// 0x5a21640
	UserWidget* GetUserWidgetObject();// 0x5a2160c
	TextureRenderTarget2D* GetRenderTarget();// 0x5a215d8
	LocalPlayer* GetOwnerPlayer();// 0x5a215a4
	MaterialInstanceDynamic* GetMaterialInstance();// 0x5a21570
	Vector2D GetDrawSize();// 0x5a2153c
	void ForceWidgetUpdateImmediate();// 0x5a21528
	void ForceUpdateRenderTarget();// 0x5a21514

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xe0, Size: 4]
	int SizeY;//[Offset: 0xe4, Size: 4]
	LinearColor ClearColor;//[Offset: 0xe8, Size: 16]
	byte AddressX;//[Offset: 0xf8, Size: 1]
	byte AddressY;//[Offset: 0xf9, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfa, Size: 1]
	byte RenderTargetFormat;//[Offset: 0xfb, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 1]
	byte OverrideFormat;//[Offset: 0xfd, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xd8, Size: 4]

--------------------------------
Class: Image.Widget.Visual.Object
	Object* BrushImage;//[Offset: 0x120, Size: 40]
	SoftObjectPath BrushAssetReference;//[Offset: 0x148, Size: 24]
	SlateBrush Brush;//[Offset: 0x170, Size: 120]
	delegate BrushDelegate;//[Offset: 0x1e8, Size: 16]
	LinearColor ColorAndOpacity;//[Offset: 0x1f8, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x208, Size: 16]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	float HitTestAreaRadius;//[Offset: 0x21c, Size: 4]
	delegate OnMouseButtonDownEvent;//[Offset: 0x220, Size: 16]
	void SetOpacity(float InOpacity);// 0x59fa4fc
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x59fa480
	void SetBrushImageReferenceWithColor(SoftObjectPath AssetReference, LinearColor Color);// 0x59fa364
	void SetBrushImageReference(SoftObjectPath AssetReference);// 0x59fa284
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x59fa1c4
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x59fa104
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x59fa088
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x59fa00c
	void SetBrush(out const SlateBrush InBrush);// 0x59f9ebc
	void OnAsyncLoadImageAssetComplete();// 0x59f9ea8
	void OnAsyncLoadAssetComplete();// 0x59f9e94
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x59f9e60

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 120]

--------------------------------
Class: FrontendHUDExtension.Object

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x480, Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x488, Size: 1]
	int NumSpectators;//[Offset: 0x48c, Size: 4]
	int NumPlayers;//[Offset: 0x490, Size: 4]
	int NumBots;//[Offset: 0x494, Size: 4]
	float MinRespawnDelay;//[Offset: 0x498, Size: 4]
	int NumTravellingPlayers;//[Offset: 0x49c, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x4a0, Size: 8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x4a8, Size: 16]
	float InactivePlayerStateLifeSpan;//[Offset: 0x4b8, Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	void StartMatch();// 0x66a8ebc
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x66a8e38
	void Say(FString Msg);// 0x66a8dac
	void RestartGame();// 0x66a8d90
	bool ReadyToStartMatch();// 0x66a8d50
	bool ReadyToEndMatch();// 0x66a8d10
	void K2_OnSetMatchState(FName NewState);// 0xffffff8f20d162a8
	bool IsMatchInProgress();// 0x66a8cd0
	bool HasMatchEnded();// 0x66a8c90
	FName GetMatchState();// 0x66a8c74
	void EndMatch();// 0x66a8c58
	void AbortMatch();// 0x66a8c3c

--------------------------------
Class: UIMsgRouter.GameMsgRouter.BlueprintFunctionLibrary.Object
	static void UnRegistUIMsgListener(const FString InMsgName, const Object* InMsgLisenter);// 0x42f5c2c
	static void RouteUIMsg_8Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4, int Param5, int Param6, int Param7, int Param8);// 0x42f5a74
	static void RouteUIMsg_7Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4, int Param5, int Param6, int Param7);// 0x42f58bc
	static void RouteUIMsg_6Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4, int Param5, int Param6);// 0x42f5704
	static void RouteUIMsg_5Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4, int Param5);// 0x42f554c
	static void RouteUIMsg_4Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4);// 0x42f5394
	static void RouteUIMsg_3Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3);// 0x42f51dc
	static void RouteUIMsg_2Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2);// 0x42f4f84
	static void RouteUIMsg_1Param(const Object* WorldContextObj, FString InMsgName, int param1);// 0x42f4ddc
	static void RouteUIMsg(const Object* WorldContextObj, FString InMsgName);// 0x42f4d20
	static bool RegistUIMsgListener(const FString InMsgName, const Object* InMsgLisenter, const FString InMsgCallbackFuncName, const bool bInLogMsgCall);// 0x42f4b28

--------------------------------
Class: GameMsgRouter.BlueprintFunctionLibrary.Object
	<FString,GameMsgListenerGroup*> MsgListenerGroupMap;//[Offset: 0x28, Size: 80]
	void UnRegistMsgListener(const FString InMsgName, const Object* InMsgLisenter);// 0x42d0bbc
	bool RouteMsg(FString InMsgName);// 0x42d0b24
	bool RegistMsgListener(const FString InMsgName, const Object* InMsgLisenter, const FString InMsgCallbackFuncName, const bool bInLogMsgCall);// 0x42d0924

--------------------------------
Class: GameMsgListenerGroup.Object
	FString MsgName;//[Offset: 0x28, Size: 16]
	MsgListenerMeta[] MsgListenerGroup;//[Offset: 0x38, Size: 16]
	Object* CurFrameMsgListenerObj;//[Offset: 0x48, Size: 8]

--------------------------------
Class: MsgListenerMeta
	FName MsgCallbackFuncName;//[Offset: 0x0, Size: 8]
	Object* MsgListenerObj;//[Offset: 0xc, Size: 8]

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x320, Size: 16]
	delegate OnUserMsaaSettingChanged;//[Offset: 0x330, Size: 16]
	delegate OnWaterReflectionSettingChanged;//[Offset: 0x340, Size: 16]
	delegate OnReplayBeginRecordingDelegate;//[Offset: 0x350, Size: 16]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x390, Size: 12]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x39c, Size: 12]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x3a8, Size: 12]
	UserDetailSetting UserDetailSetting;//[Offset: 0x3b4, Size: 120]
	RenderQualitySettings renderQualitySettingsLastSetTA;//[Offset: 0x42c, Size: 12]
	RenderQualitySettings renderQualitySettingsInitTA;//[Offset: 0x438, Size: 12]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x445, Size: 1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x446, Size: 1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x447, Size: 1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x450, Size: 16]
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x460, Size: 16]
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x470, Size: 16]
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x480, Size: 16]
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x490, Size: 16]
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x4a0, Size: 16]
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x4b0, Size: 16]
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x4c0, Size: 16]
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x4d0, Size: 16]
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x4e0, Size: 16]
	RenderItem[] TournamentMobileHDROpenConfig;//[Offset: 0x4f0, Size: 16]
	RenderItem[] TournamentMobileHDRCloseConfig;//[Offset: 0x500, Size: 16]
	RenderItem[] MobileUltralHighOpenConfig;//[Offset: 0x510, Size: 16]
	RenderItem[] MobileUltralHighCloseConfig;//[Offset: 0x520, Size: 16]
	RenderItem[] MobileVerySmoothOpenConfig;//[Offset: 0x530, Size: 16]
	RenderItem[] MobileVerySmoothCloseConfig;//[Offset: 0x540, Size: 16]
	RenderItem[] TournamentMobileUltralHighOpenConfig;//[Offset: 0x550, Size: 16]
	RenderItem[] TournamentMobileUltralHighCloseConfig;//[Offset: 0x560, Size: 16]
	bool bEnhanceMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	RenderItem[] MobileEnhanceOpenConfig;//[Offset: 0x578, Size: 16]
	RenderItem[] MobileEnhanceCloseConfig;//[Offset: 0x588, Size: 16]
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x598, Size: 16]
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x5a8, Size: 16]
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x5b8, Size: 16]
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x5c8, Size: 16]
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x5d8, Size: 16]
	RenderItem[] TournamentMobilePPOpenConfig;//[Offset: 0x5e8, Size: 16]
	RenderItem[] TournamentMobilePPCloseConfig;//[Offset: 0x5f8, Size: 16]
	FString[] RePairDeleteDir;//[Offset: 0x608, Size: 16]
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x618, Size: 16]
	RenderItem[] HighLevelSequenceOpenConfig;//[Offset: 0x628, Size: 16]
	RenderItem[] MiddleLevelSequenceOpenConfig;//[Offset: 0x638, Size: 16]
	RenderItem[] LowLevelSequenceOpenConfig;//[Offset: 0x648, Size: 16]
	RenderItem[] HighLevelSequenceCloseConfig;//[Offset: 0x658, Size: 16]
	RenderItem[] MiddleLevelSequenceCloseConfig;//[Offset: 0x668, Size: 16]
	RenderItem[] LowLevelSequenceCloseConfig;//[Offset: 0x678, Size: 16]
	RenderItem[] CachedDifferentCommand;//[Offset: 0x688, Size: 16]
	bool AutoTestTriggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 1]
	FString DeviceNum4WebGM;//[Offset: 0x6a0, Size: 16]
	FString CustomLineStr;//[Offset: 0x6b0, Size: 16]
	Vector2D FOVRange;//[Offset: 0x6c0, Size: 8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x6c8, Size: 8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	float SwimRotateX;//[Offset: 0x6d4, Size: 4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d8, Size: 1]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x6f8, Size: 8]
	DeathPlayback* DeathPlayback;//[Offset: 0x700, Size: 8]
	Replay_SkeletalData_Manager* SkeletalDataManager;//[Offset: 0x708, Size: 8]
	ReplayCameraDataManager* ReplayCameraDataManager;//[Offset: 0x710, Size: 8]
	AssetRefStrategicManager* AssetRefStrategicManager;//[Offset: 0x718, Size: 8]
	CompletePlayback* CompletePlayback;//[Offset: 0x720, Size: 8]
	WonderfulPlayback* WonderfulPlayback;//[Offset: 0x728, Size: 8]
	ObPlayback* ObPlayback;//[Offset: 0x730, Size: 8]
	LivePlayback* LivePlayback;//[Offset: 0x738, Size: 8]
	AntiCheatConfig* ACConfig;//[Offset: 0x7a8, Size: 8]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x7c0, Size: 8]
	AvatarVisibilityCollection* AvatarVisibilityCollection;//[Offset: 0x7c8, Size: 8]
	FString AvatarVisibilityCollectionClassPath;//[Offset: 0x7d0, Size: 16]
	<class Object,FrequncyAccessActorList> FrequencyAccessActorMap;//[Offset: 0x7e0, Size: 80]
	ObjectPoolConfig[] ObjectPoolConfigs;//[Offset: 0x830, Size: 16]
	bool bOpenStartupLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	FadeDynamicStyleInfo FadeInfo;//[Offset: 0x844, Size: 12]
	float DefaultGray;//[Offset: 0x850, Size: 4]
	RenderItem[] ResultAvatarShadowRenderSettingsHigh;//[Offset: 0x858, Size: 16]
	RenderItem[] ResultAvatarShadowRenderSettingsMid;//[Offset: 0x868, Size: 16]
	RenderItem[] ResultAvatarShadowRenderSettingsLow;//[Offset: 0x878, Size: 16]
	FName[] UILeakWhiteList;//[Offset: 0x888, Size: 16]
	class Object[] ObjectLeakFilterClassList;//[Offset: 0x898, Size: 16]
	Object* ClientEventCenterIns;//[Offset: 0x8c0, Size: 8]
	void WaterReflectionSettingChanged__DelegateSignature(bool bOpenWaterReflection);// 0xffffff8f20d162a8
	bool UseStartupLevel();// 0x4049f84
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0xffffff8f20d162a8
	void UserMsaaSettingChanged__DelegateSignature(bool UserMsaaSetting);// 0xffffff8f20d162a8
	void TryStopRecordingReplayOnFinishState();// 0x4049f70
	void TryStartRecordingReplayOnFightState();// 0x4049f5c
	bool SupportTournamentMap();// 0x4049f38
	bool StopRecordingReplayByType(enum ReplayType);// 0x4049ea0
	bool StartRecordingReplayByType(enum ReplayType, bool bSkipConditionCheck, enum RecordCondition, FString TargetName);// 0x4049d40
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x4049c88
	void SetWaterReflectionSetting(bool bDoOpen);// 0x4049c04
	void SetVulkanSwitch(bool flag);// 0x4049b80
	void SetUserSetingShadowQuality(bool bShadow);// 0x4049afc
	void SetUserSetingMobilceContentSCale(float mcs);// 0x4049a80
	bool SetSoundEffectQuality(int Type);// 0x40499f0
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x4049928
	void SetHZBMobileState();// 0x4049914
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x4049898
	static void SetDeviceNum4WebGM();// 0x4049884
	static void SetCustomRouteLine();// 0x4049870
	void RunLuaTest();// 0x404985c
	void ReSetFOVScreenSizeCullingFactor();// 0x4049848
	void ReportInfoToBugly(FString InfoType, FString InMsg, FString CallStack);// 0x4049650
	void ReplayBeginRecordingDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void RenderForLowFPS();// 0x404963c
	void RefuseRenderForLowFPS();// 0x4049628
	void QuitGame();// 0x4049614
	void ProfileShot();// 0x4049600
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x40494ec
	void PostFileToTGPA(FString ExtraStr, FString FilePath);// 0x4049384
	void OpenSequenceConfig();// 0x4049370
	void OnStopAutoTest();// 0x404935c
	void OnStartAutoTest();// 0x4049348
	void OnAutoTestTriggleOpen();// 0x4049334
	void OnAutoTestTriggleClosed();// 0x4049320
	bool IsVukanRealOpen();// 0x40492e8
	bool isUsingAssumedNameInReplay();// 0x40492b0
	bool IsTournamentSettingOpen();// 0x4049278
	bool IsSupportVulkan();// 0x4049240
	bool IsSupportVerySmooth();// 0x4049208
	bool IsSupportTagCulling();// 0x40491ec
	bool IsSupportSwitchSoundEffectQuality();// 0x40491b4
	bool IsSupportSwitchRenderLevelRuntime();// 0x404917c
	bool IsSupportMSAA();// 0x4049158
	bool IsSupportLDR();// 0x4049134
	bool IsSupportEnhancement();// 0x40490fc
	bool IsSupportCivilVoiceDevice();// 0x40490c4
	bool IsRecordingReplayOfType(enum ReplayType);// 0x4049034
	bool IsPlayingReplayOfType(enum ReplayType);// 0x4048fa4
	bool IsPlayingAnyPlayback();// 0x4048f6c
	bool IsOpenMSAA();// 0x4048f38
	bool IsOpenHDR();// 0x4048f00
	bool IsInTournamentMap();// 0x4048ec8
	bool IsFoldingScreenDevice(float baseValue);// 0x4048e48
	bool IsFastForwardingReplay();// 0x4048e10
	static bool IsAutoRunTestGameBindCompoment();// 0x4048dd8
	static bool IsAutoRunTestGame();// 0x4048da0
	void InitRenderQualityLastSetTA(RenderQualitySettings TASetting);// 0x4048cd8
	void GMStandalone(FString Map);// 0x4048c00
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x4048bcc
	WonderfulPlayback* GetWonderfulPlayback();// 0x4048b98
	bool GetWaterReflectionSetting();// 0x4048b60
	bool GetVulkanSwitch();// 0x4048b28
	bool GetUserSetingShadowQuality();// 0x4048af0
	int GetUserQualitySettingLevel();// 0x4048ad4
	int GetSoundEffectQuality();// 0x4048aa0
	Replay_SkeletalData_Manager* GetSkeletalDataManager();// 0x4048a6c
	ReplayCameraDataManager* GetReplayCameraDataManager();// 0x4048a38
	RenderQualitySettings GetRenderQualityLastSet(bool isClassic);// 0x404897c
	RenderQualitySettings GetRenderQualityApplying(bool isClassic);// 0x40488c0
	ObPlayback* GetObPlayback();// 0x404888c
	LivePlayback* GetLivePlayback();// 0x4048858
	bool GetIsFirstInitWaterReflectionSetting();// 0x4048820
	static FString GetGetActiveProfileName();// 0x40487a0
	int GetDeviceUpdateVersionFlag();// 0x4048764
	int GetDeviceTCQualityGrade();// 0x4048728
	byte GetDeviceMaxSupportLevel();// 0x40486f4
	int GetDeviceMaxFPSByDeviceLevel(byte renderlevel, bool isClassic);// 0x4048624
	int GetDeviceLimit();// 0x40485f0
	int GetDeviceLevel();// 0x40485b4
	bool GetDefaultSoundEffectQuality();// 0x404857c
	byte GetDefaultRenderQualityTA();// 0x4048548
	int GetDefaultFPS();// 0x4048514
	DeathPlayback* GetDeathPlayback();// 0x40484e0
	enum GetCurPlayingReplayType();// 0x40484ac
	CompletePlayback* GetCompletePlayback();// 0x4048478
	Object* GetClientEventCenter();// 0x4048444
	static int GetAutoRunTestServerIdx();// 0x4048410
	static FString GetAutoRunPassWD();// 0x4048390
	static FString GetAutoRunLuaTest();// 0x4048310
	static FString GetAutoRunAccount();// 0x4048290
	AssetRefStrategicManager* GetAssetRefStrategicManager();// 0x404825c
	bool GetApplyingShadowQuality();// 0x4048224
	GameReplay* GetAnyRecordingPlayback();// 0x40481f0
	GameReplay* GetAnyPlayingPlayback();// 0x40481bc
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x4048054
	void EnableStreamingLevelLOD(bool bEnable);// 0x4047fd0
	bool DeleteSavedFiles(bool allfilesSaved);// 0x4047f38
	void CloseSequenceConfig();// 0x4047f24
	void CheckShadowReductionForResultAvatarShow();// 0x4047f10
	void CheckShadowForResultAvatarShow(int InShadowQuality);// 0x4047e94
	void AutoActiveVerySmoothRenderItems(bool forceClose);// 0x4047e10
	void AutoActiveUltralHighRenderItems();// 0x4047dfc
	void AutoActiveLDR();// 0x4047de8
	bool ActiveStyle_PPForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x4047cdc
	void ActiveStyle_PP(byte Level);// 0x4047c58
	bool ActiveStyle_ACESForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x4047b4c
	void ActiveStyle(byte Level);// 0x4047ac8
	void ActiveNightVision(bool bSet);// 0x4047a44
	void ActiveMSAA(bool bOpenMSAA);// 0x40479c0
	void ActiveEnhance(int OpenValue);// 0x4047944
	void ActiveDynamicStyle(bool bSet, byte Type, float InterpSpeed, bool bNeedDestroyComp);// 0x40477f4

--------------------------------
Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0, Size: 1]
	byte RenderStyleSetting;//[Offset: 0x1, Size: 1]
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	int TeamQualityEnhanceSetting;//[Offset: 0x4, Size: 4]
	bool IsClassicalSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0, Size: 4]
	int TCQualityGrade;//[Offset: 0x4, Size: 4]
	int DeviceMaxQualityLevel;//[Offset: 0x8, Size: 4]
	int UserQualitySetting;//[Offset: 0xc, Size: 4]
	int UserQualitySettingTA;//[Offset: 0x10, Size: 4]
	int DeviceSupportHDR;//[Offset: 0x14, Size: 4]
	int IsOpenHDR;//[Offset: 0x18, Size: 4]
	int UserHDRSetting;//[Offset: 0x1c, Size: 4]
	int IsSupportMSAA;//[Offset: 0x20, Size: 4]
	bool UserMsaaSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float UserMCSSetting;//[Offset: 0x28, Size: 4]
	int UserShadowSetting;//[Offset: 0x2c, Size: 4]
	int UserShadowSwitch;//[Offset: 0x30, Size: 4]
	int UserTeamQualityEnhanceSetting;//[Offset: 0x34, Size: 4]
	int PUBGLimitSetting;//[Offset: 0x38, Size: 4]
	int PUBGDeviceUpdateFlag;//[Offset: 0x3c, Size: 4]
	int PUBGDeviceFPSDef;//[Offset: 0x40, Size: 4]
	int PUBGDeviceFPSLow;//[Offset: 0x44, Size: 4]
	int PUBGDeviceFPSMid;//[Offset: 0x48, Size: 4]
	int PUBGDeviceFPSHigh;//[Offset: 0x4c, Size: 4]
	int PUBGDeviceFPSHDR;//[Offset: 0x50, Size: 4]
	int PUBGDeviceFPSUltralHigh;//[Offset: 0x54, Size: 4]
	int PUBGDeviceFPSLowTA;//[Offset: 0x58, Size: 4]
	int PUBGDeviceFPSMidTA;//[Offset: 0x5c, Size: 4]
	int PUBGDeviceFPSHighTA;//[Offset: 0x60, Size: 4]
	int PUBGDeviceFPSHDRTA;//[Offset: 0x64, Size: 4]
	int PUBGDeviceFPSUltralHighTA;//[Offset: 0x68, Size: 4]
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	int PUBGTeamQualityEnhance;//[Offset: 0x70, Size: 4]
	int UserVulkanSetting;//[Offset: 0x74, Size: 4]

--------------------------------
Class: SwitchesInMaps
	FString MapName;//[Offset: 0x0, Size: 16]
	SwitchesItem[] Switches;//[Offset: 0x10, Size: 16]

--------------------------------
Class: SwitchesItem
	FString Key;//[Offset: 0x0, Size: 16]
	float Value;//[Offset: 0x10, Size: 4]
	FString DependKey;//[Offset: 0x18, Size: 16]
	float DependValue;//[Offset: 0x28, Size: 4]

--------------------------------
Class: RenderItem
	FString RenderKey;//[Offset: 0x0, Size: 16]
	float RenderValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: RenderStyleParameterInMaps
	byte DynamicStyleName;//[Offset: 0x0, Size: 1]
	FString[] PostProcessParams;//[Offset: 0x8, Size: 16]
	ACESParameter ACESParams;//[Offset: 0x18, Size: 40]

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 16]
	float Bright;//[Offset: 0x10, Size: 4]
	float Gray;//[Offset: 0x14, Size: 4]
	float ShoulderStrength;//[Offset: 0x18, Size: 4]
	float ToeStrength;//[Offset: 0x1c, Size: 4]
	float LinearStrength;//[Offset: 0x20, Size: 4]
	float LinearAngle;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x28, Size: 16]
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x38, Size: 16]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	float ChickenDinnerTimeSecs;//[Offset: 0x78, Size: 4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x80, Size: 4]
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x88, Size: 16]
	void StopRecord(bool bRankFirst);// 0x421854c
	void StartRecord();// 0x4218538
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x42183ec
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x4218330
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x42180fc
	void BuildOutputData();// 0x42180e8
	void BuildContinuousKillOutputData();// 0x42180d4

--------------------------------
Class: WonderfulCutOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	byte WonderfulCutType;//[Offset: 0x8, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 16]

--------------------------------
Class: WonderfulCutContinuousKillOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	int KillNum;//[Offset: 0x8, Size: 4]
	float FarthestKillDistance;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WonderfulCutShootDamageData
	int DamagePlayerID;//[Offset: 0x0, Size: 4]
	WonderfulCut_OneShootDamage[] ShootDamageList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: WonderfulCut_OneShootDamage
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte CaptureType;//[Offset: 0x1, Size: 1]
	byte ShootDamageType;//[Offset: 0x2, Size: 1]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	float ShootDistance;//[Offset: 0x8, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 16]

--------------------------------
Class: WonderfulCutShootDamageSortData
	float DamageIntervalSecs;//[Offset: 0x0, Size: 4]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	byte CaptureType;//[Offset: 0x9, Size: 1]
	byte ShootDamageType;//[Offset: 0xa, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 16]

--------------------------------
Class: DeathPlayback.GameReplay.Object
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	FString[] EnabledGameModeWhiteList;//[Offset: 0x358, Size: 16]
	FString[] EnabledGameModeBlackList;//[Offset: 0x368, Size: 16]
	float PlaybackTimeBeforeDeath;//[Offset: 0x378, Size: 4]
	float PlaybackTimeBeforeDeathForAI;//[Offset: 0x37c, Size: 4]
	float MinValidRecordLenthRequired;//[Offset: 0x380, Size: 4]
	float DeathToStopRecordTime;//[Offset: 0x384, Size: 4]
	void OnPlayerControllerReconnected();// 0x3d73b28
	bool IsSwitchedOffByDevice();// 0x3d73af0
	FString GetReplayVictimName();// 0x3d73a70
	FString GetReplayTargetName();// 0x3d739f0
	void EnableDeathPlayback(bool bEnable);// 0x3d7396c

--------------------------------
Class: GameReplay.Object
	bool bJumpCheckCameraView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	UserWidget* GMUI;//[Offset: 0x98, Size: 8]
	class UserWidget* GMUIClass;//[Offset: 0xa0, Size: 40]
	float VolumeValueMax;//[Offset: 0xcc, Size: 4]
	bool IsLive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	float SimulateLiveTotalTime;//[Offset: 0xd4, Size: 4]
	bool IsLivePlayEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	int RecordHz;//[Offset: 0x124, Size: 4]
	float BufferHintSeconds;//[Offset: 0x128, Size: 4]
	float MaxDesiredRecordTimeMS;//[Offset: 0x12c, Size: 4]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x130, Size: 4]
	float CheckpointUploadDelayInSeconds;//[Offset: 0x134, Size: 4]
	bool bUseCheckPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	float ViewDistanceFactorFlying;//[Offset: 0x13c, Size: 4]
	float ScreenSizeCullingFactorFlying;//[Offset: 0x140, Size: 4]
	float ViewDistanceFactorLand;//[Offset: 0x144, Size: 4]
	float ScreenSizeCullingFactorLand;//[Offset: 0x148, Size: 4]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	STExtraBaseCharacter* ViewCharacter;//[Offset: 0x1ac, Size: 8]
	STExtraVehicleBase* ViewVehicle;//[Offset: 0x1b4, Size: 8]
	STExtraPlayerController* PlayerController;//[Offset: 0x1c0, Size: 8]
	ReplayWidgetBase* ReplayWidgetPtr;//[Offset: 0x1d4, Size: 8]
	ReplayProgressbarWidget* ReplayProgressWidgetPtr;//[Offset: 0x1dc, Size: 8]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	delegate OnReplayReadyInitUIDelegate;//[Offset: 0x1e8, Size: 16]
	delegate OnReplayGotoTimeResetUIDelegate;//[Offset: 0x1f8, Size: 16]
	delegate OnReplayResetViewTargetDelegate;//[Offset: 0x208, Size: 16]
	class ReplayWidgetBase* ReplayWidgetClass;//[Offset: 0x218, Size: 40]
	class ReplayProgressbarWidget* ReplayProgressWidgetClass;//[Offset: 0x240, Size: 40]
	void SwitchFreeViewMode();// 0x3e000fc
	bool StopRecordingReplay();// 0x3e000bc
	bool StopPlay();// 0x3e0007c
	bool StartRecordingReplay(bool bSkipConditionCheck, enum RecordCondition);// 0x3dfffa0
	void SetTickable(bool bTickble);// 0x3dfff20
	void SetSpectatorName(FString SpectatorName, bool bgm, bool isChangeViewTarget, bool isAutoSetName);// 0x3dffd64
	bool SetReplayTimeDilation(float InDilation);// 0x3dffcd4
	void SetIsGMSpectator(bool bgm);// 0x3dffc54
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x3dffbd8
	void RefreshFlags(bool bSkipConditionCheck, enum RecordCondition);// 0x3dffb08
	bool PlayReplay();// 0x3dffac8
	bool PlayCurOverDemoWithTime(float Time);// 0x3dffa38
	bool PauseReplay(bool bPaused);// 0x3dff998
	void OnPostLoadMapWithWorld(World* World);// 0x3dff914
	bool IsInRecordState();// 0x3dff8dc
	bool IsInPlayState();// 0x3dff8a4
	bool IsFastForwarding();// 0x3dff86c
	bool HaveRecordingData();// 0x3dff82c
	void HandleOnPlayerExit(UAEPlayerController* UAEPC);// 0x3dff7a8
	STExtraBaseCharacter* GetViewCharacter();// 0x3dff774
	FString GetSpectatorName();// 0x3dff6f4
	float GetReplayStartRecordTime();// 0x3dff6c0
	float GetCurrentReplayTotalTimeInSeconds();// 0x3dff684
	float GetCurrentReplayCurTimeInSeconds();// 0x3dff650
	void ClearReplayUI();// 0x3dff63c

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0x1038, Size: 16]
	delegate OnPlayerPawnHPChange;//[Offset: 0x1048, Size: 16]
	delegate OnPlayerHealthStatusChangedDelegate;//[Offset: 0x1058, Size: 16]
	delegate OnBulletChange;//[Offset: 0x1068, Size: 16]
	TriggerBuffData[] Buffs;//[Offset: 0x1078, Size: 16]
	TimeBuffData[] TimeBuffs;//[Offset: 0x1088, Size: 16]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x1098, Size: 16]
	delegate OnPlayerEnterBeRescueingStatus;//[Offset: 0x10a8, Size: 16]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0x10b8, Size: 16]
	delegate OnPlayerPickUp;//[Offset: 0x10c8, Size: 16]
	delegate OnPlayerWeaponChangeState;//[Offset: 0x10d8, Size: 16]
	delegate OnPlayerWeaponReloadLastBullet;//[Offset: 0x10e8, Size: 16]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0x10f8, Size: 16]
	delegate OnWeaponShootIntervalModeChangeDelegate;//[Offset: 0x1108, Size: 16]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0x1118, Size: 16]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0x1128, Size: 16]
	delegate IsEnterNearDeathDelegate;//[Offset: 0x1138, Size: 16]
	delegate OnCharacterAimModeChanged;//[Offset: 0x1148, Size: 16]
	delegate OnDeathDelegate;//[Offset: 0x1158, Size: 16]
	delegate OnTakeDamageModify_Override;//[Offset: 0x1168, Size: 16]
	delegate OnTakeDamageModify_ExHealth;//[Offset: 0x1178, Size: 16]
	delegate OnPostTakeDamage;//[Offset: 0x1188, Size: 16]
	bool bBroadcastNotifyInitialDamageDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1198, Size: 1]
	delegate OnNotifyInitialDamage;//[Offset: 0x11a0, Size: 16]
	delegate OnSelfEnterState;//[Offset: 0x11b0, Size: 16]
	delegate OnReconnectNotifyDelegate;//[Offset: 0x11c0, Size: 16]
	delegate OnStartInitDelegate;//[Offset: 0x11d0, Size: 16]
	delegate AnimMontagePlayDelegate;//[Offset: 0x1220, Size: 16]
	delegate AnimMontageJumpSectionDelegate;//[Offset: 0x1230, Size: 16]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0x1240, Size: 16]
	delegate OnCharacterStartFireDelegate;//[Offset: 0x1250, Size: 16]
	delegate OnCharacterStopFireDelegate;//[Offset: 0x1260, Size: 16]
	delegate OnCharacterShootDelegate;//[Offset: 0x1270, Size: 16]
	delegate OnChangedFlyWingStateDelegate;//[Offset: 0x1280, Size: 16]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0x1290, Size: 16]
	delegate OnCharacterEndViewTarget;//[Offset: 0x12a0, Size: 16]
	delegate OnPostLocalEquipWeapon;//[Offset: 0x12b0, Size: 16]
	delegate OnWeaponEquipmentUpdateDelegate;//[Offset: 0x12c0, Size: 16]
	delegate OnCharacterHpChange;//[Offset: 0x12d0, Size: 16]
	delegate OnCharacterReceiveHealthChangeHistory;//[Offset: 0x12e0, Size: 16]
	delegate OnCharacterTeamIDChange;//[Offset: 0x12f0, Size: 16]
	delegate OnCharacterSignalHPChange;//[Offset: 0x1300, Size: 16]
	delegate OnPlayerSwitchWeaponDelegate;//[Offset: 0x1310, Size: 16]
	delegate OnCharacterHiddenChange;//[Offset: 0x1320, Size: 16]
	delegate ShowActicityUIDelegate;//[Offset: 0x1330, Size: 16]
	AkAudioEvent* DeathSound;//[Offset: 0x1340, Size: 8]
	AkAudioEvent* PickupSound;//[Offset: 0x1348, Size: 8]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0x1350, Size: 8]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0x1358, Size: 8]
	AkAudioEvent* SwitchSightSound;//[Offset: 0x1360, Size: 8]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0x1368, Size: 8]
	bool bShowName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1370, Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1370, Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0x1374, Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1378, Size: 1]
	float Money;//[Offset: 0x137c, Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1380, Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1381, Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1381, Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1382, Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1383, Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0x1384, Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1388, Size: 1]
	class PlayerTombBox* OverrideTombBox;//[Offset: 0x1390, Size: 8]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1398, Size: 1]
	bool bOpenCostSpecMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1399, Size: 1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139a, Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0x13a0, Size: 4]
	float PreviousValueToSetForHealthPredict;//[Offset: 0x13a8, Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0x13ac, Size: 4]
	float ValueLimitForSignalHPPredict;//[Offset: 0x13b0, Size: 4]
	float ValueForSignalHPPredict;//[Offset: 0x13b4, Size: 4]
	FName HeadSocketName;//[Offset: 0x13b8, Size: 8]
	FName LFootSocketName;//[Offset: 0x13c0, Size: 8]
	FName RFootSocketName;//[Offset: 0x13c8, Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0x13d0, Size: 8]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0x13d8, Size: 8]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0x13e0, Size: 8]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0x13e8, Size: 8]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0x13f0, Size: 8]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f8, Size: 1]
	Rotator ServerControlRotation;//[Offset: 0x13fc, Size: 12]
	byte PoseState;//[Offset: 0x1408, Size: 1]
	Actor* ThePlane;//[Offset: 0x1410, Size: 8]
	float ReplicatedNowShovelingSpeed;//[Offset: 0x1418, Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0x141c, Size: 12]
	Vector AdditiveVelocity;//[Offset: 0x1428, Size: 12]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1434, Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1435, Size: 1]
	bool bIsOpenShovelAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1440, Size: 1]
	bool bOpenBuffTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1449, Size: 1]
	float RadialDamageScale;//[Offset: 0x144c, Size: 4]
	byte LastPoseState;//[Offset: 0x1450, Size: 1]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1451, Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1452, Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0x1454, Size: 4]
	float RequestPaintDecalCD;//[Offset: 0x1458, Size: 4]
	float MaxRequestPaintDecalCD;//[Offset: 0x145c, Size: 4]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0x1460, Size: 16]
	Actor*[] PlayerSlotData;//[Offset: 0x1470, Size: 16]
	Actor*[] InventoryData;//[Offset: 0x1480, Size: 16]
	AkComponent* SoundComp;//[Offset: 0x14e0, Size: 8]
	AkComponent* AmbientSoundComp;//[Offset: 0x14e8, Size: 8]
	MoveableBaseSmoothComp* MoveableBaseSmooth;//[Offset: 0x14f0, Size: 8]
	VelocitySimulatorSmoothComp* VelocitySimulatorSmooth;//[Offset: 0x14f8, Size: 8]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1500, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1501, Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0x1508, Size: 8]
	AkAudioEvent* AmbientSound;//[Offset: 0x1510, Size: 8]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0x1518, Size: 80]
	bool bUpdateContainerLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1568, Size: 1]
	SceneComponent* MeshContainer;//[Offset: 0x1570, Size: 8]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1578, Size: 1]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1579, Size: 1]
	Actor* WaterObj;//[Offset: 0x1580, Size: 8]
	bool UseShootVerifyEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1588, Size: 1]
	bool bForbidAiPronePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1589, Size: 1]
	bool Temp_ChangeSwitchLogic_VehSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158a, Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0x1590, Size: 8]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0x1598, Size: 8]
	class WeaponAutoAimingComponent* AutoAimCompTemplate;//[Offset: 0x15a0, Size: 8]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x15a8, Size: 8]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0x15b0, Size: 8]
	STNewCharacterFollowComp* NewAutoFollowFollowComp;//[Offset: 0x15b8, Size: 8]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c0, Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0x15c4, Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c8, Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0x15cc, Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d0, Size: 1]
	STExtraBaseCharacter* MyCandidateGiftGiver;//[Offset: 0x15d8, Size: 8]
	GiftTypeData GiftType;//[Offset: 0x15e0, Size: 8]
	BonfireActor* CurBonfire;//[Offset: 0x15e8, Size: 8]
	BonfireActor* BuiltBonfire;//[Offset: 0x15f0, Size: 8]
	delegate OnEnterLadingHeavy;//[Offset: 0x1618, Size: 16]
	Vector ScopeNewIdleLoc;//[Offset: 0x1628, Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0x1634, Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0x1640, Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0x1644, Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0x1650, Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0x1654, Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0x1658, Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0x1660, Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0x166c, Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0x1670, Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0x1674, Size: 4]
	float ScopeLagScale;//[Offset: 0x167c, Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0x1680, Size: 4]
	float ScopeFov;//[Offset: 0x1684, Size: 4]
	float FPPDefaultFov;//[Offset: 0x1688, Size: 4]
	float TPPDefaultFov;//[Offset: 0x168c, Size: 4]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0x1690, Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0x1694, Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0x1698, Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0x169c, Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0x16a8, Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b4, Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0x16b8, Size: 8]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0x16c0, Size: 8]
	CameraComponent* FPPCameraComp;//[Offset: 0x16c8, Size: 8]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0x16d0, Size: 8]
	CameraComponent* ScopeCameraComp;//[Offset: 0x16d8, Size: 8]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0x16e0, Size: 8]
	MinimalViewInfo CameraInfoAdditive;//[Offset: 0x16f0, Size: 1456]
	float CameraInfoAdditiveWeight;//[Offset: 0x1ca0, Size: 4]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca4, Size: 1]
	SyncAKEvent SyncAKEvent;//[Offset: 0x1ca8, Size: 16]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0x1cb8, Size: 16]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0x1cc8, Size: 16]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x1cd8, Size: 16]
	delegate OnMovementBaseChanged;//[Offset: 0x1ce8, Size: 16]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf8, Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf9, Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0x1d00, Size: 8]
	Vector ProneBoxRelativeLocation;//[Offset: 0x1d08, Size: 12]
	CapsuleComponent* SecondCapsuleCollision;//[Offset: 0x1d18, Size: 8]
	bool bCreateSecondCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d20, Size: 1]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0x1d28, Size: 16]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0x1d38, Size: 16]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0x1d48, Size: 8]
	ObserverSmoothComponent* ObserverSmooth;//[Offset: 0x1d50, Size: 8]
	float PickUpRadius;//[Offset: 0x1d58, Size: 4]
	SimViewData SimulateViewData;//[Offset: 0x1d5c, Size: 12]
	FString MedalClubID;//[Offset: 0x1d68, Size: 16]
	int MedalClubLevel;//[Offset: 0x1d78, Size: 4]
	AnchorPlatData AnchorPlat;//[Offset: 0x1d7c, Size: 8]
	int PassCardBuyType;//[Offset: 0x1d84, Size: 4]
	int PassCardBuyLevel;//[Offset: 0x1d88, Size: 4]
	bool NeedShowEnjoyCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8c, Size: 1]
	World* TheWorld;//[Offset: 0x1d98, Size: 8]
	bool bIsSkipCheckMeshRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da0, Size: 1]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0x1db0, Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0x1dd8, Size: 8]
	DamageReductionComponent* DamageReductionComponent;//[Offset: 0x1de8, Size: 8]
	FName ClientGetShotBuffName;//[Offset: 0x1e00, Size: 8]
	float SmoothRotateMeshYawSpeed;//[Offset: 0x1e08, Size: 4]
	FName[] DynamicMovementBaseTags;//[Offset: 0x1e18, Size: 16]
	delegate OnScopeInComplete;//[Offset: 0x1e28, Size: 16]
	delegate OnScopeOutComplete;//[Offset: 0x1e38, Size: 16]
	bool bCheckSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e48, Size: 1]
	float FootSoundIgnoreDist;//[Offset: 0x1e4c, Size: 4]
	float FootSoundTraceDist;//[Offset: 0x1e50, Size: 4]
	<byte,FootprintActorArrayInfo> FootprintMap;//[Offset: 0x1e58, Size: 80]
	float MaxDispalyFootprintDistance;//[Offset: 0x1ea8, Size: 4]
	Rotator DefaultMeshRot;//[Offset: 0x1eac, Size: 12]
	class AnimInstance* MainCharAnimClass;//[Offset: 0x1eb8, Size: 8]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0x1ec0, Size: 8]
	class AnimInstance* MainCharTPPAnimClass;//[Offset: 0x1ec8, Size: 8]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed8, Size: 1]
	bool bSkillLockTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed9, Size: 1]
	int CurrentEmoteIndex;//[Offset: 0x1edc, Size: 4]
	<int,BackpackEmoteHandle*> EmoteBPIDToAnimHandleMap;//[Offset: 0x1ee0, Size: 80]
	PlayEmoteID[] CurrentPlayEmoteSequence;//[Offset: 0x1f30, Size: 16]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x1f60, Size: 16]
	delegate OnPlayerTryToPlayEmote;//[Offset: 0x1f70, Size: 16]
	delegate OnPlayerEmoteBePlayedSuccessfully;//[Offset: 0x1f80, Size: 16]
	delegate OnPlayerStartPlayEmoteDS;//[Offset: 0x1f90, Size: 16]
	AnimationAsset* TempEmoteResource;//[Offset: 0x1fa0, Size: 40]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x1fc8, Size: 8]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x1fd0, Size: 4]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fde, Size: 1]
	Vector MoveInputState;//[Offset: 0x1fe0, Size: 12]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fec, Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0x1ff0, Size: 8]
	bool bPressedShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ff9, Size: 1]
	float ShovelingKeyHoldTime;//[Offset: 0x1ffc, Size: 4]
	bool bHasEnteredShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2000, Size: 1]
	Vector CurInputVector;//[Offset: 0x2004, Size: 12]
	bool bEnableSpringArmOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2014, Size: 1]
	StaticMeshComponent* ScopComp;//[Offset: 0x2018, Size: 8]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0x2020, Size: 8]
	float voiceCheckCD;//[Offset: 0x2028, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x202c, Size: 4]
	float VoiceCheckDis;//[Offset: 0x2030, Size: 4]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0x2034, Size: 4]
	<byte> DanyinCompletedIDSet;//[Offset: 0x2050, Size: 80]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x20a0, Size: 8]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x20b8, Size: 8]
	byte MovementModeBeforeNearDeath;//[Offset: 0x20c0, Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0x20c4, Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x20c8, Size: 8]
	DamageCauserRecordData WhoKillMeRecordData;//[Offset: 0x20d0, Size: 32]
	int HandFolderRatio;//[Offset: 0x20f0, Size: 4]
	bool bIsIgnoreRecoverty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f4, Size: 1]
	FString IgnoreRecovertyPropertyName;//[Offset: 0x20f8, Size: 16]
	float SwimUpRate;//[Offset: 0x2108, Size: 4]
	PlayerSwimComponent* swimComponet;//[Offset: 0x2110, Size: 8]
	OceanManager* OceanManager;//[Offset: 0x2118, Size: 8]
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x2120, Size: 16]
	bool bHasForwardInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2158, Size: 1]
	float ForwardInputRate;//[Offset: 0x2168, Size: 4]
	bool bHasRightInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x216c, Size: 1]
	float RightInputRate;//[Offset: 0x2170, Size: 4]
	float SwitchPoseCD;//[Offset: 0x217c, Size: 4]
	bool bHasUpInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2180, Size: 1]
	float UpInputRate;//[Offset: 0x2184, Size: 4]
	PrimitiveComponent* AbsolutelyMovingFollowTargetComp;//[Offset: 0x2190, Size: 8]
	bool hHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a8, Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0x21bc, Size: 4]
	float LandedLogCDConfig;//[Offset: 0x21c4, Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x21cc, Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0x21e0, Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0x2210, Size: 48]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x2258, Size: 8]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x2260, Size: 8]
	float DelayHideDuration;//[Offset: 0x2268, Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x226c, Size: 4]
	float DelaySpawnDeadTombBox;//[Offset: 0x2270, Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2274, Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x2278, Size: 4]
	bool bShouldGenerateOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x227c, Size: 1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x2290, Size: 48]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x22c0, Size: 264]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x23c8, Size: 44]
	bool CheckNeedUpdate_LastIsOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23f4, Size: 1]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x23f8, Size: 40]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x2420, Size: 40]
	delegate ThrowGrenadeModeChangedDelegate;//[Offset: 0x2448, Size: 16]
	enum ThrowGrenadeMode;//[Offset: 0x2458, Size: 1]
	enum PrevThrowGrenadeMode;//[Offset: 0x2459, Size: 1]
	byte PeekMark;//[Offset: 0x245a, Size: 1]
	bool IsManualPeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245b, Size: 1]
	bool IsCurrentPeekAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245c, Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246c, Size: 1]
	float PeekCheckAdditionalLen;//[Offset: 0x2470, Size: 4]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2474, Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x2478, Size: 4]
	float PeekCheckCollisionTimerFPP;//[Offset: 0x247c, Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2484, Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x2488, Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x248c, Size: 4]
	delegate OnCharacterPeek;//[Offset: 0x2498, Size: 16]
	AttrRegisterItem[] RegAttrCache;//[Offset: 0x2510, Size: 16]
	float HighWalkSpeed;//[Offset: 0x2524, Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x2528, Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x252c, Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x2530, Size: 4]
	float MaxProneSpeed;//[Offset: 0x2534, Size: 4]
	float MaxSprintSpeed;//[Offset: 0x2538, Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x253c, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x2540, Size: 4]
	float HealthPredict;//[Offset: 0x2544, Size: 4]
	float BreathAmount;//[Offset: 0x2548, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x254c, Size: 4]
	byte HealthStatus;//[Offset: 0x2550, Size: 1]
	<FString,DamageScale> DamageScale;//[Offset: 0x2558, Size: 80]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x25a8, Size: 80]
	ExtraDamageReduceCfg[] ExtraDamageReduceList;//[Offset: 0x25f8, Size: 16]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2608, Size: 1]
	float EnergySpeedScale;//[Offset: 0x260c, Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x2610, Size: 4]
	float SkillBackpackCapacity;//[Offset: 0x2614, Size: 4]
	float ArmorDurableReducePercent;//[Offset: 0x2618, Size: 4]
	CharacterEnergyData Energy;//[Offset: 0x2620, Size: 48]
	CharacterEnergyPhase[] TemperaturePhaseList;//[Offset: 0x2650, Size: 16]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2660, Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x2664, Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x2668, Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x266c, Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x2670, Size: 4]
	float ReplicatedAndOverridedSwimSpeed;//[Offset: 0x2674, Size: 4]
	int bIsInTheInvincible;//[Offset: 0x2684, Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x2688, Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x268c, Size: 4]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x2690, Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x2698, Size: 8]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x26a0, Size: 8]
	class STCharacterBonfireLinkComp* BonfireLinkComponentTemplate;//[Offset: 0x26a8, Size: 40]
	float StandHalfHeight;//[Offset: 0x26d0, Size: 4]
	float CrouchHalfHeight;//[Offset: 0x26d4, Size: 4]
	float ProneHalfHeight;//[Offset: 0x26d8, Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x26dc, Size: 4]
	float FPPCollisionRadius;//[Offset: 0x26e0, Size: 4]
	float StandRadius;//[Offset: 0x26e4, Size: 4]
	float DyingRadius;//[Offset: 0x26e8, Size: 4]
	float CollisionRadiusOverride;//[Offset: 0x26ec, Size: 4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x26f0, Size: 16]
	HealthPredictShowData[] SignalHPPredictShowDataList;//[Offset: 0x2700, Size: 16]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x2710, Size: 8]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2728, Size: 1]
	int VehicleSeatIdx;//[Offset: 0x272c, Size: 4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2736, Size: 1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x2738, Size: 4]
	bool bCanCharacterHideOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274d, Size: 1]
	bool bHideOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274e, Size: 1]
	CharacterAvatarComponent* AvatarComponent;//[Offset: 0x2758, Size: 8]
	delegate OnAttachedToVehicle;//[Offset: 0x2768, Size: 16]
	delegate OnDetachedFromVehicle;//[Offset: 0x2778, Size: 16]
	delegate OnChangedVehicleSeat;//[Offset: 0x2788, Size: 16]
	AutoAimingConfig HandFightAutoAimingConfig;//[Offset: 0x2798, Size: 148]
	bool bUseHandFightAutoAimingConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282c, Size: 1]
	delegate OnPlayerStateUpdated;//[Offset: 0x2830, Size: 16]
	delegate SwitchAngledSightEventDelegate;//[Offset: 0x2840, Size: 16]
	Rotator AngledSightRotOffset;//[Offset: 0x2850, Size: 12]
	bool bHasInitOnClientWithGameState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2910, Size: 1]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x2918, Size: 8]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2921, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x2924, Size: 4]
	int DamageMagnifierIdx;//[Offset: 0x2928, Size: 4]
	STParachuteState STReplicateParchuteState;//[Offset: 0x2930, Size: 24]
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x2948, Size: 8]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x2950, Size: 36]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2974, Size: 1]
	float MoveForwardInputValue;//[Offset: 0x2978, Size: 4]
	float MoveRightInputValue;//[Offset: 0x297c, Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2980, Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x2984, Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2988, Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x298c, Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x2990, Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x2998, Size: 8]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x29a0, Size: 16]
	STExtraBaseCharacter* Leader;//[Offset: 0x29b0, Size: 8]
	enum FollowState;//[Offset: 0x29b8, Size: 1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x29c0, Size: 16]
	FString LatestInviter;//[Offset: 0x29d0, Size: 16]
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29e0, Size: 1]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x29e8, Size: 4]
	float maxShowAlpha;//[Offset: 0x29f0, Size: 4]
	float MoveMaxShowDis;//[Offset: 0x29f4, Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x29f8, Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x29fc, Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x2a38, Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x2a3c, Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x2a40, Size: 4]
	float FPPSwitchPoseWeaponSmoothTime;//[Offset: 0x2a44, Size: 4]
	bool bDynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac4, Size: 1]
	int IsEnableReportRoute;//[Offset: 0x2b64, Size: 4]
	int IsEnableLogAIPlayerPos;//[Offset: 0x2b78, Size: 4]
	float PaintDecalMaxDistance;//[Offset: 0x2b7c, Size: 4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b80, Size: 1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b81, Size: 1]
	bool bSkillFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b82, Size: 1]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd0, Size: 1]
	bool bNightVisionUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd1, Size: 1]
	float MaxRelavantDistance;//[Offset: 0x2bd8, Size: 4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x2be0, Size: 4]
	int IsEnableReportGameSetting;//[Offset: 0x2be4, Size: 4]
	int EnableReportGameSettingLevel;//[Offset: 0x2be8, Size: 4]
	bool bEnableMainMeshAnimNodeInitOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bec, Size: 1]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x2bf0, Size: 4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x2bf4, Size: 4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x2bf8, Size: 4]
	BaseFPPComponent* FPPComp;//[Offset: 0x2c00, Size: 8]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x2c08, Size: 8]
	float EquipingScopeDelay;//[Offset: 0x2c14, Size: 4]
	delegate OnEquipZoomScope;//[Offset: 0x2c20, Size: 16]
	float DistSquaredInterruptRevival;//[Offset: 0x2c38, Size: 4]
	WeaponOverrideAttrs WeaponOverrideAttrs;//[Offset: 0x2c3c, Size: 28]
	CharacterOverrideAttrs CharacterOverrideAttrs;//[Offset: 0x2c58, Size: 16]
	float CharacterFallingVelocityZFactor;//[Offset: 0x2c68, Size: 4]
	int ShowingHeadWidgetParam;//[Offset: 0x2c74, Size: 4]
	WeaponOwnerComponent* WeaponOwnerComponent;//[Offset: 0x2c78, Size: 8]
	bool bHasFinishedRegisterPlayerPickUpList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c80, Size: 1]
	enum[] BuildUIHideState;//[Offset: 0x2c88, Size: 16]
	LastEmoteInfo LastEmoteInfo;//[Offset: 0x2c98, Size: 12]
	bool bDieInHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca4, Size: 1]
	int CurrentTaskTriggerAreaID;//[Offset: 0x2ca8, Size: 4]
	float SignalHPBeforeEnterBreath;//[Offset: 0x2cac, Size: 4]
	float ProduceSoundInterval;//[Offset: 0x2cb0, Size: 4]
	float ProduceSoundVelocitySquared;//[Offset: 0x2cb4, Size: 4]
	float HearRadius;//[Offset: 0x2cb8, Size: 4]
	float FirstGuide_SafeZoneCountDownTime;//[Offset: 0x2cf0, Size: 4]
	bool isUsingEnergyPoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cf4, Size: 1]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cf6, Size: 1]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cfc, Size: 1]
	float SignalHPRemainingTime;//[Offset: 0x2d00, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x2d14, Size: 4]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d18, Size: 1]
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d19, Size: 1]
	float FixMovementOnVehicleInterval;//[Offset: 0x2d1c, Size: 4]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x2d24, Size: 4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x2d30, Size: 48]
	byte DefaultParticleAttachLocationType;//[Offset: 0x2d60, Size: 1]
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x2d68, Size: 16]
	float ParticleShowingInterval;//[Offset: 0x2d78, Size: 4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d80, Size: 1]
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d81, Size: 1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x2d88, Size: 40]
	ParticleSystem* ProtectedInjuryAndToxicParticleEffect;//[Offset: 0x2db0, Size: 8]
	float RescueReduceTime;//[Offset: 0x2db8, Size: 4]
	bool bLogAIFloatInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dbc, Size: 1]
	KOFActivityData KOFActivityData;//[Offset: 0x2dc0, Size: 232]
	float JoystickSensitivity;//[Offset: 0x2ea8, Size: 4]
	float SwitchWeaponCD;//[Offset: 0x2eac, Size: 4]
	float CurSwitchWeaponCD;//[Offset: 0x2eb0, Size: 4]
	bool bIsInFortress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ebe, Size: 1]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ebf, Size: 1]
	AnimInstance* MainAnimInstance;//[Offset: 0x2ec0, Size: 8]
	STExtraAnimInstanceBase* TPPAnimInstance;//[Offset: 0x2ec8, Size: 8]
	STExtraAnimInstanceBase* FPPAnimInstance;//[Offset: 0x2ed0, Size: 8]
	float VehicleDetailedTraceDist;//[Offset: 0x2edc, Size: 4]
	float SpringArmTraceDist;//[Offset: 0x2ee0, Size: 4]
	<byte,CharacterBodyOffset> BodyRelativeOffsetConfig;//[Offset: 0x2ee8, Size: 80]
	delegate OnDSSkillStartDelegate;//[Offset: 0x2f58, Size: 16]
	CurveFloat* VehicleSpeedDeviationFactorCurve;//[Offset: 0x2f68, Size: 8]
	bool bUseCustomAnimUpdateRateParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f70, Size: 1]
	float MaxDistFromMainChar;//[Offset: 0x2f74, Size: 4]
	int BaseNonRenderedUpdateRate;//[Offset: 0x2f78, Size: 4]
	int BaseNonRenderedUpdateRateHigh;//[Offset: 0x2f7c, Size: 4]
	float[] CustomAnimUpdateRateParams;//[Offset: 0x2f80, Size: 16]
	float ShootWeaponADSTime;//[Offset: 0x2f90, Size: 4]
	float ShootWeaponFireAnimAlphaRate;//[Offset: 0x2f94, Size: 4]
	float ShootWeaponFireAnimADSAlphaRate;//[Offset: 0x2f98, Size: 4]
	bool DonotPlayFootstepSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9c, Size: 1]
	PersistClientStateComponent* PersistClientStateComponent;//[Offset: 0x2fa0, Size: 8]
	<PlayMontageData> MontageQueue;//[Offset: 0x2fa8, Size: 80]
	bool IsHelmetFightingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ff8, Size: 1]
	bool bSkipLandSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ff9, Size: 1]
	bool bCanBeControlledByLimitZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ffa, Size: 1]
	Actor* AssociatedHelicoptor;//[Offset: 0x3000, Size: 8]
	Actor* TempViewerForReplay;//[Offset: 0x3008, Size: 8]
	float CurrentNetCullDistanceSquared;//[Offset: 0x3010, Size: 4]
	bool IsBunkerEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3014, Size: 1]
	float[] HealthChangeHistoryPerFrame;//[Offset: 0x3018, Size: 16]
	float LastSyncHealthChange;//[Offset: 0x3028, Size: 4]
	SkeletalMesh* DefaultCharacterMesh;//[Offset: 0x3030, Size: 8]
	bool CheckNetRelevantInScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3038, Size: 1]
	bool ReplicationPausedInScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3039, Size: 1]
	bool bIgnoreBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x303a, Size: 1]
	int CheckCircleIndex;//[Offset: 0x303c, Size: 4]
	delegate OnMainCharAnimInstanceInit;//[Offset: 0x3060, Size: 16]
	float UGCMoveSpeedScale;//[Offset: 0x3070, Size: 4]
	UGCMoveSpeedScaleModifyItem[] UGCMoveSpeedModifyList;//[Offset: 0x3078, Size: 16]
	bool bSkipDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3088, Size: 1]
	delegate OnBecomeOBViewTarget;//[Offset: 0x3090, Size: 16]
	delegate OnLeaveOBViewTarget;//[Offset: 0x30a0, Size: 16]
	CameraModifyData[] DefaultModifys;//[Offset: 0x30b0, Size: 16]
	delegate OnAnimInstanceChangeEvent;//[Offset: 0x30c0, Size: 16]
	SkeletalMeshComponent* LastSkeletalMesh;//[Offset: 0x30d0, Size: 8]
	AnimInstance* LastAnimInstance;//[Offset: 0x30d8, Size: 8]
	float CurrentGravityScale;//[Offset: 0x3148, Size: 4]
	float CheckCurWeaponMeshVisibleInterval;//[Offset: 0x314c, Size: 4]
	int CheckCurWeaponMaxFailedCount;//[Offset: 0x3150, Size: 4]
	float CurCheckCurWeaponMeshVisibleInterval;//[Offset: 0x3154, Size: 4]
	bool bHasReportWeaponMeshVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3158, Size: 1]
	bool bLockAddControllerInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3159, Size: 1]
	int CameraDebugReportCount;//[Offset: 0x3160, Size: 4]
	float CameraLocationErrorThreshold;//[Offset: 0x3164, Size: 4]
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, STExtraBaseCharacter* vaultCharacter, Vector StartPos);// 0x3ff6a10
	void VaultFailPawnCPP(const FString Content);// 0x3ff6984
	void VaultFailPawnBluePrint(out const FString Content);// 0x3ff68e8
	void UseVehWeaponView(STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x3ff6834
	bool UseSimulateView();// 0x3ff67fc
	void UserCancelRescue();// 0x3ff67e8
	void UpdateUGCMoveSpeedScale();// 0x3ff67d4
	bool UpdateShovelingState();// 0x3ff679c
	void UpdateShovelingHoldStateRelease();// 0x3ff6788
	void UpdateShovelingHoldStatePressed();// 0x3ff6774
	void UpdatePoseCollisionCpp(byte CurState, byte preState);// 0x3ff66bc
	void UpdateDynamicHoldGunOption();// 0x3ff66a8
	void UpdateCurrentShootWeaponTick();// 0x3ff6694
	void UpdateAttrRegisteredData();// 0x3ff6680
	void UnRegisterPlayerPickUpList();// 0x3ff6664
	void UnequipWeaponFinish();// 0x3ff6650
	void UnequipWeapon(byte Slot, bool bSwitchWeapon);// 0x3ff6590
	void UGCClientTakeDamage(int DamageType, float Damage, Pawn* InstiagatorPawn, float CurHealth, bool bFatalDamage, bool bHeadShot, Vector HitLocation, Vector HitFromDirection);// 0xffffff8f20d162a8
	void TryToBroadcastFatalDamageEvent(Controller* causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x3ff63f4
	void TryPeek(bool IsLeft, bool ButtonDown, bool IsManual);// 0x3ff62e0
	void TryFollowInitialParachuteLeader(FString Name);// 0x3ff6208
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x3ff6170
	bool TriggerBuffs();// 0x3ff6138
	void TimerDelayShowDeadTombBox(PlayerTombBox* DeadTombBox);// 0x3ff60bc
	void ThrowGrenadeModeChangedDelegate__DelegateSignature(enum NewMode, enum PrevMode);// 0xffffff8f20d162a8
	void TakeoutWeapons();// 0x3ff60a8
	bool TakeOtherDamage(STExtraBaseCharacter* attacher, float InDamageVal, Vector DamageDir);// 0x3ff5f9c
	void SyncServerTagsChange(out const FName[] newTags, out const FName[] oldTags);// 0x3ff5ea0
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x3ff5e1c
	void SwitchWeaponModuleSystemModificationScheme(int ThemeID);// 0x3ff5d6c
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x3ff5c14
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte InPoseState, float TimeStamp);// 0x3ff5ae4
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState);// 0x3ff59e8
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte InPoseState);// 0x3ff5928
	bool SwitchPoseState(byte State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);// 0x3ff5780
	void SwitchBackToPreviousDiffSlotWeaponOnServer();// 0x3ff576c
	void STServerUpdateState_New(Float_NetQuantize8 InThrottleInput, Float_NetQuantize8 InSteeringInput, int8 State, const Rotator ControlRotation);// 0x3ff5600
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8 State, const Rotator ControlRotation);// 0x3ff5494
	float StopSlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float BlendTime);// 0x3ff5394
	void StopShoveling();// 0x3ff5380
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x3ff52f0
	void StopMove();// 0x3ff52dc
	bool StopFireFilter();// 0x3ff529c
	void StopEmoteAnimTimer();// 0x3ff5288
	void StopCharacterAfterDead();// 0x3ff526c
	bool StartPlayEmoteAnim(int EmoteIndex, bool isCanCostSpecMotion);// 0x3ff5198
	bool StartFireFilter();// 0x3ff5158
	void StartEmoteAnimTimer(float Time);// 0x3ff50dc
	void SpawnFootprint(enum FootprintType);// 0x3ff5060
	void SpawnAndSwithToGrenadeServerCall(int GrenadeID);// 0x3ff4fb0
	STExtraWeapon* SpawnAndSwitchToGrenadeOnServer(FName SpesificLogicGrenadeSlot, int GrenadeID);// 0x3ff4ee8
	STExtraWeapon* SpawnAndSwitchToGrenadeOnClient(FName SpesificLogicGrenadeSlot, int GrenadeID);// 0x3ff4e20
	void ShowNightVisionFrame();// 0x3ff4e04
	void ShowInjuryScreenEffect();// 0x3ff4df0
	void ShowDebugRole();// 0x3ff4ddc
	void ShowDebugRecordData();// 0x3ff4dc8
	void ShowDebugPickUpFlow();// 0x3ff4db4
	void ShowDebugEquipOrUnequipFlow();// 0x3ff4da0
	void Shoveling();// 0x3ff4d8c
	bool ShouldUpdateHPOnUI();// 0x3ff4d4c
	bool ShouldShowPassCardBuyType();// 0x3ff4d14
	bool ShouldShowMedal();// 0x3ff4cdc
	bool ShouldShowHeadWidget();// 0x3ff4ca4
	bool ShouldShowEnjoyCard();// 0x3ff4c6c
	bool ShouldShowCorp();// 0x3ff4c34
	bool ShouldShowAnchor();// 0x3ff4bfc
	bool ShouldClearWeaponDelegatesOnRecycleInner();// 0x3ff4bbc
	bool ShouldClearWeaponDelegatesOnRecycle();// 0x3ff4b7c
	bool ShouldAutoScopeWhenPeek();// 0x3ff4b3c
	void SetWeaponShootType(byte shootType, STExtraShootWeapon* TargetWeapon);// 0x3ff4a7c
	void SetViewTargetAgainForOB();// 0x3ff4a68
	void SetUpUIStyleServer(bool bSetUp, UserWidgetStyle* UserWidgetStyle);// 0x3ff49a0
	void SetUpUIMaskServer(bool bSetUp, FString Param);// 0x3ff4884
	void SetUpSubViewTargetServer(bool bSetUp, Actor* TargetActor, float BlendTime);// 0x3ff4780
	void SetUpSubAnimInstanceServer(bool bSetUp, class AnimInstance SubInstanceClass, FName SlotName, Actor* OwningActor);// 0x3ff4644
	void SetUpLevelSequenceServer(bool bSetUp, Actor* OwningActor);// 0x3ff457c
	void SetUpActivityActionServer(bool bDo, out FName[] ActionName, Actor* OwningActor);// 0x3ff4458
	void SetUGCMoveSpeedScaleByName(float Scale, FString AttrModifyItemName);// 0x3ff4394
	void SetTPPDefaultFov(float InFov);// 0x3ff4310
	void SetThrowGrenadeMode(enum ThrowMode);// 0x3ff4294
	void SetSwimSpeedScale(float Scale);// 0x3ff4218
	void SetSwimSpeedModifier(float NewModifier);// 0x3ff419c
	void SetSprintSpeedScale(float Scale);// 0x3ff4120
	void SetSimClientLocationOrRotation(Vector Location, Rotator Rotation, bool setLoc, bool setRot);// 0x3ff3fc8
	void SetProneSpeedScale(float Scale);// 0x3ff3f4c
	void SetPoseStateAttrModifierEnable(byte InPoseState, bool Enable);// 0x3ff3e8c
	void SetPlayerVehAnimationNeedUpdate();// 0x3ff3e78
	void SetParachuteServerAuthorized();// 0x3ff3e64
	void SetMyGiftGiverCandidate(STExtraBaseCharacter* candidate, byte tempGiftType, int SubGiftType);// 0x3ff3d68
	void SetMoveSpeedModifier(float NewModifier);// 0x3ff3cec
	void SetJumpZVelocity(float JumpZVelocity);// 0x3ff3c70
	void SetJumpHeightModifier(float NewModifier);// 0x3ff3bf4
	void SetIsDuringTransferLeader(bool isTransfer);// 0x3ff3b70
	void SetIsAutoFollow(bool Val, STExtraBaseCharacter* IFollowWho);// 0x3ff3aa8
	void SetIgnoreBlueCircle(bool bIgnore);// 0x3ff3a24
	void SetHighWalkSpeed(float WalkSpeed);// 0x3ff39a8
	void SetHealthMax(float NewHealthMax);// 0x3ff392c
	void SetHealth(float NewHealth, byte Reason);// 0x3ff3874
	void SetHandFoldRatio(int Ratio);// 0x3ff37f8
	void SetGravityScale(float NewGravity);// 0x3ff377c
	void SetFPPDefaultFov(float InFov);// 0x3ff36f8
	void SetExitingParachute(bool ExitParachute);// 0x3ff3674
	void SetDelayStateSwitchTime(float DelayTime);// 0x3ff35fc
	void SetCurScopeFov(float InFov);// 0x3ff3580
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x3ff34a4
	void SetCurBonfire(BonfireActor* newBonfire);// 0x3ff3428
	void SetCrouchSpeedScale(float Scale);// 0x3ff33ac
	void SetComponentsActive(class Object ComponentClass, bool IsActive);// 0x3ff32e4
	void SetClientLocationOrRotationAndAttach(Vector Location, Rotator Rotation, SceneComponent* AttachScene, FName SocketName);// 0x3ff31a8
	void SetClientLocationOrRotation(Vector Location, Rotator Rotation, bool setLoc, bool setRot);// 0x3ff3050
	void SetCheatSpeedModifier(float NewModifier);// 0x3ff2fcc
	void SetCharacterMaxEnergy(const float InEnergyMax, const bool InIsUpdatePhase);// 0x3ff2f0c
	void SetCharacterEnergy(const float InEnergy);// 0x3ff2e94
	void SetCharacterAttrModifierEnable(FString ModifierName, bool IsEnable);// 0x3ff2dc8
	void SetCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x3ff2d08
	void SetAnimParamIsRescueing(bool Val);// 0x3ff2c84
	void SetAnimParamIsNearDeathStatus(bool Val);// 0x3ff2c00
	void SetAnimParamCallingForRevival(bool bIsCalling);// 0x3ff2b7c
	void SetAnimMontagePlayRate(AnimMontage* AnimMontage, float InPlayRate);// 0x3ff2ac4
	void SetAmbientRTPC(FString RTPC, float Value);// 0x3ff29b0
	void SetAllWeaponBulletNumToMaxOnServer(bool bCheckHasExtendDJ, bool bCheckAndConsumeBullet);// 0x3ff28e0
	int SetAdditiveVelocity(out const Vector InAdditiveVelocity);// 0x3ff2844
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, float TimeStamp);// 0x3ff2704
	void ServerUpdateShovelingHoldState(bool ishold);// 0x3ff2640
	void ServerTriggerJump();// 0x3ff25e0
	void ServerSetPeekState(bool IsLeft, bool ButtonDown, bool IsAutoScope);// 0x3ff247c
	void ServerSetPeekCollision(bool HasCollision);// 0x3ff23b8
	void ServerSetMovementState(Vector Input);// 0x3ff2300
	void ServerSendToLobbyServerUseItem(int ItemID, int Count, bool bUseDirectly);// 0x3ff2208
	void ServerSendToLobbyServerUseGiftItem(int ItemID, int Count, STExtraBaseCharacter* receiver, bool bUseDirectly);// 0x3ff20d0
	void ServerResponseInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x3ff1f40
	void ServerRequestPaintDecal(int DecalId, const PlayerDecalData DecalData);// 0x3ff1df8
	void ServerNightVisionUse(bool bUse);// 0x3ff1d34
	void ServerInviteTeammate(FString Name, enum InvitationType);// 0x3ff1c38
	void ServerHandleForceClearClientCreateWeaponCacheLocal();// 0x3ff1c1c
	void ServerForceStopVaultCPP();// 0x3ff1bbc
	void ServerForceStopVaultBluePrint();// 0x3ff1ba0
	void ServerFollowTeammate(FString Name);// 0x3ff1ae8
	void ServerChangeThrowGrenadeMode(enum ThrowMode);// 0x3ff1a38
	void ServerCancelFollow();// 0x3ff19d8
	void Server_SpawnActor(class Actor ActorTemplate, Quat Rotation, Vector RelativeLocation);// 0x3ff1868
	void SendServerMoveToClientUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x3ff172c
	void SendServerMoveToClientReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x3ff15f0
	void SendClientMoveToServerUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x3ff147c
	void SendClientMoveToServerReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x3ff1308
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxes();// 0x3ff12b8
	SearchedPickUpItemResult[] SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);// 0x3ff10f0
	bool SearchGroundWrappersAndTombBoxes(out SearchedPickUpItemResult[] OutGroundWrappers, out SearchedTombBoxAndWrapperListResult[] OutTombBoxes);// 0x3ff0f94
	void Scoping(byte NewType);// 0x3ff0f18
	void ScopeOut(byte NewType);// 0x3ff0e9c
	void ScopeInterrupt(byte NewType, bool ForceInterrupt);// 0x3ff0ddc
	bool ScopeIn(byte NewType);// 0x3ff0d4c
	void SaveMeshUpdateFlag();// 0x3ff0d2c
	void SafetyTeleportTo(out const Vector TargetPos, out const Rotator TargetRot);// 0x3ff0c48
	void RPC_Server_SwitchWeaponShootInterval(STExtraShootWeapon* Weapon, enum Mode);// 0x3ff0b58
	void RPC_Server_SwitchBackToPreviousDiffSlotWeapon();// 0x3ff0af8
	void RPC_Server_StopReload();// 0x3ff0a98
	void RPC_Server_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot, int GrenadeID);// 0x3ff09a8
	void RPC_Server_SetHandFoldRatio(int Ratio);// 0x3ff08f8
	void RPC_Server_SetCurScopeFov(float InFov);// 0x3ff0848
	void RPC_Server_PlayerPickUpErrorRsp(PickUpListWrapperActor* ListWrapper, int InstanceID, int TypeSpesificID, int Count, bool bInUIList, const PickUpItemData[] SearchTargetData, const PickUpItemData[] ListWrapperData);// 0x3ff0554
	void RPC_Server_OnDeathPlaybackMsg(FString VictimUID, FString AttackerUID, FString Msg);// 0x3ff0400
	void RPC_Server_EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x3ff033c
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x3ff02dc
	void RPC_Server_ChangeWeaponState(enum State, STExtraWeapon* Weapon);// 0x3ff01ec
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);// 0x3ff013c
	void RPC_CollideByTeamMate(STExtraBaseCharacter* pOtherChar);// 0x3ff008c
	void RPC_Client_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot, int GrenadeID);// 0x3feff9c
	void RPC_Client_ReportPlayerKillFlow(STExtraBaseCharacter* killedPlayer);// 0x3fefeec
	void RPC_Client_PlayerPickUpErrorReq(PickUpListWrapperActor* ListWrapper, int InstanceID, int TypeSpesificID, int Count);// 0x3fefd84
	void RPC_Client_PlayerDisuseFixWeapon(bool bCurIsFpp);// 0x3fefcf8
	void RPC_Client_OnNearDeathRecordingNotify(FString VictimName, FString VictimUID, FString SpectatorName, FString AttackerUID, bool bSpectatorIsAI);// 0x3fefb04
	void RPC_Client_OnDeathStopRecordingNotify(FString VictimName, FString VictimUID, FString SpectatorName, FString AttackerUID, bool bSpectatorIsAI, bool bForce);// 0x3fef8c4
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x3fef680
	void RPC_Client_EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x3fef5bc
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x3fef55c
	void RestoreMeshUpdateFlag();// 0x3fef53c
	void ResponceInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x3fef3f8
	void ResetValueLimitForHealthPredict();// 0x3fef3e4
	void ResetUGCMoveSpeedScale();// 0x3fef3d0
	void ResetSignalOnServer(bool bRescued);// 0x3fef34c
	void ResetJumpZVelocity();// 0x3fef338
	void ResetDamageReductionData();// 0x3fef324
	void ResetCharacterEnergy();// 0x3fef310
	void ResetCamera();// 0x3fef2fc
	void RequestUserCancleRescue();// 0x3fef29c
	bool RequestPaintDecal(int DecalId);// 0x3fef20c
	void ReqStartPlayEmote(int EmoteIndex, int TypeSpecificID, bool OpenCostSpec);// 0x3fef0d0
	void ReqStartFollowPlayEmote(int EmoteIndex, uint32 FollowPlayer, bool isCanCostSpecMotion);// 0x3feef94
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x3feeee4
	void ReqEmotePlayFinished(int EmoteIndex);// 0x3feee34
	void ReportAntiCheatInfo();// 0x3feee20
	void RemoveDynamicExtraDamageReduceCfg(FString AttachmentID);// 0x3feed48
	void RemoveDamageReductionData(int Key);// 0x3feeccc
	bool ReloadCurrentWeapon();// 0x3feec8c
	void RegisterPlayerPickUpList();// 0x3feec70
	void RefreshPersonPerspective();// 0x3feec5c
	void RefreshPawnVaultTypeServer();// 0x3feebfc
	void RefreshPawnVaultTypeAll(bool isFpsEnable);// 0x3feeb70
	void RefreshMoveAttrModifier();// 0x3feeb5c
	void RefreshHeadWidget(bool IsAdd, int InParam);// 0x3feea8c
	void RefreshAvatar(int SlotType, bool IsEquipped);// 0x3fee9cc
	void RecordFinalParachuteLeader();// 0x3fee9b8
	void ReceiveInitPlayerOrAI(bool bInIsAI);// 0xffffff8f20d162a8
	void ReceiveAddRadialImpulse(out const Vector Origin, float Radius, float Strength, class DamageType DamageTypeClass, bool bLinearFalloff, bool bVelChange);// 0xffffff8f20d162a8
	void ReadDefaultFov();// 0xffffff8f20d162a8
	void PutDownAllPropAndGenerateInventoryBox(Controller* EventInstigater);// 0x3fee93c
	void ProcessDragonBoatDrumSeat(bool enterDrumSeat);// 0x3fee8b8
	void PrintAIPolicyDecisionData();// 0x3fee8a4
	void PreSkillCacheWeaponSolt();// 0x3fee890
	void PostSpawnAndSwitchToGrenadOnClientBP(FName SpesificLogicGrenadeSlot, int GrenadeID);// 0x3fee7d0
	void PostLocalEquipWeaponLeanInOutBP(STExtraWeapon* Weapon, byte Slot);// 0x3fee710
	void PostGetPlayerAnimation();// 0xffffff8f20d162a8
	void PossessedBy(Controller* NewController);// 0x3fee68c
	void PlaySwitchSightSound();// 0x3fee678
	void PlaySwitchFireModeSound();// 0x3fee664
	void PlaySpecialAmbientSound(AkAudioEvent* TargetSound);// 0x3fee5e8
	float PlaySlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float InPlayRate, float BlendTime);// 0x3fee4b0
	void PlaySelfThrowAwayWeaponSound();// 0x3fee49c
	void PlayPullBoltSound();// 0x3fee488
	void PlayOperateItemSound(FString BankName, FString SoundName);// 0x3fee320
	void PlayMountAccessoriesSound();// 0x3fee30c
	void PlayMagOUTSound();// 0x3fee2f8
	void PlayMagINSound();// 0x3fee2e4
	void PlayLocalShellDropFX();// 0x3fee2d0
	void PlayLoadBulletSound();// 0x3fee2bc
	void PlayFootstepSound(byte FootStepState, Vector DSNotifyLocation);// 0x3fee1fc
	bool PlayerConfirmToRescue();// 0x3fee1c4
	void PlayEmoteClient(int EmoteId);// 0x3fee140
	void PlayCharacterDeadAnim(out const Vector KillingHitImpulseDir, out const DamageEvent DamageEvent, out const HitResult KillingHitInfo);// 0x3fedfe0
	void PlayChangeMagazineSound();// 0x3fedfcc
	void PlayAmbientSound();// 0x3fedfb8
	void PickUpWrapperActor(Actor* Target, out const PickUpItemData ItemData, int pickCount);// 0x3fede60
	void PickUpActor(Actor* Target, int AdditionalParam, int pickCount);// 0x3fedd70
	void PawnVaultStopCPP();// 0x3fedd54
	void PawnVaultStopBluePrint();// 0x3fedd38
	void PawnVaultServerStopCheckCPP();// 0x3fedcd8
	void PawnVaultServerStopCheckBluePrint();// 0x3fedcbc
	void PawnVaultServerCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Actor* WindowActor, Rotator movedir);// 0x3fed94c
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Actor* WindowActor, Rotator movedir);// 0x3fed630
	void PawnVaultAllCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir);// 0x3fed36c
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir);// 0x3fed08c
	FString ParsePlayerNameFromRemoteURL(FString RemoteURL);// 0x3fecf68
	void PackupWeapons();// 0x3fecf54
	float OverrideDamageValueWhenTakeDamage(float Damage, int DamageType, Controller* EventInstigator, Actor* DamageCauser, out const HitResult Hit);// 0x3fecdb0
	void OnWeaponEquipmentUpdate();// 0x3fecd94
	void OnUnEquipWeapon();// 0xffffff8f20d162a8
	void OnStopFire();// 0xffffff8f20d162a8
	void OnStateLeave(enum LeavedState);// 0x3fecd10
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x3fecc54
	void OnStateEnter(enum EnteredState);// 0x3fecbd0
	void OnStartFire(byte isAuto);// 0xffffff8f20d162a8
	void OnShowName(bool _IsShow, FString _Name);// 0xffffff8f20d162a8
	void OnServerCheckWarnSoundUAV(enum soundType);// 0x3fecb4c
	void OnScopeNotHandFold();// 0x3fecb38
	void OnScopeHandFold();// 0x3fecb24
	void OnRescueOtherSucceed();// 0x3fecb10
	void OnRep_WaterObj();// 0x3fecafc
	void OnRep_VehicleSeatIdx();// 0x3fecae8
	void OnRep_UnmannedVehicleSyncData();// 0x3fecacc
	void OnRep_TPPDefaultFov();// 0x3fecab8
	void OnRep_ThrowGrenadeMode(enum PrevMode);// 0x3feca3c
	void OnRep_ThePlane();// 0x3feca28
	void OnRep_Temperature(float LastValue);// 0x3fec9a4
	void OnRep_TeamID();// 0x3fec988
	void OnRep_SmoothNetUpdateRotationTime();// 0x3fec974
	void OnRep_SignalHPRemainingTime();// 0x3fec960
	void OnRep_SignalHP(float PrevVal);// 0x3fec8dc
	void OnRep_ShowRevivalPointIcon();// 0x3fec8c8
	void OnRep_ShowNicknameChangeEx();// 0x3fec8ac
	void OnRep_ScopeFov();// 0x3fec898
	void OnRep_ReplicatedParachuteState();// 0x3fec884
	void OnRep_ReplicatedMoveState();// 0x3fec870
	void OnRep_ReplicatedIsStartParachute();// 0x3fec85c
	void OnRep_ReplicatedAndOverridedSwimSpeed();// 0x3fec848
	void OnRep_PoseStateNotify(byte LastState);// 0x3fec7c4
	void OnRep_PlayerName();// 0x3fec7a8
	void OnRep_PlayerKey();// 0x3fec78c
	void OnRep_PeekHasCollision();// 0x3fec778
	void OnRep_PassCardBuyType();// 0x3fec764
	void OnRep_MoneyNotify();// 0x3fec750
	void OnRep_MedalPicUrl();// 0x3fec73c
	void OnRep_IsRescueingOtherStatusChange();// 0x3fec728
	void OnRep_IsInFortress();// 0x3fec714
	void OnRep_IsFPPChanged();// 0x3fec700
	void OnRep_IsBeingRescuedStatusChange();// 0x3fec6ec
	void OnRep_HideOnVehicle();// 0x3fec6d8
	void OnRep_HealthStatusChanged(byte PrevStatus);// 0x3fec654
	void OnRep_HealthPredict();// 0x3fec640
	void OnRep_Health(float PrevHealth);// 0x3fec5bc
	void OnRep_HandFolderRatio();// 0x3fec5a8
	void OnRep_GiftGiverCandidateTypeChanged();// 0x3fec594
	void OnRep_GiftGiverCandidateChanged();// 0x3fec580
	void OnRep_FPPDefaultFov();// 0x3fec56c
	void OnRep_FollowState();// 0x3fec558
	void OnRep_EnergyChange();// 0x3fec544
	void OnRep_DamageMagnifierIdx();// 0x3fec530
	void OnRep_CurSignalHPIsFullOrRecovering();// 0x3fec514
	void OnRep_CurrentVehicle(STExtraVehicleBase* LastVehicle);// 0x3fec498
	void OnRep_CurrentStates(uint64 prevStates);// 0x3fec414
	void OnRep_CurrentNetCullDistanceSquared();// 0x3fec400
	void OnRep_CurrentGravityScale();// 0x3fec3ec
	void OnRep_CurRemoteControlPawn();// 0x3fec3d0
	void OnRep_CurBonFire();// 0x3fec3bc
	void OnRep_CollisionRadiusOverride();// 0x3fec3a8
	void OnRep_CharacterFallingVelocityZFactor();// 0x3fec394
	void OnRep_BreathAmmountChange();// 0x3fec380
	void OnRep_bNightVisionUseTest();// 0x3fec36c
	void OnRep_bNightVisionUse();// 0x3fec358
	void OnRep_bIsCallingForRevival();// 0x3fec344
	void OnRep_bIsAI();// 0x3fec328
	void OnRep_bIgnoreBlueCircle();// 0x3fec314
	void OnRep_AngleSightRotOffsetChanged();// 0x3fec300
	void OnRep_AnchorPlat();// 0x3fec2ec
	void OnRep_AKEventNotify();// 0x3fec2d8
	void OnReconnectOnClient();// 0x3fec2c4
	void OnPostFlushHealthChangeHistoryOnServer();// 0x3fec2a8
	void OnPoseStateChange(byte LastState, byte CurState);// 0xffffff8f20d162a8
	void OnPlayerFinished();// 0x3fec294
	void OnPlayEmoteSequence(out const PlayEmoteID[] PlayEmoteIDList, bool Loop);// 0x3fec1ac
	void OnPlayEmote(int EmoteId, int TypeSpecificID);// 0x3fec0f8
	void OnOpenDoor(PUBGDoor* door, int doorState);// 0x3fec038
	void OnNotifyHurt();// 0xffffff8f20d162a8
	void OnLoadActivityParticleCompleted(SoftObjectPath SoftObjectPath, bool NeedOffset);// 0x3febf14
	void OnLoadActivityAudioCompleted();// 0x3febf00
	void OnLoadActivityAnimationCompleted(SoftObjectPath SoftObjectPath);// 0x3febe20
	void OnInterruptCurrentEmote();// 0x3febe0c
	void OnGameModeStateChanged(FName State);// 0x3febd90
	void OnGameEnterFightServer();// 0x3febd30
	void OnGameEnterFightMulticast();// 0x3febcd0
	void OnFollowStateChange();// 0x3febcb4
	bool OnFollowNearPlayerEmote();// 0x3febc7c
	void OnFlushHealthChangeHistoryOnClient(out const float[] ChangeHistory);// 0x3febbe0
	void OnEquipWeapon(byte Slot);// 0xffffff8f20d162a8
	void OnEndCurrentEmote(int EmoteIndex, enum EndReason);// 0x3febb28
	void OnDetectPaintDecalTarget(bool bStart);// 0xffffff8f20d162a8
	void OnCurEquipedShootWeaponChangeState(enum LastState, enum State);// 0x3feba68
	void OnCharacterAvatarLoadFinish(int AsyncLoadID, AvatarComponent* LoadEventFrom);// 0x3feb9b0
	void OnChangeCurrentUsingWeapon(byte TargetChangeSlot);// 0x3feb92c
	void OnCameraModeChange(byte NewMode);// 0x3feb8b0
	void OnBubbleAssetLoaded(ParticleSystem* LoadedFX);// 0x3feb7c0
	void OnBPMoneyChange();// 0xffffff8f20d162a8
	void OnBPHealthChange();// 0xffffff8f20d162a8
	void OnBeforeGetUp();// 0xffffff8f20d162a8
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim);// 0x3feb6d0
	void NM_SetPeekState(bool Enable, bool IsLeft);// 0x3feb5f8
	void MulticastStartPlayEmote(int EmoteIndex, bool isCanCostSpecMotion);// 0x3feb4f4
	void MulticastStartFollowPlayEmote(int EmoteIndex, uint32 FollowPlayer, bool isCanCostSpecMotion);// 0x3feb3b8
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x3feb308
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x3feb258
	bool Montage_IsPlaying(AnimMontage* AnimMontage);// 0x3feb1c8
	float Montage_GetPosition(const AnimMontage* AnimMontage);// 0x3feb13c
	void MeleeServer();// 0x3feb0dc
	void MeleeReleased();// 0x3feb0c8
	void MeleeLocal();// 0xffffff8f20d162a8
	void MeleeBroadcastOtherClients();// 0x3feb068
	void Melee(bool IsForCE);// 0x3feafe4
	void LogWeaponsDataInWeaponManagerAndBackpack();// 0x3feafd0
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x3feaea8
	bool LocalStartPlayEmote(int EmoteIndex, int TypeSpecificID, bool bOpenCost);// 0x3fead9c
	bool LocalStartFollowPlayEmote(int EmoteIndex, uint32 FollowPlayer, bool isCanCostSpecMotion);// 0x3feac90
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x3feac00
	void LocalHandlePlayerDisuseFixWeapon(bool bCurIsFpp);// 0x3feab74
	bool LeaveState(enum State);// 0x3feaadc
	void LeaveServerState(enum State);// 0x3feaa2c
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x3fea910
	bool IsVelocitySimulated();// 0x3fea8d8
	bool IsValidPaintDecalTarget_Simple();// 0x3fea8b8
	bool IsValidPaintDecalTarget(out enum OutvalidationType, out Vector OutStart, out Vector OutEnd);// 0x3fea768
	bool IsValidFootEffectTarget(out Vector OutEnd);// 0x3fea6c8
	bool IsUsingGrenade();// 0x3fea690
	int IsUseCameraProcess();// 0x3fea65c
	bool IsTeammateWith(STExtraPlayerController* InPC);// 0x3fea5cc
	bool IsSwimOnWaterSuface();// 0x3fea594
	bool IsStanding();// 0x3fea560
	bool IsSkipSpawnDeadTombBox(Controller* EventInstigater);// 0x3fea4c8
	bool IsSameTeamWithPlayerState(PlayerState* otherPS);// 0x3fea438
	bool IsSameTeam(const Pawn* Other);// 0x3fea3a0
	bool IsReplayViewTarget();// 0x3fea360
	bool IsProning();// 0x3fea32c
	bool IsProneMove();// 0x3fea2f4
	bool IsPlayingEmoteSequence();// 0x3fea2bc
	bool IsOnVehicleNotUAV();// 0x3fea280
	bool IsOnVehicle();// 0x3fea25c
	bool IsNowUpWater();// 0x3fea224
	bool IsNotRelevantInScript(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x3fea104
	bool IsNearDeath();// 0x3fea0cc
	bool IsLocalViewed();// 0x3fea08c
	bool IsInFlyingTeam();// 0x3fea054
	bool IsInFallingState();// 0x3fea01c
	bool IsInEditor();// 0x3fe9fe4
	bool IsHealthyAlive();// 0x3fe9fac
	bool IsHealthAlive();// 0x3fe9f74
	bool IsHandleInFold();// 0x3fe9f3c
	bool IsFirstPerson();// 0x3fe9f04
	bool IsFatalDead();// 0x3fe9ec4
	bool IsExitingParachute();// 0x3fe9e8c
	bool IsEnterWaterSuface();// 0x3fe9e54
	bool IsDynamicMovementBase(PrimitiveComponent* Component);// 0x3fe9dc4
	bool IsDetectingPaintDecalTarget();// 0x3fe9da4
	bool IsCrouching();// 0x3fe9d70
	bool IsCharacterSprinting();// 0x3fe9d38
	bool IsCanPlayEmote(int TypeSpecificID);// 0x3fe9ca8
	bool IsAngledSight();// 0x3fe9c70
	bool IsAllowScopeIn();// 0x3fe9c38
	bool IsAlive();// 0x3fe9bf8
	void InviteTeammate(FString Name, enum InvitationType);// 0x3fe9b34
	void InsertDelayStateRelation(enum OldState, enum NewState);// 0x3fe9a7c
	bool InDragonBoatDrumSeat();// 0x3fe9a44
	void HideNightVisionFrame();// 0x3fe9a28
	void HideDeadBody(float DelayTime);// 0x3fe99a4
	bool HaveAngledSight();// 0x3fe996c
	bool HasState(enum State);// 0x3fe98d4
	bool HasItemFromBackPack(int InItemDefineID);// 0x3fe9844
	bool HasDynamicMovementBase();// 0x3fe980c
	bool HasAnyStates(enum[] states);// 0x3fe9728
	bool HasAllStates(enum[] states);// 0x3fe9644
	void HandleWeaponOnShoot();// 0x3fe9628
	void HandleUnmannedVehicleControlAnimLoadFinished(byte InAnimType, STExtraVehicleBase* Vehicle, float PlayRate);// 0x3fe9534
	void HandleRemoteControlChanged();// 0x3fe9518
	void HandlePlayOperateItemSoundOnServer(FString BankName, FString SoundName);// 0x3fe93b0
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x3fe92f8
	void HandlePlayerPickUpActor(Actor* WrapperActor, float TargetZLoc);// 0x3fe9240
	void HandlePlayEmoteCloseWeapon(byte TargetChangeSlot);// 0x3fe91c4
	void HandleOpenPickUpBoxAction();// 0x3fe91b0
	void HandleOnCharAnimLoadingFinished();// 0x3fe9194
	void HandleCurWeaponMeshUnVisible();// 0xffffff8f20d162a8
	void HandleConsumeItemSkillBreak();// 0x3fe9178
	void HandleClientNetShutDownOnShowResultUI();// 0x3fe9164
	void HandleAutoSwitchWeaponDelay();// 0x3fe9150
	void GrenadeBackToWeaponServerCall();// 0x3fe90f0
	void GMTestZengzuo();// 0x3fe90dc
	void GMShowName();// 0x3fe90c8
	bool GlobalFollowPlayEmoteSwitch();// 0x3fe9088
	WeaponManagerComponent* GetWeaponManager();// 0x3fe9054
	Rotator GetViewRotation();// 0x3fe9014
	float GetValueLimitForHealthPredict();// 0x3fe8fe0
	float GetUGCMoveSpeedScaleByName(FString AttrModifyItemName);// 0x3fe8f4c
	float GetUGCMoveSpeedScale();// 0x3fe8f18
	enum GetUAVState();// 0x3fe8efc
	float GetTPPDefaultFov();// 0x3fe8ec0
	enum GetThrowGrenadeMode();// 0x3fe8ea0
	SpringArmComponent* GetThirdPersonSpringArm();// 0xffffff8f20d162a8
	CameraComponent* GetThirdPersonCamera();// 0xffffff8f20d162a8
	ParachuteFollowState[] GetTeammateParachuteFollowStateList();// 0x3fe8e1c
	int GetTeammateIndex(STExtraBaseCharacter* Teammate);// 0x3fe8d90
	float GetSwimSpeedScale();// 0x3fe8d5c
	float GetSwimSpeedModifier();// 0x3fe8d28
	float GetSprintSpeedScale();// 0x3fe8cf4
	AkComponent* GetSoundComponent();// 0x3fe8cb8
	Vector GetSimulatedVelocity();// 0x3fe8c80
	FString GetShootWeaponNameByWeapon(int ItemDefineID);// 0xffffff8f20d162a8
	Actor*[] GetShootLineTraceExtraIgnoreActors(STExtraShootWeapon* OwnerShootWeapon, Rotator ShootRot);// 0x3fe8b6c
	SpringArmComponent* GetScopeSpringArm();// 0x3fe8b38
	CameraComponent* GetScopeCamera();// 0xffffff8f20d162a8
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold, bool ShouldPutDownOffset);// 0x3fe8a64
	float GetProneSpeedScale();// 0x3fe8a30
	BoxComponent* GetProneShapeComponent();// 0x3fe8a14
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x3fe894c
	PlayerVehAnimList GetPlayerVehAnimation();// 0x3fe8910
	int GetPlayerTeamIndex();// 0x3fe88dc
	STExtraPlayerState* GetPlayerStateSafety();// 0x3fe88a8
	PersistClientStateComponent* GetPlayerPersistClientState();// 0x3fe8874
	Vector GetPlayerMovementDir();// 0x3fe8834
	byte GetPlayerJumpType();// 0x3fe8800
	FString GetPlayerDetailInfo();// 0x3fe8780
	STExtraPlayerController* GetPlayerControllerSafety();// 0x3fe8744
	STExtraPlayerController* GetPlayerControllerInReplay();// 0x3fe8710
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType, byte AnimListOverride, byte PoseTypeOverride);// 0x3fe8608
	PlayerAnimList GetPlayerAnimation();// 0x3fe85c0
	byte GetPersistentRole();// 0x3fe85a4
	ParachuteFollowState GetParachuteFollowStateByPlayerIndex(const int InPlayerIndex);// 0x3fe8518
	float GetMoveSpeedModifier();// 0x3fe84e4
	bool GetMovementAttrModifier(float Value, int Dir, out FString OutValue, byte PoseType);// 0x3fe8380
	void GetMoveInputState(out Vector OutMoveInputState);// 0x3fe82ec
	Vector GetMoveInputLocalDir();// 0x3fe82b4
	FString GetLatestInviter();// 0x3fe8234
	void GetLastMoveInputState(out Vector OutMoveInputState);// 0x3fe819c
	float GetJumpHeight();// 0x3fe8168
	bool GetIsPlayingEmote();// 0x3fe8130
	bool GetIsFPP();// 0x3fe80f0
	bool GetIsEffectMotionEmote(int EmoteIndex);// 0x3fe8058
	float GetHealthMax();// 0x3fe8024
	float GetHealth();// 0x3fe7ff0
	FString GetGrenadeNameByGrenadeType(int grenadeType);// 0x3fe7f18
	float GetFPPDefaultFov();// 0x3fe7edc
	BaseFPPComponent* GetFPPComp();// 0x3fe7ea8
	Vector GetFollowerLocOffset(STExtraBaseCharacter* follower);// 0x3fe7e18
	SpringArmComponent* GetFirstPersonSpringArm();// 0xffffff8f20d162a8
	CameraComponent* GetFirstPersonCamera();// 0xffffff8f20d162a8
	MeshComponent*[] GetExtraDisplayMeshComps();// 0xffffff8f20d162a8
	float GetExtraDamageBySignalHP(float InDamge);// 0x3fe7d8c
	STExtraAnimInstanceBase* GetExtraAnimInstanceBase(bool bisFPP);// 0x3fe7cf8
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0xffffff8f20d162a8
	FString GetEmote(int ItemDefineID);// 0xffffff8f20d162a8
	float GetDeadBodyDisappearTime();// 0x3fe7cc4
	STExtraWeapon* GetCurrentWeapon();// 0x3fe7c88
	STExtraVehicleBase* GetCurrentVehicle();// 0x3fe7c4c
	STExtraWeapon* GetCurrentShieldWeapon();// 0x3fe7c18
	int GetCurrentPlayEmoteID();// 0x3fe7bfc
	float GetCurrentFOV();// 0x3fe7bc8
	AnimMontage* GetCurPlayingEmote();// 0x3fe7b94
	float GetCurCharacterEnergyValue();// 0x3fe7b78
	float GetCrouchSpeedScale();// 0x3fe7b44
	FString GetCorpName();// 0x3fe7ac4
	Controller* GetControllerSafety();// 0x3fe7a88
	UAEChaParachuteAnimListComponent* GetCharParachuteAnimListComponent();// 0x3fe7a54
	float GetCharacterXYPlaneVelocity();// 0x3fe7a20
	STCharacterRescueOtherComp* GetCharacterRescueOtherComponent();// 0x3fe79ec
	CharacterParachuteComponent* GetCharacterParachuteComponent();// 0x3fe79b8
	STCharacterNearDeathComp* GetCharacterNearDeathComponent();// 0x3fe7984
	STCharacterMovementComponent* GetCharacterMovementComponent();// 0x3fe7950
	CharacterEnergyData GetCharacterEnergy();// 0x3fe78b0
	UAECharacterAnimListComponent* GetCharacterAnimComponent();// 0x3fe7874
	Rotator GetCachedControlRotation();// 0x3fe783c
	STCharacterBonfireLinkComp* GetBonfireLinkComp();// 0x3fe7808
	CharacterAvatarComponent* getAvatarComponent();// 0x3fe77d4
	float GetAnimMontagePlayRate(AnimMontage* AnimMontage);// 0x3fe7748
	Vector GetAdditiveVelocity();// 0x3fe7710
	SpringArmComponent* GetActiveSpringArm();// 0x3fe76d4
	CameraComponent* GetActiveCamera();// 0x3fe76a0
	void FpsPawnVaultToServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x3fe7430
	void FpsPawnVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x3fe721c
	void ForceUpdateSpringArm();// 0x3fe7200
	void ForceSwitchWeaponBySlotOnServer(byte Slot, bool bUseAnimation);// 0x3fe7138
	void ForcePlayerUpdateAnimation();// 0x3fe7124
	void ForceCorrectClient(const Vector Postion, const Rotator Rotation, const Vector Velocity);// 0x3fe7024
	void FollowTeammate(FString Name);// 0x3fe6f4c
	void FinishEmoteAnim(int EmoteIndex, enum EndReason);// 0x3fe6e94
	enum FindBuffRelatedPawnState(FName _buffName);// 0x3fe6e00
	void FillPlayerAnimRate(out PlayerAnimList InAnimList);// 0x3fe6d60
	void ExecFollowTeammate(FString Name);// 0x3fe6c88
	void EquipZoomScope(int WeaponID, int ScopeID);// 0x3fe6bd4
	void EquipWeaponFinish();// 0x3fe6bc0
	void EquipWeapon(byte Slot, bool bSwitchWeapon);// 0x3fe6b00
	bool EnterState(enum State);// 0x3fe6a68
	void EnterServerState(enum State);// 0x3fe69b8
	void EnableGameModeOverrideAttrs();// 0x3fe69a4
	void EnableFollowPlayEmote(bool Enable);// 0x3fe6920
	void EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x3fe689c
	void EnableAllMoveAttrModifier();// 0x3fe6888
	bool EmoteAnimFinishedSuccessfully();// 0x3fe6850
	void DynamicSetupMoveInputStateExRep(bool bForceOpenWithReplay);// 0x3fe67cc
	void DrawTraceEnemyLine(Vector StartPos, Vector EndPos, bool bCanNotSeeTarget);// 0x3fe66b8
	void DoFootEffectTarget(bool bStart);// 0xffffff8f20d162a8
	void DoDetectPaintDecalTarget(bool bStart);// 0x3fe6634
	void DisappearOnDeath();// 0x3fe6620
	void DisablePawnCollision();// 0x3fe6604
	void DisableAllMoveAttrModifier(byte PoseType);// 0x3fe6588
	void DettachWeapon();// 0x3fe6574
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x3fe6560
	void DelayMoveEnd();// 0x3fe654c
	void DelayMove(float Time);// 0x3fe64d0
	void DelayCustomDepth(float Time);// 0x3fe6454
	CapsuleComponent* CreateCapsuleComponentForDeltaRotation(enum Why);// 0x3fe63c0
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x3fe632c
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation);// 0x3fe622c
	void ClientSyncServerTagsChange(const FName[] newTags, const FName[] oldTags);// 0x3fe6124
	void ClientStopShoveling();// 0x3fe60c4
	void ClientSomeOneResponseMe(FString BeInvitedName, enum res, enum InivationType);// 0x3fe5fbc
	void ClientSomeOneInviteMe(FString SomeOne, enum InvitationType);// 0x3fe5ef0
	void ClientShowAutoGroupParachuteTeamTips(bool bDoGroupSuccessfully);// 0x3fe5e64
	void ClientSetLeaveVehicleLocation(Vector LeaveLocation);// 0x3fe5ddc
	void ClientSetActorLocation(Vector Location, bool bDeactiveMov);// 0x3fe5d0c
	void ClientResponsePeekFail();// 0x3fe5cf0
	void ClientResponseFeedback(enum res);// 0x3fe5c6c
	void ClientOnPossessBy(Controller* NewController);// 0x3fe5bbc
	void ClientInterruptPlayEmote(int EmoteIndex);// 0x3fe5b0c
	void ClientHealthMaxChanged(out const AttrAffected[] AffectedAttrS);// 0x3fe5a50
	void ClientCheckStartShovelingFail();// 0x3fe59f0
	void ClientBulletLineTrace(Vector BornPos, Vector EndPos, STExtraBaseCharacter* InstigatorCharacter);// 0x3fe58a8
	void Client_All_ShowActivityHPOverUI(int CurrentAH, STExtraBaseCharacter* attacher, Vector DamageDir);// 0x3fe57a4
	void ClearMoveInput();// 0x3fe5788
	void ClearMoveAntiCheat();// 0x3fe5774
	void ClearHPUI();// 0x3fe5758
	void ClearClientJump();// 0x3fe5744
	void ClearAdditiveVelocity(int AdditiveVelocityID);// 0x3fe56c8
	void ClearActivityActionServer();// 0x3fe56b4
	bool CheckPoseStateChange(byte State, bool ShouldShowPrompt);// 0x3fe55e0
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x3fe5540
	bool CheckPickWeaponCanAutoUse();// 0x3fe5500
	bool CheckOnMoveablePlatform();// 0x3fe54c8
	FString CheckCurWeaponMeshVisibleInner(MeshComponent* TargetMesh);// 0x3fe53f0
	bool CheckCurWeaponMeshVisibleCondition();// 0x3fe53b0
	void CheckCurWeaponMeshVisible(float DeltaTime);// 0x3fe532c
	bool CheckCanSwitchFPP();// 0x3fe52ec
	bool CheckCanPaintDecalOnServer();// 0x3fe52ac
	void CheckAnimInstanceChange();// 0x3fe5298
	void CheckActivitySyncData();// 0x3fe527c
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x3fe5178
	void ChangeVehWeaponCameraData(bool Enable);// 0x3fe50f4
	bool CanStartReceive();// 0x3fe50bc
	bool CanPaintDecal(int DecalId);// 0x3fe502c
	bool CanHearWeaponLockSound();// 0x3fe4fec
	bool CanEnterState(enum NewState);// 0x3fe4f5c
	bool CanChangeThrowMode();// 0x3fe4f24
	void CancelFollow();// 0x3fe4f10
	Vector CalShootTargetLocationBP(STExtraShootWeapon* OwnerShootWeapon, Rotator ShootRot, Vector Ret);// 0x3fe4df8
	void CalculatePickUpItemFlow(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam);// 0x3fe4c88
	void CalculateActivityEventFlowExt(int EventId, int InCount, int ExtraParam, Vector Loc, FString Str);// 0x3fe4a8c
	void CalculateActivityEventFlow(TLog_ActivityEventType InEventID, int InCount);// 0x3fe49c8
	void CalculateActivityEventDistinctFlow(TLog_ActivityEventType InEventID, int InCount);// 0x3fe4904
	void BulletLineTrace(Vector BornPos, Vector EndPos, PrimitiveComponent* MeshComp, Actor* BulletActor);// 0x3fe47c0
	void BulletChange();// 0x3fe4760
	void BuffTimeTick(float DeltaTime);// 0x3fe46e4
	void BuffTick(float DeltaTime);// 0x3fe4668
	void BroadcastOtherClientsDie(Controller* Killer, Actor* DamageCauser, const HitResult KillingHitInfo, Vector KillingHitImpulseDir, const DamageEvent DamageEvent, bool bIsPointDamage);// 0x3fe4434
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe4230
	void BroadcastClientsSimulateSTCustomRadialDamage(float BaseDamage, const STCustomRadialDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe4018
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe3e14
	void BroadcastClientsSimulatePoisonWaterDamage(float BaseDamage, const STPoisonWaterDamageEvent PoisonWaterDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe3c18
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe3a18
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe3818
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe360c
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe33f4
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe31f4
	void BroadcastClientsSimulateDamage_UGCRadialDamage(float BaseDamage, const UGCRadialDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe2fd4
	void BroadcastClientsSimulateDamage_UGCPointDamage(float BaseDamage, const UGCPointDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe2dd0
	void BroadcastClientsSimulateDamage_STRadial(float BaseDamage, const STRadialDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe2bb8
	void BroadcastClientsSimulateDamage_ShootWeaponNew(float BaseDamage, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte AvatarDamagePosition, Vector_NetQuantize ImpactPoint, class DamageType DamageTypeClass, Vector_NetQuantizeNormal ShootDir, FName HitBone);// 0x3fe28f0
	void BroadcastClientsSimulateDamage_ShootWeapon(float BaseDamage, const ShootWeaponDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe26d4
	void BroadcastClientsSimulateDamage_LowTemperature(float BaseDamage, const LowTemperatureDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe24d4
	void BroadcastClientsSimulateDamage_LastBreathWithoutRescue(float BaseDamage, const LastBreathWithoutRescueDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe22d4
	void BroadcastClientsSimulateDamage_Electric(float BaseDamage, const ElectricDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe20d4
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe1ed4
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3fe1cc8
	void BroadcastClientsDeath(float Damage, const DamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x3fe1b38
	void BroadcastClientDeath_ShootWeaponDamageNew(float Damage, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage, byte AvatarDamagePosition, Vector_NetQuantize ImpactPoint, class DamageType DamageTypeClass, Vector_NetQuantizeNormal ShootDir, FName HitBone);// 0x3fe18f0
	void BroadcastClientDeath_ShootWeaponDamage(float Damage, const ShootWeaponDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x3fe1754
	float BPTakeDamage(float Damage, const Controller* EventInstigator, const Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x3fe15f4
	void BPResetCharacter();// 0xffffff8f20d162a8
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0xffffff8f20d162a8
	void BPReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0xffffff8f20d162a8
	void BPReceiveMeleeDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff8f20d162a8
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff8f20d162a8
	void BPOnBodyDurabilityChange(float OldValue, float NewValue, enum HitPosition, FString BodyDurabilityIndexName);// 0xffffff8f20d162a8
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0xffffff8f20d162a8
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0xffffff8f20d162a8
	void BPLua_PostNetInit();// 0xffffff8f20d162a8
	void BPDie(float KillingDamage, Controller* EventInstigator, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, out const DamageEvent DamageEvent, bool IsClient, bool IsPointDamage, bool IsHeadShotDamage, int damageTypeID);// 0x3fe12d4
	void BP_RegisterModifiedAttributes();// 0xffffff8f20d162a8
	bool BornIslandFollowPlayEmoteSwitch();// 0x3fe1294
	bool BlueprintUpdateMoveSpeed(out float OutMaxSpeed);// 0xffffff8f20d162a8
	bool BlueprintSetPoseStateAttrModifierEnable(byte InPoseState, bool bNewEnable);// 0xffffff8f20d162a8
	bool BlueprintSetCharacterAttrModifierEnable(FString ModifierName, bool bNewEnable);// 0xffffff8f20d162a8
	bool BlueprintRefreshMoveAttrModifier();// 0xffffff8f20d162a8
	bool BlueprintGetMovementAttrModifier(float Value, int Dir, out FString OutValue, byte PoseType, out bool bIsValid);// 0xffffff8f20d162a8
	bool BlueprintEnableAllMoveAttrModifier();// 0xffffff8f20d162a8
	bool BlueprintDisableAllMoveAttrModifier(byte PoseType);// 0xffffff8f20d162a8
	void AutoScopeWhenPeek();// 0x3fe1280
	void AttachWeapon();// 0x3fe126c
	void AsyncAnimOpenDoorCallback(AnimationAsset* retAsset);// 0x3fe11f0
	void AddOneDamageCauserRecord(Controller* causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x3fe1054
	void AddMoveOffSet(float Forward, float Right, float Up);// 0x3fe0f64
	void AddDynamicExtraDamageReduceCfg(ExtraDamageReduceCfg AddCfg);// 0x3fe0e30
	int AddDamageReductionData(DamageReductionRule Rule, int Key);// 0x3fe0c40

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnDeath;//[Offset: 0xab8, Size: 16]
	delegate OnCharacterStatesChange;//[Offset: 0xac8, Size: 16]
	delegate OnSimulateCharacterStatesChange;//[Offset: 0xad8, Size: 16]
	delegate OnCharacterPostNetInit;//[Offset: 0xae8, Size: 16]
	int MonsterID;//[Offset: 0xaf8, Size: 4]
	delegate CharacterAnimEventDelegate;//[Offset: 0xb00, Size: 16]
	enum[] CanMoveNavLinkTypeList;//[Offset: 0xb10, Size: 16]
	<enum> CanMoveNavLinkExtendedFlagList;//[Offset: 0xb20, Size: 80]
	enum[] CanNotMoveNavLinkDirectionList;//[Offset: 0xb70, Size: 16]
	bool bInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb80, Size: 1]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xb88, Size: 16]
	float Health;//[Offset: 0xb98, Size: 4]
	float HealthMax;//[Offset: 0xb9c, Size: 4]
	float SignalHP;//[Offset: 0xba0, Size: 4]
	float SignalHPScale;//[Offset: 0xba4, Size: 4]
	float PreSignalHP;//[Offset: 0xba8, Size: 4]
	float PreviousSignalHP;//[Offset: 0xbac, Size: 4]
	float SignalHPMax;//[Offset: 0xbb0, Size: 4]
	float SignalHPRecoverCDMax;//[Offset: 0xbb4, Size: 4]
	float SignalHPRecoverSpeed;//[Offset: 0xbb8, Size: 4]
	float CurSignalHPRecoverCD;//[Offset: 0xbbc, Size: 4]
	bool bCurSignalHPIsFullOrRecovering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0, Size: 1]
	FString EnergyBuffListName;//[Offset: 0xbc8, Size: 16]
	float ResetSignalHP_FatalDamage;//[Offset: 0xbd8, Size: 4]
	float ResetSignalHP_Rescued;//[Offset: 0xbdc, Size: 4]
	float CheckCirclePainDeltaTimeMax;//[Offset: 0xbe0, Size: 4]
	float DefaultSpeedValue;//[Offset: 0xbe4, Size: 4]
	float SpeedValue;//[Offset: 0xbe8, Size: 4]
	float SpeedScale;//[Offset: 0xbec, Size: 4]
	float SpeedWeaponModuleModifier;//[Offset: 0xbf0, Size: 4]
	float SwimSpeedDynamicScale;//[Offset: 0xbf4, Size: 4]
	FName BulletBlockComponentTag;//[Offset: 0xbf8, Size: 8]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc00, Size: 1]
	bool bHideAllPrimitiveOnDead;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc00, Size: 1]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0xc08, Size: 80]
	byte TeamNum;//[Offset: 0xc58, Size: 1]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0xc60, Size: 16]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc74, Size: 1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc75, Size: 1]
	float threatenValue;//[Offset: 0xc78, Size: 4]
	float Temperature;//[Offset: 0xc7c, Size: 4]
	float TemperatureMax;//[Offset: 0xc80, Size: 4]
	float TemperatureMin;//[Offset: 0xc84, Size: 4]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0xc88, Size: 8]
	TickControlComponent* TickControlComp;//[Offset: 0xc98, Size: 8]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0xca8, Size: 8]
	VehicleMotorbikeComponent* motorbikeComp;//[Offset: 0xcb0, Size: 8]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0xcb8, Size: 16]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0xcc8, Size: 16]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0xcd8, Size: 8]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xce0, Size: 8]
	RemoteControlComponent* CurRemoteControlPawn;//[Offset: 0xce8, Size: 8]
	RemoteControlComponent* LastRemoteControlPawn;//[Offset: 0xcf0, Size: 8]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf8, Size: 1]
	delegate StateInterruptedHandlerBP;//[Offset: 0xd00, Size: 16]
	delegate StateEnterHandler;//[Offset: 0xd10, Size: 16]
	delegate TargetStateEnterHandler;//[Offset: 0xd20, Size: 16]
	delegate StateLeaveHandler;//[Offset: 0xd30, Size: 16]
	delegate TargetStateLeaveHandler;//[Offset: 0xd40, Size: 16]
	PawnStateRepSyncData PawnStateRepSyncData;//[Offset: 0xd70, Size: 16]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0xd80, Size: 16]
	PawnStateCustomRelation[] CustomPawnStateRelation;//[Offset: 0xd90, Size: 16]
	delegate OnPawnStateDisabled;//[Offset: 0xda0, Size: 16]
	delegate OnPawnStateEnabled;//[Offset: 0xdb0, Size: 16]
	STBaseBuffSystemComponent* BuffSystemComponent;//[Offset: 0xde0, Size: 8]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xde8, Size: 8]
	delegate OnPlayerPoseChange;//[Offset: 0xdf0, Size: 16]
	delegate OnPlayerPoseChange_Animation;//[Offset: 0xe00, Size: 16]
	EffectComponent* NewEffectComponent;//[Offset: 0xe10, Size: 8]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe18, Size: 1]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe19, Size: 1]
	float CompVisionOpDis;//[Offset: 0xe1c, Size: 4]
	float CompVisionOpDelay;//[Offset: 0xe20, Size: 4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe24, Size: 1]
	FString PawnStatesExtend;//[Offset: 0xe88, Size: 16]
	PartHitComponent* PartHitComponent;//[Offset: 0xea0, Size: 8]
	UTSkillManagerComponent* SkillManagerComponent;//[Offset: 0xea8, Size: 8]
	AIShootingOffsetComponent* AIShootingOffsetComp;//[Offset: 0xeb0, Size: 8]
	bool bEnableWrappedLightBeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebc, Size: 1]
	Controller* PrevController;//[Offset: 0xec0, Size: 8]
	float GravityScaleAuthorized;//[Offset: 0xec8, Size: 4]
	bool bShouldCheckAttachedParentIsNull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecc, Size: 1]
	ActivitySyncData ActicitySyncData;//[Offset: 0xed0, Size: 32]
	bool bDisableFaceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf30, Size: 1]
	TurnAroundViewComponent* TurnAroundViewComp;//[Offset: 0xf38, Size: 8]
	AimOffsetViewComponent* AimOffsetViewComp;//[Offset: 0xf40, Size: 8]
	PlayerVaultComponent* PlayerVaultComp;//[Offset: 0xf48, Size: 8]
	bool bShouldDisableGunValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf50, Size: 1]
	Actor* CachedOldAttach;//[Offset: 0xf58, Size: 8]
	SubAnimInstanceMap* SubAnimInstanceMap;//[Offset: 0xf68, Size: 40]
	SubAnimInstanceMap* SubAnimInstanceMap_Ins;//[Offset: 0xf90, Size: 8]
	STExtraPlayerVaultComponent* CachedPlayerVaultComponent;//[Offset: 0xfa0, Size: 8]
	float PlayerInitTimestamp;//[Offset: 0xfa8, Size: 4]
	bool IsRCRRelevantForConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfac, Size: 1]
	Vector RCRDSNotifyLoction;//[Offset: 0xfb0, Size: 12]
	float RCRCheckMinViewCos;//[Offset: 0xfbc, Size: 4]
	float RCRCheckMinDistanceSquared;//[Offset: 0xfc0, Size: 4]
	float RCRClientRandomXYMin;//[Offset: 0xfc4, Size: 4]
	float RCRClientRandomXYMax;//[Offset: 0xfc8, Size: 4]
	float RCRDSCheckProneSprintCD;//[Offset: 0xfcc, Size: 4]
	float RCRDSCheckProneWalkCD;//[Offset: 0xfd0, Size: 4]
	float RCRDSCheckSprintCD;//[Offset: 0xfd4, Size: 4]
	float RCRDSCheckWalkCD;//[Offset: 0xfd8, Size: 4]
	float RCRDSCheckDyingWalkCD;//[Offset: 0xfdc, Size: 4]
	float RCRNotReleventCheckTime;//[Offset: 0xfe0, Size: 4]
	float RCRModifyLargeBoxDisSquared;//[Offset: 0xfe4, Size: 4]
	float RCRModifyMediumBoxDisSquared;//[Offset: 0xfe8, Size: 4]
	float RCRLargeBoxMultiple;//[Offset: 0xfec, Size: 4]
	float RCRMediumBoxMultiple;//[Offset: 0xff0, Size: 4]
	PickupManagerComponent* PickupManagerComponentRef;//[Offset: 0xff8, Size: 8]
	delegate OnMoveBlockDelegate;//[Offset: 0x1000, Size: 16]
	CustomFeatureComponent*[] featureComs;//[Offset: 0x1010, Size: 16]
	void VaultOnServer(float ForwardBlockDist, float BlockHeight, float VaultDist, byte VaultDataMapKeyIndex, Vector_NetQuantize10 PlayerStartLoc, Actor* CheckActor, float CurJumpLandingHeight, float CurJumpLandingDist, Vector_NetQuantize10 ForwardHitPoint, Vector_NetQuantize100 ForwardBlockDir);// 0x40334c4
	void VaultNetMulticast(float ForwardBlockDist, float BlockHeight, float VaultDist, byte VaultDataMapKeyIndex, Vector_NetQuantize10 PlayerStartLoc, Actor* CheckActor, float CurJumpLandingHeight, float CurJumpLandingDist, Vector_NetQuantize10 ForwardHitPoint, Vector_NetQuantize100 ForwardBlockDir);// 0x4033200
	void VaultFailedOnClient(const FString Content);// 0x4033174
	bool TriggerSkillEvent(class UTSkill SkillClass, byte SkillEventType);// 0x4033034
	bool TriggerSkillCustomEvent(int SkillIndex, byte EventType);// 0x4032f60
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x4032ec8
	void TriggerCustomEvent_Implementation(byte EventType);// 0x4032e44
	FString ToStringHasLocation(FString Subtitle);// 0x4032d10
	FString ToStringHasExtendInfoHasMiddleSimply(FString Subtitle, FString MiddleSimplyStr);// 0x4032b4c
	FString ToStringHasExtendInfo(FString Subtitle);// 0x4032a18
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x4032958
	void SetInvincible(bool Invincible);// 0x40328d4
	void SetGravityScaleAuthorized(float InScale);// 0x4032858
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x4032784
	void Server_RemoveBuff(FName BuffName);// 0x40326d4
	void Server_AddBuff(FName BuffName);// 0x4032624
	void S2C_InterruptState(int stateID, int InterruptedBy);// 0x4032568
	void ResetSubAnimNodeAnimClass(FName SubInstanceSlotName, int Types);// 0x40324b0
	void ResetPawnStateDisabled(enum State);// 0x4032434
	AnimInstance*[] ReplaceSubAnimNodeAnimClass(FName SubInstanceSlotName, class AnimInstance SubInstanceClass, int Types);// 0x40322f0
	void RemoveCustomStateRelation(enum from, enum to);// 0x4032230
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x4032118
	bool ReloadWeaponFilter();// 0x40320d8
	void PossessedBy(Controller* NewController);// 0x4032054
	void PickupNewItem(ItemHandleBase* ItemHandle);// 0x4031fd8
	void OnUnEquipWeaponWithParams(STExtraShootWeapon* ShootWeapon, enum Reason);// 0x4031f18
	void OnUnEquipCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x4031e94
	void OnStateLeave(enum LeavedState);// 0x4031e10
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x4031d54
	void OnStateEnter(enum EnteredState);// 0x4031cd0
	void OnRep_UnmannedVehicleSyncData();// 0x4031cb4
	void OnRep_Temperature(float LastValue);// 0x4031c30
	void OnRep_SignalHP(float PrevVal);// 0x4031bac
	void OnRep_PawnStateRepSyncData(out const PawnStateRepSyncData PrevData);// 0x4031b1c
	void OnRep_IsRCRRelevantForConnection();// 0x4031b08
	void OnRep_IsInvincible();// 0x4031af4
	void OnRep_Health(float PrevHealth);// 0x4031a70
	void OnRep_GravityScaleAuthorized();// 0x4031a5c
	void OnRep_CurSignalHPIsFullOrRecovering();// 0x4031a40
	void OnRep_CurrentStates(uint64 prevStates);// 0x40319bc
	void OnRep_CurRemoteControlPawn();// 0x40319a0
	void OnRep_ActivitySyncData();// 0x4031984
	bool OnlyHasStates(out const enum[] InStates);// 0x40318d4
	void OnBPIsInvincibleChange();// 0xffffff8f20d162a8
	void LeaveStuckStateOnClient(Vector NewLoc, Rotator NewRot);// 0x403180c
	bool LeaveState(enum State);// 0x4031774
	static bool IsPawnStateDisabledByWeapon(STExtraWeapon* Weapon, enum State);// 0x40316b8
	bool IsPawnStateDisabled(enum State);// 0x4031628
	bool IsLocalViewed();// 0x40315e8
	bool IsLocalAutonomousControlled();// 0x40315a8
	bool IsInvincible();// 0x403158c
	bool IsGrenadeEmpty();// 0x403154c
	bool IsFatalDead();// 0x403150c
	bool IsAlive();// 0x40314cc
	void HideTheCharacter(bool bHide, enum HiddenMask);// 0x4031404
	void HidePlayerMagOnGunReload();// 0x40313e8
	void HideCharacterWeapon(bool bHide, enum HiddenMask);// 0x4031320
	bool HasState(enum State);// 0x4031288
	bool HasBuff(FName BuffName);// 0x40311f0
	void HandleConsumeItemSkillBreak();// 0x40311d4
	Actor* GetWeaponOwnerProxyFactory();// 0x4031198
	MeshComponent* GetWeaponAttachMeshCommon(STExtraWeapon* Weapon);// 0x4031104
	SkeletalMeshComponent* GetWeaponAttachMesh(STExtraWeapon* Weapon);// 0x4031070
	SceneComponent* GetWeaponAttachComp();// 0x4031034
	STExtraVehicleBase* GetUnmannedVehicle();// 0x4031018
	FString GetToString();// 0x4030f90
	UTSkillManagerComponent* GetSkillManagerComponent();// 0x4030f5c
	UTSkillManagerComponent* GetSkillManager();// 0x4030f20
	float GetScaledSpeed();// 0x4030ee4
	STExtraVehicleBase* GetRemoteControlledVehicle();// 0x4030ec8
	FString GetPlayerNameSafety();// 0x4030e40
	STExtraPlayerController* GetPlayerControllerSafety();// 0x4030e04
	PickupManagerComponent* GetPickupManagerComponent();// 0x4030de8
	enum GetObserverType();// 0x4030dac
	Vector GetHeadLocation(bool bUseHeadBone);// 0x4030d0c
	CustomFeatureComponent* GetFeatureComByClass_BP(class Object ClassType);// 0x4030c54
	float GetElapseTimeSinceInit();// 0x4030c20
	enum[] GetDamageableGameObjectType();// 0x4030b98
	UTSkill* GetCurSkillWithCache();// 0x4030b64
	UTSkill* GetCurSkill();// 0x4030b28
	STExtraVehicleBase* GetCurrentVehicle();// 0x4030aec
	bool GetClientHasFinishedReloadWeapon();// 0x4030ab4
	PrimitiveComponent* GetCharacterMovementBaseComp();// 0x4030a78
	UAECharAnimListCompBase* GetCharacterAnimComponent();// 0x4030a3c
	FName GetBulletBlockComponentTag();// 0x4030a00
	FString GetBuffListString();// 0x4030980
	float GetBuffExpiry(FName BuffName);// 0x40308ec
	SubAnimInstanceMap* GetAnimInstanceMap();// 0x40308b8
	void FPPVaultOnServer(Vector_NetQuantize10 FPPVaultStartLoc, Vector_NetQuantize10 FPPVaultTopLoc, float CurJumpLandingHeight, float CurJumpLandingDist, bool bIsJumping, Vector_NetQuantize100 ForwardBlockDir, float VaultDist);// 0x4030640
	void FPPVaultNetMulticast(Vector_NetQuantize10 FPPVaultStartLoc, Vector_NetQuantize10 FPPVaultTopLoc, float CurJumpLandingHeight, float CurJumpLandingDist, bool bIsJumping, Vector_NetQuantize100 ForwardBlockDir, float VaultDist);// 0x4030424
	void ForceCancelVaultOnServer();// 0x40303c4
	enum FindBuffRelatedPawnState(FName _buffName);// 0x4030330
	void ExtendPawnStates();// 0x403031c
	bool EnterState(enum State);// 0x4030284
	void DelayHidden();// 0x4030270
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x40301e4
	void Client_ShowLogDebugInfo(bool bLogInfo);// 0x4030158
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x402ffd4
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x402fe98
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x402fd54
	void Client_ShowDebugCone(Vector InLocation, float InRadius, Color InColor, float InTime, Vector forwardDir, float ang);// 0x402fb98
	void Client_ShowDebugCapsule(Vector InLocation, float InRadius, float Length, Color InColor, float InTime, Rotator Rot, float ang);// 0x402f9a0
	void Client_ShowDebugBox(Vector Center, Color InColor, float InTime, Vector Extent, Quat Rot);// 0x402f80c
	void ClearOneItem(ItemHandleBase* ItemHandle);// 0x402f790
	void CheckSignalHP();// 0x402f77c
	bool CheckCanLeanOutOnVehicle(bool bCheckState);// 0x402f6dc
	static bool CheckBackpackWeaponByStateOnServer(STExtraWeapon* Weapon, enum State);// 0x402f620
	void CancelVaultOnServer();// 0x402f5c0
	void CancelVaultNetMulticast();// 0x402f5a4
	void BPUpdateCompTransform(SceneComponent* Comp);// 0x402f528
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff8f20d162a8
	void BPOnRespawned();// 0xffffff8f20d162a8
	void BPOnRecycled();// 0xffffff8f20d162a8
	int64 BP_GetCurrentStates();// 0x402f4f4
	float BP_CharacterModifyDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x402f390
	bool AllowState(enum State, bool withLog);// 0x402f2b4
	void AddCustomStateRelation(enum from, enum to, enum relation);// 0x402f1b8
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x402f03c

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	byte CharacterRegionSize;//[Offset: 0x841, Size: 1]
	FName PlayerType;//[Offset: 0x848, Size: 8]
	FString PlayerName;//[Offset: 0x850, Size: 16]
	uint32 PlayerKey;//[Offset: 0x860, Size: 4]
	FString PlayerUID;//[Offset: 0x868, Size: 16]
	FString PlayerOpenID;//[Offset: 0x878, Size: 16]
	bool IsPossessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	int TeamID;//[Offset: 0x8b0, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b4, Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x8b5, Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x8b8, Size: 16]
	int playerFaceHandleID;//[Offset: 0x8c8, Size: 4]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 1]
	bool bCalcuPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f4, Size: 1]
	TimerHandle TimerHandle_ForceUpdateSpringArm;//[Offset: 0x900, Size: 8]
	SceneComponentState[] SpringArmStateList;//[Offset: 0x908, Size: 16]
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0x918, Size: 8]
	bool showNickname;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 1]
	void SetShowNickname(bool isShow);// 0x49d83b4
	void ServerSetShowNicknameValue(bool flag);// 0x49d82f0
	void OnRep_TeamID();// 0x49d82d4
	void OnRep_ShowNicknameChangeEx();// 0x49d82b8
	void OnRep_PlayerUID();// 0x49d82a4
	void OnRep_PlayerOpenID();// 0x49d8290
	void OnRep_PlayerName();// 0x49d8274
	void OnRep_PlayerKey();// 0x49d8258
	void OnRep_bIsAI();// 0x49d823c
	void OnForceUpdateSpringArmTimer();// 0x49d8228
	bool IsAlive();// 0x49d81e8
	FString GetToString();// 0x49d8160
	FString GetPlayerKey();// 0x49d80e0
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x49d8058
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x49d7fd0
	ActorComponent*[] GetNonSimulatedComponents();// 0x49d7f48
	ActorComponent*[] GetNonDedicatedComponents();// 0x49d7ec0
	int64 GetInt64PlayerKey();// 0x49d7ea4
	void ForceUpdateSpringArm();// 0x49d7e88
	void ClientAcknowledgeReconnection(uint32 Token);// 0x49d7e04

--------------------------------
Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int ParentTableID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 8]

--------------------------------
Class: SceneComponentState
	SceneComponent* TargetComponent;//[Offset: 0x8, Size: 8]

--------------------------------
Class: TriggerBuffData
	float BuffCD;//[Offset: 0x4, Size: 4]
	FName BuffName;//[Offset: 0x8, Size: 8]
	FName MutexBuffName;//[Offset: 0x10, Size: 8]
	int MsgID;//[Offset: 0x18, Size: 4]
	float BuffProbability;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: TimeBuffData
	float BuffCD;//[Offset: 0x0, Size: 4]
	FName BuffName;//[Offset: 0x8, Size: 8]
	int MsgID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 8]
	float MaxAttenuationRadius;//[Offset: 0x30, Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	float MinimumDuration;//[Offset: 0x38, Size: 4]
	float MaximumDuration;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bLoadAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bHasLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: OnlyActorCompManagerComponent.ActorComponent.Object
	<FString,OnlyActorComponent*> CacheComponents;//[Offset: 0x120, Size: 80]
	OnlyActorComponent*[] CacheUpdateComponents;//[Offset: 0x170, Size: 16]

--------------------------------
Class: OnlyActorComponent.ActorComponent.Object
	byte bCanEverUpdate;//[Offset: 0x120, Size: 1]

--------------------------------
Class: TickControlComponent.ActorComponent.Object
	enum CustomTickType;//[Offset: 0x120, Size: 1]
	<class Object,enum> NeedTickComponentClassList;//[Offset: 0x128, Size: 80]
	TickListItem[] NeedTickComponentList;//[Offset: 0x178, Size: 16]
	byte RoleBits;//[Offset: 0x188, Size: 1]

--------------------------------
Class: TickListItem
	ActorComponent* Comp;//[Offset: 0x0, Size: 8]
	enum RoleType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	TickControlComponent* TickControlComp;//[Offset: 0x568, Size: 8]
	bool MeshAlwaysTickPoseAndRefreshBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	bool UseBlueprintSetMeshComponentUpdateFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x576, Size: 1]
	enum VehicleType;//[Offset: 0x577, Size: 1]
	MaterialInterface* BrokenMat;//[Offset: 0x578, Size: 8]
	ParticleSystem* PS_Explosion;//[Offset: 0x580, Size: 40]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x5a8, Size: 40]
	float HitEffectInterval;//[Offset: 0x5d0, Size: 4]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x5d8, Size: 80]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x628, Size: 80]
	<FName,ParticleSoftWrapperArray> PendantParticleCache;//[Offset: 0x678, Size: 80]
	Texture2D* VehicleIcon;//[Offset: 0x6c8, Size: 8]
	enum CameraDataType;//[Offset: 0x6d0, Size: 1]
	bool ShowUpDownGUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 1]
	bool ShowHeightUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d2, Size: 1]
	bool HideChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d3, Size: 1]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x6d8, Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x6dc, Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 1]
	float ShowGrainyScreenMinDist;//[Offset: 0x6e4, Size: 4]
	bool ImmuePassageDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	float FuelConsumptionModifierBoost;//[Offset: 0x6ec, Size: 4]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f1, Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f2, Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x6f4, Size: 4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x6fc, Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	int MainMaterialIndex;//[Offset: 0x704, Size: 4]
	FText VehicleDisplayName;//[Offset: 0x708, Size: 24]
	Vector AirDropVelocity;//[Offset: 0x720, Size: 12]
	StaticMesh* AirdropParachuteMesh;//[Offset: 0x730, Size: 40]
	FName AirDropParachuteSocketName;//[Offset: 0x758, Size: 8]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760, Size: 1]
	<int,float> ViewOffsetOfSpecialSeatsInFPP;//[Offset: 0x768, Size: 80]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b9, Size: 1]
	float BackpackCapacity;//[Offset: 0x7bc, Size: 4]
	FName BackpackName;//[Offset: 0x7c0, Size: 8]
	FString[] BackpackSupportModeIDList;//[Offset: 0x7c8, Size: 16]
	int[] marr_MidIndexes;//[Offset: 0x7d8, Size: 16]
	float EnterVehicleCameraBlendTime;//[Offset: 0x7e8, Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x7ec, Size: 4]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x7f0, Size: 4]
	float voiceCheckCD;//[Offset: 0x7f4, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x7f8, Size: 4]
	float VoiceCheckDis;//[Offset: 0x7fc, Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x800, Size: 4]
	float voiceCheckSpeed;//[Offset: 0x804, Size: 4]
	delegate OnSeatAttached;//[Offset: 0x828, Size: 16]
	delegate OnSeatDetached;//[Offset: 0x838, Size: 16]
	delegate OnSeatChange;//[Offset: 0x848, Size: 16]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 1]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x859, Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x85c, Size: 4]
	enum VehicleHealthState;//[Offset: 0x878, Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x879, Size: 1]
	bool bIsEnableInputs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87a, Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87b, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87d, Size: 1]
	Vector BloodEffectScale;//[Offset: 0x880, Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x890, Size: 8]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x898, Size: 8]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x8a0, Size: 8]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x8a8, Size: 8]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x8b0, Size: 8]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x8b8, Size: 8]
	VehicleStatComponent* VehicleStatCollector;//[Offset: 0x8c0, Size: 8]
	VehicleComponent*[] VehicleComps;//[Offset: 0x8c8, Size: 16]
	float EnActiveTimeThreshold;//[Offset: 0x8e0, Size: 4]
	bool mb_IsFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e4, Size: 1]
	bool FreezeNeedChangeVehiclePhysx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ec, Size: 1]
	bool FreezeDisableTickVehicleSuspension;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ed, Size: 1]
	bool mb_IsSafeSpawnedNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f4, Size: 1]
	bool bCanVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f5, Size: 1]
	bool bVehiclePushUpUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f6, Size: 1]
	float VehiclePushUpZOffset;//[Offset: 0x8f8, Size: 4]
	float VehicleHitThreshold;//[Offset: 0x904, Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x908, Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x918, Size: 4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0x928, Size: 16]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x948, Size: 16]
	delegate OnClientExitVehicleEvent;//[Offset: 0x958, Size: 16]
	delegate OnClientChangeSeatEvent;//[Offset: 0x968, Size: 16]
	float VehicleEnterDistance;//[Offset: 0x97c, Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x980, Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x984, Size: 4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x991, Size: 1]
	float AsyncLoadResDistance;//[Offset: 0x994, Size: 4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0x998, Size: 4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a1, Size: 1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x9a4, Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x9a8, Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x9ac, Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x9b8, Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x9c4, Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x9c8, Size: 4]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d4, Size: 1]
	float PeneTerrainProtectionInterval;//[Offset: 0x9d8, Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x9dc, Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x9e0, Size: 12]
	Vector[] UnderTerrainTestPoints;//[Offset: 0xa10, Size: 16]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0xa28, Size: 8]
	SoftObjectPath SoundCompClass;//[Offset: 0xa38, Size: 24]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0xa50, Size: 8]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0xa58, Size: 8]
	AkAudioEvent* Sfx_Boost;//[Offset: 0xa60, Size: 8]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0xa68, Size: 8]
	AkAudioEvent* Sfx_Landing;//[Offset: 0xa70, Size: 8]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0xa78, Size: 8]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0xa80, Size: 8]
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0xa88, Size: 8]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0xa90, Size: 8]
	AkAudioEvent* Sfx_Horn;//[Offset: 0xa98, Size: 8]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0xaa0, Size: 8]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0xaa8, Size: 8]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0xab0, Size: 8]
	AkAudioEvent* Sfx_EngineStart;//[Offset: 0xab8, Size: 8]
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0xac0, Size: 8]
	CarMusicConfigBlueprint[] BlueprintEditCarMusicConfigs;//[Offset: 0xac8, Size: 16]
	CarMusicConfig[] CarMusicConfigs_Table;//[Offset: 0xad8, Size: 16]
	CarMusicConfig[] OriginCarMusicConfigs_Table;//[Offset: 0xae8, Size: 16]
	CarMusicConfig[] CarMusicConfigs_Blueprint;//[Offset: 0xaf8, Size: 16]
	CarMusicWrapper[] LoadedMusic;//[Offset: 0xb08, Size: 16]
	bool bMusicLoops_UseTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18, Size: 1]
	float PlayMusicChance;//[Offset: 0xb1c, Size: 4]
	int CurMusicIndex;//[Offset: 0xb20, Size: 4]
	float EngineSfxEndDelayTime;//[Offset: 0xb2c, Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb30, Size: 1]
	STExtraVehicleSfxLoop EngineSfxLoop;//[Offset: 0xb38, Size: 112]
	STExtraVehicleSfxLoop FireSfxLoop;//[Offset: 0xba8, Size: 112]
	STExtraVehicleSfxLoop HornSfxLoop;//[Offset: 0xc18, Size: 112]
	STExtraVehicleSfxLoop MusicSfxLoop;//[Offset: 0xc88, Size: 112]
	AkComponent* SoundComponent;//[Offset: 0xcf8, Size: 8]
	float RPMSfxScale;//[Offset: 0xd2c, Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0xd30, Size: 4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xd58, Size: 16]
	enum VehicleSyncTag;//[Offset: 0xd68, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xd6c, Size: 4]
	VehicleSimViewData SimulateViewData;//[Offset: 0xd70, Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0xd74, Size: 4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0xd78, Size: 8]
	delegate OnVehicleHealthStateChanged;//[Offset: 0xd80, Size: 16]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd90, Size: 1]
	float MinRideAngleDgree;//[Offset: 0xd94, Size: 4]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda8, Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda9, Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0xdac, Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0xdb0, Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe24, Size: 1]
	bool bAntiStuckBoxNoRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe25, Size: 1]
	float StuckMinImpulse;//[Offset: 0xe28, Size: 4]
	float ContinuousStuckInterval;//[Offset: 0xe2c, Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0xe30, Size: 4]
	float StuckResovingTime;//[Offset: 0xe34, Size: 4]
	float ContinuousStuckTimer;//[Offset: 0xe3c, Size: 4]
	float StuckResovingTimer;//[Offset: 0xe40, Size: 4]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe60, Size: 1]
	bool bServerClearLinearVelocityZEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe61, Size: 1]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea0, Size: 1]
	float RespawnWaitingTime;//[Offset: 0xea4, Size: 4]
	float RespawnTickInterval;//[Offset: 0xea8, Size: 4]
	Vector RespawnPositionSudoku;//[Offset: 0xeac, Size: 12]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb8, Size: 1]
	float RemoveVehicleBecauseDestoryWaitingTime;//[Offset: 0xf40, Size: 4]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf58, Size: 1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xf60, Size: 16]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xf70, Size: 16]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xf80, Size: 16]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc0, Size: 1]
	bool bEnableServerAuthorizeInRoomOnMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc1, Size: 1]
	int AirSwapServerThres;//[Offset: 0xfc4, Size: 4]
	VehicleLagVerifyConfig ShootVictimVerifyConfig;//[Offset: 0xfd0, Size: 4]
	<int,byte> TeammateNumInCar;//[Offset: 0xff0, Size: 80]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0x1040, Size: 8]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0x1048, Size: 8]
	SkeletalMesh* MeshAssetRef;//[Offset: 0x1050, Size: 40]
	bool bOnPlayerActiveRegionsChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1078, Size: 1]
	bool bInActiveRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1079, Size: 1]
	float VehicleStateLogInterval;//[Offset: 0x107c, Size: 4]
	bool bLogVehicleStateOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1080, Size: 1]
	bool bLogVehicleStateOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1081, Size: 1]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1088, Size: 1]
	bool bForceDisableSkeletalMeshTickOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1089, Size: 1]
	Vector SeekLockOffset;//[Offset: 0x108c, Size: 12]
	FName SeekLockSocket;//[Offset: 0x1098, Size: 8]
	float ProduceSoundInterval;//[Offset: 0x10a0, Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0x10a8, Size: 16]
	delegate VehicleExplosionDelegate;//[Offset: 0x10b8, Size: 16]
	BattleItemHandleBase* BindingHandle;//[Offset: 0x10c8, Size: 8]
	bool IsAvatarItemVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	bool IsActivityItemVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d1, Size: 1]
	FString ActivityItemId;//[Offset: 0x10d8, Size: 16]
	bool bUseExtraUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e8, Size: 1]
	bool bUseExtraUIOnlyForDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e9, Size: 1]
	FString ExtraUIPath;//[Offset: 0x10f0, Size: 16]
	bool bAlwaysForceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1100, Size: 1]
	delegate OnEnterVehicle;//[Offset: 0x1108, Size: 16]
	STExtraPlayerController* BornLandVehicleCreator;//[Offset: 0x1128, Size: 8]
	delegate ServerEnterVehicleEventDelegate;//[Offset: 0x1130, Size: 16]
	delegate ServerExitVehicleEventDelegate;//[Offset: 0x1140, Size: 16]
	VehicleAvatarComponent* VehicleAvatarComponent;//[Offset: 0x1158, Size: 8]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0x1160, Size: 16]
	enum OnVehSkirtPoseType;//[Offset: 0x1170, Size: 1]
	enum UAVOperateState;//[Offset: 0x1178, Size: 1]
	float SingleMoveRate;//[Offset: 0x117c, Size: 4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0x1180, Size: 24]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0x1198, Size: 24]
	int CurrentVehicleStatesData;//[Offset: 0x11b0, Size: 4]
	bool EnableResetVehicleRootBodyData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c8, Size: 1]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0x11d0, Size: 16]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0x11e0, Size: 16]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f0, Size: 1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0x11f8, Size: 8]
	float TombBoxTraceLength;//[Offset: 0x1200, Size: 4]
	float PlayerOutAngleCosin;//[Offset: 0x1204, Size: 4]
	bool EnableWalkableVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1208, Size: 1]
	bool VehicleMeshWalkable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1209, Size: 1]
	bool LinkedMeshWalkable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120a, Size: 1]
	bool UseLocalPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120b, Size: 1]
	bool MovebaseRelativeLocTrustClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120c, Size: 1]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120d, Size: 1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120e, Size: 1]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120f, Size: 1]
	float CLientSleepVehicleTolerance;//[Offset: 0x1210, Size: 4]
	float StaticFixAngel;//[Offset: 0x1214, Size: 4]
	float ClientAwakeVehicleTolerance;//[Offset: 0x1218, Size: 4]
	float SleepVehicleTickTime;//[Offset: 0x121c, Size: 4]
	float NetUpdateFrequencyInWaterDeactive;//[Offset: 0x1228, Size: 4]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0x122c, Size: 4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0x1230, Size: 4]
	bool EnableClientFallOutOfWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1239, Size: 1]
	int VehicleSkinID;//[Offset: 0x1244, Size: 4]
	float TickControlledFrequency;//[Offset: 0x1248, Size: 4]
	bool bRuntimeEnableTickControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124c, Size: 1]
	delegate OnVehicleEnterDelegate;//[Offset: 0x1258, Size: 16]
	delegate OnVehicleExitDelegate;//[Offset: 0x1268, Size: 16]
	delegate OnVehicleHPChangedDelegate;//[Offset: 0x1278, Size: 16]
	delegate OnVehicleWheelsHPChangedDelegate;//[Offset: 0x1288, Size: 16]
	VehicleAIComponent* VehicleAIComponent;//[Offset: 0x1298, Size: 8]
	void VehicleJump();// 0x40e9e34
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x40e9db8
	bool TickRemoveVehicleBecauseDestory(float DeltaTime);// 0x40e9d28
	float TestTakeDamage(float Damage, out const STRadialDamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x40e9b80
	void StopFireVehicleWeapon(VehicleShootWeapon* VehicleWeapon);// 0x40e9b04
	void StopAutoDriving();// 0x40e9af0
	void StartFireVehicleWeapon(VehicleShootWeapon* VehicleWeapon, STExtraPlayerCharacter* Character);// 0x40e9a3c
	void StartAirDrop();// 0x40e9a28
	void SpawnUnattachedEffectAsync(FName EffectName);// 0x40e99ac
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x40e98c0
	void SetVehicleWeaponTarget(VehicleShootWeapon* VehicleWeapon, out const Vector TargetLoc);// 0x40e97f4
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x40e96f0
	void SetVehicleHPMax(float MaxHP);// 0x40e9674
	void SetVehicleHP(float HP);// 0x40e95f8
	void SetVehicleCustomName(FString InCustomVehicleName, const BattleItemHandleBase* InVehicleHandle);// 0x40e952c
	void SetUAVOperateState(enum NewState);// 0x40e94b0
	void SetSafeSpawn(bool ab_IsSafeSpawn);// 0x40e9424
	void SetJoystickMoveVelocity(Vector2D moveVelocity);// 0x40e93ac
	void SetFrozenStaticState(bool State);// 0x40e9328
	void SetAvatarMID(MaterialInterface* MatDMI);// 0xffffff8f20d162a8
	void ServerStopFireVehicleWeapon(VehicleShootWeapon* VehicleWeapon);// 0x40e9278
	void ServerSetVehicleWeaponTarget(VehicleShootWeapon* VehicleWeapon, const Vector TargetLoc);// 0x40e9184
	void ServerSetUsingHorn(bool bUse);// 0x40e90c0
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x40e8ffc
	void ServerSetEnableInputs(bool bEnable);// 0x40e8f78
	void ServerSetBoosting(bool bEnalbed);// 0x40e8eb4
	void ServerSetAirControlF(float Rate);// 0x40e8e04
	void ServerSetAirControlB(float Rate);// 0x40e8d54
	void ServerMoveTo(bool bSetLocation, Vector NewLocation, bool bSetRotation, Rotator NewRotation);// 0x40e8c04
	void SendVehicleInUnderWaterChangedTimeToServer();// 0x40e8ba4
	void SendVehicleInAirChangedTimeToServer();// 0x40e8b44
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x40e8a94
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x40e8a78
	void RPC_Client_SeekLockRocketExploded();// 0x40e8a5c
	void ResetJoystickMove();// 0x40e8a48
	void RemoveAntiStuckBox();// 0x40e8a34
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x40e89b8
	void PrintStats();// 0x40e899c
	void PostLoadMesh();// 0x40e8980
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x40e8904
	void OnUpdateEffects();// 0xffffff8f20d162a8
	void OnSetTailLightValue(float LightValue);// 0xffffff8f20d162a8
	void OnRep_VehicleSyncFlag();// 0x40e88f0
	void OnRep_VehicleSoundComp();// 0x40e88dc
	void OnRep_VehicleHealthState();// 0x40e88c8
	void OnRep_SimulateViewData();// 0x40e88b4
	void OnRep_SimulateFreeCameraViewData();// 0x40e88a0
	void OnRep_ServerLastReplicatedServer();// 0x40e888c
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x40e8878
	void OnRep_IsEngineStarted();// 0x40e8864
	void OnRep_IsBoosting();// 0x40e8850
	void OnRep_IsAirdroppingVehicle();// 0x40e883c
	void OnRep_FrozenStatic();// 0x40e8828
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x40e87ac
	void OnFreezeVehicleEvent();// 0x40e8790
	void OnEngineStop();// 0xffffff8f20d162a8
	void OnEngineStart();// 0xffffff8f20d162a8
	void OnClassLoad_VehicleSoundComp(SoftObjectPath LoadClass);// 0x40e86b0
	void OnBoostingChanged();// 0xffffff8f20d162a8
	void OnAnimListLoaded();// 0x40e8694
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x40e8598
	void LoadPendantParticle();// 0x40e8584
	void K2_SetLinkedMeshConstraint(bool IsContraint);// 0xffffff8f20d162a8
	SkeletalMeshComponent* K2_GetLinkedComp();// 0xffffff8f20d162a8
	bool IsUsingFPPModel();// 0x40e854c
	bool IsUCAV();// 0x40e8528
	bool IsUAV();// 0x40e8500
	bool IsPassengerShouldPossesVehicle();// 0x40e84c0
	bool IsNotInWater();// 0x40e8480
	bool IsMotorbike();// 0x40e8448
	bool IsInMidAir();// 0x40e8408
	bool IsHelicopter();// 0x40e83d0
	bool IsEntirelyUnderWater();// 0x40e8398
	bool IsEnableInputs();// 0x40e8360
	bool IsElectronic_Failure();// 0x40e8328
	bool IsBattleship();// 0x40e8304
	bool IsAutoDriving();// 0x40e82cc
	bool IsArmedVehicle();// 0x40e8294
	bool IsAmphibiousVehicle();// 0x40e825c
	bool IsAirVehicle();// 0x40e821c
	bool IsActiveEffect(FName EffectName);// 0x40e818c
	void InitVehicle(int FuelPercent, bool bEngineOn, bool bInHouse);// 0x40e8078
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x40e7fb0
	bool HasAutoDriveTarget();// 0x40e7f78
	void HandleSeekLockRocketExplodedOnServer();// 0x40e7f5c
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x40e7ed8
	void HandleOnVehicleAvatarDataCopied();// 0x40e7ec4
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x40e7dc8
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x40e7c54
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x40e7b58
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x40e79bc
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x40e7938
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x40e78b4
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x40e7838
	int GetWheelNum();// 0x40e7804
	float GetWheelHP(int Index);// 0x40e7778
	VehicleShootWeapon* GetVehicleWeapon(int SeatID, int WeaponListID);// 0x40e76b4
	float GetVehicleHPMax();// 0x40e7680
	float GetVehicleHP();// 0x40e764c
	Vector GetVehicleCenter();// 0x40e7614
	VehicleAIComponent* GetVehicleAIComponent();// 0x40e75f8
	bool GetSeatState(int Index);// 0x40e7568
	int GetSeatNum();// 0x40e7534
	Vector GetRotationInputDir();// 0x40e74f4
	BattleItemHandleBase* GetItemHandle();// 0x40e74d8
	float GetForwardSpeed();// 0x40e749c
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x40e7480
	STExtraPlayerCharacter* GetDriver();// 0x40e744c
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x40e72b8
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x40e7224
	void ExitFPPVehicle();// 0x40e7210
	void EnterFPPVehicle();// 0x40e71fc
	void DestroyVehicleSelf();// 0x40e71e8
	void DestroyAndRespawnSelf();// 0x40e71d4
	void DeactiveEffect(FName EffectName);// 0x40e7158
	void CreateAntiStuckBox();// 0x40e7144
	void ClearInputs();// 0x40e7130
	bool CheckNeedVehicleTick(float DeltaTime);// 0x40e70a0
	bool CheckHaveSpecialAttachActor();// 0x40e7060
	bool CanVehicleJump();// 0x40e7020
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x40e6f88
	bool CanAutoDrivingNoDriver();// 0x40e6f50
	bool CanAutoDriving();// 0x40e6f18
	void BroadCastEnterVehicleEvent(bool IsSucc);// 0x40e6e94
	void BroadcastClientVehicleExplosionEffect();// 0x40e6e78
	void AutoLoadEffect();// 0x40e6e64
	void AfterBeginPlay();// 0xffffff8f20d162a8
	void ActiveEffectAsync(FName EffectName);// 0x40e6de8
	void ActiveEffect(FName EffectName);// 0x40e6d6c

--------------------------------
Class: ParticleSoftWrapperArray
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0, Size: 16]

--------------------------------
Class: ParticleSoftWrapper
	ParticleSystem* Template;//[Offset: 0x0, Size: 40]
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	Vector Scale;//[Offset: 0x40, Size: 12]
	FName AttachSocketName;//[Offset: 0x50, Size: 8]
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: ParticleRuntimeDataArray
	ParticleRuntimeData[] DataArray;//[Offset: 0x0, Size: 16]

--------------------------------
Class: ParticleRuntimeData
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0, Size: 8]

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.ActorComponent.Object
	float VaildExitVehicleHeight;//[Offset: 0x120, Size: 4]
	bool bDriverCanHoldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	STExtraVehicleSeat[] Seats;//[Offset: 0x128, Size: 16]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0x138, Size: 16]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0x148, Size: 16]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0x158, Size: 16]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0x168, Size: 16]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0x178, Size: 16]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x188, Size: 16]
	float LeaveVehicleVelocityScale;//[Offset: 0x198, Size: 4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	bool bEnableExitVehicleEnterPositionFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d, Size: 1]
	float ExitVehicleCharacterCapsuleRadiusFix;//[Offset: 0x1a0, Size: 4]
	float ExitVehicleCharacterCapsuleHalfHeightScale;//[Offset: 0x1a4, Size: 4]
	bool bDrawExitVehicleEnterPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	bool bForceExitVehiclePositionZOffsetRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 1]
	float ForceExitVehiclePositionZOffset;//[Offset: 0x1ac, Size: 4]
	byte[] SeatGUITypes;//[Offset: 0x1b8, Size: 16]
	delegate OnSeatAttached;//[Offset: 0x1c8, Size: 16]
	delegate OnSeatDetached;//[Offset: 0x1d8, Size: 16]
	delegate OnSeatChanged;//[Offset: 0x1e8, Size: 16]
	delegate OnUpdateSeatGUI;//[Offset: 0x1f8, Size: 16]
	FString LatestDriverPlayerName;//[Offset: 0x208, Size: 16]
	delegate OnDriverChange;//[Offset: 0x218, Size: 16]
	FString LatestDriverPlayerUID;//[Offset: 0x228, Size: 16]
	int MaxInUseSeatGUIIndex;//[Offset: 0x238, Size: 4]
	STExtraPlayerController* RemoteController;//[Offset: 0x240, Size: 8]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x250, Size: 8]
	bool RemoveVehicleWeapon(int SeatID, int WeaponIndex);// 0x41cbfd8
	void RefreshOccupyCharacterAnimIns(STExtraBaseCharacter* PlayerCharacter);// 0x41cbf5c
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x41cbea8
	void OnRep_VehicleWeapons();// 0x41cbe94
	void OnRep_Occupiers();// 0x41cbe80
	void OnRep_Attachments();// 0x41cbe6c
	bool IsSeatIndexAvailable(int SeatIndex);// 0x41cbddc
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x41cbd4c
	bool IsSeatAvailable(enum SeatType);// 0x41cbcbc
	int GetSeatNum();// 0x41cbca0
	bool GetPlayerSeatInfo(STExtraBaseCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x41cbacc
	STExtraBaseCharacter* GetPassenger(int SeatIndex);// 0x41cba40
	STExtraPlayerCharacter* GetLastDriverInVehicle();// 0x41cba0c
	int GetInUseSeatNum();// 0x41cb9d8
	STExtraPlayerCharacter* GetDriver();// 0x41cb9a4
	int GetChracterSeatIndex(STExtraBaseCharacter* Character);// 0x41cb918
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x41cb830
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x41cb768
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int NewIndex);// 0x41cb640
	void CalcFixedCapsuleShape(CapsuleComponent* capsuleComp, out float FixedHalfHeight, out float FixedRadius);// 0x41cb520
	bool AddVehicleWeaponFromSupportKit(int SeatID, int WeaponIndex, int weaponIndexSupport);// 0x41cb41c

--------------------------------
Class: VehicleComponent.ActorComponent.Object

--------------------------------
Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0, Size: 1]
	FName AnimCompTagName;//[Offset: 0x8, Size: 8]
	FName EnterVehicleSocket;//[Offset: 0x10, Size: 8]
	FName LeaveVehicleSocket;//[Offset: 0x18, Size: 8]
	byte OccupyMovementMode;//[Offset: 0x20, Size: 1]
	byte HoldWeaponType;//[Offset: 0x21, Size: 1]
	enum[] WeaponTypeNewAllowList;//[Offset: 0x28, Size: 16]
	byte SeatSpecialType;//[Offset: 0x38, Size: 1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool NarrowSeatNeedUseCommomAimAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	int GUIDisplayIndex;//[Offset: 0x3c, Size: 4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x40, Size: 8]
	bool bEnableYawLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	Vector2D ViewYawLimit;//[Offset: 0x4c, Size: 8]
	Rotator CharRotVsVehiRot;//[Offset: 0x54, Size: 12]
	byte SeatSideType;//[Offset: 0x60, Size: 1]
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 1]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x68, Size: 16]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfigSupport;//[Offset: 0x78, Size: 16]
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	FName VehicleWeaponSeatSocket;//[Offset: 0x90, Size: 8]
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	float Radius;//[Offset: 0x9c, Size: 4]
	float HalfHeight;//[Offset: 0xa0, Size: 4]
	Transform CollisionOffset;//[Offset: 0xb0, Size: 48]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	Vector ExitVehicleEnterPositionFix;//[Offset: 0xe4, Size: 12]
	Vector GrenadeThrowRelativeLocation;//[Offset: 0xf0, Size: 12]
	FName SeatAnimInsSlotName;//[Offset: 0x100, Size: 8]
	class AnimInstance* SeatAnimInstance;//[Offset: 0x108, Size: 8]
	bool bHideCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]

--------------------------------
Class: STExtraVehicleWeaponConfig
	FName VehicleWeaponSocket;//[Offset: 0x0, Size: 8]
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8, Size: 8]
	Vector2D ViewYawLimit;//[Offset: 0x10, Size: 8]
	Vector2D ViewPitchLimit;//[Offset: 0x18, Size: 8]
	bool bEnableAimAtTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	float MuzzleDirTor;//[Offset: 0x24, Size: 4]
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float MuzzleVehicleTore;//[Offset: 0x2c, Size: 4]
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	Box MuzzleRangeBox;//[Offset: 0x34, Size: 28]
	float DistTorSquared;//[Offset: 0x50, Size: 4]

--------------------------------
Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.Actor.Object
	float RotateSpeedOnVehicle;//[Offset: 0x11a8, Size: 4]
	class VehicleShootWeaponRotateCalculator* RotateCalculatorTemplate;//[Offset: 0x11b0, Size: 8]
	VehicleShootWeaponRotateCalculator* RotateCalculator;//[Offset: 0x11b8, Size: 8]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c0, Size: 1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c1, Size: 1]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c2, Size: 1]
	FName VehWeaponBindSocket;//[Offset: 0x11c8, Size: 8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0x11d0, Size: 120]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1248, Size: 1]
	FName OnBlockMuzzleSocket;//[Offset: 0x1250, Size: 8]
	PaperSprite* VehicleWeaponControlIcon;//[Offset: 0x1258, Size: 40]
	PaperSprite* VehicleWeaponControlIcon_Used;//[Offset: 0x1280, Size: 40]
	bool ScopeInImmediately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a8, Size: 1]
	delegate OnVehicleWeaponTurning;//[Offset: 0x12b0, Size: 16]
	delegate OnVehicleWeaponTurningStop;//[Offset: 0x12c0, Size: 16]
	bool UseBulletOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d0, Size: 1]
	int BulletOnVehicle;//[Offset: 0x12d4, Size: 4]
	delegate OnRepBulletOnVehicleDelegate;//[Offset: 0x12d8, Size: 16]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0x12e8, Size: 8]
	AnimSequence* VehicleWeaponReload;//[Offset: 0x12f0, Size: 8]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0x12f8, Size: 8]
	float VehicleWeaponReloadRate;//[Offset: 0x1300, Size: 4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0x1308, Size: 8]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1310, Size: 1]
	FName VehicleWeaponGripSocketR;//[Offset: 0x1318, Size: 8]
	FName VehicleWeaponGripSocketL;//[Offset: 0x1320, Size: 8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1328, Size: 1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1329, Size: 1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132a, Size: 1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132b, Size: 1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132c, Size: 1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x133c, Size: 1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x133d, Size: 1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x133e, Size: 1]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1341, Size: 1]
	FName CharacterSocket;//[Offset: 0x1348, Size: 8]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1350, Size: 1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1351, Size: 1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1352, Size: 1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1353, Size: 1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1354, Size: 1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1355, Size: 1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0x1358, Size: 8]
	FName GrenadePredictLineSocket;//[Offset: 0x1360, Size: 8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0x1368, Size: 8]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1370, Size: 1]
	float FuelConsumptionRate;//[Offset: 0x1374, Size: 4]
	int VehicleSeatIndex;//[Offset: 0x137c, Size: 4]
	int VehicleSlotIndex;//[Offset: 0x1380, Size: 4]
	bool bShouldStopTickWhenNotUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1384, Size: 1]
	float StartReloadDelayTime;//[Offset: 0x1398, Size: 4]
	float EndReloadDelayTime;//[Offset: 0x13a8, Size: 4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0x13b0, Size: 8]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b8, Size: 1]
	Actor* OwnerActor;//[Offset: 0x13c0, Size: 8]
	VehicleWeaponReconnectData RecData;//[Offset: 0x13c8, Size: 12]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x13d8, Size: 8]
	bool bEnableAimAtTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e2, Size: 1]
	int BulletTypeTipMsgID;//[Offset: 0x13ec, Size: 4]
	Rotator TargetDir;//[Offset: 0x13f0, Size: 12]
	void StartReloadAnim();// 0x41cf238
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x41cf12c
	void SetTarget(out const Vector TargetLocation);// 0x41cf0a0
	void ServerUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x41cefe0
	void RefreshWeaponCameraAndUI();// 0x41cefcc
	void OnVehicleWeaponTurningStop__DelegateSignature();// 0xffffff8f20d162a8
	void OnVehicleWeaponTurning__DelegateSignature();// 0xffffff8f20d162a8
	void OnVehicleExplode();// 0x41cefb0
	void OnRep_Reconnect();// 0x41cef9c
	void OnRep_OwnerActor();// 0x41cef88
	void OnRep_BulletOnVehicle();// 0x41cef74
	void NetMulticastReturnBullets();// 0x41cef14
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x41cedd0
	void K2_SetSpecialMeshHide(bool IsHide);// 0xffffff8f20d162a8
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0xffffff8f20d162a8
	void K2_OnReturnBullets();// 0xffffff8f20d162a8
	MeshComponent* K2_GetWeaponMeshComp();// 0xffffff8f20d162a8
	void K2_ClientOnBeAttachedToVehicle();// 0xffffff8f20d162a8
	bool IsTurning(float Tolerance);// 0x41ced38
	void HnadleScopeInAfterReload(uint64 CurrentPawnState);// 0x41cecbc
	void HandleWeaponStateChanged(enum LastState, enum NewState);// 0x41cec04
	void HandleWeaponStartReload();// 0x41cebf0
	void HandleWeaponEndReload();// 0x41cebdc
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x41ceb58
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x41cead0
	Vector GetYawCenter();// 0x41cea90
	Rotator GetWeaponRotator_Implementation(float DeltaSeconds);// 0x41ce9f8
	Rotator GetWeaponRotator(float DeltaSeconds);// 0x41ce960
	Vector GetShootTarget();// 0x41ce920
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x41ce8ec
	STExtraVehicleBase* GetOwnerVehicle();// 0x41ce8b8
	Rotator GetOwnerCameraRotator_Implementation();// 0x41ce878
	Rotator GetOwnerCameraRotator();// 0x41ce838
	Rotator GetFinalLogicRotator_Implementation();// 0x41ce7f8
	Rotator GetFinalLogicRotator();// 0x41ce7b8
	Rotator GetCurLogicRotator();// 0x41ce778
	Transform GetCharacterSocketTransform();// 0x41ce724
	void DoUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x41ce664
	bool CheckIsAutonomousOrObTarget();// 0x41ce62c
	void AfterReloadEnd();// 0x41ce618

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.Actor.Object
	float voiceCheckCD;//[Offset: 0xad8, Size: 4]
	float voiceCheckShowCD;//[Offset: 0xadc, Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 1]
	float voiceCheckLeaveTime;//[Offset: 0xae4, Size: 4]
	Vector voiceCheckVector;//[Offset: 0xae8, Size: 12]
	float voiceDelayTime;//[Offset: 0xaf4, Size: 4]
	bool isInVoiceDelayTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf8, Size: 1]
	bool IsVoiceCheckSlience;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf9, Size: 1]
	bool bHasFinishedLoadingBulletTrackSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafa, Size: 1]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0xafc, Size: 84]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb50, Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb51, Size: 1]
	bool bUseFixShootIDGen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb52, Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0xb58, Size: 16]
	delegate OnCurBulletChange;//[Offset: 0xb68, Size: 16]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0xb78, Size: 16]
	delegate OnStartFireDelegate;//[Offset: 0xb88, Size: 16]
	delegate OnStopFireDelegate;//[Offset: 0xb98, Size: 16]
	delegate OnWeaponShootDelegate;//[Offset: 0xba8, Size: 16]
	delegate OnWeaponShootCommonDelegate;//[Offset: 0xbb8, Size: 16]
	delegate OnWeaponShootHitDelegate;//[Offset: 0xbc8, Size: 16]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0xbd8, Size: 16]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0xbe8, Size: 16]
	delegate OnWeaponEquipDelegate;//[Offset: 0xbf8, Size: 16]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0xc08, Size: 16]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0xc18, Size: 16]
	delegate OnBulletNumChangeDelegate;//[Offset: 0xc28, Size: 16]
	delegate OnBulletHitDelegate;//[Offset: 0xc38, Size: 16]
	delegate OnShootIntervalModeChangeDelegate;//[Offset: 0xc48, Size: 16]
	delegate OnShootWeaponAutoDrop;//[Offset: 0xc58, Size: 16]
	delegate OnWeaponDropStart;//[Offset: 0xc68, Size: 16]
	delegate OnWeaponDropFinished;//[Offset: 0xc78, Size: 16]
	delegate OnScopeIn;//[Offset: 0xc88, Size: 16]
	delegate OnScopeOut;//[Offset: 0xc98, Size: 16]
	delegate OnScopeInContinue;//[Offset: 0xca8, Size: 16]
	delegate OnMaxBulletChange;//[Offset: 0xcb8, Size: 16]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0xcc8, Size: 16]
	delegate OnBulletBeforeShootDelegate;//[Offset: 0xcd8, Size: 16]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0xce8, Size: 8]
	BulletTrackComponent* CachedBulletTrackComponent;//[Offset: 0xcf0, Size: 8]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0xcf8, Size: 8]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0xd00, Size: 8]
	int CurBulletNumInClip;//[Offset: 0xd08, Size: 4]
	int CurMaxBulletNumInOneClip;//[Offset: 0xd0c, Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0xd10, Size: 4]
	byte ShootMode;//[Offset: 0xd14, Size: 1]
	byte CurShootType;//[Offset: 0xd15, Size: 1]
	int CurShootTotalType;//[Offset: 0xd18, Size: 4]
	float VoiceCheckDis;//[Offset: 0xd1c, Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0xd20, Size: 4]
	float nowVoiceCheckDis;//[Offset: 0xd24, Size: 4]
	Vector ShootTargetLoc;//[Offset: 0xd28, Size: 12]
	float DeviationScale;//[Offset: 0xd34, Size: 4]
	bool bUpdateAnimToAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd38, Size: 1]
	int AngledSightID;//[Offset: 0xd3c, Size: 4]
	byte TraceChannel;//[Offset: 0xd40, Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0xd44, Size: 12]
	float LastImpactEffectTime;//[Offset: 0xd50, Size: 4]
	int BurstShootBulletsNum;//[Offset: 0xd54, Size: 4]
	int CurBurstShootIndex;//[Offset: 0xd58, Size: 4]
	Transform BoltActionTransform;//[Offset: 0xd60, Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd90, Size: 1]
	int ClientShootTimes;//[Offset: 0xd94, Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0xd98, Size: 8]
	AkAudioEvent* LoadBulletSound;//[Offset: 0xda0, Size: 8]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0xda8, Size: 8]
	AkAudioEvent* MagazineINSound;//[Offset: 0xdb0, Size: 8]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0xdb8, Size: 8]
	AkAudioEvent* PullBoltSound;//[Offset: 0xdc0, Size: 8]
	Vector BulletDecalScale;//[Offset: 0xdc8, Size: 12]
	int CurBulletNumInClipOnSimulatedClients;//[Offset: 0xdd4, Size: 4]
	bool bWantsToFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd8, Size: 1]
	float CurAutoReloadCD;//[Offset: 0xddc, Size: 4]
	bool CurAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde0, Size: 1]
	bool bAutoDropWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde1, Size: 1]
	float DropDuration;//[Offset: 0xde4, Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0xde8, Size: 8]
	WeaponVisualBulletClientModeConfigNew BulletTrackSkinConfig;//[Offset: 0xdf0, Size: 168]
	bool bEnableSwitchToGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe98, Size: 1]
	byte CurShootWeaponState;//[Offset: 0xe99, Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0xea8, Size: 8]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0xeb0, Size: 8]
	ShootWeaponAutoTestHandle* AutoTestHandle;//[Offset: 0xeb8, Size: 8]
	int md_MaxBulletArraySize;//[Offset: 0xec0, Size: 4]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec4, Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec5, Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec6, Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0xec8, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0xed4, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0xee0, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0xeec, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0xef8, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0xf04, Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0xf10, Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1c, Size: 1]
	Vector OffsetTrueFPPLocation;//[Offset: 0xf20, Size: 12]
	Rotator OffsetTrueFPPRotation;//[Offset: 0xf2c, Size: 12]
	Vector OffsetTrueFPPCrouchLocation;//[Offset: 0xf38, Size: 12]
	Rotator OffsetTrueFPPCrouchRotation;//[Offset: 0xf44, Size: 12]
	Vector OffsetTrueFPPProneLocation;//[Offset: 0xf50, Size: 12]
	Rotator OffsetTrueFPPProneRotation;//[Offset: 0xf5c, Size: 12]
	Rotator OffsetTrueFPPScopeRotation;//[Offset: 0xf68, Size: 12]
	bool bUseTrueFPPOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf74, Size: 1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0xf78, Size: 16]
	int[] AttachedAttachmentID;//[Offset: 0xf88, Size: 16]
	int[] DefaultAttachedAttachmentID;//[Offset: 0xf98, Size: 16]
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0xfd8, Size: 8]
	BulletHitInfoRepData[] BulletHitDataRepArray;//[Offset: 0xff0, Size: 16]
	float HitDataTimeOut;//[Offset: 0x1010, Size: 4]
	bool bNeedForceSyncSimulatedClientsBulletsNumAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1014, Size: 1]
	bool bIsInfiniteBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1015, Size: 1]
	enum CurShootIntervalMode;//[Offset: 0x1016, Size: 1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1154, Size: 1]
	bool bCanAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1155, Size: 1]
	<int,AnimationAsset*> ScopeAnimMap;//[Offset: 0x1158, Size: 80]
	void UpdateComponentTick();// 0x40c85f0
	void UnRegisterScopeAnim(byte AnimType);// 0x40c8574
	void UnRegisterAllScopeAnim();// 0x40c8560
	bool StopFireFilter();// 0x40c8520
	void StopFireDirectly();// 0x40c850c
	void StopFire(enum ToState);// 0x40c8488
	int StartReload();// 0x40c844c
	bool StartFireFilter();// 0x40c840c
	void StartFireDirectly();// 0x40c83f8
	void StartFire();// 0x40c83dc
	int StartDropWeapon();// 0x40c83a0
	void StartDoPreBarrel(float HandledTime);// 0x40c831c
	void StartDoBarrel();// 0x40c8300
	void ShowDefaultScope(bool bShow);// 0x40c827c
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x40c81bc
	bool ShouldVerifyWeaponFireInfoTime();// 0x40c817c
	bool ShouldVerifyShootProjectileBullet();// 0x40c813c
	bool ShouldVerifyProjectileShootInf();// 0x40c80fc
	void SetVerticalRecoilSacle(float VerticalRecoilSacle);// 0x40c8080
	void SetTacticalReloadTime(float TacticalReloadTime);// 0x40c8004
	void SetShootIntervalTime(float ShootIntervalTime);// 0x40c7f88
	void SetReloadTime(float ReloadTime);// 0x40c7f0c
	void SetMaxBulletNumInOneClip(int MaxBulletNumInOneClip);// 0x40c7e90
	void SetIsInfiniteBulletNum(bool bEnable);// 0x40c7e0c
	void SetHorizontalRecoilSacle(float HorizontalRecoilSacle);// 0x40c7d90
	void SetDeviationSacle(float DeviationSacle);// 0x40c7d14
	void SetCurShootType(byte shootType);// 0x40c7c98
	void SetCurShootMode(byte InShootMode);// 0x40c7c14
	void SetCurrentBulletNumInClipOnServer(int Count, bool bMulticastToClient);// 0x40c7b54
	void SetCurrentBulletNumInClipOnClient(int Count);// 0x40c7ad8
	void SetCurReloadMethod(byte method);// 0x40c7a5c
	void SetBulletRange(float BulletRange);// 0x40c79e0
	void SetBulletMinimumDamage(float BulletMinimumDamage);// 0x40c7964
	void SetBulletImpulse(float BulletImpulse);// 0x40c78e8
	void SetBulletFireSpeed(float BulletFireSpeed);// 0x40c786c
	void SetBulletBaseDamage(float BulletBaseDamage);// 0x40c77f0
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x40c7714
	bool ScopeOut();// 0x40c76d4
	void ScopeInContinue();// 0x40c76c0
	bool ScopeIn();// 0x40c7680
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x40c75fc
	void RPC_ClientSetCurShootType(byte shootType);// 0x40c754c
	void RPC_ClientSetCurReloadMethod(byte method);// 0x40c749c
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainBulletNumToReload);// 0x40c7418
	void RPC_Client_SetBulletNumInClip(int Count);// 0x40c7368
	void RotateCrossHair(Rotator Rot);// 0x40c72ec
	void ResetInitialBulletNumInClip(bool bSetZero);// 0x40c7268
	void RegisterScopeAnim(byte AnimType);// 0x40c71ec
	void RefreshDirtyBullet();// 0x40c71d8
	void PreConditionalSpawnImpactEffect(out const BulletHitInfoUploadData InImpactResult, out BulletHitInfoUploadData OutImpactResult);// 0x40c700c
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0xffffff8f20d162a8
	void OnWeaponShootDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnWeaponShootCommonDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0xffffff8f20d162a8
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0xffffff8f20d162a8
	void OnWeaponEquipDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnStopFireDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnStartFireDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnShootWeaponDrop__DelegateSignature();// 0xffffff8f20d162a8
	void OnShootWeaponAutoReloadDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnShootWeaponAutoDrop__DelegateSignature();// 0xffffff8f20d162a8
	void OnShootIntervalModeChangeDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnScopeOut__DelegateSignature();// 0xffffff8f20d162a8
	void OnScopeInContinue__DelegateSignature();// 0xffffff8f20d162a8
	void OnScopeIn__DelegateSignature();// 0xffffff8f20d162a8
	void OnRep_RepWeaponID(int OldVar);// 0x40c6f88
	void OnRep_OwnerClientCreateWeaponData();// 0x40c6f6c
	void OnRep_HitDataArray();// 0x40c6f58
	void OnRep_CurShootType();// 0x40c6f44
	void OnRep_CurMaxBulletNumChange();// 0x40c6f30
	void OnRep_CurCurShootIntervalMode();// 0x40c6f1c
	void OnRep_CurBulletNumInClipOnSimulatedClients();// 0x40c6f08
	void OnRep_BulletTrackSkinConfig();// 0x40c6ef4
	void OnRep_bIsInfiniteBulletNum();// 0x40c6ee0
	void OnMaxBulletChange__DelegateSignature();// 0xffffff8f20d162a8
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0xffffff8f20d162a8
	void OnCurBulletChange__DelegateSignature();// 0xffffff8f20d162a8
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnBulletNumChangeDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnBulletHitDelegate__DelegateSignature(Actor* InHitActor, float ImpactPosDistanceToWeapon, Pawn* Player);// 0xffffff8f20d162a8
	void OnBulletBeforeShootDelegate__DelegateSignature(STExtraShootWeaponBulletBase* Bullet);// 0xffffff8f20d162a8
	void OnAvatarLoadFinish(int AsyncLoadID, AvatarComponent* LoadEventFrom);// 0x40c6e28
	void NotifyServerNoneShootAction();// 0x40c6dc8
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainBulletNumToReload);// 0x40c6d4c
	void NotifyClientNoneShootAction();// 0x40c6cec
	void LocalSetBulletNumInClip(int Count);// 0x40c6c70
	bool IsVehicleWeapon();// 0x40c6c38
	bool IsInPreFire();// 0x40c6c00
	bool IsEnableReloadADS();// 0x40c6be0
	bool IsDriverVehicleWeapon();// 0x40c6ba8
	void HandleWeaponScopeUnEquiped(enum Type);// 0x40c6b2c
	void HandleWeaponScopeEquiped(enum Type);// 0x40c6ab0
	byte GetWeaponReloadType();// 0x40c6a7c
	float GetWeaponReloadTimeNew(bool bForceTactical);// 0x40c69e0
	int GetWeaponID();// 0x40c69ac
	bool GetWeaponHasInfiniteBulletsFromEntity();// 0x40c6974
	int GetWeaponEntityInitBulletInClip();// 0x40c6940
	float GetWeaponBodyLength();// 0x40c690c
	float GetWeaponAimFOV();// 0x40c68d8
	Vector GetVolleyShootDirection(Vector TargetLoc, Vector OldStartLoc, Vector NewStartLoc, Vector BulletDir);// 0x40c675c
	ParticleSystem* GetVisualBulletTrackFX();// 0x40c6728
	bool GetVisualBulletTrackEnabled();// 0x40c66f0
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x40c66bc
	float GetVerticalRecoilFactorModifier();// 0x40c6688
	FName GetVerifyScopeSocketNameFromEntity();// 0x40c6654
	float GetTraceDistanceFromEntity();// 0x40c6620
	float GetTacticalReloadTime();// 0x40c65ec
	FName GetSilencerSocketNameFromEntity();// 0x40c65b8
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x40c6584
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x40c6550
	byte GetShootTypeFromEntity();// 0x40c651c
	float GetShootIntervalTime();// 0x40c64e8
	int GetShootIntervalShowNumberFromEntity();// 0x40c64b4
	float GetShootIntervalFromEntity();// 0x40c6480
	FName GetShellDropSocketNameFromEntity();// 0x40c644c
	int GetScopeID(bool bIsAngledOpticalSight);// 0x40c63b8
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x40c62ac
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x40c61a8
	float GetReloadTimeMagOutFromEntity();// 0x40c6174
	float GetReloadTimeFromEntity();// 0x40c6140
	float GetReloadTime();// 0x40c610c
	FName GetReloadTIDName(byte method);// 0x40c6078
	float GetReloadTacticalTimeFromEntity();// 0x40c6044
	float GetReloadDurationStartFromEntity();// 0x40c6010
	float GetReloadDurationLoopFromEntity();// 0x40c5fdc
	Transform GetRelativeMuzzleTransform();// 0x40c5f80
	float GetReferenceDistance();// 0x40c5f4c
	float GetRangeModifier();// 0x40c5f18
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x40c5e98
	float GetPreFireTimeFromEntity();// 0x40c5e64
	float GetPostReloadTimeFromEntity();// 0x40c5e30
	float GetPostFireTimeFromEntity();// 0x40c5dfc
	Transform GetMuzzleTransform();// 0x40c5da0
	FName GetMuzzleSocketNameFromEntity();// 0x40c5d64
	float GetMaxValidHitTimeFromEntity();// 0x40c5d30
	int GetMaxProjectileBulletsNumSingleShotFromEntity();// 0x40c5cfc
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x40c5cc8
	int GetMaxBulletNumInOneClipFromEntity();// 0x40c5c94
	int GetMaxBulletNumInBarrelFromEntity();// 0x40c5c60
	int GetInitBulletNumInClipFromEntity();// 0x40c5c2c
	float GetImpactEffectSkipDistanceFromEntity();// 0x40c5bf8
	float GetHorizontalRecoilFactorModifier();// 0x40c5bc4
	float GetHitPartCoff_Limbs(bool bTargetIsMonster);// 0x40c5b28
	float GetHitPartCoff_Head(bool bTargetIsMonster);// 0x40c5a8c
	float GetHitPartCoff_Hand(bool bTargetIsMonster);// 0x40c59f0
	float GetHitPartCoff_Foot(bool bTargetIsMonster);// 0x40c5954
	float GetHitPartCoff_Body(bool bTargetIsMonster);// 0x40c58b8
	WeaponHitPartCoff GetHitPartCoff(bool bTargetIsMonster);// 0x40c5814
	bool GetHasSingleFireMode();// 0x40c57dc
	bool GetHasBurstFireMode();// 0x40c57a4
	bool GetHasAutoFireMode();// 0x40c576c
	float GetGameDeviationFactor();// 0x40c5738
	FName GetFiringSuppressorSocketNameFromEntity();// 0x40c5704
	float GetFireSensitiveYawRate();// 0x40c56d0
	float GetFireSensitivePitchRate();// 0x40c569c
	Vector GetFinalBulletLaunchPos(Vector InitMuzle, out const Vector InitMuzleDir, bool bNeedPullBackMuzzle);// 0x40c5564
	int GetExtraShootIntervalShowNumberFromEntity();// 0x40c5530
	float GetExtraShootIntervalFromEntity();// 0x40c54fc
	float GetExtraRangeModifier();// 0x40c54c8
	float GetDeviationFactorModifire();// 0x40c5494
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x40c5408
	byte GetCurSightType();// 0x40c53d4
	Vector GetCurSightCameraSocketWorldLocByMuzzleTransOnDs(Vector MuzzleWorldLoc, Vector MuzzleWorldDir, bool bIsAngledSight);// 0x40c52ac
	byte GetCurShootMode();// 0x40c5270
	enum GetCurShootIntervalMode();// 0x40c5250
	int GetCurrentBulletNumInClip();// 0x40c5234
	float GetCurReloadTimeModifire();// 0x40c5200
	float GetCurReloadTimeMagOut();// 0x40c51cc
	float GetCurReloadTimeMagIn();// 0x40c5198
	float GetCurReloadTime();// 0x40c5164
	byte GetCurReloadMethod();// 0x40c5130
	float GetCrossHairInitSize();// 0x40c50fc
	float GetCrossHairBurstSpeed();// 0x40c50c8
	float GetCrossHairBurstIncreaseSpeed();// 0x40c5094
	bool GetClipHasInfiniteBulletsFromEntity();// 0x40c505c
	MeshComponent* GetChildMeshComp(FName compTag);// 0x40c4fd0
	float GetBurstShootIntervalFromEntity();// 0x40c4f9c
	float GetBurstShootCDFromEntity();// 0x40c4f68
	int GetBurstShootBulletsNumFromEntity();// 0x40c4f34
	ItemDefineID GetBulletTypeFromEntity();// 0x40c4ee8
	float GetBulletRangeEntity();// 0x40c4eb4
	int GetBulletNumSingleShotFromEntity();// 0x40c4e80
	float GetBulletMinimumDamage();// 0x40c4e4c
	float GetBulletImpulse();// 0x40c4e18
	float GetBulletGravityModifier();// 0x40c4de4
	float GetBulletGravityExtraOffset();// 0x40c4db0
	float GetBulletFireSpeedFromEntity();// 0x40c4d7c
	float GetBulletBaseDamage();// 0x40c4d48
	float GetBaseImpactDamageEntity();// 0x40c4d14
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x40c4c54
	int GetAvailableBulletsNumInBackpack(bool bAdjustInfiniteBullets);// 0x40c4bc0
	bool GetAutoReloadFromEntity();// 0x40c4b88
	bool GetADSManualStop();// 0x40c4b50
	float GetAccessoriesVRecoilFactorModifier();// 0x40c4b1c
	float GetAccessoriesVRecoilFactor();// 0x40c4ae8
	float GetAccessoriesRecoveryFactor();// 0x40c4ab4
	float GetAccessoriesHRecoilFactorModifier();// 0x40c4a80
	float GetAccessoriesHRecoilFactor();// 0x40c4a4c
	float GetAccessoriesFinalDeviationFactor();// 0x40c4a18
	float GetAccessoriesDeviationFactor();// 0x40c49e4
	float GetAccessoriesAllRecoilFactorModifier();// 0x40c49b0
	void ForceSyncSimulatedClientsBulletsNumAfterReload(int InCurBulletNum);// 0x40c4900
	void ForceSyncAllClientsBulletsNumOnServer();// 0x40c48ec
	void FixBulletNumWithValideData();// 0x40c48d8
	bool EnablePlayBoltAnimation();// 0x40c48a0
	void EnableInfiniteClipBullets(bool IsEnable);// 0x40c481c
	void EnableInfiniteBullets(bool bEnable);// 0x40c4790
	void EnableInfiniteBackpackBullets(bool IsEnable);// 0x40c470c
	void CheckWeaponInitShootIDAndClipID();// 0x40c46f0
	bool CheckShootVoiceDisValidOnReplay();// 0x40c46b0
	bool CheckShootEnviroment();// 0x40c4670
	bool CheckServerNeedStopFire();// 0x40c4630
	bool CheckCanSimulateOBBulletTrack();// 0x40c45f0
	void CheckAsyncLoadBulletTrackSkin(out const WeaponVisualBulletClientModeConfigNew Config);// 0x40c4504
	bool CanSwitchToGrenade();// 0x40c44e8
	void AsyncLoadBulletTrackSkinFinished();// 0x40c44d4

--------------------------------
Class: STExtraWeapon.Actor.Object
	Transform WeaponAttachMeshOffset;//[Offset: 0x420, Size: 48]
	Transform FPPWeaponOffset;//[Offset: 0x450, Size: 48]
	bool isFPPReloadUseAddSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	Transform FPPWeaponOffsetReload;//[Offset: 0x490, Size: 48]
	bool isFPPReloadUseSpecialOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x4d0, Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x500, Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x530, Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x560, Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x590, Size: 48]
	int CrossHairType;//[Offset: 0x5c0, Size: 4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x5c4, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x5c8, Size: 8]
	FName WeaponStaticMeshCompTag;//[Offset: 0x5d0, Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x5d8, Size: 8]
	delegate WeaponEffectActionDelegate;//[Offset: 0x5e0, Size: 16]
	delegate FireOneShotEffectDelegate;//[Offset: 0x5f0, Size: 16]
	delegate OnShootWeaponChangeState;//[Offset: 0x600, Size: 16]
	delegate OnWeaponChangeStateCommon;//[Offset: 0x610, Size: 16]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x620, Size: 16]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x630, Size: 16]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x640, Size: 16]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x650, Size: 16]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x660, Size: 16]
	delegate OnEquipOrUnEuipAttachmentDelegate;//[Offset: 0x670, Size: 16]
	delegate OnWeaponTriggerEventDelegate;//[Offset: 0x680, Size: 16]
	delegate OnWeaponBaseEquipDelegate;//[Offset: 0x690, Size: 16]
	delegate OnWeaponBaseUnEquipDelegate;//[Offset: 0x6a0, Size: 16]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x6b0, Size: 8]
	enum CurFreshWeaponState;//[Offset: 0x6b8, Size: 1]
	enum SyncFreshWeaponStateForRep;//[Offset: 0x6b9, Size: 1]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ba, Size: 1]
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bb, Size: 1]
	int ReconnectOpIndex;//[Offset: 0x6bc, Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x6c0, Size: 88]
	Vector2D ClientScreenSize;//[Offset: 0x718, Size: 8]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x720, Size: 16]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	FName SpesificLogicGrenadeSlot;//[Offset: 0x738, Size: 8]
	enum[] AutoClientStateSyncDisableList;//[Offset: 0x740, Size: 16]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x750, Size: 112]
	int WeaponBeginPlayTimeStamp;//[Offset: 0x7c0, Size: 4]
	bool bPlayBackpackToIdleAnimWhenGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c4, Size: 1]
	Actor* CustomEquipAttachActor;//[Offset: 0x7c8, Size: 8]
	int RepWeaponID;//[Offset: 0x7d0, Size: 4]
	ItemDefineID ItemDefineID;//[Offset: 0x7d8, Size: 24]
	FName LogicSocket;//[Offset: 0x7f0, Size: 8]
	FName AttachSocket;//[Offset: 0x7f8, Size: 8]
	byte SurviveWeaponPropSlot;//[Offset: 0x800, Size: 1]
	WeaponTriggerEventHandleSkill* SkillHandleComp;//[Offset: 0x808, Size: 8]
	float PostFireHandledTime;//[Offset: 0x810, Size: 4]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x818, Size: 8]
	byte CurWeaponState;//[Offset: 0x820, Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x828, Size: 8]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x830, Size: 8]
	WeaponEffectComponent* WeaponEffectComponent;//[Offset: 0x838, Size: 8]
	bool bWaitForReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x848, Size: 80]
	float UnMatchSyncStateInterval;//[Offset: 0x89c, Size: 4]
	bool bNeedHandleCreateOnOwnerClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 1]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x8a8, Size: 8]
	UAECharAnimListCompBase* CachedUAECharAnimListCompBase;//[Offset: 0x8b0, Size: 8]
	float AIMinAttackDist;//[Offset: 0x8b8, Size: 4]
	float AIMaxAttackDist;//[Offset: 0x8bc, Size: 4]
	float AIAttackDist;//[Offset: 0x8c0, Size: 4]
	MeshSynData[] WeaponAvatarSyncData;//[Offset: 0x8c8, Size: 16]
	SceneComponent* CurAttachComponent;//[Offset: 0x8d8, Size: 8]
	bool bSimulatedClientInitStateFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 1]
	bool bNeedDisableWeaponAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e9, Size: 1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x8f8, Size: 16]
	WeaponLogicBaseComponent*[] HandleExtraRelavanceCompList;//[Offset: 0x908, Size: 16]
	bool EnableWeaponReloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 1]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 1]
	ActorComponent*[] CrossHairComps;//[Offset: 0x948, Size: 16]
	byte WeaponUIType;//[Offset: 0x958, Size: 1]
	bool bForceHideBackpackWeaponBaseOnGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x959, Size: 1]
	float CurWeaponUpdateFrequency;//[Offset: 0xa90, Size: 4]
	float CurWeaponConsiderFrequency;//[Offset: 0xa94, Size: 4]
	float BackWeaponUpdateFrequency;//[Offset: 0xa98, Size: 4]
	float BackWeaponConsiderFrequency;//[Offset: 0xa9c, Size: 4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0xaa0, Size: 8]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0xab0, Size: 8]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0xab8, Size: 16]
	bool bChangeWeaponStateNotifyLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac8, Size: 1]
	enum LastWeaponStateCache;//[Offset: 0xac9, Size: 1]
	bool bForceUnequipBeforeDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad0, Size: 1]
	int CheckVisibleFailedCnt;//[Offset: 0xad4, Size: 4]
	bool WhetherCheckLockTakeOutWeapon();// 0x40f3430
	void WeaponNotifyChangeStateDelegate__DelegateSignature(enum State);// 0xffffff8f20d162a8
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0xffffff8f20d162a8
	void UpdateReconnectWeapon();// 0x40f341c
	void UpdateCreateWeapon();// 0x40f3408
	void TriggerWeaponEvent(enum Event);// 0x40f3384
	bool ShouldReceiveRPCState();// 0x40f3344
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable);// 0x40f3278
	void ServerDoRepOnce_CreateWeaponData();// 0x40f3264
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x40f31b4
	void RPC_ClientChangeFreshWeaponState(enum State);// 0x40f3104
	void RPC_Client_SetActorHiddenInGame(bool _bHidden);// 0x40f3078
	bool ReceiveActorHiddenInGame(bool bNewHidden);// 0xffffff8f20d162a8
	void ReAttachWeaponMeshWhenEquiped();// 0x40f305c
	void PlayLocalShellDropFX();// 0xffffff8f20d162a8
	void OnWeaponTriggerEventDelegate__DelegateSignature(enum Event);// 0xffffff8f20d162a8
	void OnWeaponMeshLoadFinished(int SlotID, bool IsEquipped);// 0x40f2f94
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0xffffff8f20d162a8
	void OnWeaponBaseUnEquipDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnWeaponBaseEquipDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnShootWeaponChangeStateDelegate__DelegateSignature(enum LastState, enum NewState);// 0xffffff8f20d162a8
	void OnRep_WeaponReconnectReplicateData();// 0x40f2f80
	void OnRep_SyncFreshWeaponStateForRep();// 0x40f2f6c
	void OnRep_SimulatedOwnerPawn();// 0x40f2f58
	void OnRep_SimulatedOwnerActor();// 0x40f2f44
	void OnRep_RepWeaponID(int OldVar);// 0x40f2ec0
	void OnRep_OwnerClientCreateWeaponData();// 0x40f2ea4
	void OnRep_ItemDefineID();// 0x40f2e90
	void OnRep_bPlayBackpackToIdleAnimWhenGet();// 0x40f2e7c
	void OnRep_AvatarMeshChanged();// 0x40f2e68
	void OnRep_AttachmentReplication();// 0x40f2e4c
	void OnReleaseTrigger();// 0x40f2e30
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0xffffff8f20d162a8
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0xffffff8f20d162a8
	void OnPushTrigger();// 0x40f2e14
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0xffffff8f20d162a8
	void OnEquipOrUnEuipAttachmentDelegate__DelegateSignature(bool IsEquip, BackpackWeaponAttachHandle* attachHandle);// 0xffffff8f20d162a8
	void OnDrop();// 0x40f2df8
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0xffffff8f20d162a8
	void OnChangeWeaponStateNotify();// 0x40f2de4
	void NotifyServerChangeState(enum State);// 0x40f2d68
	bool NeedPut2BackWhenDisUse();// 0x40f2d28
	void LockChangeWeaponStateNotify(bool bLock, bool bFlushNotify);// 0x40f2c58
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x40f2bc8
	bool IsLocalOrSpectorPlayer();// 0x40f2b90
	void InitProxyBP(Actor* OwnerTarget);// 0xffffff8f20d162a8
	bool HasComponentSlot(byte Slot);// 0x40f2b00
	enum GetWeaponTypeNew();// 0x40f2acc
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x40f2a98
	byte GetWeaponState();// 0x40f2a54
	byte GetWeaponSlot();// 0x40f2a20
	int GetWeaponSkillIndex();// 0x40f29ec
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x40f29b8
	enum GetWeaponOwnerObserverType();// 0x40f2984
	enum GetWeaponOperationMode();// 0x40f2948
	FString GetWeaponName();// 0x40f28c8
	MeshComponent* GetWeaponMeshComponent();// 0x40f288c
	int GetWeaponItemID();// 0x40f2858
	WeaponEntity* GetWeaponEntityComponent();// 0x40f2824
	WeaponEffectComponent* GetWeaponEffectComponent();// 0x40f27f0
	FString GetWeaponDetailInfo();// 0x40f2770
	FName GetWeaponCollapseSocket();// 0x40f2734
	WeaponAttrModifyConfig[] GetWeaponAttrModifyConfigList();// 0x40f2668
	FName GetWeaponAttachSocket();// 0x40f262c
	ItemDefineID GetWeaponAttachmentIDBySocketType(enum SocketType);// 0x40f2590
	float GetSwitchFromIdleToBackpackTime(bool WithAnimAdjust);// 0x40f24fc
	float GetSwitchFromBackpackToIdleTime(bool WithAnimAdjust);// 0x40f2468
	float GetSwitchAnimPlayRate(bool bWantEquip, float AnimLength);// 0x40f2398
	FString GetStaticMeshPath();// 0x40f2318
	FString GetSKMeshPath();// 0x40f2298
	FString GetOwnerPlayerName();// 0x40f2218
	PlayerController* GetOwnerPlayerController();// 0x40f21dc
	Pawn* GetOwnerPawn();// 0x40f21a8
	FString GetOwnerName();// 0x40f2128
	Controller* GetOwnerController();// 0x40f20ec
	Actor* GetOwnerActor();// 0x40f20b0
	ItemDefineID GetItemDefineID();// 0x40f2064
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x40f1ec0
	LinearColor GetColorByTeamID(int TeamID);// 0xffffff8f20d162a8
	ItemHandleBase* GetBackpackItemHandle();// 0x40f1e8c
	WeaponAttachmentSlot[] GetAvailableWeaponAttachment();// 0x40f1e0c
	void DoDisableWeaponAnim();// 0x40f1df8
	void DettachWeaponForSomeTimeThenAttachBackFinish();// 0x40f1de4
	void CreateSkillHandleCompAfterCreateWeaponHandleCallback(ItemDefineID DefineID, BattleItemHandleBase* BattleItemHandle);// 0x40f1d14
	void ClearWeaponAttrModifier();// 0x40f1d00
	bool CheckWeaponMainMeshLoadFinished();// 0x40f1cc8
	void CheckReparentWeaponCustomMesh();// 0x40f1cac
	void ChangeSequenceStateInner(enum StateType);// 0x40f1c28
	void ChangeSequenceState(enum StateType);// 0x40f1ba4
	void BP_TriggerBeHitFeedback(Actor* InHitTriggerActor, int InFeedbackItemID);// 0x40f1ae4
	bool BP_IsNeedBeHitFeedback(Actor* InHitTriggerActor);// 0x40f1a4c
	bool BlueprintSetWeaponAttrModifierEnable(FString AttrModifierID, bool bNewEnable);// 0xffffff8f20d162a8
	bool BlueprintClearWeaponAttrModifier();// 0xffffff8f20d162a8

--------------------------------
Class: WeaponVerifyConfig
	int VerifyIgnoreType;//[Offset: 0x0, Size: 4]
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8, Size: 4]
	float ShooterMuzzleCircleAddit;//[Offset: 0xc, Size: 4]
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bUseZipWhileCompress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	float MaxAttachDistanceHorizon;//[Offset: 0x14, Size: 4]
	float MaxAttachDistanceZ;//[Offset: 0x18, Size: 4]
	float MinAttachDistanceZ;//[Offset: 0x1c, Size: 4]
	float MaxGunRoot;//[Offset: 0x20, Size: 4]
	float MaxMuzzleGun;//[Offset: 0x24, Size: 4]
	float DistMuzzleGun;//[Offset: 0x28, Size: 4]
	float MuzzleHighCD;//[Offset: 0x2c, Size: 4]
	float AimFlyCD;//[Offset: 0x30, Size: 4]
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float MaxBackTraceSize;//[Offset: 0x38, Size: 4]
	bool bVerifyFlyAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float MinKickBackPitch;//[Offset: 0x40, Size: 4]
	float MinKickBackYaw;//[Offset: 0x44, Size: 4]
	float MaxDirChangeAreaEval;//[Offset: 0x48, Size: 4]
	bool bUseLegacyShootRateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float AdditGunPosHeight;//[Offset: 0x50, Size: 4]

--------------------------------
Class: WeaponAvatarComponent.AvatarComponent.SceneComponent.ActorComponent.Object
	delegate OnScopeEquipDelegate;//[Offset: 0x890, Size: 16]
	delegate OnScopeUnEquipDelegate;//[Offset: 0x8a0, Size: 16]
	bool bIsEquipScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	delegate OnWeaponPartsEquipped;//[Offset: 0x8b8, Size: 16]
	BattleItemHandleBase* handleRecord;//[Offset: 0x8c8, Size: 8]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x8d8, Size: 80]
	MeshSynData[] defaultSynData;//[Offset: 0x930, Size: 16]
	STExtraWeapon* OwnerWeapon;//[Offset: 0x950, Size: 8]
	PrimitiveComponent*[] meshComponentList_for_outline;//[Offset: 0x958, Size: 16]
	delegate OnSkinDefaultItemListLoaded;//[Offset: 0x968, Size: 16]
	int AsyncSkinDefaultItemLoadReqID;//[Offset: 0x978, Size: 4]
	bool bUseScopeSectionOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c, Size: 1]
	bool bPreCacheAutonomouseMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97d, Size: 1]
	bool ShouldDisplayByQuality(int SlotID);// 0x41f6538
	void SetPendantSocketType(enum SocketType);// 0x41f64bc
	void ResetAttachmentSocket();// 0x41f64a8
	void ResetAttachmentParent();// 0x41f6494
	bool RePickItemHandle();// 0x41f645c
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* Handle);// 0x41f63d0
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x41f6344
	void RecreateMeshByHandle(BattleItemHandleBase* PendingRecreateHandle);// 0x41f62c8
	void PutOnRefitMaterial(BattleItemHandleBase* refitMaterialHandle);// 0x41f624c
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* weaponHandle, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x41f6140
	bool PutOnEquipmentByResID(int resID);// 0x41f60a8
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x41f5f9c
	void PutOffRefitMaterial();// 0x41f5f88
	bool PutOffEquimentByResID(int resID);// 0x41f5ef0
	void PrepareRenderMaterialAssets(out WeaponMeshCfg meshPack, out SoftObjectPath[] MaterialAssets);// 0x41f5d10
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData SyncData);// 0x41f5bfc
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool IsEquipped);// 0xffffff8f20d162a8
	void OnSkinDefaultItemHandleListLoaded(BattleItemHandleBase*[] ItemHandles, int AsyncLoadID);// 0x41f5ae8
	void OnScopeUnequipDelegate__DelegateSignature(enum AttachmentSocketType);// 0xffffff8f20d162a8
	void OnScopeEquipDelegate__DelegateSignature(enum AttachmentSocketTypeD);// 0xffffff8f20d162a8
	void OnMeshLoaded(SoftObjectPath AssetList, BattleItemHandleBase* ItemHandles, bool isReplaced);// 0x41f5988
	void OnItemHandleLoaded(ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x41f58c0
	void OnItemHandleListLoaded(BattleItemHandleBase*[] ItemHandles, int AsyncLoadID);// 0x41f57ac
	void OnDefaultItemLoaded(ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x41f56e4
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x41f5524
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x41f5428
	bool LoadSkinDefaultMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x41f5334
	bool LoadMeshsAsync(BattleItemHandleBase* handleList, bool needDirectLoad);// 0x41f5258
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x41f515c
	void LoadDefaultAttachmentsAsync();// 0x41f5148
	bool IsTeammate();// 0x41f5108
	bool IsAutonomousAvatar();// 0x41f50c8
	void InitRefitAttachment(BattleItemHandleBase* weaponHandle);// 0x41f504c
	void InitMasterComponent(MeshComponent* MasterComp);// 0x41f4fc8
	void InitialAvatarParam(int AGender);// 0x41f4f44
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x41f4ec0
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x41f4e3c
	void InitDefaultAttachment(BattleItemHandleBase* weaponHandle);// 0x41f4dc0
	BattleItemHandleBase* GetWeaponHandle();// 0x41f4d8c
	Controller* GetWeaponController();// 0x41f4d58
	int GetReplacedAttachementIndex(out const ItemDefineID InWeaponDefineID, out const ItemDefineID InWeaponSkinDefineID, out const WeaponAttachmentConfig InAttachmentConfig, const bool InIsLogMatchResult, FString InLogTag);// 0x41f4a4c
	FString GetPlayerName();// 0x41f49c4
	STExtraWeapon* GetOwnerWeapon();// 0x41f4990
	STExtraBaseCharacter* GetOwnerCharacter();// 0x41f495c
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef);// 0x41f4868
	bool GetMeshPack(BattleItemHandleBase* Handle, out WeaponMeshCfg meshCfg);// 0x41f46c4
	BattleItemHandleBase* GetEquippedHandle(int SlotID);// 0x41f4638
	AvatarEntityFactory* GetEntityFactory();// 0x41f45fc
	byte GetCurSightType();// 0x41f45c8
	MeshComponent* GetAttachmentSocketTransform(int SlotID);// 0x41f453c
	AnimationAsset* GetAttachmentAnim(enum SlotID, int AnimIdx);// 0x41f4474
	BattleItemHandleBase* GenerateAvatarHandle(int AvatarResID);// 0x41f43e8
	BattleItemHandleBase* FetchReloadHandleFromSkinList(STExtraPlayerController* PC, BattleItemHandleBase* AttachmentInterface, BattleItemHandleBase* GunInterface);// 0x41f42e8
	void ClearMeshBySlot(int Slot, bool putDefault);// 0x41f4220
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x41f419c
	bool CheckSlotIsEquipped(int SlotID, bool bIncludingDefault);// 0x41f40c8
	void CheckScopeSectionOptVisibility(const bool InTargetVisibility);// 0x41f4044
	bool CheckIsResIDCompatibleWithMesh(int resID);// 0x41f3fb4
	bool CheckIsAlreadyEquipped(ItemDefineID DefineID);// 0x41f3f14
	bool ApplyStaticMeshByID(int Slot, StaticMesh* pSM, BattleItemHandleBase* Handle);// 0x41f3e08
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, BattleItemHandleBase* Handle);// 0x41f3cfc
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* MeshComp);// 0x41f3c40
	void ApplyAttachment(BattleItemHandleBase* attachHandle);// 0x41f3bc4
	void ApplyAnimation(int Slot, BattleItemHandleBase* Handle);// 0x41f3b0c

--------------------------------
Class: AvatarComponent.SceneComponent.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x2c0, Size: 8]
	FName SkinWeightProfileName;//[Offset: 0x2c8, Size: 8]
	<enum> RegisteredUseSkinWeightProfileState;//[Offset: 0x2d0, Size: 80]
	<FName> RegisteredUseSkinWeightProfileState_IgnoreHandle;//[Offset: 0x320, Size: 80]
	<int,SkinWeightProfileStates> Slot_UseSkinWeightProfileStatus_Map;//[Offset: 0x370, Size: 80]
	<int,MeshComponent*> meshComponentList;//[Offset: 0x3c0, Size: 80]
	<int,FName> slotToSocket;//[Offset: 0x410, Size: 80]
	<enum,MeshData> DefaultAvataConfig;//[Offset: 0x460, Size: 80]
	<int,BattleItemHandleBase*> loadedItemList;//[Offset: 0x4b0, Size: 80]
	int Gender;//[Offset: 0x500, Size: 4]
	bool IsNeedRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	bool ForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 1]
	<SoftObjectPath,BattleItemHandleBase*> PendingLoadRes;//[Offset: 0x508, Size: 80]
	delegate OnAvatarEquipped;//[Offset: 0x558, Size: 16]
	delegate OnAvatarEquippedWithPath;//[Offset: 0x568, Size: 16]
	delegate OnAvatarMeshChangedEvent;//[Offset: 0x578, Size: 16]
	delegate OnAvatarAsyncLoadingFinished;//[Offset: 0x588, Size: 16]
	delegate OnAllAvatarRenderFinished;//[Offset: 0x598, Size: 16]
	AvatarEntity*[] EntityTickList;//[Offset: 0x5a8, Size: 16]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	delegate OnItemLoaded;//[Offset: 0x5c0, Size: 16]
	delegate OnItemListLoaded;//[Offset: 0x5d0, Size: 16]
	AvatarStreamableHandler[] StreamableHandles;//[Offset: 0x5e0, Size: 16]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x600, Size: 80]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x650, Size: 8]
	<int,AsyncLoadMeshResReq> PendingLoadMeshRequestList;//[Offset: 0x658, Size: 80]
	<MaterialInterface*,MaterialInterface*> BaseMatMapping;//[Offset: 0x6a8, Size: 80]
	<MaterialInterface*,MaterialInterface*> MatInstanceMapping;//[Offset: 0x6f8, Size: 80]
	enum DisplayQuality;//[Offset: 0x749, Size: 1]
	SoftObjectPath[] LoadedPath;//[Offset: 0x750, Size: 16]
	class AvatarModule[] AvatarModuleTemplates;//[Offset: 0x770, Size: 16]
	<enum,AvatarModule*> AvatarModules;//[Offset: 0x780, Size: 80]
	<int,bool> AvatarOuterVisibilities;//[Offset: 0x7e8, Size: 80]
	<int,FString> AvatarVisibilityOpStack;//[Offset: 0x838, Size: 80]
	bool bEnableAvatarVisibilityTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	void ShowAttachmentByIndex(int Index, bool bIsVisible);// 0x3c768bc
	bool SetupOnReadyPak(int resID);// 0x3c7682c
	void SetDisplayQuality(enum Quality);// 0x3c767b4
	MaterialInterface* SetByPassSystemQuality(MaterialInterface* matBase, MaterialInstance* matOrigion);// 0x3c766f0
	void SetAvatarOuterVisiblity(int SlotID, bool IsVisible);// 0x3c76628
	bool ResetSkinWeightProfileByHandle(int Slot, BattleItemHandleBase* Handle, SkeletalMeshComponent* TargetComp);// 0x3c76524
	bool ResetSkinWeightProfile(int Slot, out SkinWeightProfileStates states);// 0x3c76414
	void ResetComponentMaster();// 0x3c76400
	void ResetAllAvataSlot();// 0x3c763ec
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x3c76360
	bool ReleaseMeshResourceMaterial(MeshComponent* MeshComp, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x3c7625c
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x3c761d0
	bool PutOnEquipmentByResID(int resID);// 0x3c76138
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x3c7602c
	bool PutOffEquimentByResID(int resID);// 0x3c75f94
	bool PutOffEquiment(int Slot);// 0x3c75f04
	void OnTriggerOutline();// 0x3c75ef0
	void OnAsyncLoadRes(SoftObjectPath AssetRef, MeshComponent* MeshComp, int MatIdx);// 0x3c75d98
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x3c75bd8
	void OnAsyncLoadMesh(SoftObjectPath AssetRef, bool isReplaced);// 0x3c75ab4
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x3c759b8
	bool LoadMeshsAsync(BattleItemHandleBase* handleList, bool needDirectLoad);// 0x3c758dc
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x3c757e0
	bool IsTeammate();// 0x3c757a0
	bool IsTeamAthleticsMode();// 0x3c75768
	bool IsStandAloneMode();// 0x3c75730
	bool IsSlotHasEquipped(int Slot);// 0x3c756a0
	bool IsRunOnServer();// 0x3c75668
	bool IsNeedReplaced(BackpackAvatarHandle* DoReplaceHandle);// 0x3c755d0
	bool IsMale();// 0x3c75594
	bool IsConsiderAnimHiddenByLOD(int InSlotID);// 0x3c754fc
	bool IsClientMode();// 0x3c754e0
	void InitializeAvatarModules();// 0x3c754cc
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x3c75448
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x3c753c4
	StaticMesh* GetStaticMesh_BP(out MeshPackage meshPack);// 0x3c7528c
	SkeletalMesh* GetSkeletalMesh_BP(out MeshPackage meshPack);// 0x3c75154
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef);// 0x3c75060
	void GetMeshComponentList(out MeshComponent*[] MeshCompList, bool IncludingMaster);// 0x3c74f78
	MeshComponent* GetMeshCompBySlotID(int SlotID, bool IncludingMaster);// 0x3c74ea8
	MeshComponent* GetMeshCompBySlot(enum SlotType, bool IncludingMaster);// 0x3c74dd8
	MaterialInstance* GetMaterial_BP(out MeshPackage meshPack);// 0x3c74ca0
	BattleItemHandleBase* GetLoadedHandleBase(int SlotID);// 0x3c74c14
	bool GetEquipmentMeshBySlot(int Slot, out MeshData meshPack);// 0x3c74af8
	AvatarEntityFactory* GetEntityFactory();// 0x3c74abc
	enum GetDisplayQuality();// 0x3c74aa0
	<MaterialInterface*,MaterialInterface*> GetBaseMatMapping();// 0x3c749e0
	static enum GetAvatarSlotTypeFromInt(int SlotTypeValue);// 0x3c74964
	bool GetAvatarOuterVisiblity(int SlotID);// 0x3c748cc
	AvatarModule* GetAvatarModule(enum ModuleType);// 0x3c7478c
	int GetAvatarGender();// 0x3c74758
	<int,AvatarEntity*> GetAvatarEntityList();// 0x3c74720
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int SubSlotID);// 0x3c7461c
	enum GetApplyMeshType(int Slot, SkeletalMesh* SelfMesh);// 0x3c7454c
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x3c74484
	void DestroyMeshComponent(int SlotID);// 0x3c74408
	AvatarEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x3c74344
	void ClearMeshBySlot(int Slot, bool putDefault);// 0x3c7427c
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x3c741f8
	bool CheckIfAvatarPakDownloaded(BattleItemHandleBase* ItemHandle);// 0x3c74160
	void AutoPutOnEquipmentByResID(int resID);// 0x3c740e4
	bool ApplyStaticMeshByID(int Slot, StaticMesh* pSM, BattleItemHandleBase* Handle);// 0x3c73fd8
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, BattleItemHandleBase* Handle);// 0x3c73ecc
	void ApplyMesh(MeshComponent* Component, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh, bool ReinitPose);// 0x3c73d98
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* MeshComp);// 0x3c73cdc

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0xc8, Size: 16]
	float UnitWeight;//[Offset: 0xd8, Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool CanBeClientHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	void SetClientItemContainer(out const interface classNone ItemContainer);// 0x42cbbdc
	bool IsNeedRepDefinedID();// 0x42cbb9c
	bool HanldeCleared();// 0x42cbb5c
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x42cba6c
	bool HandleTryDisuse(enum Reason);// 0x42cb9d4
	bool HandleTake(int TakeCount, int TotalCount);// 0x42cb904
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x42cb664
	bool HandleEnable(bool bEnable);// 0x42cb5c4
	bool HandleDrop(int InCount, enum Reason);// 0x42cb4f0
	bool HandleDisuse(enum Reason);// 0x42cb458
	World* GetWorldInternal();// 0x42cb41c
	ItemDefineID GetReadyPakItemDefineID();// 0x42cb3c8
	BattleItemData ExtractItemData();// 0x42cb320
	bool ClientHandleUse(BattleItemUseTarget Target, enum Reason);// 0x42cb230

--------------------------------
Class: ItemHandleBase.Object
	int Count;//[Offset: 0x28, Size: 4]
	int MaxCount;//[Offset: 0x2c, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x40, Size: 80]
	ItemAssociation[] WeakAssociate;//[Offset: 0x90, Size: 16]
	ItemDefineID DefineID;//[Offset: 0xa0, Size: 24]
	void SetAssociation(FName Name, ItemAssociation Association);// 0x42d51b4
	void RemoveWeakAssociation(ItemAssociation ItemAss);// 0x42d50fc
	void RemoveAssociation(FName Name);// 0x42d5080
	void Init(ItemDefineID InDefineID);// 0x42d4fec
	ItemAssociation[] GetWeakAssociationList();// 0x42d4f4c
	ItemAssociation GetWeakAssociation(int AssIdx);// 0x42d4ea8
	ItemDefineID GetDefineID();// 0x42d4e58
	<FName,ItemAssociation> GetAssociationMap();// 0x42d4e20
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x42d4d50
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x42d4c9c
	ItemAssociation GetAssociation(FName Name);// 0x42d4bf8
	void AddWeakAssociation(ItemAssociation Association);// 0x42d4b40
	void AddAssociation(FName Name, ItemAssociation Association);// 0x42d4a48

--------------------------------
Class: BattleItemAdditionalData
	FName Name;//[Offset: 0x0, Size: 8]
	float FloatData;//[Offset: 0x8, Size: 4]
	FString StringData;//[Offset: 0x10, Size: 16]
	int IntData;//[Offset: 0x20, Size: 4]

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0, Size: 8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 24]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 8]

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 4]
	int TypeSpecificID;//[Offset: 0x4, Size: 4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	uint64 InstanceID;//[Offset: 0x10, Size: 8]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 24]
	FName TargetAssociationName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 8]
	int Count;//[Offset: 0x8, Size: 4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x10, Size: 16]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x28, Size: 32]
	bool bTriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: BattleItemData.ItemData
	int Count;//[Offset: 0x40, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool bCanBeClientHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x48, Size: 16]
	BattleItemFeatureData FeatureData;//[Offset: 0x58, Size: 24]
	ItemAssociation[] Associations;//[Offset: 0x70, Size: 16]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	FString Name;//[Offset: 0x18, Size: 16]
	FString Icon;//[Offset: 0x28, Size: 16]
	ItemHandleBase* ItemHandle;//[Offset: 0x38, Size: 8]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 4]
	int MaxCount;//[Offset: 0x4, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int SortingPriority;//[Offset: 0x10, Size: 4]
	int ItemType;//[Offset: 0x14, Size: 4]

--------------------------------
Class: HandleMeshPack
	BattleItemHandleBase* Handle;//[Offset: 0x0, Size: 8]
	WeaponMeshCfg meshCfg;//[Offset: 0x8, Size: 376]

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* skMesh;//[Offset: 0x28, Size: 40]
	StaticMesh* stMeshLod;//[Offset: 0x50, Size: 40]
	SkeletalMesh* skMeshLod;//[Offset: 0x78, Size: 40]
	bool bOpUpdateTramsform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	MaterialInterface* MeshMat;//[Offset: 0xa8, Size: 40]
	<FName,float> MeshMatParams;//[Offset: 0xd0, Size: 80]
	MaterialInterface* baseMat;//[Offset: 0x120, Size: 8]
	MaterialInterface* baseMatClass;//[Offset: 0x128, Size: 40]
	ParticleRes[] ParticleEffects;//[Offset: 0x150, Size: 16]
	UIWidgetRes[] WidgetList;//[Offset: 0x160, Size: 16]
	enum meshType;//[Offset: 0x170, Size: 1]

--------------------------------
Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0, Size: 8]
	FName AttachSocket;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 8]
	class UserWidget* UserWidgetSoft;//[Offset: 0x8, Size: 40]
	FName AttachSocket;//[Offset: 0x30, Size: 8]
	Transform Trans;//[Offset: 0x40, Size: 48]
	Vector2D DrawSize;//[Offset: 0x70, Size: 8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]

--------------------------------
Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int Gender;//[Offset: 0x18, Size: 4]
	enum OperationType;//[Offset: 0x1c, Size: 1]
	SyncAdditionDataArray SynAdditionalData;//[Offset: 0x20, Size: 16]
	int VersionNum;//[Offset: 0x30, Size: 4]

--------------------------------
Class: SyncAdditionDataArray
	SyncAdditionData[] AddiDataArray;//[Offset: 0x0, Size: 16]

--------------------------------
Class: SyncAdditionData
	FName Name;//[Offset: 0x0, Size: 8]
	float FloatData;//[Offset: 0x8, Size: 4]
	FString StringData;//[Offset: 0x10, Size: 16]
	int IntData;//[Offset: 0x20, Size: 4]
	int Priority;//[Offset: 0x24, Size: 4]

--------------------------------
Class: SkinWeightProfileStates
	enum[] states;//[Offset: 0x0, Size: 16]
	enum[] UseSWPStates;//[Offset: 0x10, Size: 16]
	bool LobbyIgnore_SkirtPose_Lobby_Paragliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool LobbyIgnore_Fashion_Show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	<enum> CurHasSkinWeightReasons;//[Offset: 0x28, Size: 80]

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 8]
	SkeletalMesh* skMesh;//[Offset: 0x8, Size: 8]
	MaterialInstance* matIns;//[Offset: 0x10, Size: 8]
	MaterialInstance*[] additionalMats;//[Offset: 0x18, Size: 16]
	enum meshType;//[Offset: 0x28, Size: 1]
	int[] hiddenBy;//[Offset: 0x30, Size: 16]
	int[] doHiddenSlots;//[Offset: 0x40, Size: 16]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x50, Size: 16]
	ReplacedSlotInfo materialReplacedBy;//[Offset: 0x60, Size: 8]
	HideBoneData[] hideBoneSlots;//[Offset: 0x68, Size: 16]
	ItemDefineID definedID;//[Offset: 0x78, Size: 24]
	enum subSlot;//[Offset: 0x90, Size: 1]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 1]

--------------------------------
Class: ReplacedSlotInfo

--------------------------------
Class: HideBoneData

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x28, Size: 4]
	int SubSlotID;//[Offset: 0x2c, Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x30, Size: 8]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x38, Size: 8]
	AvatarComponent* AvatarComponent;//[Offset: 0x40, Size: 8]
	MeshComponent* MeshComponent;//[Offset: 0x48, Size: 8]
	MeshData EntityMeshData;//[Offset: 0x50, Size: 152]
	MeshData CachedEntityMeshData;//[Offset: 0xe8, Size: 152]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183, Size: 1]
	class Object* CachedAnimClass;//[Offset: 0x188, Size: 8]
	FName SocketName;//[Offset: 0x190, Size: 8]
	SyncAdditionDataArray SavedAddData;//[Offset: 0x198, Size: 16]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x1a8, Size: 16]
	SoftObjectPath MeshAssetPath;//[Offset: 0x1b8, Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x1d0, Size: 24]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x1e8, Size: 80]
	SoftObjectPath LastUseMeshPath;//[Offset: 0x240, Size: 24]
	void UpdateVisibility();// 0x3c7ef40
	void UnRegisterTick();// 0x3c7ef24
	void TickEntity(float DeltaTime);// 0x3c7eea0
	void SetSocketName();// 0x3c7ee84
	void SetParentDefineID(ItemDefineID ParentID);// 0x3c7edf4
	void SetAvatarVisibility(bool visibie, bool IsForCE);// 0x3c7ed1c
	void SetAvatarEntityParticleVisibility(bool visibie);// 0x3c7ec90
	void SetAdditionalData(SyncAdditionDataArray SyncData);// 0x3c7eadc
	void RevertEntityMeshData();// 0x3c7eac8
	void ResetEntityBeforePushToPool(bool DisableCheck);// 0x3c7ea3c
	void RenderEntity(out SoftObjectPath SoftPath);// 0x3c7e998
	void RegisterTick();// 0x3c7e97c
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x3c7e8f0
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x3c7e858
	void PutOnDefaultEquipment(enum SlotType);// 0x3c7e7d4
	void ParseAdditionalItem(SyncAdditionDataArray AddData);// 0x3c7e610
	void OnPreRender();// 0x3c7e5f4
	void OnPostRender();// 0x3c7e5d8
	bool IsEntityAvailable(enum VisibilityType);// 0x3c7e540
	bool IsAnimHiddenByLODEnable();// 0x3c7e500
	bool IsAnimHiddenByLOD();// 0x3c7e4c0
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x3c7e3f4
	void Init(int SlotID, int SubSlotID, AvatarComponent* AvatarComponent);// 0x3c7e2fc
	PhysicsAsset* GetRigidBodyAnimOverridePhysicsAsset(const int InGender);// 0x3c7e270
	enum GetMeshType(SkeletalMesh* SelfMesh);// 0x3c7e1dc
	MeshData GetMeshData();// 0x3c7e158
	BattleItemHandleBase* GetLoadedHandle();// 0x3c7e124
	ItemDefineID GetDefineID();// 0x3c7e0d0
	SyncAdditionDataArray GetAdditionalData();// 0x3c7dfec
	void EnterRenderPipeline();// 0x3c7dfd0
	void EnterLogicPipeline();// 0x3c7dfb4
	void DrawOutline(bool bEnable);// 0x3c7df28
	void DestoryRenderRes(int CurrSlotID);// 0x3c7dea4
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x3c7ddec
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x3c7dd24
	void ClearEquipmentLogic(bool putDefault);// 0x3c7dc98
	bool ClearEquipedMeshWhenRepeatPutOn();// 0x3c7dc58
	void ClearEntity(bool ForceClear);// 0x3c7dbcc
	void ApplyAnimation();// 0x3c7dbb0

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x7f8, Size: 8]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x800, Size: 8]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x808, Size: 8]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x810, Size: 8]
	void SetupAttachMeshComponent(MeshComponent* MeshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x3d64710
	Actor* GetBindOwner();// 0x3d646f4
	MeshComponent* GetAttachedMeshComponent();// 0x3d646d8
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* MeshComp, FName SocketName, out const Transform RelativeTrans);// 0x3d64584
	void BindOwner(Actor* Owner);// 0x3d6450c
	void BindEvent(bool bShowWidget);// 0x3d64480

--------------------------------
Class: AvatarStreamableHandler

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 24]
	enum AttachmentSocketType;//[Offset: 0x18, Size: 1]
	enum subSlot;//[Offset: 0x19, Size: 1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	int ExtendMaxBulletNumInOneClipID;//[Offset: 0x1c, Size: 4]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x28, Size: 16]
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x38, Size: 16]
	<int,FName> socketTypeToName;//[Offset: 0x48, Size: 80]
	WeaponMeshCfg MeshPackage;//[Offset: 0x98, Size: 376]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x210, Size: 16]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x220, Size: 16]
	AnimationAsset*[] AttachmentAnimListClass;//[Offset: 0x230, Size: 16]
	ItemDefineID ParentID;//[Offset: 0x240, Size: 24]

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 16]
	enum Op;//[Offset: 0x10, Size: 1]
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	float ModifyValue;//[Offset: 0x14, Size: 4]
	Object* ModifyResValue;//[Offset: 0x18, Size: 40]

--------------------------------
Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0, Size: 24]
	FText DescValue;//[Offset: 0x18, Size: 24]

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 16]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 376]
	AnimationAsset*[] AttachmentAnimListClass;//[Offset: 0x188, Size: 16]
	int replacedAttachmentMatIndex;//[Offset: 0x198, Size: 4]

--------------------------------
Class: AvatarEntityFactory.Object
	AvatarEntity* GetEntityByClass(int SlotID, int SubSlotID);// 0x3c7fd08
	AvatarEntity* CreateEntity(int SlotID, int SubSlotID);// 0x3c7fc3c

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0xe1c, Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0xe20, Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe24, Size: 1]
	<int> TouchIndexSet;//[Offset: 0xe28, Size: 80]
	byte OnFireTouchFingerIndex;//[Offset: 0xe78, Size: 1]
	enum TouchEndTriggerSkillEntry;//[Offset: 0xe80, Size: 1]
	int TouchEndTriggerSkillID;//[Offset: 0xe84, Size: 4]
	byte OnPreBuildFingerIndex;//[Offset: 0xe88, Size: 1]
	bool bPreBuildView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe89, Size: 1]
	bool bPreBuildClickDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8a, Size: 1]
	<int> TeamPlayerHPChangedIndexs;//[Offset: 0xe90, Size: 80]
	byte EditorArchiveDataType;//[Offset: 0xee0, Size: 1]
	byte RuntimeArchiveDataType;//[Offset: 0xee1, Size: 1]
	delegate OnPlayerContollerTouchBegin;//[Offset: 0xee8, Size: 16]
	delegate OnPlayerContollerTouchJoystick;//[Offset: 0xef8, Size: 16]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0xf88, Size: 80]
	<FName,float> ScopeZoomMap;//[Offset: 0xfd8, Size: 80]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0x1028, Size: 16]
	byte[] IgnoreCameraMovePendingArray;//[Offset: 0x1038, Size: 16]
	byte[] AddTouchMoveFingerArray;//[Offset: 0x1048, Size: 16]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1058, Size: 1]
	MotionControlConfig MotionControlConfig;//[Offset: 0x105c, Size: 40]
	byte OnFreeCameraFingerIndex;//[Offset: 0x1084, Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0x1088, Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0x108c, Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0x1090, Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0x1094, Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0x1098, Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0x109c, Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0x10a0, Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0x10a4, Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0x10a8, Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0x10ac, Size: 4]
	float RecoverLagDelayTime;//[Offset: 0x10b0, Size: 4]
	bool bInTombBoxGenerator_C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b4, Size: 1]
	bool bInItemGenerator_C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b5, Size: 1]
	float InItemGeneratorUIRefreshTime_C;//[Offset: 0x10b8, Size: 4]
	float CurInItemGeneratorUIRefreshTime_C;//[Offset: 0x10bc, Size: 4]
	float MotionControlPitchReverce_C;//[Offset: 0x10c0, Size: 4]
	float MotionControlLeft_C;//[Offset: 0x10c4, Size: 4]
	float MotionControlRight_C;//[Offset: 0x10c8, Size: 4]
	float MotionControlGravityX_C;//[Offset: 0x10cc, Size: 4]
	bool bLandScapeOrientation_C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	float MotionFilterX;//[Offset: 0x1120, Size: 4]
	float MotionFilterY;//[Offset: 0x1124, Size: 4]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0x1128, Size: 12]
	Vector2D StartPosition;//[Offset: 0x1134, Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0x113c, Size: 8]
	bool bResetFreeCameraStartRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1144, Size: 1]
	Rotator EndTouchFreeCameraDeltaRotation;//[Offset: 0x1148, Size: 12]
	bool CouldStartFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116c, Size: 1]
	bool bCameraFreeMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116d, Size: 1]
	float CameraFreeMovingSpeedScale;//[Offset: 0x1170, Size: 4]
	FString FollowCandidateName;//[Offset: 0x1178, Size: 16]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0x1188, Size: 80]
	Rotator FreeCameraStartRotation;//[Offset: 0x11d8, Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0x11f0, Size: 48]
	byte FreeCameraFigerIndex;//[Offset: 0x1220, Size: 1]
	int8 CurrentBuildingIndex;//[Offset: 0x1221, Size: 1]
	int WeaponReconnectOpIndex;//[Offset: 0x1224, Size: 4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1228, Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122d, Size: 1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0x1230, Size: 16]
	LinearColor CrossHairColor;//[Offset: 0x1240, Size: 16]
	byte AutoAimType;//[Offset: 0x1250, Size: 1]
	byte MeleeAutoAimType;//[Offset: 0x1282, Size: 1]
	byte HandFightAutoAimType;//[Offset: 0x12b4, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e6, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e7, Size: 1]
	Vector2D AimBtnPosC;//[Offset: 0x12e8, Size: 8]
	Vector2D AimBtnSizeC;//[Offset: 0x12f0, Size: 8]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0x1300, Size: 16]
	ClientFatalDamageRecordData FatalDamageRecord;//[Offset: 0x1310, Size: 296]
	ClientTeamerMaxKillerRecord[] ClientTeamerMaxKillerRecord;//[Offset: 0x1438, Size: 16]
	SensibilityConfig SensibilityConfig;//[Offset: 0x1448, Size: 240]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1538, Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1539, Size: 1]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0x1540, Size: 16]
	delegate OnPlayerEnterFlying;//[Offset: 0x1550, Size: 16]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0x1560, Size: 16]
	delegate OnPlayerExitFlying;//[Offset: 0x1570, Size: 16]
	delegate OnPlayerEnterJumping;//[Offset: 0x1580, Size: 16]
	delegate OnPlayerExitJumping;//[Offset: 0x1590, Size: 16]
	delegate OnPlayerEnterParachute;//[Offset: 0x15a0, Size: 16]
	delegate OnPlayerExitParachute;//[Offset: 0x15b0, Size: 16]
	delegate OnPlayerEnterWater;//[Offset: 0x15c0, Size: 16]
	delegate OnPlayerExitWater;//[Offset: 0x15d0, Size: 16]
	delegate OnPlayerEnterFighting;//[Offset: 0x15e0, Size: 16]
	delegate OnPlayerExitFighting;//[Offset: 0x15f0, Size: 16]
	delegate OnPlayerEnterFinished;//[Offset: 0x1600, Size: 16]
	delegate OnPlayerEnterAvatarDisplay;//[Offset: 0x1610, Size: 16]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x1620, Size: 16]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0x1630, Size: 16]
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0x1640, Size: 16]
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0x1650, Size: 16]
	delegate OnCharacterBreathChange;//[Offset: 0x1660, Size: 16]
	delegate OnNightBeggan;//[Offset: 0x1670, Size: 16]
	delegate OnNightEnded;//[Offset: 0x1680, Size: 16]
	delegate OnIsInFortressChanged;//[Offset: 0x1690, Size: 16]
	delegate OnPlayerEnterOrLeaveFlyingVehicle;//[Offset: 0x16a0, Size: 16]
	delegate OnPlayerEnterPossessActor;//[Offset: 0x16b0, Size: 16]
	delegate OnDisPlaySubtitle;//[Offset: 0x16c0, Size: 16]
	delegate OnSetDynamicSubtitle;//[Offset: 0x16d0, Size: 16]
	delegate OnShowFollowEmoteDelegate;//[Offset: 0x16e0, Size: 16]
	int SelectedNightRenderConfig;//[Offset: 0x16f0, Size: 4]
	delegate OnInitTaskData;//[Offset: 0x16f8, Size: 16]
	delegate OnInitCollectionData;//[Offset: 0x1708, Size: 16]
	delegate OnPlayerDoEmote;//[Offset: 0x1718, Size: 16]
	<int,int> EmoteItemIDToBPIDMap;//[Offset: 0x1728, Size: 80]
	<int,FString> EmoteBPIDToHandlePath;//[Offset: 0x1778, Size: 80]
	<int,FString> EmoteItemIDToImagePathMap;//[Offset: 0x17c8, Size: 80]
	delegate OnPlayerEnterArea;//[Offset: 0x1818, Size: 16]
	delegate OnPlayerKilling;//[Offset: 0x1828, Size: 16]
	delegate OnPickupItem;//[Offset: 0x1838, Size: 16]
	delegate OnDropItem;//[Offset: 0x1848, Size: 16]
	delegate OnDeathBoxSpawned;//[Offset: 0x1858, Size: 16]
	delegate OnTaskConditionActived;//[Offset: 0x1868, Size: 16]
	delegate OnTaskConditionDeactived;//[Offset: 0x1878, Size: 16]
	delegate OnMyObserversChangeDelegate;//[Offset: 0x18a8, Size: 16]
	delegate OnApplicationactivatedDelegate;//[Offset: 0x18b8, Size: 16]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0x18c8, Size: 152]
	float DisplayKillDistanceThreshold;//[Offset: 0x1960, Size: 4]
	delegate OnUITouchMoveEvent;//[Offset: 0x1968, Size: 16]
	delegate OnStartFireEvent;//[Offset: 0x1978, Size: 16]
	delegate OnStopFireEvent;//[Offset: 0x1988, Size: 16]
	delegate OnReleaseFireBtn;//[Offset: 0x1998, Size: 16]
	delegate OnReleaseScreen;//[Offset: 0x19a8, Size: 16]
	delegate OnFingerMove;//[Offset: 0x19b8, Size: 16]
	delegate OnSwitchCameraModeStart;//[Offset: 0x19c8, Size: 16]
	delegate OnSwitchCameraModeEnd;//[Offset: 0x19d8, Size: 16]
	delegate OnPlayerPickUpActor;//[Offset: 0x19e8, Size: 16]
	delegate OnPlayerPutDownActor;//[Offset: 0x19f8, Size: 16]
	delegate OnPlayerPutDownAllProp;//[Offset: 0x1a08, Size: 16]
	delegate OnSwitchWeapon;//[Offset: 0x1a18, Size: 16]
	delegate OnEquipWeaponDel;//[Offset: 0x1a28, Size: 16]
	delegate OnUnequipWeaponDel;//[Offset: 0x1a38, Size: 16]
	delegate OnUseInventoryItem;//[Offset: 0x1a48, Size: 16]
	delegate OnChangeBattleOwnerDel;//[Offset: 0x1a58, Size: 16]
	delegate OnDamageToOther;//[Offset: 0x1a68, Size: 16]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x1a78, Size: 16]
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0x1a88, Size: 16]
	delegate OnLocalCharacterSignalHPChangeDelegate;//[Offset: 0x1a98, Size: 16]
	delegate OnServerCharacterSignalHPChangeDelegate;//[Offset: 0x1aa8, Size: 16]
	delegate OnLocalCharacterSignalHPRemaingingTimeDelegate;//[Offset: 0x1ab8, Size: 16]
	delegate OnGameStartCountDownDelegate;//[Offset: 0x1ac8, Size: 16]
	delegate OnRank;//[Offset: 0x1ad8, Size: 16]
	delegate OnGameStartDelegate;//[Offset: 0x1ae8, Size: 16]
	delegate OnPlayerNameChange;//[Offset: 0x1af8, Size: 16]
	delegate OnUseMainSlot;//[Offset: 0x1b08, Size: 16]
	delegate OnBackpackMainSlot;//[Offset: 0x1b18, Size: 16]
	delegate OnRemoveMainSlot;//[Offset: 0x1b28, Size: 16]
	delegate OnRepPlayerState;//[Offset: 0x1b38, Size: 16]
	delegate OnRepTeammateChange;//[Offset: 0x1b48, Size: 16]
	delegate OnGameModeStateChangeDelegate;//[Offset: 0x1b58, Size: 16]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0x1b70, Size: 16]
	delegate OnMapMarkChangeDelegate;//[Offset: 0x1b80, Size: 16]
	delegate OnShowSkillPrompt;//[Offset: 0x1b90, Size: 16]
	delegate OnStartAutoSprintCountDown;//[Offset: 0x1ba0, Size: 16]
	delegate OnShowAutoSprintButton;//[Offset: 0x1bb0, Size: 16]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x1bd0, Size: 8]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x1bd8, Size: 16]
	delegate OnAutoSprintActive;//[Offset: 0x1be8, Size: 16]
	delegate OnTakeDamagedDelegate;//[Offset: 0x1bf8, Size: 16]
	delegate OnPostTakeDamageDelegate;//[Offset: 0x1c08, Size: 16]
	delegate OnLostConnection;//[Offset: 0x1c18, Size: 16]
	delegate OnReconnected;//[Offset: 0x1c28, Size: 16]
	delegate OnExitGame;//[Offset: 0x1c38, Size: 16]
	delegate OnSpectatorChange;//[Offset: 0x1c48, Size: 16]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x1c58, Size: 16]
	delegate RunOnNextFrameDelegate;//[Offset: 0x1c68, Size: 16]
	delegate OnSetPlayerMaker;//[Offset: 0x1c78, Size: 16]
	delegate OnRefreshTrainingSensitivityList;//[Offset: 0x1c88, Size: 16]
	delegate PlayerControllerPossessEvent;//[Offset: 0x1c98, Size: 16]
	delegate PlayerControllerUnPossessEvent;//[Offset: 0x1ca8, Size: 16]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x1cd8, Size: 8]
	CanvasPanel* NewbieMonsterShowWidget;//[Offset: 0x1ce0, Size: 8]
	float NewbieMonsterShowAngle;//[Offset: 0x1ce8, Size: 4]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x1cf0, Size: 8]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x1cf8, Size: 8]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x1d00, Size: 8]
	SecurityCollectorComponent* SecurityCollector;//[Offset: 0x1d08, Size: 8]
	ExceptionReportComponent* ExceptionReportComp;//[Offset: 0x1d10, Size: 8]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d18, Size: 1]
	int DebugInitDropId;//[Offset: 0x1e90, Size: 4]
	int ZombieTotalForOnePlayer;//[Offset: 0x1e94, Size: 4]
	float ZombieTotalForOnePlayerRatio;//[Offset: 0x1e98, Size: 4]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea0, Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea1, Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x1ea4, Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x1ea8, Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x1eac, Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x1eb0, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x1eb8, Size: 8]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x1ec0, Size: 8]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec8, Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x1ecc, Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x1ef0, Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x1f14, Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x1f1c, Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x1f24, Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x1f48, Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x1f50, Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x1f58, Size: 36]
	enum LastLimitDataState;//[Offset: 0x1f7c, Size: 1]
	<enum,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x1f80, Size: 80]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x1fd0, Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x1fd4, Size: 4]
	float MoveCameraSpeedLimit;//[Offset: 0x1fd8, Size: 4]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fdc, Size: 1]
	bool ShouldShowCampInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fdd, Size: 1]
	bool ShouldShowCameraDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fde, Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fdf, Size: 1]
	bool bShowSuperCodeUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe0, Size: 1]
	Actor* BonfireUIAttachedActor;//[Offset: 0x1fe8, Size: 8]
	int SkillDeadBoxEffectIndex;//[Offset: 0x1ffc, Size: 4]
	bool bIsDebugImpactEffectForAutonomousGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2000, Size: 1]
	float ImpactEffectStartScaleDistanceGM;//[Offset: 0x2004, Size: 4]
	float ImpactEffectEndScaleDistanceGM;//[Offset: 0x2008, Size: 4]
	float ImpactEffectStartScaleValueGM;//[Offset: 0x200c, Size: 4]
	float ImpactEffectEndScaleValueGM;//[Offset: 0x2010, Size: 4]
	bool IsConsiderAdaptationOffsetY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2014, Size: 1]
	byte CurCameraMode;//[Offset: 0x2015, Size: 1]
	FName AutoScopeAimCompName;//[Offset: 0x2018, Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x2020, Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2024, Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2025, Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2026, Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2027, Size: 1]
	float MoveableLandHardTime;//[Offset: 0x2028, Size: 4]
	float CanMoveCDTime;//[Offset: 0x202c, Size: 4]
	float CanSprintCDTime;//[Offset: 0x2030, Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x2034, Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x2038, Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x203c, Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x2040, Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x204c, Size: 4]
	float SpecialDeviceRate;//[Offset: 0x2050, Size: 4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x2058, Size: 80]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a8, Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a9, Size: 1]
	GameModeConfig NormalModeConfig;//[Offset: 0x20ac, Size: 20]
	GameModeConfig TAModeConfig;//[Offset: 0x20c0, Size: 20]
	HitEffectConfig HitEffectConfig;//[Offset: 0x20d4, Size: 8]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x20e0, Size: 8]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20e8, Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20e9, Size: 1]
	float AccumulateYawInput;//[Offset: 0x20ec, Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x20f0, Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f4, Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f5, Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f6, Size: 1]
	float NoRespondArea;//[Offset: 0x20f8, Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x20fc, Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2100, Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2101, Size: 1]
	byte sprintOptType;//[Offset: 0x2102, Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x2104, Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x2108, Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x210c, Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x2110, Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2114, Size: 1]
	byte JoystickOperatingMode;//[Offset: 0x2115, Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x2118, Size: 4]
	float LastJoystickOpacity;//[Offset: 0x211c, Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2120, Size: 1]
	bool bFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2121, Size: 1]
	bool bKeepFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2122, Size: 1]
	<byte,float> TouchForceMap;//[Offset: 0x2128, Size: 80]
	float DoubleClickFireTimeThreshold;//[Offset: 0x2178, Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x217c, Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x2180, Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x2184, Size: 4]
	float TouchForceFireThreshold;//[Offset: 0x2188, Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218c, Size: 1]
	float TouchForceFireThreshold_TA;//[Offset: 0x2190, Size: 4]
	bool bUseTouchForce_TA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2194, Size: 1]
	int EnableShovel_TA;//[Offset: 0x2198, Size: 4]
	bool CrouchShovel_TA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219c, Size: 1]
	bool IsHelmetFightingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219d, Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x21a0, Size: 4]
	byte TouchFireType;//[Offset: 0x21a4, Size: 1]
	float TestForce;//[Offset: 0x21a8, Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x21b0, Size: 16]
	delegate OnDoubleClickCheck;//[Offset: 0x21c0, Size: 16]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d0, Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d1, Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d2, Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d3, Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x21d4, Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x21d8, Size: 4]
	float AutoSprintThreshold;//[Offset: 0x21dc, Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x21e0, Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x21e4, Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x21e8, Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21ec, Size: 1]
	float CurrentCameraFOV;//[Offset: 0x21f0, Size: 4]
	float MinFovChangeView;//[Offset: 0x21f4, Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x21f8, Size: 56]
	int GameTipMsgID;//[Offset: 0x2230, Size: 4]
	FString GameTipParam1;//[Offset: 0x2238, Size: 16]
	FString GameTipParam2;//[Offset: 0x2248, Size: 16]
	float GameTipAnimPlayRate;//[Offset: 0x2258, Size: 4]
	float AutoSprintCD;//[Offset: 0x22b0, Size: 4]
	<uint32,TeamMateStateInfo> TeamMateStates;//[Offset: 0x22b8, Size: 80]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x2308, Size: 80]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x2358, Size: 80]
	bool bEnableSignalBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23ac, Size: 1]
	class GameMode[] AdditionalSignalBarDisplayGameModes;//[Offset: 0x23b0, Size: 16]
	delegate OnReceiveHasSignal;//[Offset: 0x23c0, Size: 16]
	CharacterAvatar_WearInfo PlayerWearInfo;//[Offset: 0x2428, Size: 32]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x2460, Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x2528, Size: 8]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x2530, Size: 8]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x2538, Size: 8]
	PlayerTombBox* DeadTombBox;//[Offset: 0x2550, Size: 8]
	FString[] ForbitPickList;//[Offset: 0x2560, Size: 16]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2580, Size: 1]
	int pickupPlayerChoice;//[Offset: 0x2584, Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2588, Size: 1]
	int blackEndTime;//[Offset: 0x258c, Size: 4]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2590, Size: 1]
	delegate OnRepNewPawn;//[Offset: 0x2598, Size: 16]
	int GiftItemAppearCount;//[Offset: 0x25a8, Size: 4]
	int GiftItemAppearCountTrehold;//[Offset: 0x25ac, Size: 4]
	float RescueRemainingSeconds;//[Offset: 0x25b0, Size: 4]
	float RescueTotalSeconds;//[Offset: 0x25b4, Size: 4]
	float RescueReduceSeconds;//[Offset: 0x25b8, Size: 4]
	float m_LastFindingPathReciveTime;//[Offset: 0x25bc, Size: 4]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c0, Size: 1]
	bool IsCurrentUsePersistStateView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c1, Size: 1]
	bool IsSkipCheckCameraView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c2, Size: 1]
	float FreeViewUpRate;//[Offset: 0x25c4, Size: 4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x25c8, Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x25cc, Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d0, Size: 1]
	int[] TouchCacheWeightSetting;//[Offset: 0x25d8, Size: 16]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2604, Size: 1]
	byte CurSightZoomFingerIndex;//[Offset: 0x264c, Size: 1]
	byte CurAimFireFingerIndex;//[Offset: 0x264d, Size: 1]
	byte PlaceCakeFingerIndex;//[Offset: 0x264e, Size: 1]
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2660, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x26c0, Size: 8]
	BackpackComponent* BackpackComponent;//[Offset: 0x2700, Size: 8]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x2708, Size: 8]
	ChatComponent* ChatComponent;//[Offset: 0x2710, Size: 8]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x2718, Size: 8]
	BaseTaskComponent* TaskComponent;//[Offset: 0x2720, Size: 8]
	delegate OnObservedItemChanged;//[Offset: 0x2758, Size: 16]
	int MapPathMarkID;//[Offset: 0x2768, Size: 4]
	BattleItemData[] ObservedItemList;//[Offset: 0x2788, Size: 16]
	IncNetArrayNew NetObservedItemList;//[Offset: 0x2798, Size: 32]
	delegate OnViewTargetPoseChangedDelegate;//[Offset: 0x2828, Size: 16]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x2838, Size: 16]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x2848, Size: 16]
	delegate OnCharacterStatesChange;//[Offset: 0x2858, Size: 16]
	delegate OnOverrideClickQuitSpectating;//[Offset: 0x2868, Size: 16]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x2888, Size: 16]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2898, Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x28a0, Size: 16]
	uint32[] OBAvaliablePlayerKeys;//[Offset: 0x28b0, Size: 16]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x2920, Size: 8]
	ObservedData ObservedData;//[Offset: 0x2928, Size: 112]
	delegate OnSignalHPChanged;//[Offset: 0x2998, Size: 16]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29bd, Size: 1]
	delegate OnToggleOBMapShowHide;//[Offset: 0x29c8, Size: 16]
	delegate OnToggleOBPlayerList;//[Offset: 0x29d8, Size: 16]
	delegate OnToggleOBTeamList;//[Offset: 0x29e8, Size: 16]
	delegate WeaponEquipAttachment;//[Offset: 0x29f8, Size: 16]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x2a08, Size: 16]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x2a28, Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x2a2c, Size: 4]
	int CurrentOBWidgetFarStyteDistance;//[Offset: 0x2a30, Size: 4]
	int CurrentOBWidgetHideStyteDistance;//[Offset: 0x2a34, Size: 4]
	bool OBNoUIMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a3c, Size: 1]
	int fireMode;//[Offset: 0x2a58, Size: 4]
	bool rightFireInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5c, Size: 1]
	float fireDelayMode2;//[Offset: 0x2a60, Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a64, Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a65, Size: 1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a66, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a67, Size: 1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x2a68, Size: 16]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x2a78, Size: 16]
	STExtraVehicleBase*[] nowNearBlowVehicleList;//[Offset: 0x2a88, Size: 16]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x2a98, Size: 16]
	STExtraShootWeapon*[] nowOneShotWeaponList;//[Offset: 0x2aa8, Size: 16]
	Actor*[] nowGrenadeList;//[Offset: 0x2ab8, Size: 16]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac8, Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x2ad0, Size: 16]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x2ae0, Size: 16]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x2af0, Size: 16]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x2b00, Size: 16]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x2b10, Size: 16]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b21, Size: 1]
	bool bCanSelectJumpPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b22, Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x2b28, Size: 16]
	delegate OnPlayerCannotJump;//[Offset: 0x2b38, Size: 16]
	delegate OnStartShrinkCircle;//[Offset: 0x2b48, Size: 16]
	delegate OnInBomingArea;//[Offset: 0x2b58, Size: 16]
	delegate OnReceiveInviteNextBattle;//[Offset: 0x2b68, Size: 16]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b78, Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x2b80, Size: 16]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x2b90, Size: 16]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba0, Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x2ba4, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x2ba8, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x2bac, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x2bb0, Size: 4]
	float RealTimePawnHeight;//[Offset: 0x2bb4, Size: 4]
	float AntiCheckParachuteTime;//[Offset: 0x2bb8, Size: 4]
	float OB_RotationLagSpeed;//[Offset: 0x2bdc, Size: 4]
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x2c00, Size: 24]
	delegate OnPreViewTargetChange;//[Offset: 0x2c18, Size: 16]
	delegate OnViewTargetChange;//[Offset: 0x2c28, Size: 16]
	Actor* ThePlane;//[Offset: 0x2c38, Size: 8]
	delegate OnClientToServerWeaponCreated;//[Offset: 0x2c48, Size: 16]
	float GameAssistantJoyStickOpacity;//[Offset: 0x2c58, Size: 4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x2c60, Size: 16]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x2c80, Size: 8]
	FString murderName;//[Offset: 0x2c90, Size: 16]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca0, Size: 1]
	FString murderUID;//[Offset: 0x2ca8, Size: 16]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cb8, Size: 1]
	InformPlayerTypeInfo[] DyingDamageInstigatorsList;//[Offset: 0x2cc0, Size: 16]
	FString LastBreathMurder;//[Offset: 0x2cd0, Size: 16]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce0, Size: 1]
	FString LastBreathMurderUID;//[Offset: 0x2ce8, Size: 16]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cf8, Size: 1]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x2d00, Size: 8]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x2d88, Size: 80]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x2dd8, Size: 80]
	float OceanSideDetectDistance;//[Offset: 0x2e34, Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x2e38, Size: 4]
	int CurrOBAirDropID;//[Offset: 0x2e3c, Size: 4]
	WaterSoundVolume*[] WaterSoundVolumeList;//[Offset: 0x2e40, Size: 16]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x2e50, Size: 80]
	Vector AlwaysLoadLevelOrigin;//[Offset: 0x2f78, Size: 12]
	float AlwaysLoadLevelRadius;//[Offset: 0x2f84, Size: 4]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x2fa0, Size: 8]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa8, Size: 1]
	float NetCullDistanceFactorForLowMemory;//[Offset: 0x2fac, Size: 4]
	FString ClientActivePlatformProfileName;//[Offset: 0x2fb0, Size: 16]
	bool HasPostExecDSCommandArrived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3010, Size: 1]
	delegate OnDSCommandArrived;//[Offset: 0x3018, Size: 16]
	float ZMoveDisCalcThreshold;//[Offset: 0x3028, Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302c, Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x3030, Size: 8]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3038, Size: 1]
	StateType ServerStateType;//[Offset: 0x3040, Size: 16]
	StateType ClientStateType;//[Offset: 0x3050, Size: 16]
	bool ConcertNeedInitParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3061, Size: 1]
	RCRBodyBoundingSize RCRBodyBoundingSizeConfig;//[Offset: 0x3064, Size: 212]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0x3140, Size: 80]
	<STExtraVehicleBase*> FriendOBRelevancyVehicleSet;//[Offset: 0x3190, Size: 80]
	PreProcessedRelevancySet PreProcessedRelevancySet;//[Offset: 0x31e0, Size: 80]
	int[] ArrGrenadeIDs;//[Offset: 0x3238, Size: 16]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324c, Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324d, Size: 1]
	bool bIsHideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324e, Size: 1]
	bool bShouldHideAllIngameUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324f, Size: 1]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3264, Size: 1]
	bool bEnableNetRelevantCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3265, Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3266, Size: 1]
	bool bGameModeEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3267, Size: 1]
	bool bGameModeEnableAutonomousOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3268, Size: 1]
	bool bEnableNewObserverSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3269, Size: 1]
	bool UseHeartbeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3280, Size: 1]
	float HeartbeatFrequency;//[Offset: 0x3284, Size: 4]
	int64 LastHeartbeatTime;//[Offset: 0x3290, Size: 8]
	HeartbeatData HeartbeatData;//[Offset: 0x3298, Size: 32]
	float ObjArrayUsageStatisticFrequency;//[Offset: 0x32b8, Size: 4]
	MonsterTreasureBox* CurOperatedMonsterTreasureBox;//[Offset: 0x32c8, Size: 8]
	MonsterTreasureBox*[] ClientMonsterTreasureBoxList;//[Offset: 0x32d0, Size: 16]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x32e0, Size: 8]
	Actor*[] ServerTreasureBoxList;//[Offset: 0x32e8, Size: 16]
	Actor* CurOperatedTreasureBox;//[Offset: 0x32f8, Size: 8]
	Actor* GameModeActor;//[Offset: 0x3300, Size: 8]
	FString DefaultHUDClassPath;//[Offset: 0x3310, Size: 16]
	BountyBoughtInfo[] BountyBoughtItemList;//[Offset: 0x3320, Size: 16]
	Actor* CandidateBoardingHelicopter;//[Offset: 0x3330, Size: 8]
	RescueHelicopterBase* CachedHelicopter;//[Offset: 0x3338, Size: 8]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x3340, Size: 8]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x3348, Size: 16]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x3358, Size: 80]
	<byte,SlotWeaponData> SavedWeaponSlotData;//[Offset: 0x33a8, Size: 80]
	int SelectedZombieWaveIndex;//[Offset: 0x3400, Size: 4]
	bool IsTickToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3404, Size: 1]
	bool IsOnceToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3418, Size: 1]
	int BuildCnt;//[Offset: 0x341c, Size: 4]
	int BuildMax;//[Offset: 0x3420, Size: 4]
	int BuildIndex;//[Offset: 0x3424, Size: 4]
	bool bIsBuildUIEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3428, Size: 1]
	delegate OnPlayerSelectZombieWave;//[Offset: 0x3430, Size: 16]
	int ConstructableConfigurations;//[Offset: 0x3458, Size: 4]
	bool GoToPlaneKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345d, Size: 1]
	bool ForceCallLeavePlaneDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345e, Size: 1]
	int PlayerStartSerialNum;//[Offset: 0x3460, Size: 4]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x3468, Size: 8]
	bool bIsDoingRespawnReinitUIWork;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c0, Size: 1]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x34c8, Size: 16]
	STExtraPlayerController* DieInstigator;//[Offset: 0x34d8, Size: 8]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e0, Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e1, Size: 1]
	WaterSwimActor*[] ClientLocalSwimActors;//[Offset: 0x34e8, Size: 16]
	AutoTestSystemComponent* AutoTestSystemComp;//[Offset: 0x34f8, Size: 8]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x3500, Size: 16]
	int MaxTeamFootprintCount;//[Offset: 0x3510, Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x3514, Size: 4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x3518, Size: 80]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x3568, Size: 80]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x35c0, Size: 8]
	int BOptimizeBulletHit;//[Offset: 0x35c8, Size: 4]
	int BOptimizeBulletHit_Server;//[Offset: 0x35cc, Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x35d0, Size: 88]
	bool bIsOpeningGameModeGuideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3628, Size: 1]
	TaskControllerComponent* TaskControllerComponent;//[Offset: 0x3630, Size: 8]
	bool bHasInitTaskController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3638, Size: 1]
	SeasonTaskListener* SeasonTaskListener;//[Offset: 0x3640, Size: 8]
	STExtraPlayerController*[] TeammatesYouKilled_UsedByServer;//[Offset: 0x3668, Size: 16]
	uint32 LastKillerKey;//[Offset: 0x367c, Size: 4]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x3680, Size: 8]
	DelaySendingMsgComponent* DelaySendingMsgComp;//[Offset: 0x3750, Size: 8]
	bool bHasWinFinalGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3758, Size: 1]
	bool bScaleScreenSizeCullingDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3759, Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375b, Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x375c, Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x3760, Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x376c, Size: 8]
	int IdCardMarkType;//[Offset: 0x3778, Size: 4]
	Rotator SavedRotation;//[Offset: 0x3780, Size: 12]
	TimerHandle TimerHandle_ClearFireSign;//[Offset: 0x3790, Size: 8]
	float ClearFireSignDelayTime;//[Offset: 0x3798, Size: 4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37a8, Size: 1]
	int VehicleControlMode;//[Offset: 0x37ac, Size: 4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37b0, Size: 1]
	Actor*[] ZombieList;//[Offset: 0x37b8, Size: 16]
	bool bLastClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37fc, Size: 1]
	HitEffectComponent* HitEffectComponent;//[Offset: 0x3800, Size: 8]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3808, Size: 1]
	<int,int> ActivitdedIDMap;//[Offset: 0x3810, Size: 80]
	TeamateStateChangedCompressData TeammateStateChangeCompressedData;//[Offset: 0x3860, Size: 36]
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x3884, Size: 20]
	float StreamingDistanceScaleFlying;//[Offset: 0x3898, Size: 4]
	int[] PostPickupItems;//[Offset: 0x38a0, Size: 16]
	bool bIsPlayerInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b0, Size: 1]
	delegate OnPlayerInOutWhiteCircleChangedDelegate;//[Offset: 0x38b8, Size: 16]
	delegate OnShowCharmPlayerCountDownDelegate;//[Offset: 0x38c8, Size: 16]
	delegate PlayerVehiclePawnStateChanged;//[Offset: 0x38d8, Size: 16]
	TrainingGroundWidget* TrainingUIBP;//[Offset: 0x3900, Size: 8]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3908, Size: 1]
	bool NeedScreenShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3909, Size: 1]
	FrameCaptureActor* FrameCapturePtr;//[Offset: 0x3910, Size: 8]
	class FrameCaptureActor* FrameCaptureClass;//[Offset: 0x3918, Size: 8]
	int GlideCount;//[Offset: 0x3924, Size: 4]
	WingSyncInfo selfWingInfo;//[Offset: 0x392c, Size: 16]
	int SpecMotionRestCostCount;//[Offset: 0x393c, Size: 4]
	int GlideSubType;//[Offset: 0x3940, Size: 4]
	bool bShouldShowGlideConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3948, Size: 1]
	int GlideConfigState;//[Offset: 0x394c, Size: 4]
	bool isGMTestKillFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b0, Size: 1]
	WeatherConfigComponent* WeatherConfigComponent;//[Offset: 0x39b8, Size: 8]
	bool IsGlobalTeamAssembleDisplayOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c0, Size: 1]
	bool IsEnableTeamAssembleDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c1, Size: 1]
	delegate TeamAssembleDisplayChanged;//[Offset: 0x39c8, Size: 16]
	TeamAssembleAvatarDisplayInfo[] TeamAssemableDisplayInfoList;//[Offset: 0x39d8, Size: 16]
	delegate OnSwitchToTeamAssembleViewState;//[Offset: 0x39e8, Size: 16]
	int TimeToSwitchToTeamAssembleView;//[Offset: 0x39f8, Size: 4]
	float TeamAssembleTimeTolerance;//[Offset: 0x39fc, Size: 4]
	int TeamAssembleMinPlayers;//[Offset: 0x3a00, Size: 4]
	delegate MainUIVisibilityChanged;//[Offset: 0x3a08, Size: 16]
	bool HasSwitchToTeamAssembleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a18, Size: 1]
	int DynamicPointLightsNum;//[Offset: 0x3a1c, Size: 4]
	int LastDynamicPointLightsNum;//[Offset: 0x3a20, Size: 4]
	bool HasCheckUpdateTeamAssemableData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a24, Size: 1]
	int TimeOffsetToUpdateTeamAssemable;//[Offset: 0x3a28, Size: 4]
	int DisplayWeaponID;//[Offset: 0x3a2c, Size: 4]
	int DisplayVehicleID;//[Offset: 0x3a30, Size: 4]
	int DisplayBackpackID;//[Offset: 0x3a34, Size: 4]
	int DisplayHelmetID;//[Offset: 0x3a38, Size: 4]
	float TVLiveEventDataCollectInterval;//[Offset: 0x3a3c, Size: 4]
	StateType StateTypeOnReplay;//[Offset: 0x3a40, Size: 16]
	class NewbieGuideComponent* NewbieCompPath;//[Offset: 0x3a50, Size: 40]
	uint32[] BornLandVehicleRelevance;//[Offset: 0x40c0, Size: 16]
	STExtraVehicleBase* OwnerVehicleOnBornLand;//[Offset: 0x40d0, Size: 8]
	TickControlComponent* TickControlComp;//[Offset: 0x40f0, Size: 8]
	ExceptionReportComponent* ExceptionReportComponent;//[Offset: 0x40f8, Size: 8]
	bool LockControllerYawToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4100, Size: 1]
	OccupationManagerComponent* occupationManager;//[Offset: 0x4104, Size: 8]
	enum CurrentWeaponFunction;//[Offset: 0x4118, Size: 1]
	float WeaponFunctionChangingInterval;//[Offset: 0x411c, Size: 4]
	bool bWeaponFunctionIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4120, Size: 1]
	float WeaponFunctionLastChangingTime;//[Offset: 0x4124, Size: 4]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x4128, Size: 8]
	int WeatherIndex;//[Offset: 0x4138, Size: 4]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4148, Size: 1]
	bool bCanDropItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4149, Size: 1]
	class AssetPreLoadingComponent* AssetPreLoadingComponentClassSoftPtr;//[Offset: 0x4150, Size: 40]
	int EnableAssetPreLoadingMinDeviceLevel;//[Offset: 0x4178, Size: 4]
	bool bEnableAssetPreLoadingOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x417c, Size: 1]
	TouchInterface* MainControllerwTouchInterface;//[Offset: 0x4180, Size: 8]
	bool bIsLayoutLRSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4189, Size: 1]
	bool bDisplayDamageNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418a, Size: 1]
	Object*[] CachedPreLoadClassList;//[Offset: 0x4190, Size: 16]
	class ObserverHostComponent* ObserverHostComponentPath;//[Offset: 0x41a0, Size: 40]
	ObserverHostComponent* ObserverHostComponent;//[Offset: 0x41c8, Size: 8]
	bool bReceivedOnRepPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d0, Size: 1]
	bool bReceivedOnRepPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d1, Size: 1]
	OBTypeUISource* OBTypeUISourceOjb;//[Offset: 0x41d8, Size: 8]
	delegate VaultFailDSCppDelegate;//[Offset: 0x41e8, Size: 16]
	delegate FailedOnClientDelegate;//[Offset: 0x41f8, Size: 16]
	bool bIsOpenGraySceneOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4208, Size: 1]
	bool bSceneIsGrayOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4209, Size: 1]
	float FadeGrayInterpSpeed;//[Offset: 0x420c, Size: 4]
	float TotalTalkTime;//[Offset: 0x4210, Size: 4]
	delegate OnRoomModeReceive;//[Offset: 0x4218, Size: 16]
	bool bShowResPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4239, Size: 1]
	int iCampToolStatusFromServer;//[Offset: 0x423c, Size: 4]
	bool bCampPrivileges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4240, Size: 1]
	bool bShowAirLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4241, Size: 1]
	bool bUseDistanceMeasurement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4242, Size: 1]
	bool bShowTeammateKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4243, Size: 1]
	bool bDice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4244, Size: 1]
	int CampKDATipsID;//[Offset: 0x4248, Size: 4]
	bool bCampGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424c, Size: 1]
	<FString> CurrentUIStyleNameSet;//[Offset: 0x4268, Size: 80]
	FString[] UIStyleWhiteList;//[Offset: 0x42b8, Size: 16]
	bool bCurJoystickVisState_old;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c8, Size: 1]
	bool bJoystickCollapsedByUIStyle_old;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c9, Size: 1]
	UserWidgetStyle*[] CurrentApplyStyle;//[Offset: 0x42d0, Size: 16]
	<int,enum> PopKartMarkIDList;//[Offset: 0x42e0, Size: 80]
	float PopKartMarkVisibilityDistance;//[Offset: 0x4330, Size: 4]
	class Actor* WeaponDamageMonitorSoftClass;//[Offset: 0x4338, Size: 40]
	int CharmValue;//[Offset: 0x4360, Size: 4]
	FString playerFaceInfo;//[Offset: 0x4368, Size: 16]
	bool bPlayGunMasterVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4378, Size: 1]
	PlayerPetInfo PetInfo;//[Offset: 0x437c, Size: 8]
	delegate OnTouchInterfaceChangedDelegate;//[Offset: 0x4388, Size: 16]
	delegate OnBountyBuyItemListDelegate;//[Offset: 0x4398, Size: 16]
	delegate OnPlayerHitFireBtnDelegate;//[Offset: 0x43a8, Size: 16]
	STExtraBaseCharacter* DelayReloadAvatarChar;//[Offset: 0x43bc, Size: 8]
	PlayerCameraPossessManager* OwnedCameraPossessManager;//[Offset: 0x43c8, Size: 8]
	int CurrentMarkInstanceID;//[Offset: 0x43d0, Size: 4]
	bool bIsEnableUploadPersonalOP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43d4, Size: 1]
	ScreenAppearanceActor* ScreenAppearanceMgr;//[Offset: 0x43d8, Size: 8]
	delegate OnClientBountyBuyItemResult;//[Offset: 0x43e0, Size: 16]
	Actor* CurrentFakePossessActor;//[Offset: 0x43f8, Size: 8]
	float SendTLogCD;//[Offset: 0x4408, Size: 4]
	float SendFallingTLogCD;//[Offset: 0x440c, Size: 4]
	void WakeUpVehicles(float Radius);// 0x40a6460
	void VisualizeItem();// 0x40a644c
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x40a6350
	void ViewPlane();// 0x40a633c
	void UseSkill(int SkillID);// 0x40a62c0
	void UserDropItemOperation(ItemDefineID DefineID);// 0x40a6234
	void UseItem(int ID);// 0x40a61b8
	void UpdateSurfboardUI();// 0x40a61a4
	void UpdateSelfRevivalCountdown(int CurCountdown);// 0x40a6120
	void UpdatePoseViewPitchLimit();// 0x40a610c
	void UnLoadUserWidgetStyleByPath(FString PathString);// 0x40a6088
	void UnLoadUserWidgetStyle(UserWidgetStyle* Style);// 0x40a600c
	void UnLoadAllUserWidgetStyle();// 0x40a5ff8
	void UnLoadAllLand(bool bUnLoadAll);// 0x40a5f74
	void UnLoadAllCollision(bool Unload);// 0x40a5ef0
	void UGCServerBountyBuyItemSingle(int ItemID, int ItemCount);// 0x40a5e08
	void UGCServerBountyBuyItem(BountyBuyingInfo InBuyingInfo);// 0x40a5d58
	void UGCClientSyncBountyBoughtItemList(const BountyBoughtInfo[] ServerBountyBoughtItemList);// 0x40a5ccc
	void UGCClientBountyBuyItemResult(BountyBuyingResultInfo InBuyingResultInfo);// 0x40a5c34
	void Turn(float Rate);// 0x40a5bb8
	void TryExitVehicle();// 0x40a5ba4
	void TryEnterVehicle_IgnoreDistanceAndBlock(STExtraVehicleBase* Vehicle, enum SeatType);// 0x40a5aec
	void TryEnterVehicle(STExtraVehicleBase* Vehicle, enum SeatType);// 0x40a5a34
	void TryEnterClosestVehicle(enum SeatType);// 0x40a59b8
	bool TryControlRemotePawn(Pawn* ControledPawn);// 0x40a5928
	void TryChangeToVehicleSeat(int SeatIndex);// 0x40a58ac
	void TryChangeSeatVehicle();// 0x40a5898
	void TriggerOnUITouchMoveEvent(Vector Loc);// 0x40a5818
	void TraceTestLandscape(float X, float Y, float Z);// 0x40a5728
	void TouchMove(Vector Loc, byte FingerIndex);// 0x40a5668
	bool TouchEnd(byte PressType);// 0x40a55d8
	void TouchBegin(byte PressType);// 0x40a555c
	void ToServerRPC_ChangeTeammateImprisonmentStatus(FString TeammateName, bool bDoImprisonment);// 0x40a544c
	void ToggleVehicleSync(bool Val);// 0x40a53c8
	void ToggleUserCmdDeltaSendAck(bool Val);// 0x40a5344
	void ToggleUserCmdDeltaFlag(bool Val);// 0x40a52c0
	void ToggleUserCmdDeltaCheckSum(bool Val);// 0x40a523c
	void ToggleUserCmdDelta(bool Val);// 0x40a51b8
	void ToggleServerAcknowledgePossession(bool Val);// 0x40a5134
	void ToggleSceneInpute();// 0x40a5110
	void ToggleOBTPPFollowFreeView();// 0x40a50fc
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x40a5078
	void ToggleCheatLocation(bool Val);// 0x40a4ff4
	void ToggleAICruising();// 0x40a4fe0
	void TextCreateBeKilledMaxKillerTip(int inNumber);// 0x40a4f64
	void TextCreateAddKillMaxKillerTip(int inNumber);// 0x40a4ee8
	void TestSpawnFakeChar();// 0x40a4ed4
	void TestShowTeamerKillTip(int ResultType, int KillNum, int ResPlatformID);// 0x40a4de4
	void TestShowLeftQueueTip();// 0x40a4dd0
	void TestSelfIsMaxKillerRecordCont(int Count);// 0x40a4d54
	void TestSelfIsMaxKillerRecord();// 0x40a4d40
	void TestNewbieGuide(int InItemID);// 0x40a4cc4
	void TestMapMarkClient(int inAlertID, int IconID, int testFuncIndex);// 0x40a4bd4
	void TestFindStraightPath(bool bEnable, float DistanceLimit);// 0x40a4b0c
	void TestExcellentOperation(int StartOperationTypeID, int Count, bool CurIsSpectating);// 0x40a4a14
	void TestEnterAvatarDisplay();// 0x40a4a00
	void TestEnableTeamAssemable();// 0x40a49ec
	void TestDropAllAndReplace();// 0x40a49d8
	void TestCreateNewEspecialFatalDamage(int inNumber);// 0x40a495c
	void TestAyncLoadFXWidget(int Index, int Type);// 0x40a48a8
	void TestAddOperationTip(int TipID);// 0x40a482c
	void TeamNoAlwaysRelevant();// 0x40a4818
	void TeamMateUAVStateChanged(STExtraPlayerState* STPlayerState, TeamateStateUAVChangedCompressData ChangedCompressedData);// 0x40a471c
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, TeamateStateChangedCompressData ChangedCompressedData);// 0x40a4640
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x40a4520
	void SwitchViewTarget();// 0x40a450c
	void SwitchToDeadBox();// 0x40a44f8
	void SwitchTeamAssembleDisplayGlobally(bool IsEnable);// 0x40a4474
	void SwitchStaticConfigZombie();// 0x40a4414
	void SwitchSpawnZombie();// 0x40a43b4
	void SwitchMouseCursorShowState();// 0x40a43a0
	void SwitchGenerateItem();// 0x40a4340
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x40a4288
	void SwitchCameraModeByOrder();// 0x40a4274
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x40a412c
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x40a4030
	void StopRotatingOBFreeViewCameraCounterclockwise();// 0x40a401c
	void StopRotatingOBFreeViewCameraClockwise();// 0x40a4008
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x40a3f30
	void StopAutoDoorTest(int ConfigGraphIndex);// 0x40a3eb4
	void StatFindStraightPath();// 0x40a3ea0
	void StatClientAllWeaponsInfo();// 0x40a3e8c
	void StatBackpackItemsData();// 0x40a3e78
	void StartStateSign(enum State);// 0x40a3dfc
	void StartRotatingOBFreeViewCameraCounterclockwise();// 0x40a3de8
	void StartRotatingOBFreeViewCameraClockwise();// 0x40a3dd4
	void StartRecord();// 0x40a3dc0
	void StartReadyCountDown();// 0x40a3dac
	void StartPreBuildingMode();// 0x40a3d90
	void StartLandOnGroundAfterJumpPlane();// 0x40a3d7c
	void StartGame();// 0x40a3d68
	void StartFreeCamera(byte FigerIndex, bool ResetStartRotation);// 0x40a3ca8
	void StartAutoDoorTest(int ConfigGraphIndex, float WorldSizeX, float WorldSizeY, float BlockLoadTime, float WorldLEftTopX, float WorldLeftTopY, float BlockSizeX, float BlockSizeY);// 0x40a3a94
	void StartAirDropSpecified(float X, float Y);// 0x40a39e0
	void StartAirDrop(int Index);// 0x40a3964
	void StartAirAttackSpecified(float X, float Y, float Radius);// 0x40a3874
	void StartAirAttack(int Index);// 0x40a37f8
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x40a3734
	void SpawnWingManMiniMap(out const Vector Pos);// 0x40a36a8
	void SpawnWeaponDamageMonitor(float Distance);// 0x40a35f8
	void SpawnVehicleWithPath(FString Path);// 0x40a3574
	void SpawnVehicle();// 0x40a3560
	void SpawnBattleFlagActor(STExtraBaseCharacter* Inviter, STExtraBaseCharacter* Recevier, int Type);// 0xffffff8f20d162a8
	void SpawnAITest(int Num, byte BehaviorTreeIndex, float Radius, out FString AvatarList);// 0x40a3414
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x40a3324
	void SpawnAI(int Num, byte Difficulty, bool bAIRandomlySpawn);// 0x40a3228
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x40a31ac
	void SimulateTouch(bool IsLoop);// 0x40a3128
	void ShowVaultEnable();// 0x40a3108
	void ShowTouchInterface(bool bShow);// 0x40a307c
	void ShowTimeFromStartOfServer(float serverSec);// 0x40a2ff8
	void ShowTimeFromStart();// 0x40a2fe4
	void ShowSpeedAndAdditionalDamage();// 0x40a2fd0
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x40a2ecc
	void ShowNavLink(float Meters);// 0x40a2e50
	void ShowMovePath(const Vector[] Path);// 0x40a2dc4
	void ShowHideMainUI(bool bShow);// 0x40a2d40
	void ShowGM();// 0x40a2d2c
	void ShowFireBtn(bool bShow);// 0xffffff8f20d162a8
	void ShowBulletShoot(Vector StartLoc, Rotator Rot);// 0x40a2c64
	void ShowBox(const Vector Center, const Vector Box, const Quat Rotation, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x40a2a2c
	void ShowAnimationButton(bool isShow, int NewUIType);// 0x40a295c
	void ShowAllRoles();// 0x40a2948
	bool ShouldIgnoreTouchMove(byte FingerIndex);// 0x40a28b0
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x40a2820
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x40a279c
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint, bool bUIOnly);// 0x40a26cc
	void SetVirtualAutoHideMode(bool AutoHide, float AutoHideTime);// 0x40a2604
	void SetViewYawLimit(float YawMin, float YawMax);// 0x40a2550
	void SetViewPitchLimit(float PitchMin, float PitchMax);// 0x40a249c
	void SetupTeamAssembleDisplayInfoBlueprint();// 0xffffff8f20d162a8
	void SetupTeamAssembleDisplayInfo();// 0x40a2488
	void SetTouchMoveCache(out const int[] EachMoveWeightSetting);// 0x40a23f4
	void SetTimeSpeedFactor(float Val);// 0x40a2378
	void SetTimeSpeedCheck(bool Val);// 0x40a22f4
	void SetTickBuild(bool IsOpen, bool IsSelfOnly);// 0x40a2224
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x40a2120
	void SetSwitchTeammateWithBlend(float BlendNum);// 0x40a20a4
	void SetSubTitleDynamicInfo(FString Key, FString Value);// 0x40a1fd4
	void SetStateLeftTime(int LeftTime);// 0x40a1f58
	void SetSpeed(float Modifier);// 0x40a1edc
	void SetSkillFingerIndex(byte FingerIndex);// 0x40a1e60
	void SetServerLevelLoadingMode(bool bNewLoadAll);// 0x40a1ddc
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x40a1d14
	void SetPlayerMark(Vector Loc);// 0x40a1c5c
	void SetPlayerMapMultiMark(Vector NewLoc, bool bAdd, int MaxNum, bool bClearAll);// 0x40a1ac0
	void SetPlaneEnabled(bool InEnable);// 0x40a1a3c
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x40a1930
	void SetNoFalling(float Value);// 0x40a18b4
	void SetNoCollison();// 0x40a18a0
	void SetMyObserversTeamID(int InTeamID);// 0x40a1824
	void SetMovable(bool IsMovable);// 0x40a17a0
	void SetMaxHealth(float HP);// 0x40a1724
	void SetLandCollison(bool HasCollision);// 0x40a16a0
	void SetJumpVel(int InVel);// 0x40a1624
	void SetJoyStickScale(float JSScale);// 0x40a15a8
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x40a14f0
	void SetJoyStickOpacity(float JSOpacity, bool bNeedUpdateCenter);// 0x40a1430
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x40a13b8
	void SetJoystickFreeViewOpacity(bool isOpenFreeView);// 0x40a1334
	void SetJoyStickCenter(Vector2D JSCenter);// 0x40a12bc
	void SetIsSnowy(bool bSnowy);// 0x40a1238
	void SetIsRainy(bool bRainy);// 0x40a11b4
	void SetIsLayoutLRSwitchOpened(bool bInIsLayoutLRSwitchOpened);// 0x40a1130
	void SetIsJoyStickShow(bool isShow);// 0xffffff8f20d162a8
	void SetIsBlizzard(bool bBlizzard);// 0x40a10ac
	void SetIgnoreCustomActorsReplication(bool bIgnore);// 0x40a1028
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x40a0f14
	void SetGameStateModeUI(const FString[] ModeUIMgr);// 0x40a0e34
	void SetGameModeID(FString GameModeID);// 0x40a0d5c
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x40a0c9c
	void SetEnableMoveInputStateSixteenDir(bool Enable);// 0x40a0c18
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x40a0af0
	void SetCurrentFakePossessActor(Actor* Actor);// 0x40a0a78
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x40a0988
	void SetControlRotation(out const Rotator NewRotation);// 0x40a08f8
	void SetClientSpawnAndBackpackWeaponReplicatedDataArray(uint32 CharacterGUID, const ItemDefineID[] DataList);// 0x40a07fc
	void SetCirCenterFixed(bool Enable, float X, float Y);// 0x40a06fc
	void SetCanJump(bool CanJump);// 0x40a0678
	void SetCanCloseParachute(bool CanCloseParachute);// 0x40a05f4
	void SetCameraFreeMoveSpeedScale(const float InCameraFreeMoveSpeedScale);// 0x40a0578
	void SetbShowJudgePlayerList(bool bShowJudge);// 0x40a04f4
	void SetBlueCircleRaidationHiddenInGame(bool bNewHidden);// 0x40a0470
	void SetBlueCircleHiddenInGame(bool bNewHidden);// 0x40a03ec
	void SetAngledSightFingerIndex(bool TouchBegin, byte FingerIndex);// 0x40a0324
	void SetAirDropEnable(bool Enable);// 0x40a02a0
	void SetAirAttackEnable(bool Enable);// 0x40a021c
	void ServerUseSkill(int SkillID);// 0x40a016c
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x409fff0
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x409ff40
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x409fe90
	void ServerTriggerMysteriosPointEscape(const int InMysteriosID);// 0x409fde0
	void ServerTriggerCharacterEntryEvent(enum EntryEvent);// 0x409fd30
	void ServerTriggerCharacterCustomEvent(byte SkillEvent);// 0x409fc80
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x409fb38
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StopFireInfo InStopFireInfo);// 0x409fa0c
	void ServerStartPreBarrel(STExtraCharacter* TargetCharacter, float HandledTime);// 0x409f91c
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x409f6cc
	void ServerStartMonsterTreasureBox();// 0x409f6b8
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x409f58c
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x409f4dc
	void ServerShowSyncVehicleMark(MarkSyncData SyncData);// 0x409f160
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte shootType, STExtraShootWeapon* TargetWeapon);// 0x409f030
	void ServerSetReloadMethod(STExtraBaseCharacter* TargetCharacter, byte reloadMethod);// 0x409ef40
	void ServerSetObsverLocation(const Vector locat);// 0x409ee90
	void ServerSetIsFreeView(bool isFreeView);// 0x409edcc
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x409ecc4
	void ServerSetFreeCamera(Rotator InRotation);// 0x409ec10
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x409eb08
	void ServerSetControlRotation(const Rotator NewRotation);// 0x409ea5c
	void ServerSetAllowViewCharmInfo(bool Allow_View);// 0x409e998
	void ServerSendVeheclePoint();// 0x409e938
	void ServerSendTeammatesKDA();// 0x409e8d8
	void ServerSelectZombieWave(int ZombieWaveIndex);// 0x409e828
	void ServerRPC_RequestWindOnBoard(bool bOnBoard);// 0x409e764
	void ServerRPC_RequestPlayerInfo(FString inUIDStr);// 0x409e6ac
	void ServerRPC_RequestCallWingPlane(int EffectID);// 0x409e5fc
	void ServerRPC_GunMasterMediaPlayCounter(int inSelfCount);// 0x409e54c
	void ServerRPC_EnterObserveFlow(enum inObFlowIndex);// 0x409e49c
	void ServerRPC_ChangeVehicleAvatar(STExtraVehicleBase* InVehicle, const int InChangeTargetSkinID);// 0x409e3ac
	void ServerReportWatchGamePlayerInfoButtonClick(WatchGamePlayerInfoButtonClick PlayerInfoButtonClick);// 0x409e300
	void ServerReportError(FString ErrorMsg);// 0x409e248
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x409e068
	void ServerReceiveUIInitMsgFromClient();// 0x409e008
	void ServerReceiveThePlane(int64 TimeStamp);// 0x409df58
	void ServerReceiveServerStateType(StateType ReceivedType, StateType ClientType, int64 TimeStamp);// 0x409de18
	void ServerPayMysteriosPointEscapeCash(const int InMysteriosID);// 0x409dd68
	void ServerOperateActor(Actor* Box, int OperateType);// 0x409dc78
	void ServerOpenParachute();// 0x409dc18
	void ServerObserveKiller();// 0x409dbb8
	void ServerObserveCharacter(uint32 InPlayerKey, bool IsFromClient);// 0x409dab4
	void ServerObserveAirDropBox(int BoxId);// 0x409da04
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x409d900
	void ServerLockYawToPlayer(bool InLockControllerYawToPlayer);// 0x409d83c
	void ServerLeaveCustomSpectating();// 0x409d7dc
	void ServerJumpFromPlane();// 0x409d77c
	void ServerHeartbeat(const HeartbeatData InHeartbeatData);// 0x409d6b0
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x409d5bc
	void ServerHandleMsg(enum Msg);// 0x409d50c
	void ServerHandleHitDataArraySplit(STExtraShootWeapon* TargetWeapon, const SacStructSplit InAntiCheatData);// 0x409d3f4
	void ServerHandleHitDataArrayNew(STExtraShootWeapon* TargetWeapon, const SacStructNew InAntiCheatData);// 0x409d2d4
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x409d170
	void ServerGetTotalPlayers();// 0x409d110
	void ServerFindingPath(Vector StartPoint, Vector EndPoint);// 0x409d008
	void ServerFight();// 0x409cfa8
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x409cef8
	void ServerExitFreeCamera();// 0x409ce98
	void ServerDumpPlayerInfo();// 0x409ce38
	void ServerDropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x409ccec
	void ServerDriveFireBalloon(STExtraFireBalloon* FireBalloon, bool bNewDrive);// 0x409cbe8
	void ServerDoRequestConcertSync(ConcertPlayerActor* InConcertPlayerActor);// 0x409cb38
	void ServerDoPickupRevivalFlag();// 0x409cad8
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x409c9cc
	void ServerControlFireBalloonMove(STExtraFireBalloon* FireBalloon, float MoveUpValue);// 0x409c8dc
	void ServerCMD_RPC(FString Cmd);// 0x409c824
	void ServerCMD(FString Cmd);// 0x409c7a0
	void ServerClientEnterOrExitSnowBoard(STExtraVehicleBase* ExitVehicle, bool IsEnter);// 0x409c69c
	void ServerClearTeammatesCache();// 0x409c63c
	void ServerCheatCommand(const CheatCommandInfo InCheatCommandInfo);// 0x409c55c
	void ServerChangeWeaponFunction(enum NewWeaponFunction);// 0x409c4ac
	void ServerChangeStatePC(enum TargetStateType);// 0x409c430
	void ServerChangeGlideConfigState();// 0x409c3d0
	void ServerCatchRabbit(Actor* Rabbit);// 0x409c320
	void ServerBountyBuyItemSingle(int ItemID, int ItemCount);// 0x409c238
	void ServerBountyBuyItem(BountyBuyingInfo InBuyingInfo);// 0x409c188
	void ServerBoardHelicopter_GunMaster(Actor* InTargetHelicopter);// 0x409c0d8
	void ServerBoardHelicopter(RescueHelicopterBase* Helicopter);// 0x409c028
	void ServerAndClientUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x409bf08
	void Sequence_SetNearClipPlane(bool bEnable, int NearClip, int DataPriority);// 0x409be08
	void Sequence_PlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x409bc64
	void Sequence_HapticFeedBackByID(int ID, float VirateAlpha);// 0x409bbac
	void Sequence_ForceFeedBack(SoftObjectPath ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x409ba00
	void SendToServerRemoteControlClientInitOK(RemoteControlComponent* RemoteControl);// 0x409b950
	void SendToClientPlayerBePrompt(int ClientFatalItemType, FString CauserInfo, FString VictimInfo);// 0x409b808
	void SendStringMsg(FString Message, int MsgID, enum chatType);// 0x409b708
	void SendServerReportImprisonmenter();// 0x409b6a8
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x409b614
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x409b500
	void ScopeOut();// 0x409b4ec
	void ScopeIn();// 0x409b4d8
	void SaveRotation();// 0x409b4c4
	void S2CRPC_SyncReportInfoToClient(FString murderName, const bool IsAI, FString murderUID, const bool IsMurderSameTeam, const InformPlayerTypeInfo[] InformPlayersListOnServer, const FString[] TeammatesYouAttackFirstOnServer);// 0x409b21c
	void S2C_SubmitQuestionResponse(const bool AnswerResult);// 0x409b158
	void S2C_ResponseSkillPrompt(bool bShow, float RemainingTime, FString PromptText, float TotalTime);// 0x409afc8
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x409ae4c
	void S2C_GetQuestionResponse(const int QuestionID, WarteringAreaCPP* CurrentNPC);// 0x409ad5c
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x409abe0
	void RunOnNextFrameEvent();// 0x409abcc
	void RunOnNextFrame__DelegateSignature();// 0xffffff8f20d162a8
	void RspShutdownRemotePawn(enum PawnType, float ShutDownTime);// 0x409ab0c
	void RspRecallRemotePawn(Pawn* ControledPawn, bool bSucceed, float MaxRecallTime);// 0x409aa00
	void RspPauseRemotePawn(Pawn* ControledPawn, bool bSucceed);// 0x409a938
	void RspControlRemotePawn(Pawn* ControledPawn, bool bSucceed);// 0x409a870
	void RPC_TopFiveChooseContinue();// 0x409a810
	void RPC_ShowTopFiveTipsNotify();// 0x409a7b0
	void RPC_SetPlayerInitialItemListForClient(const GameModePlayerItem[] InServerInitialItemList);// 0x409a724
	void RPC_Server_UploadClientWeaponShootDataRecordList(const ClientWeaponShootReportData[] ReportDataList);// 0x409a644
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x409a51c
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x409a248
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf);// 0x4099fb8
	void RPC_Server_ShootMultiEnergyAccumulateProjectileBulletsSimulate(STExtraShootWeapon* TargetWeapon, const ShootMultiBulletsParam[] LaunchParams, float CurAccEnergyPercent);// 0x4099e7c
	void RPC_Server_SendData(const byte[] DataArray, const PointDamageEvent DamageEvent, bool BoolParam, int IntParam, enum EnumParam, FString StringParam, const float[] ArrayParam, STExtraBaseCharacter* ActorParam);// 0x4099b98
	void RPC_Server_RequestRefreshOwnerPawnHealth();// 0x4099b38
	void RPC_Server_ReportRenderQualityCVars(const RenderQualityCVarsToSync CVarsToSync);// 0x4099a8c
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x40999d4
	void RPC_Server_RemovePhotonDestructibleFragment(const HitResult Hit);// 0x4099910
	void RPC_Server_RemoveFracturedMeshFragment(Actor* ImpactActor, Actor* OtherActor, Vector NormalImpulse, const HitResult Hit);// 0x4099788
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x4099698
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x40995a4
	void RPC_Server_NotifyServerLaserProjectileBulletAutoExplode(ProjectileBulletBase* Bullet, const ExplosionProjectileHitInfo InExpProjectileInfo);// 0x40994b0
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window);// 0x4099290
	void RPC_Server_NorifyServerOpenedPickUpBoxes(const int[] BoxUniqueIDList, enum BoxType);// 0x4099194
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x4099134
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(const ItemDefineID[] WeaponIDArray);// 0x409907c
	void RPC_Server_NorifyServerAddFirstOpenedMonsterTombBoxes(const int[] MonsterUniqueIDArray);// 0x4098fc4
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x4098f0c
	void RPC_Server_FetchIsPlayGunMasterVideoValue();// 0x4098eac
	void RPC_Server_EnablePlayerWeaponModuleSystem(bool bEnable);// 0x4098de8
	void RPC_Server_ClientHasReactivated();// 0x4098d88
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x4098c60
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, enum StateType);// 0x4098b70
	void RPC_ReviveState_GiveUpRevive();// 0x4098b10
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x4098a60
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, WeatherControllerRepData RepWeatherInfo);// 0x409897c
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x40988cc
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x4098788
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, FString murderUID, const bool IsMurderSameTeam);// 0x40985e0
	void RPC_OwnerClient_SetIsUsingBattery();// 0x4098580
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x40984bc
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x409832c
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int Count);// 0x4098238
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x4098148
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x4098058
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachmentList(const WeaponAttachmentEquipNotifyData[] DataList);// 0x4097fa0
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x4097e58
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector BulletStart, Vector BulletEnd);// 0x4097d50
	void RPC_OwnerClient_FlushPlayerHealthChangeHistory(const float[] ChangeHistory, STExtraBaseCharacter* TargetPlayer);// 0x4097c54
	void RPC_OwnerClient_ClientPlayItemOperationSound(FString BankName, FString SoundName, Actor* TargetActor);// 0x4097b0c
	void RPC_OwnerClient_ClearAllInventoryData(const ItemDefineID[] WeaponIDList, uint32 PawnGUID);// 0x4097a10
	void RPC_NotifyClientLoadingComplete();// 0x40979b0
	void RPC_NotifyAliveTeammateNum(int TeamAliveNum);// 0x4097900
	void RPC_GiveUpGame();// 0x40978a0
	void RPC_GetPlayerInitialItemListFromServer();// 0x4097840
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x4097708
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime);// 0x40975cc
	void RPC_DrawDebug_Capsule(const Vector Center, float HalfHeight, float Radius, const Quat Rotation, const Color Color, float LifeTime);// 0x4097420
	void RPC_ClientTriggerWeaponVoiceAndSound(STExtraWeapon* TheShootWeapon, Vector TheCharacterLoc, enum WeaponStateType);// 0x409731c
	void RPC_ClientTriggerMoveVoice(STExtraBaseCharacter* TheCharacter, Vector voiceCheckVector);// 0x4097254
	void RPC_ClientTriggerMoveSound(STExtraBaseCharacter* TheCharacter, Vector Location, byte FootStepState);// 0x4097150
	void RPC_ClientNotifyRCRRelevant(STExtraBaseCharacter* TheCharacter, Vector Location, Rotator Rotation);// 0x409704c
	void RPC_ClientNotifyRCRLocation(STExtraBaseCharacter* TheCharacter, Vector Location);// 0x4096f84
	void RPC_Client_SyncAllPlayerInfo(const SinglePlayerFixInfo[] InfoData);// 0x4096e80
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x4096cdc
	void RPC_Client_SetIsPlayGunMasterVideoValue(const bool InIsPlayGunMasterVideo);// 0x4096c50
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator Rot);// 0x4096b50
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x409690c
	void RPC_Client_ForceClearMoveAndStyle();// 0x40968ac
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x4096764
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x409667c
	void RPC_CheckAliveTeammateNum();// 0x409661c
	void RPC_C2S_RequestSyncMurderImprisonmentStatus(FString TeammateName);// 0x4096564
	void RPC_C2S_ClientSetHelmetHideInGame(bool IsHide);// 0x40964a0
	void RevivalTemateSuccess();// 0x4096484
	void RevivalTemateFail(FString Reason);// 0x40963f8
	float RetriveMobileContentScaleFactor();// 0x40963c4
	GameModePlayerParams RetrievePlayerParamTest(PlayerID PlayerID);// 0x4096314
	void RestoreDefaultInteractionSize(int JSIndex);// 0x4096298
	void RespHasSignalBar(bool bHas);// 0x409620c
	void RespawnResetPlayerState(UAEPlayerController* PlayerController);// 0x4096190
	void RespawnRecoverData(UAEPlayerController* PC);// 0x4096114
	void ResetToSavedRotation();// 0x4096100
	void ResetRotationWithParam(float Pitch, float Yaw, float Roll);// 0x4096010
	void ResetRotation(float Pitch, float Yaw, float Roll);// 0x4095f20
	void ResetMissingUIUpdate();// 0xffffff8f20d162a8
	void RequireNetCullingDistanceByDevice();// 0x4095ec0
	void RequireDeviceInfo();// 0x4095ea4
	void RequestPlayerNewbieInfo();// 0x4095e90
	void RequestHasSignalBar();// 0x4095e30
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x4095d6c
	void ReqRecallRemotePawn(RemoteControlComponent* RemoteControl);// 0x4095cbc
	void ReqPauseRemotePawn(RemoteControlComponent* RemoteControl);// 0x4095c0c
	void ReqControlRemotePawn(RemoteControlComponent* RemoteControl);// 0x4095b5c
	void ReportWatchGamePlayerInfoButtonClick();// 0x4095b48
	void ReportAntiCheatInfo();// 0x4095b34
	void ReplaySwitchWeatherByWeatherID(int WeatherID);// 0x4095ab8
	void ReplayRPC_TeammateStateChanged(int TeammateIndex);// 0x4095a34
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x40959b8
	void RemoveTimerHandle(out TimerHandle TimerHandle);// 0x409592c
	void RemoveMarkedWrapperActorMonitor(int WrapperActorNetGUID, uint32 MonitorPlayerKey);// 0x4095844
	void RemoveAllDoors();// 0x4095830
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x40957b4
	void ReInitParachuteItem();// 0x40957a0
	void RegisterWaitNetObj(UAEUserWidget* Widget, FString NetObj);// 0x40956dc
	void RegistConnectRepProperty(STExtraPlayerController* ObPC);// 0x4095658
	void RefreshTrainingSensitivityList__DelegateSignature();// 0xffffff8f20d162a8
	void RefreshPlayerOBInfoButtonState();// 0x4095644
	void RecoverTeamAssembleState();// 0x4095630
	void RecordTouch(bool Start);// 0x40955ac
	void RecordPressFireBtnFrame();// 0x4095598
	void RecordPathPoint();// 0x4095584
	void ReceiveClientRestart();// 0xffffff8f20d162a8
	void ReceiveBackpackComponent();// 0x4095568
	void ReceiveAutoTouchMove();// 0xffffff8f20d162a8
	void QuitSpectating();// 0x409554c
	void PutVehiclesToSleep(float Radius);// 0x40954d0
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x40953d0
	void PrintMovementLog(int PrintLog);// 0x4095354
	void PrintDownCollision();// 0x4095340
	void PrintAIFloatDebugInfo(int Range);// 0x40952c4
	void PressGrenade(bool isThrow);// 0xffffff8f20d162a8
	void PressFire(int FingerIndex);// 0xffffff8f20d162a8
	void PostTakeDamageDelegate__DelegateSignature(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0xffffff8f20d162a8
	void PostInitPlayerParams();// 0x40952a8
	void PlaySequencer(FString Path);// 0x40951d0
	void PlayItemOperationSoundByBP(FString BankName, FString SoundName, Actor* TargetActor);// 0x40950c4
	void PlayEscapeHelicopterAnim();// 0x40950b0
	void PlayerVehiclePawnStateChanged__DelegateSignature(STExtraPlayerController* PlayerController);// 0xffffff8f20d162a8
	void PlayerSelectZombieWaveDelegate__DelegateSignature(int SelectedZombieWave);// 0xffffff8f20d162a8
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x4094ff8
	void PlayerKillingDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void PlayerHitFireBtnDelegate__DelegateSignature(bool isRightBtn);// 0xffffff8f20d162a8
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0xffffff8f20d162a8
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0xffffff8f20d162a8
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0xffffff8f20d162a8
	void PlayerControllerPossess__DelegateSignature(Pawn* PossessedPawn);// 0xffffff8f20d162a8
	void PlayDisplayAvatarEmote(FString InEmotePlayerName, int InEmoteID);// 0x4094efc
	void PickupFromShop(int ItemID, int Count, bool ForceSell);// 0x4094e04
	void OpenVehicleMusicGame();// 0x4094de4
	void OpenParachute();// 0x4094dd0
	void OpenOnceBuild(int BuildIndexByUser, int BuildMaxByUser);// 0x4094d1c
	void OnYearMonsterInMiniMap();// 0x4094cec
	void OnWeaponEquipAttachmentDelegate__DelegateSignature(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0xffffff8f20d162a8
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0xffffff8f20d162a8
	void OnWeaponAttachmentChanged(bool bAttach, out const ItemDefineID WeaponID, FString AttachmentName, const int AttachmentSpecificID);// 0x4094b88
	void OnWallFeedBack(bool _WallFeedBack);// 0x4094b04
	void OnViewTargetSignalHPChanged(float NewSignalHP);// 0x4094a88
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x40949d0
	void OnViewTargetPlayerStateChanged();// 0x40949bc
	void OnViewTargetDetachedFromVehicle(STExtraVehicleBase* LastVehicle);// 0x4094940
	void OnViewTargetChangeVehicleSeat();// 0x409492c
	void OnViewTargetChangePoseDelegate__DelegateSignature(byte LastPose, byte NewPose);// 0xffffff8f20d162a8
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x40948b0
	void OnUseMainSlot__DelegateSignature(byte Slot);// 0xffffff8f20d162a8
	void OnUseInventoryItemDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnUnequipWeaponDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0xffffff8f20d162a8
	void OnUIStyleCreateJoystick();// 0x4094894
	void OnUIInitMsgReceivedFromClient__DelegateSignature(STExtraPlayerController* PC);// 0xffffff8f20d162a8
	void OnUAEUserWdigetNativeConstruct(UAEUserWidget* Widget, World* InWorld);// 0x40947e0
	void OnTrainingSensitivityRefreshEvent();// 0x40947cc
	void OnTouchInterfaceChangedDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnTeammateTemperatureChangeDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnTeammatesAllDie();// 0x40947b8
	void OnTeammateLogin(int InTeamID);// 0x409473c
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnTaskConditionDeactivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0xffffff8f20d162a8
	void OnTaskConditionActivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0xffffff8f20d162a8
	void OnTakeDamaged__DelegateSignature(float DamageAngel);// 0xffffff8f20d162a8
	void OnSwitchWeaponDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0xffffff8f20d162a8
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0xffffff8f20d162a8
	void OnStopFireDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnStartFireSign();// 0x4094728
	void OnStartFireDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnStartAutoSprintCountDown__DelegateSignature();// 0xffffff8f20d162a8
	void OnSpectatorChange__DelegateSignature();// 0xffffff8f20d162a8
	void OnSpectatorCameraChange(bool bDie);// 0xffffff8f20d162a8
	void OnShowSkillPromptDelegate__DelegateSignature(bool IsShowPrompt, float LastTime, FString PromptText, float TotalTime);// 0xffffff8f20d162a8
	void OnShowAutoSprintButton__DelegateSignature(bool Visible, Vector2D showPos, bool IsInside);// 0xffffff8f20d162a8
	void OnShowAnimationButton(bool isShow, int NewUIType);// 0x4094658
	void OnSetPlayerMaker__DelegateSignature(Vector Loc);// 0xffffff8f20d162a8
	void OnSetPlaneRouteForCamp(Vector StartPos, Vector EndPos, float RouteLengthInMap, float RouteWidgetRotateAngle, Vector2D CanJumpLocInMap);// 0x40944d8
	void OnServerFinishPickupRevivalFlag();// 0x40944bc
	void OnServerCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP);// 0xffffff8f20d162a8
	void OnRepTeammateChange__DelegateSignature();// 0xffffff8f20d162a8
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0xffffff8f20d162a8
	void OnRepPlayerState__DelegateSignature();// 0xffffff8f20d162a8
	void OnRepNotify_SetBattleOwner();// 0x40944a8
	void OnRepNewPawn__DelegateSignature(Pawn* NewPawn);// 0xffffff8f20d162a8
	void OnRep_WeatherFog();// 0x4094494
	void OnRep_WeaponSystemReconnectReplicateData();// 0x4094480
	void OnRep_WeaponReconnectOpIndex();// 0x409446c
	void OnRep_WeaponFunctionChanged();// 0x4094458
	void OnRep_UsedSimulation();// 0x409443c
	void OnRep_TeamID();// 0x4094420
	void OnRep_TeamAssemableDisplayInfoList();// 0x409440c
	void OnRep_SwitchWeatherByIndex();// 0x40943f8
	void OnRep_STExtraBaseCharacter();// 0x40943e4
	void OnRep_ShouldShowGlideConfig();// 0x40943d0
	void OnRep_ServerStateType();// 0x40943bc
	void OnRep_SelfWingInfo();// 0x40943a8
	void OnRep_SelectedZombieWaveIndex();// 0x4094394
	void OnRep_RoomMode();// 0x4094378
	void OnRep_Plane();// 0x4094364
	void OnRep_Pawn_BP();// 0xffffff8f20d162a8
	void OnRep_ObservedItemList();// 0x4094350
	void OnRep_OBAvaliablePlayerKeys();// 0x409433c
	void OnRep_NeedScreenShot();// 0x4094328
	void OnRep_InWateringRangeBP();// 0xffffff8f20d162a8
	void OnRep_InWateringRange();// 0x40942c4
	void OnRep_ImprisonmentTeammateSucess();// 0x40942b0
	void OnRep_GlideConfigState();// 0x409429c
	void OnRep_ForbitPickEffect();// 0x4094288
	void OnRep_ForbitPick();// 0x4094274
	void OnRep_EnableTeamAssembleDisplay();// 0x4094260
	void OnRep_DeadTombBox();// 0x409424c
	void OnRep_ClientSettingBaseOnGameMode();// 0x4094238
	void OnRep_CanOpenParachute();// 0x4094224
	void OnRep_CanJump();// 0x4094210
	void OnRep_CanImprisonmentTeammate();// 0x40941fc
	void OnRep_CampToolStatus();// 0x40941e8
	void OnRep_CameraFreeMoving();// 0x40941d4
	void OnRep_BlackEntTime();// 0x40941c0
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x40941ac
	void OnRep_BackpackComponent();// 0x4094198
	void OnRemoveMainSlot__DelegateSignature(byte Slot);// 0xffffff8f20d162a8
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0xffffff8f20d162a8
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnRefreshWatchPlayerState__DelegateSignature(STExtraPlayerState* NextPlayerState, bool InShowWatchingUI);// 0xffffff8f20d162a8
	void OnReconnected__DelegateSignature();// 0xffffff8f20d162a8
	FString OnRecieveCrash();// 0xffffff8f20d162a8
	void OnReceiveHasSignal__DelegateSignature(bool HasSignal);// 0xffffff8f20d162a8
	void OnRank__DelegateSignature(int Kills, int Rank);// 0xffffff8f20d162a8
	void OnPlayerUseRecoverItem();// 0x4094184
	void OnPlayerStateChanged();// 0x4094170
	void OnPlayerReConnected(int LostPlayerKey);// 0x40940c0
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0xffffff8f20d162a8
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0xffffff8f20d162a8
	void OnPlayerPawnInitOBOrReplay(STExtraPlayerCharacter* CurTargetPawn, int FuncCalledFrom, int IsInNotOut, STExtraPlayerCharacter* LastTargetPawn);// 0x4093f8c
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0xffffff8f20d162a8
	void OnPlayerLostConnection(int LostPlayerKey);// 0x4093edc
	void OnPlayerInOutWhiteCircleChangedDelegate__DelegateSignature(bool bIsInWhiteCircle);// 0xffffff8f20d162a8
	void OnPlayerHitFireBtnInUGC();// 0x4093ec8
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x4093e44
	void OnPlayerClickDriveBtn();// 0x4093e30
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x4093d74
	void OnPlayerBuffExist(FName BuffName);// 0x4093cc0
	void OnPickUpTargetDelegate__DelegateSignature(STExtraPlayerController* PlayerController, Actor* Target, int AdditionalParam, int pickCount);// 0xffffff8f20d162a8
	void OnPickupItemDelegate__DelegateSignature(int ItemID, int Count, STExtraPlayerController* PC);// 0xffffff8f20d162a8
	void OnPickUpExpand();// 0x4093c5c
	void OnPickUpCollapsed(bool isCollapsed);// 0x4093bd8
	void OnPawnStateChange__DelegateSignature(uint64 CurrentPawnState);// 0xffffff8f20d162a8
	void OnOneTeamPlayerHPChangeDelegate__DelegateSignature(int Index);// 0xffffff8f20d162a8
	void OnOneFloatValueDelegate__DelegateSignature(float theValue);// 0xffffff8f20d162a8
	void OnOccupyNewbieGuide(int inGuideID);// 0x4093b5c
	void OnObserverLevelLoaded();// 0x4093b48
	void OnObservedWeaponSightChanged();// 0x4093b34
	void OnObservedUsingWeaponChanged();// 0x4093b20
	void OnObservedPlayerWeaponChangeState(enum CurState);// 0x4093aa4
	void OnObservedPlayerChangeCurrentUsingWeapon(byte TargetChangeSlot);// 0x4093a28
	void OnObservedItemUpdate(ItemHandleBase* Handle);// 0x40939ac
	void OnObservedItemsChanged();// 0x4093998
	void OnObservedItemRemoved(ItemDefineID DefineID);// 0x409390c
	void OnObservedDisuseWeapon(byte PropSlot);// 0x4093890
	void OnObservedBulletNumChanged();// 0x409387c
	void OnNightStateChangedDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnNewbieGuideHandlePickUp(int inPickUpID);// 0x4093800
	void OnMyObserversChangeDelegate__DelegateSignature(STExtraPlayerController* ObserverController, bool IsEnter);// 0xffffff8f20d162a8
	void OnMarkedWrapperActorDisappeared(int WrapperActorNetGUID);// 0x409377c
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0xffffff8f20d162a8
	void OnMainControlPanelHideAllUI();// 0x4093760
	void OnLostConnection__DelegateSignature();// 0xffffff8f20d162a8
	void OnLocalCharacterTemperatureChangeDelegate__DelegateSignature(float currentTP, float ratioHP);// 0xffffff8f20d162a8
	void OnLocalCharacterSignalHPRemaingingTimeDelegate__DelegateSignature(float RemainingTime);// 0xffffff8f20d162a8
	void OnLocalCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP, float PreSignalHP, float ratioSignalHP);// 0xffffff8f20d162a8
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float CurrentHP, float ratioHP);// 0xffffff8f20d162a8
	void OnLoadAsyncWidget();// 0x409374c
	void OnLandOnGroundAfterJumpPlaneEnd();// 0xffffff8f20d162a8
	void OnItemRemoved(ItemDefineID DefineID);// 0x40936c0
	void OnItemOperationInfo(BackpackComponent* Sender, out const ItemOperationInfo ItemOperationInfo);// 0x40935dc
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x40934d8
	void OnIsInFortressChangedDelegate__DelegateSignature(bool bInIsInFortress);// 0xffffff8f20d162a8
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0xffffff8f20d162a8
	FString OnGetCrashInfo();// 0x4093458
	void OnGameStartDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnGameStartCountDownDelegate__DelegateSignature(float CountDownTime);// 0xffffff8f20d162a8
	void OnGameModeStateChangeDelegate__DelegateSignature(FName CurrentState);// 0xffffff8f20d162a8
	void OnGameModeStateChanged();// 0xffffff8f20d162a8
	void OnFirstInviteChat();// 0x40933f4
	void OnFingerMove__DelegateSignature(byte FingerIndex, Vector Loc);// 0xffffff8f20d162a8
	void OnExitGame__DelegateSignature();// 0xffffff8f20d162a8
	void OnEquipWeaponDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnEntireOBMapOpen();// 0x40933e0
	void OnEntireOBMapClose();// 0x40933cc
	void OnEnterBattleResultStep();// 0x40933b8
	void OnEnableTeamAssembleDisplayView(bool IsEnable);// 0xffffff8f20d162a8
	void OnDSOthersWeaponVS(STExtraWeapon* TheWeapon, enum WeaponStateType);// 0x4093300
	void OnDSOthersSkillStart(STExtraBaseCharacter* SkillCharacter);// 0x4093284
	void OnDSOthersLandedSound(STExtraBaseCharacter* LandedCharacter);// 0x4093208
	void OnDropItemDelegate__DelegateSignature(int ItemID, int Count, STExtraPlayerController* PC);// 0xffffff8f20d162a8
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0xffffff8f20d162a8
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0xffffff8f20d162a8
	void OnDeadBoxExpand();// 0x40931f4
	void OnDeadBoxCollapsed(bool isCollpased);// 0x4093170
	void OnClientToServerWeaponCreated__DelegateSignature(out const ItemDefineID[] WeaponIDArray);// 0xffffff8f20d162a8
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CampID, Actor*[] PeerVisualFieldActorList);// 0xffffff8f20d162a8
	void OnClientGameCountDown(float CountDown);// 0x40930f4
	void OnClientBountyBuyItemResult__DelegateSignature(int ResultID, int ProductID);// 0xffffff8f20d162a8
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0xffffff8f20d162a8
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isexplosion);// 0xffffff8f20d162a8
	void OnCharacterRecoveryHealthEvent();// 0x40930e0
	void OnCharacterRecoveryHealth__DelegateSignature();// 0xffffff8f20d162a8
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0xffffff8f20d162a8
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0xffffff8f20d162a8
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0xffffff8f20d162a8
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0xffffff8f20d162a8
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0xffffff8f20d162a8
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnBuyRevivalTeammate(int TeammateIndex);// 0x409305c
	void OnBuyRevivalSign();// 0x4093040
	void OnBackpackMainSlot__DelegateSignature(byte Slot);// 0xffffff8f20d162a8
	void OnAutoSprintActive__DelegateSignature();// 0xffffff8f20d162a8
	void OnAppActivatedDelegate__DelegateSignature(bool bIsActive);// 0xffffff8f20d162a8
	void OnAllPostExecDSCommandArrived();// 0x4093024
	void OnAirAttackEventNotify(byte airattacktype, int waveindex, enum AirAttackMode);// 0x4092f30
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void ObserveWhoKilledMe();// 0x4092f1c
	void ObserveCharacter(FString InPlayerName);// 0x4092e44
	void ObserveAirDropBox(int BoxId);// 0x4092dc8
	void OBForceToggleOBTPPView();// 0x4092db4
	void OBCameraMoveNear();// 0x4092da0
	void OBCameraMoveFar();// 0x4092d8c
	void OBCameraFOVReset();// 0x4092d78
	void NotifyServerFixLevel(int FixConfigIndex, bool bUnLoad);// 0x4092c74
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0xffffff8f20d162a8
	void NotifyEnterAvatarDisplayState();// 0x4092c60
	void Notify_Client_UIMsg_WithParams(FString InMsgName, FString InModuleName, FString InParamsCollection);// 0x4092b0c
	void NormalTeamateLogin(int InTeamID);// 0x4092a90
	void NewbieGuideYearMonsterInMapDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void MoveUp(float Rate);// 0x4092a14
	void MoveToSuperTeamAI();// 0x4092a00
	void MoveToAI();// 0x40929ec
	void MoveTo(float X, float Y, float Z);// 0x40928fc
	void MoveRight(float Rate);// 0x4092880
	void MoveNeareastVehicleTo(float X, float Y, float Z);// 0x4092790
	void MoveForward(float Rate);// 0x4092714
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x4092654
	void MemberVoiceLBS(int member, int Status, bool isRobot);// 0xffffff8f20d162a8
	void MemberVoice(int member, int Status, bool isRobot);// 0xffffff8f20d162a8
	void MarkStartFireFrame();// 0x4092640
	void MarkLocationToMapPath(int TypeID);// 0x40925c4
	void LuaActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x4092540
	void LookUp(float Rate);// 0x40924c4
	void LocalTestPaintDecal(int ID);// 0x4092448
	void LocalTestGameResult(int ModeID, int TeamMemNum);// 0x4092394
	void LocalRefreshObMapPlayerList();// 0x4092380
	void LocalProfileFootprint();// 0x409236c
	void LocalProfileDecal();// 0x4092358
	void LocalGetGameStateReconnectInfo();// 0x4092344
	void LoadUserWidgetStyleByPath(FString PathString);// 0x40922c0
	void LoadUserWidgetStyle(UserWidgetStyle* Style);// 0x4092244
	void LoadAllLand(bool bLoadAll);// 0x40921c0
	void LerpFPPCamera();// 0x40921ac
	void LeaveSpectating();// 0x4092198
	void LeaveObserveMe(STExtraPlayerController* InController);// 0x409211c
	void KillSomeTeamerBekilledCount(int Count);// 0x40920a0
	void KillSomeOne(FString InPlayerName);// 0x409201c
	void KillSomeEnemyCount(int Count);// 0x4091fa0
	void KillSomeCount(int Count);// 0x4091f24
	void KillAll();// 0x4091f10
	void Kill(int GivenNumber);// 0x4091e94
	void JumpFromPlane();// 0x4091e80
	void JoystickTriggerSprint(bool bIsSprint);// 0xffffff8f20d162a8
	bool IsViewTarget(const Actor* pActor);// 0x4091de8
	bool IsUse3DTouch();// 0x4091db0
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x4091d20
	bool IsTeammate(const STExtraBaseCharacter* InCharacter);// 0x4091c90
	bool IsTeamAssembleDisplayLevelLoaded();// 0x4091c50
	bool IsTeamAssembleDisplayEnabled();// 0x4091c18
	bool IsTaskFit(GameModePlayerTaskData TaskData);// 0x4091b08
	bool IsStartInRightHalfScreen(float BeginX, float CurViewPortDPIScale);// 0x4091a18
	bool IsScopeFireEnabled();// 0x40919e0
	bool IsSameTeam(const Pawn* Other);// 0x4091950
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x40918bc
	bool IsPlayingOBReplay();// 0x4091884
	bool IsPlayerStateInVehicle();// 0x4091844
	bool IsPlayerStateInDying();// 0x4091804
	bool IsPlayerStateInDied();// 0x40917c4
	bool IsOwningHelicopter(RescueHelicopterBase* Helicopter);// 0x4091734
	bool IsOBTypeUIState();// 0x40916fc
	bool IsOBGM();// 0x40916c4
	bool IsMurderSelfDefense(FString InformMurderName);// 0x409162c
	bool IsMoveable_DontConsiderFollowingState();// 0x40915f4
	bool IsMoveable();// 0x40915bc
	bool IsLycanGameMode();// 0x4091584
	bool IsLastBreathOrRescueingOther();// 0x409154c
	bool IsJoystickTouched();// 0x4091514
	bool IsJoystickCollapsedCountOverZero_old();// 0x40914ec
	bool IsInRevivalExPlane();// 0x40914b4
	bool IsInRevival();// 0x409147c
	bool IsInPlane();// 0x4091444
	bool IsInParachuteOpen();// 0x409140c
	bool IsInParachuteJump();// 0x40913d4
	bool IsInParachute();// 0x409139c
	bool IsInInitial();// 0x4091364
	bool IsIngoreSvrSetViewTarget();// 0x4091324
	bool IsInFreeCameraView();// 0x4091304
	bool IsInFinish();// 0x40912cc
	bool IsInFight();// 0x4091294
	bool IsInDead();// 0x4091254
	bool IsInBuildingMode();// 0x409121c
	bool IsForceSwitchTeamView(bool bEnable);// 0x409117c
	bool IsForbitPickMakeEffect();// 0x4091144
	bool IsForbitPick(out const FName tombName);// 0x40910a4
	bool IsFollowFireMode();// 0x409106c
	bool IsEnableGalaxyFace();// 0x409102c
	bool IsEnableCameraPossessAllFeatureActive();// 0x4090ff4
	bool IsEnableCameraPossess();// 0x4090fbc
	bool IsCompleteReplayPlaying();// 0x4090f84
	bool IsCharacterInAir();// 0x4090f4c
	bool IsChangeUseVehicleAvatar(STExtraVehicleBase* InVehicle);// 0x4090ebc
	bool IsCanViewEnemy();// 0x4090e7c
	bool IsCanImprisonmentTeammate();// 0x4090e44
	bool IsAllowActorTouchMove();// 0x4090e0c
	bool IsAirDropRep2Client(int BoxId);// 0x4090d7c
	bool IsAGMPlayer();// 0x4090d44
	bool Is3DTouchOpenned();// 0x4090d0c
	void InternalServerStartMonsterTreasureBox(MonsterTreasureBox* Box);// 0x4090c5c
	void InsertGrenadeIDInOrder(int GrenadeID);// 0x4090be0
	bool InRemoteControlState();// 0x4090ba8
	void InputTouchRepeat(const byte FingerIndex, const Vector Location, float Force);// 0x4090aac
	void InputTouchEnd(const byte FingerIndex, const Vector Location, float Force);// 0x40909b0
	void InputTouchBegin(const byte FingerIndex, const Vector Location, float Force);// 0x40908b4
	void InitWeatherConfigComponent();// 0x40908a0
	void InitTaskDatas(uint32 InPlayerKey);// 0x4090824
	void InitTaskDataDelegate__DelegateSignature(int TaskID, int process, FString ext_info);// 0xffffff8f20d162a8
	void InitTaskData(int TaskID, int process, FString ext_info);// 0x40906c8
	void InitTaskComponent();// 0x40906b4
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0xffffff8f20d162a8
	void InitJoyStickAfterActivation();// 0xffffff8f20d162a8
	void InitIngameUIRoot(UAEUserWidget* Root);// 0x4090638
	void InitCollectionDataDelegate__DelegateSignature(int ItemID, int CurrentCount, int TotalCount);// 0xffffff8f20d162a8
	void InitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x4090548
	void InitBountySystemProductList(StoreProductInfo[] ProductList);// 0x40903c8
	void ImprisonmentTeammate(FString TeammateName);// 0x4090310
	void IgnoreFilterSignalGunPoints(int OpenID);// 0x4090294
	bool HasPickupPropsNearby();// 0x409025c
	bool HasDeathBoxesNearby();// 0x4090224
	void HandleUpdateShovelingRelease();// 0x4090210
	void HandleUpdateShovelingPressed();// 0x40901fc
	void HandleUpdateShoveling();// 0x40901e8
	void HandleTogglePlayerListInOB();// 0x40901d4
	void HandleToggleOBTeamList(bool InShow);// 0x4090150
	void HandleToggleMapInOB();// 0x409013c
	void HandleToggleFreeViewReplay();// 0x4090128
	void HandleSwitchToTeammateWithBlend(Key InKey);// 0x408ffd0
	void HandleSwitchToTeammatePrev();// 0x408ffbc
	void HandleSwitchToTeammateNext();// 0x408ffa8
	void HandleSwitchToTeammate(Key InKey);// 0x408fe50
	void HandleSwitchToTeam_PostTeamID();// 0x408fe3c
	void HandleSwitchToTeam_InputOneNum(Key InKey);// 0x408fce4
	void HandleSwitchToTeam_DelOneNum();// 0x408fcd0
	void HandleSwitchToTeam_ClearInputNum();// 0x408fcbc
	void HandleSwitchToTeam(int InTeamID);// 0x408fc40
	void HandleSwitchPersonViewPress();// 0x408fc2c
	void HandleShowMedicBulletHitTips(FString ShootPlayerName, uint64 ShootPlayerUID, int ShootPlayerTeamID, FString HitPlayerName, uint64 HitPlayerUID, int HitPlayerTeamID);// 0x408fa24
	void HandleRevivalTipsInfo(FString CauserName, FString VictimName, int RevivalType);// 0x408f8dc
	void HandleReSetOBPositionDistance();// 0x408f8c8
	void HandleReduceOBPositionDistance();// 0x408f8b4
	void HandleOBToggleProjSmokeAlpha();// 0x408f8a0
	void HandleOBSSwitchToPreTeam();// 0x408f88c
	void HandleOBSSwitchToPlayerThird();// 0x408f878
	void HandleOBSSwitchToPlayerSecond();// 0x408f864
	void HandleOBSSwitchToPlayerFourth();// 0x408f850
	void HandleOBSSwitchToPlayerFirst();// 0x408f83c
	void HandleOBSSwitchToNextTeam();// 0x408f828
	void HandleOBSSwitchTeamLogo();// 0x408f814
	void HandleOBBisOpenAirDropBox();// 0x408f800
	void HandleMsg(enum Msg);// 0x408f784
	void HandleLeaveFreeViewInOB();// 0x408f770
	void HandleLandOnGroundEnd();// 0x408f75c
	void HandleEnterFreeViewInOB();// 0x408f748
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x408f67c
	void HandleClientHasReactivated();// 0x408f668
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x408f5b0
	void HandleBreakUAEWindow(int WinNum);// 0x408f52c
	void HandleBisOpenEnemyHeadUI();// 0x408f518
	void HandleAddOBPositionDistance();// 0x408f504
	void GunmasterBountyBuyDelegate__DelegateSignature(const BountyBoughtInfo[] ServerBountyBoughtItemList);// 0xffffff8f20d162a8
	int GotoSpectating(int TeammatePlayerid);// 0x408f470
	void GotoFlying();// 0x408f45c
	void GMTest_ReqPlayerInfo(FString inUIDStr);// 0x408f3d8
	void GMSpawnWingManMiniMap(float X, float Y);// 0x408f324
	void GMSpawnMonsterBoxWithPos(float X, float Y, float Z);// 0x408f234
	void GMSpawnMonsterBox();// 0x408f220
	void GMSetBoolPoisonCircle();// 0x408f20c
	void GMSetBoolAirDrop();// 0x408f1f8
	void GMSetBoolAirAttack();// 0x408f1e4
	void GMSetBoolAI();// 0x408f1d0
	void GMOpenWeather(int OpenWeatherID);// 0x408f154
	void GMMoveAllAITogether(float X, float Y);// 0x408f0a0
	void GMEnableRandom();// 0x408f08c
	void GMEnableAllComponent();// 0x408f078
	void GMDisplayGameTipWithParam(int ID, FString param1, FString param2);// 0x408eed0
	void GMDisableRandom();// 0x408eebc
	void GMDisableAllComponent();// 0x408eea8
	void GMCUseSkill(int InSkillIndex);// 0x408ee2c
	void GMCSaveTeammate(FString InPlayerName, int InReduceTime);// 0x408ed18
	void GMCloseWeather(int CloseWeatherID);// 0x408ec9c
	int GetWriteCircleDistance();// 0x408ec68
	WeatherConfigComponent* GetWeatherConfigComponent();// 0x408ec34
	void GetWatchPlayerList(out STExtraPlayerState*[] OutPlayers, bool ExcludeMyself);// 0x408eb44
	float GetViewPortDPIScale();// 0x408eb10
	VehicleUserComponent* GetVehicleUserComp();// 0x408eadc
	int GetUseMotionControlType();// 0x408eaa8
	bool GetUseMotionControlLog();// 0x408ea70
	bool GetUseMotionControlEnable();// 0x408ea38
	float GetTouchForceFireThreshold();// 0x408ea04
	float GetTouchForce(byte FingerIndex);// 0x408e978
	Actor* GetThePlane();// 0x408e95c
	MonsterTreasureBox*[] GetTeamMonsterTreasureBoxList();// 0x408e8dc
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x408e850
	int GetTeamAliveNum();// 0x408e81c
	SpringArmComponent* GetTargetedSpringArm();// 0x408e7e8
	FString GetSubTitleDynamicInfo(FString Key);// 0x408e70c
	int GetStatTriangles();// 0x408e6d8
	FString GetStatMemory();// 0x408e658
	int GetStatDrawCalls();// 0x408e624
	int GetSpecMotionRestCount();// 0x408e5f0
	int GetSpecialAreaID();// 0x408e5bc
	bool GetShouldAutoScopeWhenPeek();// 0x408e584
	Rotator GetSensibilityRate(bool bIsMotionControl);// 0x408e4ec
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x408e468
	byte GetScopeFingerIndex();// 0x408e434
	bool GetRevivalGotoSpectatingConfig(out int RevivalGotoSpectatingTime, out FString RevivalGotoSpectatingTips);// 0x408e338
	int GetRevivalCountDownTime();// 0x408e304
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0xffffff8f20d162a8
	bool GetPoseViewLimit(out float PitchMin, out float PitchMax, out enum HitState);// 0x408e1bc
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x408e188
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x408e090
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x408e05c
	STExtraBaseCharacter* GetPlayerCharacterFinally();// 0x408e028
	SeasonTaskListener* GetPermanentTaskController();// 0x408dff4
	int GetPeekMode();// 0x408dfc0
	Transform GetPaintDecalTargetTransform();// 0x408df6c
	MonsterTreasureBox* GetOpennedNearestMonsterBox();// 0x408df38
	float GetOccupiedCapacity();// 0x408df04
	void GetObserversList(out STExtraPlayerController*[] OutList);// 0x408de70
	int GetObservedTeammateId();// 0x408de54
	CameraComponent* GetNowUseCamera();// 0x408de20
	Vector GetNewestAirDropBoxPos();// 0x408dde8
	STExtraPlayerController*[] GetMyObserverList();// 0x408dd68
	FString GetMurderUID();// 0x408dc58
	FString GetMurderName();// 0x408db48
	bool GetMurderIsAI();// 0x408dad4
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x408d9e0
	MonsterTreasureBox*[] GetMonsterTreasureBoxList();// 0x408d960
	byte GetMaxTouchForceFinger();// 0x408d91c
	Vector2D GetJoyStickVisualSize();// 0x408d8e8
	float GetJoyStickOpacity();// 0x408d8b4
	Vector2D GetJoyStickCenter();// 0x408d880
	bool GetIsShowPeek();// 0x408d848
	bool GetIsMurderSameTeam();// 0x408d7d4
	bool GetIsLayoutLRSwitchOpened();// 0x408d7b4
	bool GetIsFreeCamera();// 0x408d794
	bool GetIsAutoAimEnabled();// 0x408d75c
	int GetGlideCount();// 0x408d728
	void GetGameStateReconnectInfoOnServer();// 0x408d6c8
	void GetGameScreenSize();// 0x408d6b4
	GameModeConfig GetGameModeConfig(bool needLocalRefresh);// 0x408d610
	int GetFriendDistance();// 0x408d5dc
	Vector GetFocalLocation();// 0x408d59c
	InformPlayerTypeInfo[] GetDyingDamageInstigatorsList();// 0x408d4e8
	enum GetCurrentStateType();// 0x408d4b4
	Actor* GetCurrentFakePossessActor();// 0x408d498
	STExtraVehicleBase* GetCurrentControllingVehicle();// 0x408d464
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x408d430
	RemoteControlComponent* GetCurRemoteControl();// 0x408d3fc
	STExtraPlayerState* GetCurPlayerState();// 0x408d3c8
	int GetCurPlayerId();// 0x408d394
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x408d360
	Vector GetCurPawnLocation();// 0x408d328
	Pawn* GetCurPawn();// 0x408d2f4
	float GetCurFPS();// 0x408d2c0
	Rotator GetControlLookRotation();// 0x408d280
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x408d19c
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x408d110
	PlayerTombBox* GetCacheDeadTombBox();// 0x408d0dc
	BackpackComponent* GetBackpackComponent();// 0x408d0a8
	int GetAimMode();// 0x408d074
	bool GetAimFireEnable();// 0x408d03c
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int BoxId);// 0x408cf9c
	void GameModeGotoNextState();// 0x408cf88
	void GameModeGotoFightingState();// 0x408cf74
	void FreezeRCRVisualization(bool bFreeze);// 0x408cef0
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x408ce30
	void ForceServerSetControlRotationOnVehicle();// 0x408ce1c
	void ForceReleaseCurTouchMoveFinger();// 0x408ce08
	void FlushShapePool();// 0x408cdf4
	void FireTakeDamagedEvent(Vector CauserLocation);// 0x408cd74
	void FireOrGrenade();// 0x408cd60
	uint32 FindOBAvaliablePlayer();// 0x408cd2c
	void FillTeamAssemableDisplayItemDetail(out TeamAssembleAvatarDisplayInfo DetailInfo, GameModePlayerParams PlayerParam, Pawn* PlayerPawn);// 0x408c928
	void Fight();// 0x408c914
	void FadeSceneToGrayOnDeath(bool bSet);// 0x408c890
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x408c7bc
	void ExitNightState();// 0x408c7a8
	void ExitFreeCamera(bool IsForceReset);// 0x408c724
	void ExitCameraFreeMoveMode();// 0x408c710
	void ExecDSCommand(const FString DSCommand);// 0x408c684
	void ExcuteLuaGM(FString Func, FString Params);// 0xffffff8f20d162a8
	void ExceptionReport_DataCompare(Object* Context, FString ExceptionType, Object* HandleFunctionTarget);// 0x408c584
	void EnterSpectating(uint32 OBPlayerkey);// 0x408c508
	void EnterNightState();// 0x408c4f4
	void EnterCameraFreeMoveMode();// 0x408c4e0
	void EndTouchScreen(byte FingerIndex);// 0x408c464
	void EndForceTouchFire();// 0x408c450
	void EnableRCRVisualization(byte VisualizationLevel);// 0x408c3d4
	void EnablePlayerWeaponModuleSystem(bool bEnable);// 0x408c350
	void EnablePlayerInHouse(bool bIsIn);// 0x408c2cc
	void EnableMyLandscapeDraw();// 0x408c2b8
	void EnableItem(ItemDefineID DefineID);// 0x408c22c
	void EnableBuildingMode(bool checkVehicle);// 0x408c1a0
	void DynamicCreateComponents();// 0x408c18c
	void DumpObjectByName(FString ObjectName);// 0x408c0b4
	void DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x408bfb0
	void DoUITouchMove(Vector Loc, float SizeX, float SizeY, float LeftOffset, float BottomOffset, CanvasPanelSlot* Slot);// 0x408be08
	void DoubleClickCancel(const byte FingerIndex);// 0x408bd8c
	void DoTouchMove(float Yaw, float Pitch);// 0xffffff8f20d162a8
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x408bcdc
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x408bc2c
	void DoAfterCanNotPickUp(Actor* Target, int AdditionalParam, int pickCount);// 0xffffff8f20d162a8
	void DisuseItem(int ID);// 0x408bbb0
	void DisplayGameWarnTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x408ba08
	void DisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x408b860
	void DisplayGameTipWithMsgIDAndFullParams(int ID, FString param1, FString param2, UAEBlackboard* ExtraParams);// 0x408b67c
	void DisplayGameTipWithMsgID(int ID);// 0x408b600
	void DisplayGameTipForLowFPSWarning(int ID, FString param1, FString param2);// 0x408b458
	void DispatchPlayerReconnectedEvent();// 0x408b444
	void DispatchPlayerLostEvent();// 0x408b430
	void DispatchPlayerExitEvent();// 0x408b41c
	void DisableMyLandscapeDraw();// 0x408b408
	void DisableItem(ItemDefineID DefineID);// 0x408b37c
	void DelayForceExitFreeCamera();// 0x408b368
	void DebugWorldPlayerAvatarInfo();// 0x408b354
	void DebugSetUIVisibility(bool bUIVisibility);// 0xffffff8f20d162a8
	void DebugPlayerVision();// 0x408b340
	void DebugEnableFerrisWheelTick(bool bEnable);// 0x408b2bc
	void DebugEnableDrawSearchLine(int bEnabled);// 0x408b240
	void DebugEnableBulletImpact(int bEnabled);// 0x408b1c4
	void DebugAirDropPickInfo(float DrawTime, float BoxDrawSize, float BoxDrawLineLength, float ListWrapperDrawSize, float ListWrapperDrawLineLength);// 0x408b060
	void DealGetAllNearShotWeapon(float disRate);// 0x408afe4
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x408af30
	void DealGetAllNearMoveCharacter(float checkDis);// 0x408aeb4
	void DeactiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x408adf4
	void CurrentPawnStateChange(uint64 CurrentPawnState);// 0x408ad78
	void CreateNewClientFatalDamageInfo(int inNumber);// 0x408acfc
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x408ab3c
	void ConsumeRevivalSign();// 0x408ab20
	void ConsumeDecalItem(int ItemID, int Count);// 0x408aa6c
	void CollectAllPlayerWeaponPosInfo();// 0x408aa58
	void CloseOnceBuild(int cnt);// 0x408a9a8
	void ClientVisualizeRCR(const RCRVisualizationInfo Info, byte Level);// 0x408a82c
	void ClientUnpossessPawn(STExtraBaseCharacter* ControledPawn);// 0x408a77c
	void ClientSyncBountyBoughtItemList(const BountyBoughtInfo[] ServerBountyBoughtItemList);// 0x408a6f0
	void ClientStartOnPlane();// 0x408a6d4
	void ClientStartOnlineGame();// 0x408a6b8
	void ClientStartMonsterTreasureBox();// 0x408a69c
	void ClientShowNavLink(const NavLinkInfo[] LinkDatas);// 0x408a610
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers, const RouteSegment[] RouteSegmentData);// 0x408a47c
	void ClientSetOBControlRot(float InPitch, float InYaw);// 0x408a3c0
	void ClientSetControlRotation(const Rotator NewRotation);// 0x408a340
	void ClientSetAIPosToTarget(Vector StartPos, Vector TargetPos);// 0x408a270
	void ClientSetAIPos(uint32 keyID, Vector Pos, bool IsStart);// 0x408a164
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x408a094
	void ClientRPC_NotifyRequestDone(const PlayerOBInfo inInfo);// 0x4089f78
	void ClientRPC_ChangeVehicleAvatarSucceedNotify(FString UserName, int VehicleAvatarID);// 0x4089eac
	void ClientReceiveConcertSyncData(ConcertPlayerActor* InConcertPlayerActor, ConcertSendSyncData InSyncData);// 0x4089bbc
	void ClientQuitViewEnemy();// 0x4089ba0
	void ClientPrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x4089a60
	void ClientPlayerFiringInOB(uint32 InPlayerKey, Vector InHitPos, bool bHitPlayer, Actor* InHitActor);// 0x4089910
	void ClientOperateActor(Actor* Actor, int OperateType);// 0x4089858
	void ClientOnHurt();// 0x408983c
	void ClientOnDamageToOther(float _DamageToOther);// 0x40897b8
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, StateType StateType, Actor* NextViewTarget);// 0x4089668
	void ClientObJudgeKill(FString InPlayerKey);// 0x4089590
	void ClientHeartbeat(float DeltaTime);// 0x4089514
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x4089450
	void ClientGiveUpRevivalTemmates();// 0x408943c
	void ClientGameStarted();// 0x4089420
	void ClientFriendBattleEnd();// 0x4089404
	void ClientFindingPathRcv(const Vector[] PathPoints);// 0x408934c
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x40892c0
	void ClientEnterViewBox(int BoxId);// 0x408923c
	void ClientEndOnlineGame();// 0x4089220
	void ClientDisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x40890d8
	void ClientDisplayGameTipWithMsgID(int ID);// 0x4089028
	void ClientCheatCommandResult(const CheatCommandResultInfo InCheatCommandResultInfo);// 0x4088f94
	void ClientChangeWeaponFunction(enum NewWeaponFunction);// 0x4088ee4
	void ClientChangeStatePC(StateType TargetStateType);// 0x4088e5c
	void ClientBountyBuyItemResult(BountyBuyingResultInfo InBuyingResultInfo);// 0x4088dc4
	void ClearStateSign(enum State);// 0x4088d48
	void ClearFireSign();// 0x4088d34
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x4088c94
	bool CientRevivalTemmates();// 0x4088c5c
	void CheckUpdateTeamAssembleDisplayInfo();// 0x4088c48
	void CheckTeammateAvatarDisplayInfoInit();// 0x4088c34
	bool CheckSkipUpdatePoseViewPitchLimit();// 0x4088bf4
	void CheckGoalAchieved();// 0x4088be0
	void CheckAddUnLoadUserWidgetStyleTimerHandle(UserWidgetStyle* Style);// 0x4088b64
	void ChangeWeaponFunction(enum NewWeaponFunction);// 0x4088ae8
	void ChangeTeamAssembleDisplayViewState(bool IsEnable);// 0x4088a64
	void ChangeSpectatorStateToFreeView();// 0x4088a50
	void ChangeGlideState();// 0x4088a3c
	void ChangeCampStatus(bool ShowAirLine, bool UseDistanceMeasurement, bool ShowTeammateKillInfo, bool Dice, bool AIHelper, int CampStatusFromServer, bool ShowResPoint);// 0x4088808
	void ChangeAllowOBPlayerKeys(uint32[] InPlayerList);// 0x4088730
	bool CanUseRemmoteControl();// 0x40886f0
	void CanSeeAllUI(bool bUIVisibility);// 0x408866c
	bool CanScaleScreenSizeCulling();// 0x4088634
	bool CanClientObJudgeKill(FString InPlayerKey);// 0x4088550
	bool CanBePickUpByItemID(out const ItemDefineID DefineID);// 0x40884a4
	bool CanBePickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x4088398
	void CallTeamMateUAVStateChanged(TeamMateStateInfo TeamMateInfo);// 0x40882f0
	void CallTeamMateStateChanged(TeamMateStateInfo TeamMateInfo);// 0x4088248
	void CallShowTouchInterface(bool InShow);// 0x40881bc
	void CallShowMedicBulletHitTips(Actor* HitPlayer);// 0x4088140
	void CallSendServerReportImprisonmenter();// 0x408812c
	void CallSendClientData();// 0x4088118
	void CallGundamAirDrop(float X, float Y);// 0x4088064
	void CallEscapeHelicopter(int PlayAnimImmediately, float CallHeight);// 0x4087fac
	bool CalledOverrideClickQuitSpectating();// 0x4087f6c
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, MotionControlConfig Config, float Left, float Right, bool bLandScapeOrientation);// 0x4087c3c
	Vector2D CalcAttactBtnPos(float locX, float locY, float SizeX, float SizeY);// 0x4087b04
	void C2SRPC_RequestSyncReportInfo();// 0x4087aa4
	void C2S_SubmitQuestionRequest(const int QuestionID, const int AnswerID);// 0x40879bc
	void C2S_SendUIStyleInfoToDS(bool bIsLoad, FString UIStyleName);// 0x40878ac
	void C2S_RequestSkillPrompt();// 0x408784c
	void C2S_RequestBeingRescuedRemainingTime();// 0x40877ec
	void C2S_GetQuestionRequest();// 0x408778c
	void BuildArroundMySelf();// 0x4087778
	void BroadcastVaultFailDSCpp();// 0x4087764
	void BroadcastFatalDamageToClientSimple(ClientFatalDamageRecordDataSimple Data);// 0x408756c
	void BroadcastFatalDamageToClient(ClientFatalDamageRecordData Data);// 0x408745c
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x408727c
	void BroadcastBeMaxKillerToClient(byte CurMaxKillerStatus, FString MaxKillerName, uint32 MaxKillerKey, int KillNum);// 0x408713c
	bool BPGetIsAndroidSimulator();// 0x4087104
	void BPClientCheatCommandResult(out const CheatCommandResultInfo InCheatCommandResultInfo);// 0xffffff8f20d162a8
	void BPCastUIMsgWithTwoParam(FString Func, FString module, FString param1, FString param2);// 0x4086fa4
	void BPCastUIMsgWithParam(FString Func, FString module, FString param1);// 0x4086e8c
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0xffffff8f20d162a8
	void BlueprintOnWidgetInit(UAEUserWidget* Widget);// 0x4086e10
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x4086d50
	void BackToGameDataRefresh();// 0x4086d3c
	bool AutoSelectViewTarget();// 0x4086d04
	void AutoSelectTeammateToView();// 0x4086cf0
	void AsanTest();// 0x4086cdc
	void ApplyGameModeProfile(FString ProfileName);// 0x4086c50
	void AirDropVehicle(int Index, float Z);// 0x4086b98
	void AddWeaponPendantItem(int WeaponID, int pendantID);// 0x4086ae4
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x40869dc
	void AddTeammatesYouKilled(STExtraPlayerController* TeammateYouKill);// 0x4086960
	void AddSignalGunGM(int gmType, int GeneralBoxTime);// 0x40868ac
	void AddMarkedWrapperActorMonitor(int WrapperActorNetGUID, uint32 MonitorPlayerKey);// 0x40867c4
	void AddMapPathOnBothMap(int TypeID);// 0x4086748
	void AddItem(int ID, int Count);// 0x4086694
	void ActiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x40865d4
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x4086550

--------------------------------
Class: UAEPlayerController.PlayerController.Controller.Actor.Object
	TimerHandle TimerHandle_DelayedNotifyBattleBeginPlay;//[Offset: 0x750, Size: 8]
	FName PlayerType;//[Offset: 0x788, Size: 8]
	FString PlayerName;//[Offset: 0x790, Size: 16]
	uint32 PlayerKey;//[Offset: 0x7a0, Size: 4]
	FString PlayerUID;//[Offset: 0x7a8, Size: 16]
	FString PlayerOpenID;//[Offset: 0x7c8, Size: 16]
	int TeamID;//[Offset: 0x7d8, Size: 4]
	Vector CharacterLocation;//[Offset: 0x7dc, Size: 12]
	int RoomMode;//[Offset: 0x7e8, Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x7f0, Size: 24]
	int PlayerStartID;//[Offset: 0x808, Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80c, Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x810, Size: 136]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 1]
	Character* MainCharacter;//[Offset: 0x8a0, Size: 8]
	float ClientSendDSPrintLogCDConfig;//[Offset: 0x8ac, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b4, Size: 1]
	bool bIsEnableUGCGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b5, Size: 1]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	Actor* CastUIMsgTempActorParam;//[Offset: 0x8c8, Size: 8]
	enum DefaultCharacterGender;//[Offset: 0x8d0, Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x8d8, Size: 16]
	int playerFaceHandleID;//[Offset: 0x8e8, Size: 4]
	SuitSkinData SuitSkinData;//[Offset: 0x8f0, Size: 40]
	WeaponModData[] WeaponModDatas;//[Offset: 0x918, Size: 16]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x928, Size: 16]
	GameModePlayer_WearInfo InitialWearInfo;//[Offset: 0x938, Size: 192]
	<int,int> WeaponAvatarItemList;//[Offset: 0x9f8, Size: 80]
	VehicleAvatarItemPairData[] RepWeaponAvatarItemArray;//[Offset: 0xa48, Size: 16]
	<int,GameModePlayerItemList> WeaponAttachmentItemList;//[Offset: 0xa58, Size: 80]
	<int,VehicleAvatarSkinItem> VehicleAvatarItemList;//[Offset: 0xaa8, Size: 80]
	bool HasVehicleOnBornLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf8, Size: 1]
	VehicleAvatarItemPairData[] RepVehicleAvatarItemList;//[Offset: 0xb00, Size: 16]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0xb10, Size: 16]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0xb20, Size: 16]
	int LobbyShowWeaponID;//[Offset: 0xb30, Size: 4]
	GameModePlayerDecalItem[] InitialDecalItemList;//[Offset: 0xb38, Size: 16]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0xb48, Size: 16]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0xb58, Size: 16]
	int AnchorPlatResID;//[Offset: 0xb68, Size: 4]
	int AnchorPlatColorID;//[Offset: 0xb6c, Size: 4]
	int PassCardBuyType;//[Offset: 0xb70, Size: 4]
	int PassCardBuyLevel;//[Offset: 0xb74, Size: 4]
	bool NeedShowEnjoyCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb78, Size: 1]
	int InitDropId;//[Offset: 0xb7c, Size: 4]
	int SeasonWeekIndex;//[Offset: 0xb80, Size: 4]
	int JoinSourceType;//[Offset: 0xb84, Size: 4]
	uint64[] LobbyTeammates;//[Offset: 0xb88, Size: 16]
	delegate OnHasBegunPlay;//[Offset: 0xbb8, Size: 16]
	Pawn* DefaultControlPawn;//[Offset: 0xbc8, Size: 8]
	int64 LastGameResultTime;//[Offset: 0xbd0, Size: 8]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd8, Size: 1]
	bool bIsObserverInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd9, Size: 1]
	bool bIsObserverHost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbda, Size: 1]
	int OBGM;//[Offset: 0xbdc, Size: 4]
	bool bIsGMWatcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe0, Size: 1]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe1, Size: 1]
	bool bNeedCloseLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe2, Size: 1]
	float CloseLoadingSecond;//[Offset: 0xbe4, Size: 4]
	bool bIsAliveSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe8, Size: 1]
	delegate OnRepIsSpectatingDelegate;//[Offset: 0xbf0, Size: 16]
	uint32 WatchPlayerKey;//[Offset: 0xc00, Size: 4]
	int ObserverEnemyDistSquare;//[Offset: 0xc04, Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0a, Size: 1]
	bool bCanBeLikedByOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0c, Size: 1]
	bool bCanBeLikedByFriend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0d, Size: 1]
	bool bCanBeLikedByTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0e, Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc28, Size: 1]
	delegate OnInitInGameUICompleted;//[Offset: 0xc30, Size: 16]
	UAEUserWidget* InGameUIRoot;//[Offset: 0xc98, Size: 8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca5, Size: 1]
	bool bReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca6, Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0xcb8, Size: 16]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xcc8, Size: 16]
	delegate ClientPlayerControllerRecoveredDelegate;//[Offset: 0xcd8, Size: 16]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xcf8, Size: 16]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xd08, Size: 16]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0xd18, Size: 16]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0xd28, Size: 16]
	int[] AvatarEditorTestList;//[Offset: 0xd40, Size: 16]
	bool bDSNeedTickHouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 1]
	AllPlayerFixInfo ClientAllPlayerFixInfo;//[Offset: 0xd58, Size: 96]
	FString MedalClubID;//[Offset: 0xdb8, Size: 16]
	int MedalClubLevel;//[Offset: 0xdc8, Size: 4]
	float NegotiateDHKeyTimer;//[Offset: 0xdf8, Size: 4]
	float NegotiateDHKeyTimeout;//[Offset: 0xdfc, Size: 4]
	int LastRetCodeZeroAndLenZeroThreshold;//[Offset: 0xe00, Size: 4]
	int ContinueRetCodeZeroAndLenZeroThreshold;//[Offset: 0xe04, Size: 4]
	void UpdatePlayerOBBattleInfo(const FString UIDString, out const PlayerOBBattleInfo NewBattleInfo);// 0x49f14f0
	void UnloadAllLandscape();// 0x49f14dc
	void TestShowLiveTime();// 0x49f14c8
	void TestRemoveMapItem(int Type, int ID);// 0x49f1414
	void TestRemoveLiveMapItem(int ID);// 0x49f1398
	void TestPushOneOBInfo();// 0x49f1384
	void TestLuaNetwork();// 0xffffff8f20d162a8
	void TestLogout();// 0x49f1370
	void TestLiveTips(int Type);// 0x49f12f4
	void TestAddMapItem(int Type, int ID);// 0x49f1240
	void TestAddLiveMapItem(int ID);// 0x49f11c4
	void SetUsedSimulationCVar(bool Value);// 0x49f1140
	void SetShowIslandNicknameValue(bool flag);// 0x49f10bc
	void SetPanels(out const UAEUserWidget*[] panels);// 0x49f1020
	void ServerTestLogout();// 0x49f0fc0
	void ServerStartLuaDebuger(FString IP, FString Port);// 0x49f0eb8
	void ServerSetVoiceId(int VoiceID);// 0x49f0e08
	void ServerSetRobotVoiceId(int VoiceID);// 0x49f0d58
	void ServerRevClientPrintLog(int InLogTypeID, int64 ClientTime, const Vector InVector, const Vector InVector2, int inInt, FString InExtendStr);// 0x49f0b54
	void ServerReportCollectedEventDataWithPlayerValidation(byte EventId, const CollectedEventKeysValues KeysValues);// 0x49f09f8
	void ServerReportCollectedEventData(byte EventId, const CollectedEventKeysValues KeysValues);// 0x49f089c
	void ServerLoadAllLevels();// 0x49f0888
	void ServerKickSelf();// 0x49f0828
	void ServerHandleClassFieldAccessDenied(uint32 InPlayerKey, const FName InClassName, const FName InFieldName);// 0x49f0700
	void ServerGetOneOBInfo(FString UID);// 0x49f0648
	void ServerExitGame();// 0x49f05e8
	void ServerAuthenticatePlayer(FString AuthKey);// 0x49f0530
	void ServerAcknowledgeReconnection(uint32 Token);// 0x49f0480
	void SendRawDataToServer(const byte[] InData);// 0x49f03c8
	void SendRawDataToClient(const byte[] InData);// 0x49f033c
	void RPC_ServerNegotiateDHKey(FString ClientPublicKey, FString CRC, int8 KeyIndex, int Seq);// 0x49f01b4
	void RPC_ClientNegotiateDHKey(FString Gen, FString Prime, FString ServerPublicKey, int8 KeyIndex, int Seq);// 0x49effe0
	void ResetUsedSimulationCVar();// 0x49effcc
	void ResetToControlPawn();// 0x49effb0
	bool ReportCollectedEventDataWithPlayerValidation(byte EventId, delegate CollectReportedEventDataCallback);// 0x49efec4
	bool ReportCollectedEventData(byte EventId, out const CollectedEventData Data);// 0x49efd98
	void ReleaseInGameUI();// 0x49efd7c
	void RecordControlPawn();// 0x49efd60
	void PrintStatistics();// 0x49efd4c
	void PrintExtendInfoHasMiddleSimply(FString Title, FString Subtitle, FString MiddleSimplyStr, FString EndStr);// 0x49efabc
	void PostLoginInit(UAEGameMode* GameMode);// 0x49efa38
	bool PlayerWillBeRevival();// 0x49ef9f8
	void PlayerStartIDReceived();// 0x49ef9e4
	void OnSetVoiceId(int VoiceID);// 0xffffff8f20d162a8
	void OnRep_WeaponAvatarItemList();// 0x49ef9d0
	void OnRep_WatchPlayerKey();// 0x49ef9b4
	void OnRep_VehicleAvatarItemList();// 0x49ef9a0
	void OnRep_UsedSimulation();// 0x49ef984
	void OnRep_TeamID();// 0x49ef968
	void OnRep_RoomMode();// 0x49ef94c
	void OnRep_PlayerOBInfoList();// 0x49ef938
	void OnRep_OBGM();// 0x49ef91c
	void OnRep_NeedCloseLoading();// 0x49ef908
	void OnRep_LastGameResultTime();// 0x49ef8ec
	void OnRep_IsUGCGM();// 0x49ef8d8
	void OnRep_IsSpectatingEnemy();// 0x49ef8bc
	void OnRep_IsSpectating();// 0x49ef8a0
	void OnRep_IsObserver();// 0x49ef884
	void OnRep_IsGMWatcher();// 0x49ef868
	void OnRep_ISGM();// 0x49ef854
	void OnRep_CharacterLocation();// 0x49ef840
	void OnLocalSettingChanged();// 0xffffff8f20d162a8
	void OnCharacterPositionUpdatedByServer(float Distance);// 0x49ef790
	void NotifyClientNetworkLost();// 0x49ef774
	void LoadAllLandscape();// 0x49ef760
	void KickSelf();// 0x49ef74c
	bool IsSpectatorOrReplaying();// 0x49ef714
	bool IsSpectator();// 0x49ef6dc
	bool IsRoomMode();// 0x49ef6b8
	bool IsPureSpectator();// 0x49ef680
	bool IsPlayerCollectedEventDataReportingEnabled();// 0x49ef648
	bool IsObserverHost();// 0x49ef610
	bool IsObserver();// 0x49ef5d8
	bool IsOBGM();// 0x49ef5a0
	bool IsInTeamerSpeacting();// 0x49ef568
	bool IsInSpectatingEnemy();// 0x49ef530
	bool IsInSpectating();// 0x49ef4f8
	bool IsInDead();// 0x49ef4b8
	bool IsGMWatcher();// 0x49ef480
	bool IsGlobalObserverOrReplaying();// 0x49ef448
	bool IsGlobalObserver();// 0x49ef410
	bool IsFriendOrEnemySpectator();// 0x49ef3d8
	bool IsFriendObserver();// 0x49ef3a0
	bool IsExited();// 0x49ef370
	bool IsDemoRecSpectator();// 0x49ef338
	bool IsDemoPlaySpectator();// 0x49ef300
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x49ef034
	void InitWeaponAvatarItems();// 0x49ef018
	void InitWeaponAttachmentAvatarItems();// 0x49eeffc
	void InitVehicleAvatarItems();// 0x49eefe0
	void InitPlayerWearInfo();// 0x49eefc4
	void InitInGameUI(bool Respawn, bool bIsNetRecover);// 0x49eeeec
	void HandleFriendObserverEnter();// 0x49eeed0
	void HandleBreakUAEWindow(int WinNum);// 0x49eee4c
	int GotoSpectating(int PlayerID);// 0x49eedb8
	Widget* GetWidgetByName(FString WidgetName, FString OuterName, bool bUseContains, FName LogicManager, bool bUseStartWith);// 0x49eebc4
	Widget* GetWidgetByClassPath2(FString WidgetName, class UAEUserWidget WidgetClass2);// 0x49eea84
	bool GetWeaponPandentReflect(int wraponID, out int pendantID);// 0x49ee9a8
	bool GetWeaponModuleListWithOutParam(int WeaponID, out int[] OutList, int ModeID);// 0x49ee880
	int[] GetWeaponModuleList(int WeaponID, int ModeID);// 0x49ee778
	int[] GetVehicleAvatarSkinList(const int InTargetVehicleID);// 0x49ee6a8
	FString GetToString();// 0x49ee620
	uint32 GetSpectatingPlayerKey();// 0x49ee5e4
	PlayerOBInfo[] GetPlayerOBInfoListReference();// 0x49ee5ac
	int GetPlayerOBInfoItemNum();// 0x49ee578
	FString GetOBPlayerUIDString(out const PlayerOBInfo PlayerOBInfo);// 0x49ee42c
	NetRelevancyGroup GetNetRelevancyGroup();// 0x49ee410
	int64 GetInt64UID();// 0x49ee3dc
	UAEUserWidget* GetIngameUIRoot();// 0x49ee3a4
	uint32 GetCurrentOBPlayerKey();// 0x49ee368
	int GetCurrentOBPlayerInfoIndex();// 0x49ee334
	void ForceNetReady();// 0x49ee320
	void ExitGame();// 0x49ee30c
	void ExhaustCPU();// 0x49ee2f8
	void ExecDSCommand(const FString DSCommand);// 0x49ee26c
	void ExcuteIntRecord(FString Key, int Count);// 0x49ee158
	void ExcuteIntCounterRecord(FString Key, int Count);// 0x49ee044
	void EnableInGameUI();// 0x49ee030
	void DumpViewTargetCriticalLevels();// 0x49ee01c
	void DumpUAENetActors();// 0x49ee008
	void DumpRegions();// 0x49edff4
	void DumpObjectRelations();// 0x49edfe0
	void DumpNetActors();// 0x49edfcc
	void DumpDemoNetActors();// 0x49edfb8
	void DumpCharacters();// 0x49edfa4
	void DumpAllUI();// 0x49edf90
	void DumpAllObjects();// 0x49edf7c
	void DumpAllGCObjects();// 0x49edf68
	void DumpAllActors();// 0x49edf54
	void DoCrash();// 0x49edf40
	void DisableInGameUI();// 0x49edf2c
	void DelayedNotifyBattleBeginPlay();// 0x49edf18
	void DebugCollectedEvent(bool bCollectedEventDataReportingEnabled, int CollectedEventType);// 0x49ede50
	CollectedEventData CollectReportedEventDataCallback__DelegateSignature(UAEGameState* UAEGameState, UAEPlayerController* UAEPlayerController, byte EventId);// 0xffffff8f20d162a8
	void ClientShowTeammateEscapeNotice();// 0x49ede34
	void ClientSendDSPrintLog(int InLogTypeID, out const Vector InVector, out const Vector InVector2, int inInt, FString InExtendStr);// 0x49edc7c
	void ClientRPC_CastUIMsgTwoParams(FString strMsg, FString module, FString param1, FString param2);// 0x49edb14
	void ClientRPC_CastUIMsgParams(FString strMsg, FString module, const int Type);// 0x49eda00
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x49ed928
	void ClientRPC_BroadcastRespawnComplete();// 0x49ed90c
	void ClientPushOneOBInfo(const PlayerOBInfo Info);// 0x49ed81c
	void ClientInitPlayerOBInfoButton();// 0x49ed800
	void ClientHandleClassFieldAccessDenied(const FName InClassName, const FName InFieldName);// 0x49ed718
	void ClientBroadcastReconnectionSuccessful();// 0x49ed6fc
	void ClientAcknowledgeReconnection(uint32 Token);// 0x49ed678
	void Client_DelFriendObservers(FString InPlayerName);// 0x49ed5ec
	void Client_AddFriendObservers(FString InPlayerName);// 0x49ed560
	void ClearWatchPlayerKey();// 0x49ed54c
	void ClearUIFunctionCacheByUIMsg(FString strMsg, FString module);// 0x49ed474
	void ClearRecordControlPawn();// 0x49ed458
	void CheckPlayerOBInfoButtonInit();// 0x49ed43c
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x49ed3a4
	void CastUIMsgWithTarget(FString strMsg, FString module, out const FName TargetName);// 0x49ed288
	void CastUIMsgWithActorParam(FString strMsg, Actor* Actor, FString module);// 0x49ed174
	void CastUIMsg(FString strMsg, FString module);// 0x49ed09c
	bool CanObserveOtherPlayer(UAEPlayerController* OtherPC);// 0x49ed004
	void CallLuaTableFunction(FString TableName, FString FunctionName);// 0x49ecf2c
	void CallLuaGlobalFunction(FString FunctionName);// 0x49ecea0
	void BroadcastRespawnComplete();// 0x49ece8c
	void AutoSelectObservedTargetByServer();// 0x49ece2c

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0, Size: 16]
	int WeatherID;//[Offset: 0x10, Size: 4]
	float WeatherTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 16]
	FString LocalAddr;//[Offset: 0x10, Size: 16]
	float AvgPing;//[Offset: 0x20, Size: 4]
	float MaxPing;//[Offset: 0x24, Size: 4]
	float HighPingPercent;//[Offset: 0x28, Size: 4]
	float InBytesPerSecond;//[Offset: 0x70, Size: 4]
	float OutBytesPerSecond;//[Offset: 0x74, Size: 4]
	float InPacketLostRate;//[Offset: 0x78, Size: 4]
	float OutPacketLostRate;//[Offset: 0x7c, Size: 4]
	float OutSaturationRate;//[Offset: 0x80, Size: 4]
	float TotalPositionUpdatedDistance;//[Offset: 0x84, Size: 4]

--------------------------------
Class: MotionControlConfig
	float MotionRateYaw;//[Offset: 0x0, Size: 4]
	float MotionRatePitch;//[Offset: 0x4, Size: 4]
	float MotionAimRatePitch;//[Offset: 0x8, Size: 4]
	float MotionAimRateYaw;//[Offset: 0xc, Size: 4]
	float MotionRateYawThreshold;//[Offset: 0x10, Size: 4]
	float MotionRatePitchThreshold;//[Offset: 0x14, Size: 4]
	float MotionTouchAimRatePitch;//[Offset: 0x18, Size: 4]
	float MotionTouchAimRateYaw;//[Offset: 0x1c, Size: 4]
	float MotionTouchRatePitch;//[Offset: 0x20, Size: 4]
	float MotionTouchRateYaw;//[Offset: 0x24, Size: 4]

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 16]
	FString PlayerUIDStr;//[Offset: 0x10, Size: 16]
	int PlayerGender;//[Offset: 0x20, Size: 4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int[] EquipedAvatarList;//[Offset: 0x28, Size: 16]
	int[] EquipedWeaponList;//[Offset: 0x38, Size: 16]
	int[] EquipedWeaponAttachmentSkinList;//[Offset: 0x48, Size: 16]
	AnimMontage* DisplayAnimMontage;//[Offset: 0x58, Size: 8]

--------------------------------
Class: ClientFatalDamageRecordData
	byte ClientFatalItemType;//[Offset: 0x0, Size: 1]
	FString causer;//[Offset: 0x8, Size: 16]
	FString CauserUID;//[Offset: 0x18, Size: 16]
	uint32 CauserKey;//[Offset: 0x28, Size: 4]
	int CauserTeamId;//[Offset: 0x2c, Size: 4]
	FString VictimName;//[Offset: 0x30, Size: 16]
	FString VictimUID;//[Offset: 0x40, Size: 16]
	uint32 VictimKey;//[Offset: 0x50, Size: 4]
	int DamageType;//[Offset: 0x54, Size: 4]
	int AdditionalParam;//[Offset: 0x58, Size: 4]
	int[] KillFXItemID;//[Offset: 0x60, Size: 16]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool bIsVictimMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]
	int ResultHealthStatus;//[Offset: 0x74, Size: 4]
	byte RecordRelationShip;//[Offset: 0x78, Size: 1]
	int PreviousHealthStatus;//[Offset: 0x7c, Size: 4]
	bool IsKilledByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int causerAnchorPlatformResID;//[Offset: 0x84, Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x88, Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x8c, Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x90, Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x94, Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x98, Size: 4]
	FString CauserPicURL;//[Offset: 0xa0, Size: 16]
	FString VictimPicURL;//[Offset: 0xb0, Size: 16]
	FString CauserMedalPicUrl;//[Offset: 0xc0, Size: 16]
	FString VictimMedalPicUrl;//[Offset: 0xd0, Size: 16]
	FString RealKillerName;//[Offset: 0xe0, Size: 16]
	int RealKillNum;//[Offset: 0xf0, Size: 4]
	int AliveTeamNum;//[Offset: 0xf4, Size: 4]
	int LocalPlayerAssistNum;//[Offset: 0xf8, Size: 4]
	int KillDistance;//[Offset: 0xfc, Size: 4]
	byte MaxKillerStatus;//[Offset: 0x100, Size: 1]
	ExcellentOperationRecordData[] ExcellentOperationInfos;//[Offset: 0x108, Size: 16]
	bool AllTeammateDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool AllTeammateKillBySameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	class DamageType* DamageTypeClass;//[Offset: 0x120, Size: 8]

--------------------------------
Class: ExcellentOperationRecordData
	byte OperationResultType;//[Offset: 0x0, Size: 1]
	int AdditionalNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ClientTeamerMaxKillerRecord
	FString PlayerName;//[Offset: 0x0, Size: 16]
	bool bIsKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 32]
	SensibilityMode fireMode;//[Offset: 0x20, Size: 32]
	SensibilityMode MotionMode;//[Offset: 0x40, Size: 32]
	SensibilityMode MotionFireMode;//[Offset: 0x60, Size: 32]
	int XaxisInversionSwitch;//[Offset: 0x80, Size: 4]
	float VehicleEye;//[Offset: 0x84, Size: 4]
	float ParachuteEye;//[Offset: 0x88, Size: 4]
	float CamSenBuildTp;//[Offset: 0x8c, Size: 4]
	float CamSenBuildFp;//[Offset: 0x90, Size: 4]
	float FPPEye;//[Offset: 0x94, Size: 4]
	int SideMirrorModeC;//[Offset: 0x98, Size: 4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0xa0, Size: 80]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 4]
	float Sight1X;//[Offset: 0x4, Size: 4]
	float Sight2X;//[Offset: 0x8, Size: 4]
	float Sight3X;//[Offset: 0xc, Size: 4]
	float Sight4X;//[Offset: 0x10, Size: 4]
	float Sight6X;//[Offset: 0x14, Size: 4]
	float Sight8X;//[Offset: 0x18, Size: 4]
	float FPPNoAim;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SightMaterialConfig
	int Color;//[Offset: 0x0, Size: 4]
	int Type;//[Offset: 0x4, Size: 4]

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0, Size: 1]
	FString AttackActionName;//[Offset: 0x8, Size: 16]
	FString AttackName;//[Offset: 0x18, Size: 16]
	bool bIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int KillNum;//[Offset: 0x2c, Size: 4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	FString FullMsg;//[Offset: 0x38, Size: 16]
	int victimAnchorPlatformResID;//[Offset: 0x48, Size: 4]
	FString CauserPlayerName;//[Offset: 0x50, Size: 16]
	FString VictimPlayerName;//[Offset: 0x60, Size: 16]
	FString NumberMsg;//[Offset: 0x70, Size: 16]
	ExcellentOperationRecordData[] ExcellentOperationInfos;//[Offset: 0x80, Size: 16]
	bool bNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0x120, Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 1]
	float GuideInterval;//[Offset: 0x128, Size: 4]
	int MaxGuideLevel;//[Offset: 0x12c, Size: 4]
	NewbieGuideItem[] Items;//[Offset: 0x130, Size: 16]
	STExtraPlayerController* OwnerController;//[Offset: 0x140, Size: 8]
	int[] FinishedTips;//[Offset: 0x148, Size: 16]
	int[] FinishedCounts;//[Offset: 0x158, Size: 16]
	ZombieModeGuideInfo ZombieModeGuideInfo;//[Offset: 0x1a0, Size: 5]
	UAEDataTable* pGuideTextTable;//[Offset: 0x1b8, Size: 8]
	void SendNewbieMsg(int TipsID, bool IsStart, int tipsIndex);// 0x3ec0604
	void OnUIAssetLoadFinsh(LoadGuideUIFinishRet inFinishRet);// 0x3ec0588
	void OnGuideFinishEventTrigger(GSListenerBase* Trigger);// 0x3ec050c
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte curPlayerCategory, bool isGMTest);// 0x3ec02dc
	bool GetIsAllowNewGuide();// 0x3ec02a4
	int GetFinishedCount(int ID);// 0x3ec0218
	void AddFinishedCount(int ID);// 0x3ec019c

--------------------------------
Class: NewbieGuideItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x8, Size: 16]
	byte Type;//[Offset: 0x18, Size: 1]
	int MaxGuideCounts;//[Offset: 0x1c, Size: 4]
	byte[] SubjectPlayerTypes;//[Offset: 0x20, Size: 16]
	int Priority;//[Offset: 0x30, Size: 4]
	int MuteFlag;//[Offset: 0x34, Size: 4]
	int PreconditionID;//[Offset: 0x38, Size: 4]
	float PreconditionTipTimeGap;//[Offset: 0x3c, Size: 4]
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x40, Size: 16]
	STNewbieGuideSuccessListenerBase*[] QuickFinishedListener;//[Offset: 0x50, Size: 16]
	float Duration;//[Offset: 0x60, Size: 4]
	NewbieGuideUIInfo[] UIInfos;//[Offset: 0x68, Size: 16]
	NewbieGuideModeSettings ModeSettings;//[Offset: 0x78, Size: 48]

--------------------------------
Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x28, Size: 8]
	bool ReconnectRecover();// 0x3ebfbe0
	bool IsOK();// 0x3ebfba0

--------------------------------
Class: STNewbieGuideSuccessListenerBase.GSListenerBase.Object
	bool GuideFinishedByPlayer();// 0x3ebfe4c

--------------------------------
Class: GSListenerBase.Object
	delegate OnGSListenerBaseTrigger;//[Offset: 0x28, Size: 16]
	Controller* OwnerController;//[Offset: 0x38, Size: 8]
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x40, Size: 8]
	bool bAutoDisableWhenTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	float DelayTime;//[Offset: 0x4c, Size: 4]
	bool ReconnectRecover();// 0x3e36c18
	void OnEventTrigger();// 0x3e36bfc
	Actor* GetCurrentEventOwnerActor();// 0x3e36bc0
	bool EnableListener();// 0x3e36b80
	bool DisableListener();// 0x3e36b40

--------------------------------
Class: UTSkillManagerComponent.ActorComponent.Object
	UTSkillSynData[] SkillSynData;//[Offset: 0x160, Size: 16]
	UTSkillSynSinglePhaseData[] SkillSynSinglePhaseData;//[Offset: 0x180, Size: 16]
	delegate OnSkillCDChanged;//[Offset: 0x1a0, Size: 16]
	SkillCDRepData[] SyncSkillCDDatas;//[Offset: 0x1b0, Size: 16]
	UTAddedSkillSturct[] RepAddedSkillStructList;//[Offset: 0x1c0, Size: 16]
	delegate ChangeActorBlackboard;//[Offset: 0x1e0, Size: 16]
	Actor* OwnerActor;//[Offset: 0x1f0, Size: 8]
	Object*[] TestList;//[Offset: 0x1f8, Size: 16]
	class UTSkill[] SkillArchetypes;//[Offset: 0x208, Size: 16]
	class UTSkill[] SkillHardReferenceList;//[Offset: 0x218, Size: 16]
	int[] SkillInitIndices;//[Offset: 0x228, Size: 16]
	int[] SkillInitIndicesOnHighLevelDevices;//[Offset: 0x238, Size: 16]
	UTSkill*[] Skills;//[Offset: 0x248, Size: 16]
	bool bShowSkillUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	UAEUserWidget*[] AsyncLoadedSkillUI;//[Offset: 0x260, Size: 16]
	UAEUserWidget* SkillUIRoot;//[Offset: 0x270, Size: 8]
	PanelWidget* SkillUIRootPanel;//[Offset: 0x278, Size: 8]
	<UTSkill*,UAEBlackboard*> SkillsBlackboardMap;//[Offset: 0x280, Size: 80]
	<Actor*,UAEBlackboard*> ActorBlackboardMap;//[Offset: 0x2d0, Size: 80]
	<UTSkill*,int> SkillToIndexMap;//[Offset: 0x320, Size: 80]
	<UTSkill*,int> SkillCurPhaseIndexes;//[Offset: 0x370, Size: 80]
	<UTSkill*,int> LastPhaseIndexes;//[Offset: 0x3c0, Size: 80]
	<int> PendingSkillForResume;//[Offset: 0x410, Size: 80]
	UTSkillCreateData[] SkillBaseDatas;//[Offset: 0x460, Size: 16]
	delegate OnSkillHit;//[Offset: 0x540, Size: 16]
	delegate OnSkillCast;//[Offset: 0x550, Size: 16]
	float PhasePercentage;//[Offset: 0x5b8, Size: 4]
	<int,int> UIDToSyncSkillActiveStateData;//[Offset: 0x5c0, Size: 80]
	SkillActiveRepData[] SyncSkillActiveStateDatas;//[Offset: 0x610, Size: 16]
	<int,int> UIDToSyncSkillCDDatas;//[Offset: 0x628, Size: 80]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x678, Size: 48]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x6a8, Size: 48]
	bool bDebugSkillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	bool bNeedBeginInitOnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	delegate SkillStopEvent;//[Offset: 0x740, Size: 16]
	UTAddedSkillSturct[] LoadingSkillStructList;//[Offset: 0x750, Size: 16]
	class Object[] RemovingSkillClass;//[Offset: 0x760, Size: 16]
	class Object[] PendingRemoveSkillClass;//[Offset: 0x770, Size: 16]
	<int,SkillBlackBoardSyncDataArrayWrapper> CurrentParameters;//[Offset: 0x780, Size: 80]
	delegate SkillStartEvent;//[Offset: 0x7d0, Size: 16]
	UTSkill*[] PendingPassiveSkills;//[Offset: 0x7e0, Size: 16]
	SkillGlobalUIDDataAsset* SkillGlobalUIDDataAsset;//[Offset: 0x7f0, Size: 8]
	FString LastESkillTargetDesc;//[Offset: 0x808, Size: 16]
	int SkillSynRandomSeed;//[Offset: 0x818, Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x81c, Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x824, Size: 4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x828, Size: 80]
	SkillUIRegistRecord[] SkillUIWaitForController;//[Offset: 0x890, Size: 16]
	SkillParamater[] SkillParamaters;//[Offset: 0x8a0, Size: 16]
	FString RecordSkillLogKeyStr;//[Offset: 0x8b0, Size: 16]
	void UploadRecordSkillLog_Lua(FString Key, FString Content);// 0xffffff8f20d162a8
	void UploadRecordSkillLog(FString Key, FString Content);// 0x733cafc
	void UpdateSyncSkillCDData(int SkillUID);// 0x733ca80
	void UpdateSyncSkillActiveState(int SkillUID);// 0x733ca04
	void UnRegisterActorBlackBorad(Actor* InActor);// 0x733c988
	void TryDeleteOneSkillByClass(class UTSkill SkillTemplateClass, bool IsImmediately);// 0x733c850
	void TryAddOneSkill(out class UTSkill skillTemplate, bool bActive);// 0x733c750
	void TryActivateSkill(int SkillIndex, bool bActive);// 0x733c688
	bool TriggerEvent(int SkillID, byte EventType);// 0x733c5b4
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x733c40c
	void SyncOneSkillState(bool RepSkillCD, bool RepSkillActiveState, int RequestUID);// 0x733c300
	void SwitchSkill(int SkillID, byte EventType);// 0x733c240
	bool StopSkillWithSlot(int SkillSlot, enum StopReason);// 0x733c16c
	int StopSkillWithID(int SkillID, enum StopReason);// 0x733c09c
	void StopSkillSpecific(UTSkill* Skill, enum Reason);// 0x733bfe4
	void StopSkillAll(enum StopReason);// 0x733bf60
	void StopRecordSkillLog(bool bUpload);// 0x733bedc
	void StartRecordSkillLog(float fMaxTime);// 0x733be60
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x733bd8c
	bool SetupOwnerAndSystem();// 0x733bd54
	void SetSkillState(out const UTSkillStateSyncData[] syncStateDatas);// 0x733bc98
	void SetSkillOwner(Actor* tempActor);// 0x733bc14
	void SetSkillLastPhase(UTSkill* Skill, int PhaseIndex);// 0x733bb5c
	void SetSkillCurPhase(UTSkill* Skill, int PhaseIndex);// 0x733baa4
	bool SetSkillActive(int SkillIndex, bool bActive, bool bForceSet);// 0x733b984
	void SetCurSkill(int SkillIndex, int SkillSlot);// 0x733b8d0
	void SetAllCDTime(float InNewCDTime);// 0x733b854
	void ServerTriggerEvent(int SkillUID, byte EventType);// 0x733b764
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x733b688
	void ServerSetParameters(const SkillBlackBoardSyncData[] InData, int InSlotIndex);// 0x733b564
	void ServerNotifyRandomSeed(int Seed);// 0x733b4b4
	void ResimulateAllSynData();// 0x733b498
	void RequestSkillStates(bool RepSkillCD, bool RepSkillActiveState, const int[] RequestUIDs);// 0x733b33c
	void RepSkillSynSinglePhaseData();// 0x733b320
	void RepSkillSynData();// 0x733b304
	void RepSkillHitInfo();// 0x733b2f0
	void RepOneSkillSynData(int SkillSlot, int theLastSkill);// 0x733b23c
	void RemoveTriggerSkillPair(UTSkill* Skill);// 0x733b1b8
	void RemoveSkillUIWidget(FString SkillClassName, SoftObjectPath objPath);// 0x733b048
	void RemoveSkillRecord(UTSkill* Skill, float reserveTime);// 0x733af90
	void RemoveRecordSkillUIByPath(FString SkillClassName, SoftObjectPath objPath);// 0x733ae20
	void RemoveRecordSkillUIByClass(FString SkillClassName);// 0x733ad48
	void RemoveAddedSkill(int SkillUID);// 0x733accc
	void RegistSkillUIWidgetBP(FString SkillClassName, SoftObjectPath objPath);// 0x733ab5c
	void RegisterActorBlackBorad(Actor* InActor, UAEBlackboard* RegisterBlackboard);// 0x733aaa8
	static void RefreshSkillCDFromRepData_One(World* CurWorld, UTSkillCDBase* TargetSkillCD, out const UTSkillSyncData_CD FromCDData);// 0x733a988
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x733a85c
	bool PreCheckNewSkill(int SkillID);// 0x733a7c4
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x733a68c
	void OnStopSkill(UTSkill* Skill, enum StopReason);// 0x733a5cc
	static bool OnSameTeam(Actor* A, Actor* B);// 0x733a514
	void OnRepSkillData_BP();// 0xffffff8f20d162a8
	void OnRep_SkillHitInfo();// 0x733a4f8
	void OnRep_SkillCDDatas();// 0x733a4e4
	void OnRep_SkillActiveState();// 0x733a4d0
	void OnRep_AddedSkillList(UTAddedSkillSturct[] originList);// 0x733a350
	void OnInterruptSkill(UTSkill* Skill, enum StopReason);// 0x733a290
	void OnControllerArrived_BP();// 0xffffff8f20d162a8
	void OnControllerArrived();// 0x733a27c
	void OnAsyncLoadFinishedByItem(int SkillIndex, FString SkillTemplatePath);// 0x733a164
	void ModifySkillCD(FString SkillName, int Index, enum Op, float Value);// 0x7339fd8
	bool LoadSyncIfLoadingBySkillUID(int SkillUID);// 0x7339f48
	bool LoadSyncIfLoadingByClassName(FString SkillClassName);// 0x7339e64
	bool LoadSyncIfLoading(class UTSkill SkillClass);// 0x7339d68
	bool IsTheSkillInCasting(int SkillIndex);// 0x7339cd8
	bool IsReadyToCastSkill(int SkillID);// 0x7339c40
	bool IsHasInitSkillSystem();// 0x7339c24
	bool IsCastingSkill();// 0x7339be4
	void InitSkillSystemAync();// 0x7339bd0
	void InitSkillSystem(bool isDedicateServer);// 0x7339b44
	UTSkill* InitAndGetSkill(int SkillID, out int SkillSlotIndex);// 0x7339a64
	UAEBlackboard* GetUAEBlackboard(UTSkill* InSkill);// 0x73399d8
	int GetSkillUIDByPath(FString SkillObjPath);// 0x73398e8
	int GetSkillUIDByName(FString ClassName);// 0x73397f8
	int GetSkillUIDByIndex(int SkillIndex);// 0x7339764
	UTSkillStateSyncData[] GetSkillState();// 0x7339688
	int GetSkillSlotBySkill(UTSkill* param1);// 0x73395fc
	UTSkill*[] GetSkillsByGroup(FName SkillGroup);// 0x7339524
	UTSkillPhase* GetSkillPhaseByIndex(class Object SkillClass, int PhaseIndex);// 0x733945c
	FString GetSkillPathByUID(int SkillUID);// 0x7339384
	FString GetSkillName(int SkillIndex);// 0x73392b4
	UTSkillBaseWidget* GetSkillMemberByTag(class Object SkillClass, FString Tag);// 0x733918c
	int GetSkillLastPhase(UTSkill* Skill);// 0x733903c
	int GetSkillIndexByUID(int SkillUID);// 0x7338fa8
	int GetSkillIndexByPathFormArchetype(FString PathName);// 0x7338eb8
	int GetSkillIndexByClassName(FString ClassName);// 0x7338dc8
	int GetSkillIndexByClass(class Object SkillClass, bool bFetchArchetypes);// 0x7338cf0
	int GetSkillIndex(UTSkill* Skill);// 0x7338c64
	static int GetSkillGlobalUIDByClass(class Object SkillClass);// 0x7338be8
	int GetSkillCurPhase(UTSkill* Skill);// 0x7338a98
	FString GetSkillClassNameByUID(int SkillUID);// 0x73389c0
	UTSkill* GetSkillByUID(int SkillUID);// 0x733892c
	UTSkill* GetSkillByName(FString SkillName);// 0x733883c
	UTSkill* GetSkillByClassName(FString SkillClassName);// 0x733874c
	UTSkillCreateData GetSkillBaseDataBySkill(UTSkill* Skill);// 0x73386b8
	UTSkillCreateData GetSkillBaseDataByIndex(int SkillIndex);// 0x7338624
	UTSkillCreateData GetSkillBaseDataByClass(class Object SkillClass);// 0x7338590
	class UTSkill GetSkillArcheTypeByClassName(FString archeClassName, out int TargetIndex);// 0x733841c
	UTSkill* GetSkill(int SkillID);// 0x7338388
	byte GetRealOwnerRoleSafety();// 0x733834c
	bool GetParamBySelector(FName SelectedKeyName, int InSlotIndex, out SkillBlackBoardSyncData OutData);// 0x7338218
	UTSkill*[] GetCurSkills();// 0x7338198
	UTSkillPhase*[] GetCurSkillPhases();// 0x7338118
	UTSkillPhase* GetCurSkillPhase(int SkillSlot);// 0x733808c
	int[] GetCurSkillIndexes();// 0x7338008
	int GetCurSkillIndexBySlot(int SkillSlot);// 0x7337f7c
	int GetCurSkillIndex();// 0x7337f60
	UTSkill* GetCurSkill(int SkillSlot);// 0x7337ed4
	int[] GetCurMonopolizeSkills();// 0x7337e54
	int GetCastingSlotBySkillID(int SkillID);// 0x7337dc8
	float GetAllMaxCDTimeAverage();// 0x7337d94
	float GetAllCDTimeAverage();// 0x7337d60
	int[] GetAllCastingSkillIndex();// 0x7337ce0
	bool ForceInitSkillByClassName(FString SkillClassName);// 0x7337bec
	int FindRelatedCurSkillIndex(int SkillID, out int tempRelatedSkillSlot, bool PeekSlotIndex);// 0x7337acc
	void EndRecordSkillLog();// 0x7337ab8
	void DeleteOneSkillByClass(class UTSkill SkillTemplateClass, bool bCheckItemExist);// 0x7337978
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x73378b0
	void ClearSkill(bool bDeleteSkill, bool bDestroySkillActor);// 0x73377d8
	bool CheckNewSkill(int SkillID, out int ReplaceSkillSlot);// 0x73376f4
	void CheckAutoSkill();// 0x73376d8
	void BothSideSetParameters(out const SkillBlackBoardSyncData[] InData, int InSlotIndex);// 0x73375c8
	void BeginAddSkillByItemAsync(out UTAddedSkillSturct temp);// 0x7337520
	void AddTriggerSkillPair(UTSkill* InSkill);// 0x733749c
	void AddOneSkillToAddList(int FoundSkillIndex, out class UTSkill skillTemplate, bool bActive);// 0x7337360
	void AddOneSkillByAddedSkillSturct(out UTAddedSkillSturct temp);// 0x73372b8

--------------------------------
Class: UTSkillSynData
	int CurSkillUID;//[Offset: 0x0, Size: 4]
	int Token;//[Offset: 0x4, Size: 4]
	int PhaseIndexes;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UTSkillSynSinglePhaseData
	int CurSkillUID;//[Offset: 0x0, Size: 4]
	int CurSkillPhase;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SkillCDRepData
	int SkillUID;//[Offset: 0x0, Size: 4]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x8, Size: 16]

--------------------------------
Class: UTSkillSyncData_CD
	int skillCDIndex;//[Offset: 0x0, Size: 4]
	float lastActiveTime;//[Offset: 0x4, Size: 4]
	bool bIsCDReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIsTickFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	float InitEnergy;//[Offset: 0xc, Size: 4]
	float MaxEnergy;//[Offset: 0x10, Size: 4]
	float CurEnergy;//[Offset: 0x14, Size: 4]
	float DeltaEnergy;//[Offset: 0x18, Size: 4]
	float SyncCount;//[Offset: 0x1c, Size: 4]
	float TickCountTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: UTAddedSkillSturct
	int SkillUID;//[Offset: 0x0, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int LoadingSlot;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UTSkill.Actor.Object
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	FString SkillName;//[Offset: 0x400, Size: 16]
	FName SkillGroup;//[Offset: 0x410, Size: 8]
	enum[] SkillTypes;//[Offset: 0x418, Size: 16]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool bOBResimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	enum SkillCastType;//[Offset: 0x42a, Size: 1]
	bool bShouldMonopolize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b, Size: 1]
	FString[] NotStoppedMonopolizeSkillClassNames;//[Offset: 0x430, Size: 16]
	FString[] NotAllowedMonopolizeSkillClassNames;//[Offset: 0x440, Size: 16]
	bool bMonopolizeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 1]
	bool bCheckFirstPhaseConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x452, Size: 1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x453, Size: 1]
	bool bKeepCastingWhenDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	UTSkillCreateData BaseData;//[Offset: 0x458, Size: 384]
	int SkillCategory;//[Offset: 0x5d8, Size: 4]
	bool ChangePawnStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 1]
	bool USE_NEW_SKILLCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dd, Size: 1]
	UAEBlackboardParameter[] BlackboardParamList;//[Offset: 0x5e0, Size: 16]
	int ItemID;//[Offset: 0x5f0, Size: 4]
	UTSkillPhase* BasePhase;//[Offset: 0x5f8, Size: 8]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x600, Size: 80]
	int InstancedNodesTotalSize;//[Offset: 0x650, Size: 4]
	int CurComponentNameIndex;//[Offset: 0x654, Size: 4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	SkillGlobalUIDDataAsset* LoadedGlobalUIDDataAsset;//[Offset: 0x660, Size: 8]
	UTSkillManagerComponent* SpecificSkillCompRef;//[Offset: 0x668, Size: 8]
	UAEBlackboard* SpecificBlackBlackRef;//[Offset: 0x670, Size: 8]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int coolDownIndex);// 0x732aab8
	void SetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent, float percentage);// 0x732aa00
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x732a8f0
	bool JumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseID);// 0x732a81c
	bool IsCDOK(UTSkillManagerComponent* SkillManagerComponent);// 0x732a784
	UTSkillManagerComponent* GetSpecificSkillManager();// 0x732a750
	UAEBlackboard* GetSpecificBlackboard();// 0x732a71c
	float GetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent);// 0x732a690
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x732a5fc
	ActorComponent* GetComponentByTag(class ActorComponent ComponentClass, FName Tag);// 0x732a538
	void FillPhases();// 0x732a524
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int coolDownIndex);// 0x732a464
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowErrorMsg);// 0x732a388

--------------------------------
Class: UTSkillCreateData
	bool bSkillActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float Interval;//[Offset: 0x4, Size: 4]
	float IntervalSincePrevFinish;//[Offset: 0x8, Size: 4]
	UTSkillCDBase*[] SkillCDs;//[Offset: 0x10, Size: 16]
	<int,UTSkillWidget*> SkillUIs;//[Offset: 0x20, Size: 80]
	<FString,int> SkillUIPathToHandle;//[Offset: 0x70, Size: 80]
	SoftClassPath SkillMainWidget;//[Offset: 0xc0, Size: 24]
	bool bInitMainSkillUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	<enum,SlateBrush> SkillIcons;//[Offset: 0xe0, Size: 80]
	int SkillMainWidgetHandle;//[Offset: 0x130, Size: 4]
	float Range;//[Offset: 0x138, Size: 4]
	UTSkillPhase*[] Phases;//[Offset: 0x140, Size: 16]
	bool bIgnoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	int CoolDownMessageID;//[Offset: 0x154, Size: 4]
	FName[] AsyncLoadingSkillUI;//[Offset: 0x158, Size: 16]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x168, Size: 16]
	bool bIsUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]

--------------------------------
Class: UTSkillCDBase.Object
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x28, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0x30, Size: 8]
	enum cdType;//[Offset: 0x38, Size: 1]
	FString cdTypeStr;//[Offset: 0x40, Size: 16]
	UTSkillManagerComponent* CurOwnerManager;//[Offset: 0x50, Size: 8]

--------------------------------
Class: UTSkillWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* SkillManager;//[Offset: 0x428, Size: 8]
	class Object* SkillClass;//[Offset: 0x430, Size: 8]
	int SkillUIID;//[Offset: 0x438, Size: 4]
	void TriggerPassiveEvent(byte SkillEvent);// 0x734394c
	void TriggerEvent(byte SkillEvent);// 0x73438d0
	void SetSkillUIID(int ID);// 0x7343854
	void SetSkillManager(UTSkillManagerComponent* Manager);// 0x73437dc
	void SetSkillClass(class Object InSkillClass);// 0x7343764
	void RemoveSkillUI();// 0x7343748
	void RemoveFromUIManager();// 0x73436d0
	void OnSkillWidgetInitFinish();// 0x73436b4
	bool IsCDReady();// 0x734367c
	bool IsCastingCD();// 0x7343644
	int GetSkillUIID();// 0x7343610
	FString GetSkillName();// 0x7343554
	UTSkillManagerComponent* GetSkillManger();// 0x7343538
	int GetSkillIndexBySkillComponent(UTSkillManagerComponent* InComponent);// 0x7343488
	int GetSkillIndex();// 0x7343424
	class Object GetSkillClass();// 0x7343408
	float[] GetSkillCDProgess();// 0x7343370
	float[] GetSkillCDByType(int Type);// 0x7343290
	UTSkillCDBase*[] GetSkillCDBases();// 0x7343178
	UTSkill* GetSkill();// 0x73430e8
	float GetMaxEnergy(int Index);// 0x734305c
	PlayerController* GetLocalPlayerController();// 0x7343028
	float GetEnergyValue(int Index);// 0x7342f1c
	float GetEnergyThreshold(int Index);// 0x7342e90
	float GetDeltaEnergy(int Index);// 0x7342e04
	float GetCurrentCountTime(int Index);// 0x7342d78
	void DoRemove();// 0x7342d64

--------------------------------
Class: UTSkillPhase.ActorComponent.Object
	FString PhaseName;//[Offset: 0x128, Size: 16]
	int PhaseIndex;//[Offset: 0x138, Size: 4]
	FString PhaseDescription;//[Offset: 0x140, Size: 16]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	UTSkill* OwnerSkill;//[Offset: 0x154, Size: 8]
	Color US;//[Offset: 0x164, Size: 4]
	Color THEM;//[Offset: 0x168, Size: 4]
	Color Other;//[Offset: 0x16c, Size: 4]
	int ActionsTopHalfCount;//[Offset: 0x170, Size: 4]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x178, Size: 128]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x1f8, Size: 8]
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseID);// 0x7340cdc
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x7340c58
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x7340bd4
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x7340b50
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x7340a80
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x73409b0
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x734092c
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x7340858
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x7340784
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x73406f8
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x7340660
	bool ClearAttachments();// 0x7340628

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 4]
	float AltPhaseDuration;//[Offset: 0x4, Size: 4]
	float CacheMouseInputTime;//[Offset: 0x8, Size: 4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bCoolDownStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	int coolDownIndex;//[Offset: 0x10, Size: 4]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x18, Size: 16]
	UTSkillEffect* PhaseConditionFailAction;//[Offset: 0x28, Size: 8]
	UTSkillPicker* Picker;//[Offset: 0x30, Size: 8]
	UTSkillEffect*[] Actions;//[Offset: 0x38, Size: 16]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x48, Size: 16]
	enum PhaseType;//[Offset: 0x58, Size: 1]
	FString EnterPhaseTipString;//[Offset: 0x60, Size: 16]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x70, Size: 16]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	bool IsTargetOK(Object* SkillManagerComponent, Actor* Target);// 0x732dbcc
	bool IsOK_Internal();// 0x732db8c
	bool IsOK(Object* SkillManagerComponent);// 0x732daf4
	UTSkill* GetOwnerSkill();// 0x732daa4

--------------------------------
Class: UTSkillBaseWidget.ActorComponent.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	FString WidgetDescription;//[Offset: 0x138, Size: 16]
	Actor* BuffTargetActor;//[Offset: 0x148, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0x150, Size: 8]
	int ParentNodeIndex;//[Offset: 0x158, Size: 4]
	FString Tag;//[Offset: 0x160, Size: 16]
	Object* CurOwnerActorComponent;//[Offset: 0x170, Size: 8]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x73300ec
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x7330010
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x732fee8
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator RotatorValue);// 0x732fe14
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x732fd40
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x732fc6c
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x732fb98
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x732fac4
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x732f9f0
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x732f91c
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x732f840
	void SetOwnerSkillManager(UTSkillManagerComponent* pMgr);// 0x732f7bc
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x732f71c
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x732f67c
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x732f5dc
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x732f53c
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x732f49c
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x732f3fc
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x732f35c
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x732f2bc
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x732f21c
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x732f17c
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x732f0dc
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x732f040
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x732ef58
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x732eeb8
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x732edd8
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x732ed38
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x732ec9c
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x732ec00
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x732eb64
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x732eac8
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x732ea2c
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x732e990
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x732e8f0
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x732e808
	UAEBlackboard* GetUAEBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x732e774
	UAEBlackboard* GetUAEBlackboard();// 0x732e738
	UTSkillManagerComponent* GetOwnerSkillManager();// 0x732e6fc
	Actor* GetOwnerPawn();// 0x732e6c0
	<Actor*,UAEBlackboard*> GetActorBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x732e510
	<Actor*,UAEBlackboard*> GetActorBlackboard();// 0x732e3b0

--------------------------------
Class: UAEBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UAEBlackboard.Object
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x28, Size: 960]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x7352a90
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x73529b4
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x735288c
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue);// 0x73527b8
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x73526e4
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x7352610
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x735253c
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x7352468
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x7352394
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x73522c0
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x73521e4
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x7352144
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x73520a4
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x7352004
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x7351f64
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x7351ec4
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x7351e24
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x7351d84
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x7351ce4
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x7351c44
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x7351ba4
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x7351b04
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x7351a68
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x7351980
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x73518e0
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x7351800
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x7351760
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x73516c4
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x7351628
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x735158c
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x73514f0
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x7351454
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x73513b8
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x7351318
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x7351230
	void FillBlackboard_BP(UAEBlackboardParameter[] ParamList);// 0x7351100
	void AddValueByParam(out const UAEBlackboardParameter NewParam);// 0x7351000

--------------------------------
Class: UAEBlackboardContainer
	<FName,Object*> ObjectParamMap;//[Offset: 0x0, Size: 80]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x50, Size: 80]
	<FName,class Object> ClassParamMap;//[Offset: 0xa0, Size: 80]
	<FName,byte> EnumParamMap;//[Offset: 0xf0, Size: 80]
	<FName,int> IntParamMap;//[Offset: 0x140, Size: 80]
	<FName,uint32> UIntParamMap;//[Offset: 0x190, Size: 80]
	<FName,float> FloatParamMap;//[Offset: 0x1e0, Size: 80]
	<FName,bool> BoolParamMap;//[Offset: 0x230, Size: 80]
	<FName,FString> StringParamMap;//[Offset: 0x280, Size: 80]
	<FName,FName> NameParamMap;//[Offset: 0x2d0, Size: 80]
	<FName,Vector> VectorParamMap;//[Offset: 0x320, Size: 80]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x370, Size: 80]

--------------------------------
Class: UAEBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 8]
	byte Type;//[Offset: 0x8, Size: 1]
	UAEBlackboardParameterDefaultValue DefaultValue;//[Offset: 0x10, Size: 136]

--------------------------------
Class: UAEBlackboardParameterDefaultValue
	Object* DefaultObject;//[Offset: 0x0, Size: 40]
	class Class* DefaultClass;//[Offset: 0x28, Size: 40]
	byte DefaultEnum;//[Offset: 0x50, Size: 1]
	int DefaultInt;//[Offset: 0x54, Size: 4]
	float DefaultFloat;//[Offset: 0x58, Size: 4]
	bool DefaultBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FString DefaultString;//[Offset: 0x60, Size: 16]
	FName DefaultName;//[Offset: 0x70, Size: 8]
	Vector DefaultVector;//[Offset: 0x78, Size: 12]

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float fADScale;//[Offset: 0x178, Size: 4]
	float fAPScale;//[Offset: 0x17c, Size: 4]
	void UpdateAction(Object* InstanceNodeContainer, float DeltaSeconds);// 0x73312a4
	void UndoAction(Object* InstanceNodeContainer);// 0x7331220
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x7331164
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x73310a8
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x7330fec
	UTSkill* GetOwnerSkill();// 0x7330fb8
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x7330efc
	bool DoAction(Object* InstanceNodeContainer);// 0x7330e64

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0x178, Size: 32]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x1a8, Size: 16]
	Actor*[] IgnoreTargets;//[Offset: 0x1b8, Size: 16]
	UTSkillPickerFilter*[] Filters;//[Offset: 0x1c8, Size: 16]
	bool TickPicker(float DeltaTime);// 0x7341c78
	bool PickTargetsInner(Vector OriginPoint);// 0x7341bdc
	bool PickTargets(Vector OriginPoint);// 0x7341b48

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 1]
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8, Size: 8]
	enum PickerTargetType;//[Offset: 0x10, Size: 1]
	int PickerMaxCount;//[Offset: 0x14, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bIgnoreTargetVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8, Size: 8]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte HitPos;//[Offset: 0x11, Size: 1]
	FName BoneName;//[Offset: 0x18, Size: 8]
	Vector HitEnvLocation;//[Offset: 0x20, Size: 12]
	byte hitPhysMatType;//[Offset: 0x2c, Size: 1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float DisToScreenCenter;//[Offset: 0x30, Size: 4]

--------------------------------
Class: UTSkillPickerFilter.Object
	void HandleFilterArray(out UTSkillPickedTarget[] inArray, Actor* Owner);// 0x73417a8

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte SkillEventType;//[Offset: 0x178, Size: 1]
	FName[] InterestedOwnerTags;//[Offset: 0x180, Size: 16]
	UTSkillEffect* SkillEffect;//[Offset: 0x190, Size: 8]
	SkillConditionWarpper[] Conditions;//[Offset: 0x198, Size: 16]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x1a8, Size: 16]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 8]

--------------------------------
Class: SkillGlobalUIDDataAsset.DataAsset.Object
	<FString,int> AllSkillUIDMap;//[Offset: 0x30, Size: 80]
	<int,FString> DebugSkillPathMap;//[Offset: 0x80, Size: 80]

--------------------------------
Class: SkillActiveRepData
	int SkillUID;//[Offset: 0x0, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 16]
	Actor* FromPawn;//[Offset: 0x10, Size: 8]
	int SkillUID;//[Offset: 0x18, Size: 4]
	int SkillPhaseID;//[Offset: 0x1c, Size: 4]
	bool flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	byte HitSurfaceType;//[Offset: 0x22, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x24, Size: 12]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 16]
	Actor* FromPawn;//[Offset: 0x10, Size: 8]
	int SkillID;//[Offset: 0x18, Size: 4]
	int SkillPhaseID;//[Offset: 0x1c, Size: 4]
	byte HitSurfaceType;//[Offset: 0x20, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x24, Size: 12]

--------------------------------
Class: SkillBlackBoardSyncDataArrayWrapper
	SkillBlackBoardSyncData[] Array;//[Offset: 0x0, Size: 16]

--------------------------------
Class: SkillBlackBoardSyncData
	int IntValue;//[Offset: 0x0, Size: 4]
	float FloatValue;//[Offset: 0x4, Size: 4]
	bool BoolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FName NameValue;//[Offset: 0x10, Size: 8]
	FString StringValue;//[Offset: 0x18, Size: 16]
	Vector VectorValue;//[Offset: 0x28, Size: 12]
	Rotator RotatorValue;//[Offset: 0x34, Size: 12]
	Actor* ReplicatedActorPointer;//[Offset: 0x40, Size: 8]
	FName Name;//[Offset: 0x48, Size: 8]
	byte Type;//[Offset: 0x50, Size: 1]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 4]
	int Seed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SkillUIRegistRecord
	FString SkillClassName;//[Offset: 0x0, Size: 16]
	SoftObjectPath objPath;//[Offset: 0x10, Size: 24]

--------------------------------
Class: SkillParamater
	bool bUseTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName SkillTag;//[Offset: 0x8, Size: 8]
	enum SkillType;//[Offset: 0x10, Size: 1]
	float CDRecoveryScale;//[Offset: 0x14, Size: 4]
	float SkillRuntimeScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: UTSkillStateSyncData
	UTSkillStateSyncDataParam syncParam;//[Offset: 0x0, Size: 2]
	int SkillUID;//[Offset: 0x4, Size: 4]
	bool bSkillActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x10, Size: 16]

--------------------------------
Class: UTSkillStateSyncDataParam
	bool bSyncActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSyncCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: NewbieGuideUIInfo
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x0, Size: 16]
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x10, Size: 40]
	bool isMountUIDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	FString MountName;//[Offset: 0x40, Size: 16]
	FString MountOuterName;//[Offset: 0x50, Size: 16]
	AnchorData LayoutData;//[Offset: 0x60, Size: 40]
	FName LogicManagerNames;//[Offset: 0x88, Size: 8]
	class UAEUserWidget* WidgetClass2;//[Offset: 0x90, Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int ZOrder;//[Offset: 0xbc, Size: 4]
	Widget* UIWidget;//[Offset: 0xc0, Size: 8]
	class Object* UIWidgetClass;//[Offset: 0xc8, Size: 8]

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 16]
	Anchors Anchors;//[Offset: 0x10, Size: 16]
	Vector2D Alignment;//[Offset: 0x20, Size: 8]

--------------------------------
Class: NewbieGuideModeSettings
	FString[] SubModeIDArray;//[Offset: 0x0, Size: 16]
	enum[] ModeTypeArray;//[Offset: 0x10, Size: 16]
	FString[] ModeUIArray;//[Offset: 0x20, Size: 16]

--------------------------------
Class: ZombieModeGuideInfo
	bool isLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool isMonsterWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool isBossComing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool isFortressCloseWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool isFortressOpenWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FName,Property*> nameToProperty;//[Offset: 0x90, Size: 80]
	bool UsedLazyLoadTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	<FString,Property*> DataTableNameProperty;//[Offset: 0x160, Size: 80]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: LoadGuideUIFinishRet

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x59f1780

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	int ZOrder;//[Offset: 0x64, Size: 4]
	bool bAntiAdaptation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	void SetZOrder(int InZOrder);// 0x59f22ec
	void SetSize(Vector2D InSize);// 0x59f2274
	void SetPosition(Vector2D InPosition);// 0x59f21fc
	void SetOffsets(Margin InOffset);// 0x59f2180
	void SetMinimum(Vector2D InMinimumAnchors);// 0x59f2108
	void SetMaximum(Vector2D InMaximumAnchors);// 0x59f2090
	void SetLayout(out const AnchorData InLayoutData);// 0x59f2000
	void SetAutoSize(bool InbAutoSize);// 0x59f1f7c
	void SetAnchors(Anchors InAnchors);// 0x59f1f00
	void SetAlignment(Vector2D InAlignment);// 0x59f1e88
	int GetZOrder();// 0x59f1e54
	Vector2D GetSize();// 0x59f1e20
	Vector2D GetPosition();// 0x59f1dec
	Margin GetOffsets();// 0x59f1db4
	AnchorData GetLayout();// 0x59f1d60
	bool GetAutoSize();// 0x59f1d28
	Anchors GetAnchors();// 0x59f1cf0
	Vector2D GetAlignment();// 0x59f1cbc

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	void RPC_SrvSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf, double InClientTime);// 0x412dd04
	void RPC_SrvSyncTimeLine(double InSrvSendTime, double InClientTime);// 0x412dc1c
	void RPC_GetClientTimeRespond(int Index, int64 RealTime, int64 MonotonicTime, int64 MonotonicRawTime, int64 BootTime, int64 CustomTime);// 0x412da3c
	void RPC_GetClientTimeRequest(int Index, int64 ServerTime);// 0x412d94c
	void RPC_ClientSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf);// 0x412d85c
	void RPC_ClientSyncTimeLine(double InServerTime);// 0x412d7ac
	void ReportDebugInfo(int RporetedId);// 0x412d6fc
	void OnServerAboutToReconnect();// 0x412d6e8
	void GetClientTimeInterval();// 0x412d6d4
	void CheckTimeLine();// 0x412d6c0

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	float TimeStartDelay;//[Offset: 0x124, Size: 4]
	float SyncInterval;//[Offset: 0x128, Size: 4]
	bool bPunishSysTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	float DifSysTimeBad;//[Offset: 0x130, Size: 4]
	float SysTimeCompareSingleThres;//[Offset: 0x134, Size: 4]
	float SysTimeCompareAccThres;//[Offset: 0x138, Size: 4]
	float SysTimeClientBadAccThres;//[Offset: 0x13c, Size: 4]
	uint32 ServerPhase;//[Offset: 0x2f8, Size: 4]
	void RPC_SrvSyncTimeLine(byte InIndex, uint16 InSrvInf, TwgClientInfo InClientTime);// 0x412ec8c
	void RPC_ClientSyncTimeLine(byte InIndex, uint16 InSrvInf);// 0x412ebcc
	void PRC_SendBadSysTime(double LastTime, double CurTime, float TimeGap);// 0x412eaa4
	void OnTimeInspectorColdMove_Vehicle();// 0x412ea90
	void OnTimeInspectorColdMove_Own();// 0x412ea7c
	void OnServerAboutToReconnect();// 0x412ea68
	void ClientCheckTime();// 0x412ea54
	void CheckTimeLine();// 0x412ea40

--------------------------------
Class: TwgClientInfo

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	int ShootVerifyFailedCount;//[Offset: 0x120, Size: 4]
	bool bRepShouldUseNewBulletUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	int LogLimitAimInfo;//[Offset: 0x21c, Size: 4]
	int DistanceIgnoreCameraTraceLine;//[Offset: 0x220, Size: 4]
	VerifySwitch VsHitDetail;//[Offset: 0x224, Size: 12]
	VerifySwitch VsFlyDist2D;//[Offset: 0x230, Size: 12]
	VerifySwitch VsFlyDist3D;//[Offset: 0x23c, Size: 12]
	VerifySwitch VsFlyGravitySimple;//[Offset: 0x248, Size: 12]
	VerifySwitch VsFlyGravityDetail;//[Offset: 0x254, Size: 12]
	VerifySwitch VsRelMoveFailed;//[Offset: 0x260, Size: 12]
	VerifySwitch VsPureMoveSpeed;//[Offset: 0x26c, Size: 12]
	VerifySwitch VsNoHitDetail;//[Offset: 0x278, Size: 12]
	VerifySwitch VsFakeTraceMissMatch;//[Offset: 0x284, Size: 12]
	VerifySwitch VsFakeTraceMissMatchCb;//[Offset: 0x290, Size: 12]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x29c, Size: 12]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x2a8, Size: 12]
	VerifySwitch VsMaxWeaponToBaseFailed;//[Offset: 0x2b4, Size: 12]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x2c0, Size: 12]
	VerifySwitch VsBulletBornFailed;//[Offset: 0x2cc, Size: 12]
	VerifySwitch VsBoneScale;//[Offset: 0x2d8, Size: 12]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x2e4, Size: 12]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x2f0, Size: 12]
	VerifySwitch VsWeaponHasNoBase;//[Offset: 0x2fc, Size: 12]
	VerifySwitch VsBlockStaticToDynamic;//[Offset: 0x308, Size: 12]
	VerifySwitch VsHighMuzzleShootDown;//[Offset: 0x314, Size: 12]
	VerifySwitch VsGunPosError;//[Offset: 0x320, Size: 12]
	VerifySwitch VsProneHigh;//[Offset: 0x32c, Size: 12]
	VerifySwitch VsProneMiss;//[Offset: 0x338, Size: 12]
	VerifySwitch VsBoneLen01;//[Offset: 0x344, Size: 12]
	VerifySwitch VsBoneLen02;//[Offset: 0x350, Size: 12]
	VerifySwitch VsBoneLen03;//[Offset: 0x35c, Size: 12]
	VerifySwitch VsParaHRaw;//[Offset: 0x368, Size: 12]
	VerifySwitch VsParaHConv;//[Offset: 0x374, Size: 12]
	VerifySwitch VsParaZRaw;//[Offset: 0x380, Size: 12]
	VerifySwitch VsParaZConv;//[Offset: 0x38c, Size: 12]
	VerifySwitch VsStartFireWeaponOwner;//[Offset: 0x398, Size: 12]
	VerifySwitch VsStartFireCharacterOwner;//[Offset: 0x3a4, Size: 12]
	VerifySwitch VsBoneLen04;//[Offset: 0x3b0, Size: 12]
	VerifySwitch VsFlyAimMiss;//[Offset: 0x3bc, Size: 12]
	VerifySwitch VsRpgMuzzleBorn;//[Offset: 0x3c8, Size: 12]
	VerifySwitch VsBackTraceExceedded;//[Offset: 0x3d4, Size: 12]
	VerifySwitch VsBackTraceBad;//[Offset: 0x3e0, Size: 12]
	VerifySwitch VsKickBackBad;//[Offset: 0x3ec, Size: 12]
	VerifySwitch VsQuickFollowHit;//[Offset: 0x3f8, Size: 12]
	VerifySwitch VsFlyAimTraceShoot;//[Offset: 0x404, Size: 12]
	VerifySwitch VsScattergunLine;//[Offset: 0x410, Size: 12]
	VerifySwitch VsClipOverflowed;//[Offset: 0x41c, Size: 12]
	VerifySwitch VsPhaseTimeNoSync;//[Offset: 0x428, Size: 12]
	VerifySwitch VsPhaseTimeBad;//[Offset: 0x434, Size: 12]
	VerifySwitch VsCameraLineDistance;//[Offset: 0x440, Size: 12]
	VerifySwitch VsCameraPawnDiff;//[Offset: 0x44c, Size: 12]
	VerifySwitch VsBackTraceCalcFailed;//[Offset: 0x458, Size: 12]
	VerifySwitch VsBackTraceCalcAngelSeem;//[Offset: 0x464, Size: 12]
	VerifySwitch VsBackTraceCameraMatch;//[Offset: 0x470, Size: 12]
	VerifySwitch VsHitDataControllerMissMatch;//[Offset: 0x47c, Size: 12]
	VerifySwitch VsMoveS3VerifyLost;//[Offset: 0x488, Size: 12]
	VerifySwitch VsBackwardRange;//[Offset: 0x494, Size: 12]
	VerifySwitch VsMoveTimeStampError;//[Offset: 0x4a0, Size: 12]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x4ac, Size: 12]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x4b8, Size: 12]
	VerifySwitch VsTestSwitch;//[Offset: 0x4c4, Size: 12]
	VerifySwitch VsTestSwitchNew;//[Offset: 0x4d0, Size: 12]
	VerifySwitch ClientTimeAccCheck;//[Offset: 0x4dc, Size: 12]
	VerifySwitch ClientPostionCheck;//[Offset: 0x4e8, Size: 12]
	VerifySwitch VsServerMoveLost;//[Offset: 0x4f4, Size: 12]
	VerifySwitch VsBadCtime_Cl;//[Offset: 0x500, Size: 12]
	VerifySwitch VsBadCtime_Sys;//[Offset: 0x50c, Size: 12]
	VerifySwitch VsBadCtime_Csl;//[Offset: 0x518, Size: 12]
	int MaxShootPointPassWall;//[Offset: 0x524, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x528, Size: 4]
	VerifySwitch VsBulletVictimClientPassWall;//[Offset: 0x52c, Size: 12]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x538, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x53c, Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x540, Size: 4]
	int MaxAllowVehicleAccTime1;//[Offset: 0x544, Size: 4]
	int MaxAllowVehicleAccTime2;//[Offset: 0x548, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x54c, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x550, Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x55c, Size: 12]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x568, Size: 12]
	VerifySwitch VsJumpMaxHeight3;//[Offset: 0x574, Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x580, Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x58c, Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x598, Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x5a4, Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x5b0, Size: 12]
	VerifySwitch VsSysTimeRateCheckConv;//[Offset: 0x5bc, Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x5c8, Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x5d4, Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x5e0, Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x5ec, Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x5f8, Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x604, Size: 12]
	VerifySwitch VsShootTimeDeConMerged;//[Offset: 0x610, Size: 12]
	int MaxMergedStrategy1;//[Offset: 0x61c, Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x620, Size: 4]
	VerifySwitch VsShootTimeDeConFrameControl;//[Offset: 0x624, Size: 12]
	VerifySwitch VsShootTimeServerNoConnSpan;//[Offset: 0x630, Size: 12]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x63c, Size: 12]
	float ShootTimeServerNoConnSpanPunishTime;//[Offset: 0x648, Size: 4]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x64c, Size: 12]
	VerifySwitch VsParachuteVelocityCheck;//[Offset: 0x658, Size: 12]
	VerifySwitch ParachuteZVelocityCheck;//[Offset: 0x664, Size: 12]
	float MaxFuelConsume;//[Offset: 0x670, Size: 4]
	float CameraTraceLineDiff;//[Offset: 0x674, Size: 4]
	void OnRep_UseNewBulletUpload();// 0x3f04e68
	void OnRep_ShootVerifyFailedCount();// 0x3f04e54
	void OnRecoverOnServer();// 0x3f04e40
	void OnPreReconnectOnServer();// 0x3f04e2c
	void BeginShowDebug();// 0x3f04e18

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x0, Size: 4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: SecurityCollectorComponent.ActorComponent.Object
	bool TransformInputInt(int InA, int InB, int64 InC, int InD, out int IoE, out int64 IoF);// 0x3f781d4
	void CalcClientCustomTime(int RealTime, int Monotonic, int MonotonicRaw, int BootTime, out int OutCustomTimeVersion, out int OutCustomTime);// 0x3f78000

--------------------------------
Class: ExceptionReportComponent.ActorComponent.Object
	FString TestHandlFunc(Object* Context);// 0x3dc459c
	void ServerExceptionReport(Object* Context, FString ExceptionType, FString ClientData, Object* HandleFunctionTarget);// 0x3dc4414

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c, Size: 4]
	float CameraSwitchTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0, Size: 4]
	Vector SpringArmSocketOffset;//[Offset: 0x4, Size: 12]
	float SpringArmLength;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0, Size: 4]
	float ViewPitchMax;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModeConfig
	int Gyroscope;//[Offset: 0x0, Size: 4]
	int OpenMirrorMode;//[Offset: 0x4, Size: 4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool OneKeyScoreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int SidewaysMode;//[Offset: 0xc, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: HitEffectConfig
	int HitEffectType;//[Offset: 0x0, Size: 4]
	int HitEffectColor;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x8, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x10, Size: 8]
	FName[] GrenadeLogicSlotList;//[Offset: 0x18, Size: 16]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x28, Size: 16]

--------------------------------
Class: TeamMateStateInfo
	STExtraPlayerState* PlayerState;//[Offset: 0x0, Size: 8]
	Vector Location;//[Offset: 0x8, Size: 12]
	Rotator Rotation;//[Offset: 0x14, Size: 12]

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0xe3c, Size: 4]
	FString IniTeamLeaderName;//[Offset: 0xe40, Size: 16]
	enum LiveState;//[Offset: 0xe50, Size: 1]
	enum AILiveState;//[Offset: 0xe51, Size: 1]
	bool IsEvacuated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe52, Size: 1]
	delegate OnSelfPlayerStateLiveStateChangeDelegate;//[Offset: 0xe58, Size: 16]
	delegate OnMapMarkChange;//[Offset: 0xe78, Size: 16]
	delegate OnMapMultiMarkChange;//[Offset: 0xe88, Size: 16]
	delegate NoticeUIShowDamageEffect;//[Offset: 0xe98, Size: 16]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0xea8, Size: 16]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0xeb8, Size: 8]
	float PlayerHealth;//[Offset: 0xec0, Size: 4]
	float PlayerHealthMax;//[Offset: 0xec4, Size: 4]
	float PlayerTemperature;//[Offset: 0xec8, Size: 4]
	float PlayerTemperatureMax;//[Offset: 0xecc, Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0xed0, Size: 24]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0xee8, Size: 24]
	enum EUAVUseType;//[Offset: 0xf00, Size: 1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf01, Size: 1]
	enum RemoteControlPawnType;//[Offset: 0xf02, Size: 1]
	enum RemoteControlState;//[Offset: 0xf03, Size: 1]
	CharacterLocAndRot RemoteControlPawnLocAndRot;//[Offset: 0xf04, Size: 24]
	enum eCurVehicleType;//[Offset: 0xf1c, Size: 1]
	enum EUAVCharacterMsgType;//[Offset: 0xf1d, Size: 1]
	Vector PlayerDeadLocation;//[Offset: 0xf20, Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0xf2c, Size: 12]
	Vector MapMark;//[Offset: 0xf38, Size: 12]
	Vector MapMark3DLocation;//[Offset: 0xf44, Size: 12]
	Vector[] MapMultiMark;//[Offset: 0xf50, Size: 16]
	float CanJumpPercent;//[Offset: 0xf60, Size: 4]
	float ForceJumpPercent;//[Offset: 0xf64, Size: 4]
	STExtraPlayerState*[] TeamMatePlayerStateList;//[Offset: 0xf68, Size: 16]
	bool bInWinePlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf88, Size: 1]
	TimerHandle DelayFreshTeammateHandle;//[Offset: 0xf90, Size: 8]
	int PlayerLayerID;//[Offset: 0xf98, Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0xfa0, Size: 24]
	int KillGoblinScore;//[Offset: 0xfb8, Size: 4]
	int HurtGoblinScore;//[Offset: 0xfbc, Size: 4]
	int DeleverTargetScore;//[Offset: 0xfc0, Size: 4]
	int NotMeetGoblinScore;//[Offset: 0xfc4, Size: 4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xfd0, Size: 16]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xfe0, Size: 16]
	MarkSyncData[] SyncMarkDispatchData_Self;//[Offset: 0xff0, Size: 16]
	MarkSyncData[] PrevSyncMarkDispatchData_Self;//[Offset: 0x1000, Size: 16]
	MarkSyncData[] SyncMarkDispatchData_SelfSpectator;//[Offset: 0x1010, Size: 16]
	MarkSyncData[] PrevSyncMarkDispatchData_SelfSpectator;//[Offset: 0x1020, Size: 16]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0x1030, Size: 16]
	int TripleKillFullTime;//[Offset: 0x1050, Size: 4]
	int TripleKillIntervalTime;//[Offset: 0x1054, Size: 4]
	int QuadraKillIntervalTime;//[Offset: 0x1058, Size: 4]
	int PentaKillIntervalTime;//[Offset: 0x105c, Size: 4]
	int TotalKillRequireCount;//[Offset: 0x1060, Size: 4]
	int SnipeHeadKillRequireDistance;//[Offset: 0x1064, Size: 4]
	int TeamMatePlayerStateIndex;//[Offset: 0x1090, Size: 4]
	int Breath;//[Offset: 0x1094, Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0x1098, Size: 24]
	float EnegyBuffStage1;//[Offset: 0x10b0, Size: 4]
	float EnegyBuffStage2;//[Offset: 0x10b4, Size: 4]
	float EnegyBuffStage3;//[Offset: 0x10b8, Size: 4]
	float EnegyBuffStage4;//[Offset: 0x10bc, Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0x10c0, Size: 4]
	float CurEnegyBuff;//[Offset: 0x10c4, Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0x10c8, Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0x10cc, Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0x10d0, Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0x10d4, Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0x10d8, Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0x10dc, Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0x10e0, Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0x10e4, Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x10e8, Size: 16]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0x10f8, Size: 16]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1109, Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1114, Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1115, Size: 1]
	int[] TeamMatesExitState;//[Offset: 0x1118, Size: 16]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1128, Size: 1]
	bool bHasEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1129, Size: 1]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112a, Size: 1]
	float InvisibleInMapAfterEscapedCD;//[Offset: 0x112c, Size: 4]
	bool bIsvisibleInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1130, Size: 1]
	bool ExceptionDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1154, Size: 1]
	PlayerLevel PvePlayerLevel;//[Offset: 0x1158, Size: 24]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0x1170, Size: 16]
	int MonsterTreasureBoxGetNum;//[Offset: 0x1180, Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0x1184, Size: 4]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0x1188, Size: 16]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0x1198, Size: 16]
	int MaxDecalCount;//[Offset: 0x11c8, Size: 4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0x11d0, Size: 16]
	float SignalHP;//[Offset: 0x1240, Size: 4]
	delegate OnSignalHPChange;//[Offset: 0x1248, Size: 16]
	int[] PlayerAchievementList;//[Offset: 0x1258, Size: 16]
	delegate OnCompleteAchievementTask;//[Offset: 0x1268, Size: 16]
	delegate OnPlayerAchievementListChangeDelegate;//[Offset: 0x1278, Size: 16]
	float SignalHPRemainingTime;//[Offset: 0x1288, Size: 4]
	bool bHasGetRedEnvelopeByWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f4, Size: 1]
	int RemainingRevivalTime;//[Offset: 0x12f8, Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12fc, Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12fd, Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12fe, Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ff, Size: 1]
	bool bHasRevivalSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1300, Size: 1]
	int SelfRevivalCountdown;//[Offset: 0x1304, Size: 4]
	bool bInRevivalArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1308, Size: 1]
	bool bOpenRecvQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1309, Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0x1310, Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0x1318, Size: 16]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0x1328, Size: 16]
	bool bCanRevivalSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1338, Size: 1]
	delegate CanRevivalSelfDelegate;//[Offset: 0x1340, Size: 16]
	Vector LastVehicleLocation;//[Offset: 0x137c, Size: 12]
	HunterTaskTeamMgr* HunterTeamDataMgr;//[Offset: 0x1390, Size: 8]
	STExtraPlayerState*[] AssitPlayersCurKill;//[Offset: 0x1398, Size: 16]
	int[] HuntTeamIDList;//[Offset: 0x13a8, Size: 16]
	int[] HasShowRecords;//[Offset: 0x13b8, Size: 16]
	<int> TeamCDSet;//[Offset: 0x13c8, Size: 80]
	int HuntedTipMsgID;//[Offset: 0x141c, Size: 4]
	float TipCooldown;//[Offset: 0x1420, Size: 4]
	FName[] BuffNameListCanBeSync;//[Offset: 0x1428, Size: 16]
	FName[] SyncToClientBuffNameList;//[Offset: 0x1438, Size: 16]
	<uint64,int> TeammateIconInstanceMap;//[Offset: 0x1448, Size: 80]
	PopKartRaceInfo[] PopKartRaceList;//[Offset: 0x1498, Size: 16]
	bool bInitPopKartMapData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a8, Size: 1]
	bool IsExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a9, Size: 1]
	int GunMasterMediaPlayCounterReplay;//[Offset: 0x14ac, Size: 4]
	RenderQualityCVarsToSync RenderQualityCVarsToSync;//[Offset: 0x14b0, Size: 8]
	byte CurResultType;//[Offset: 0x14b8, Size: 1]
	SegmentChoosableSituation[] SegmentsList;//[Offset: 0x14c0, Size: 16]
	byte LeaderChoosingSegmentID;//[Offset: 0x14d0, Size: 1]
	bool bIsTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d1, Size: 1]
	int InspectorTipsID;//[Offset: 0x14d4, Size: 4]
	void UpdateTeamPlayerLevel();// 0x40bed24
	void UpdateMarkEvent();// 0x40bed10
	void ShowGodzillaMapMark(bool bShow);// 0xffffff8f20d162a8
	bool ShouldShowTrumpMark();// 0x40becd8
	void SetPlayerMapMultiMark(Vector Loc, bool bAdd, int MaxNum, bool bClearAll);// 0x40beb88
	void SetPlayerGiveUp(bool InGiveUp);// 0x40beb04
	void SetForceSyncTeammateData(bool IsForCE);// 0x40bea80
	void ServerUpdatePlayerLevel();// 0x40bea20
	void ServerLeaderChoosingSegmentID(int ChoosedSegmentID);// 0x40be970
	void ServerChooseSegmentID(int ChoosedSegmentID);// 0x40be8c0
	void RPC_TeammateNoticeUIDamageEffect();// 0x40be8a4
	void RPC_ClientHitFeedbackInfo(enum hittype, Vector Location);// 0x40be7a8
	void RespondToPawnRescueingStatusChange(Character* _helpWho, Character* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper, float InReduceTime);// 0x40be5ec
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* _helpWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x40be4f4
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* param2);// 0x40be400
	void RemoveAllTeammateIcon();// 0x40be3ec
	void RefreshRevivalState();// 0x40be3d8
	void RefreshFollowMark();// 0x40be3c4
	bool PopKartFinish(int Group);// 0x40be334
	int PlayersCountOnMyPlane();// 0x40be300
	void OnTeammatePlayerStateChanged__DelegateSignature();// 0xffffff8f20d162a8
	void OnSelfPlayerStateLiveStateChangeDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0xffffff8f20d162a8
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0xffffff8f20d162a8
	void OnRep_VisualFieldInfo();// 0x40be2ec
	void OnRep_TopSegmentTimes();// 0x40be2d0
	void OnRep_TeamMatePlayerStateList();// 0x40be2b4
	void OnRep_TeamMatePlayerStateIndex();// 0x40be2a0
	void OnRep_SignalHP();// 0x40be28c
	void OnRep_SegmentsList();// 0x40be278
	void OnRep_RobotVoiceMemberId();// 0x40be25c
	void OnRep_RemainingRevivalTime();// 0x40be248
	void OnRep_RankNotify();// 0x40be234
	void OnRep_PvePlayerLevel();// 0x40be220
	void OnRep_PopKartPathMap();// 0x40be20c
	void OnRep_PlayerReconnectEvent();// 0x40be1f8
	void OnRep_PlayerName();// 0x40be1dc
	void OnRep_PlayerLostConnectionEvent();// 0x40be1c8
	void OnRep_PlayerLiveState();// 0x40be1ac
	void OnRep_PlayerKillsChange();// 0x40be190
	void OnRep_PlayerIsFollowing();// 0x40be17c
	void OnRep_PlayerGiveUp();// 0x40be160
	void OnRep_PlayerExitGameEvent();// 0x40be14c
	void OnRep_PlayerCurWeaponRecord();// 0x40be130
	void OnRep_PlayerAchievementList();// 0x40be11c
	void OnRep_MarkSyncData();// 0x40be108
	void OnRep_MarkSelfSyncData();// 0x40be0f4
	void OnRep_MarkSelfSpectatorSyncData();// 0x40be0e0
	void OnRep_MapMarkNotify();// 0x40be0cc
	void OnRep_MapAirlineLocation();// 0x40be0b8
	void OnRep_LeaderChoosingSegmentID();// 0x40be0a4
	void OnRep_LastVehicleLocation();// 0x40be090
	void OnRep_IsVisibleInMap();// 0x40be07c
	void OnRep_IsIDCardCaptured();// 0x40be068
	void OnRep_IsEvacuated();// 0x40be054
	void OnRep_HPChanged();// 0x40be040
	void OnRep_HasRevivalSign();// 0x40be024
	void OnRep_HasEscaped();// 0x40be010
	void OnRep_HasBeenHunted();// 0x40bdffc
	void OnRep_EUAVUseType();// 0x40bdfe0
	void OnRep_ChangeRevivalState();// 0x40bdfc4
	void OnRep_ChangeInRevivingState();// 0x40bdfb0
	void OnRep_BuffNameList();// 0x40bdf9c
	void OnRep_BreathChanged();// 0x40bdf88
	void OnRep_BPS();// 0x40bdf74
	void OnRep_bCanRevivalSelf();// 0x40bdf60
	void OnRep_Assists();// 0x40bdf44
	void OnRemoveBuff(out const FName BuffName, bool bForce);// 0x40bde68
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnPlayerAchievementListChangeDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnNotifyHuntedTarget(int HuntTeamID);// 0x40bdde4
	void OnNoticeUIShowDamageEffect__DelegateSignature(FString PUID);// 0xffffff8f20d162a8
	void OnMapMultiMarkChange__DelegateSignature(Vector[] MapMultiMark);// 0xffffff8f20d162a8
	void OnMapMarkChange__DelegateSignature(Vector MapMark);// 0xffffff8f20d162a8
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float CurrentHP, float ratioHP);// 0xffffff8f20d162a8
	void OnCurrentLiveStateChangeDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnCompleteAchievementTask__DelegateSignature(STExtraPlayerState* PlayerState, int Achievement);// 0xffffff8f20d162a8
	void OnChangeHuntTeam(int HuntTeamID, bool bRemove);// 0x40bdd24
	void OnAddBuff(out const FName BuffName, bool bForce);// 0x40bdc48
	void On_RepRenderQualityCVarsToSync();// 0x40bdc34
	void NotifyTheOtherTeams();// 0x40bdc20
	void NotifyTeammates();// 0x40bdc0c
	bool IsTaskExist(int TaskID);// 0x40bdb7c
	bool IsSinglePlayer();// 0x40bdb44
	bool IsRobotMember(int memberID);// 0x40bdaac
	bool IsHaveExistingTask();// 0x40bda74
	bool IsExited();// 0x40bda3c
	bool IsAlive();// 0x40bda04
	bool InPopKartRace(int Group);// 0x40bd974
	void InitPopKartMapData();// 0x40bd958
	void HuntTipCoolDownCallback();// 0x40bd944
	uint32 GetUserIDByMemberID(int memberID);// 0x40bd8b0
	FString[] GetTeamMateUIDList();// 0x40bd7cc
	int GetTeammateRevivalCount();// 0x40bd798
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x40bd6b0
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x40bd624
	int GetTeammateIndex(STExtraPlayerState* Teammate);// 0x40bd598
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x40bd504
	bool GetTeammateBeKilledByPlayerName(FString KilledName, bool ExcludeSelf);// 0x40bd424
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x40bd3cc
	static void GetPopKartGroupByState(int State, out int RaceGroup, out int NodeIndex, out int Status);// 0x40bd220
	static int GetPopKartAreaStateValue(int RaceGroup, int NodeIndex, int Status);// 0x40bd120
	float GetPlayerTemperature();// 0x40bd0ec
	int GetPlayerTeamIndex();// 0x40bd0b8
	FString GetPlayerStateDetailInfo();// 0x40bd038
	float GetPlayerMaxTemperature();// 0x40bd004
	float GetPlayerMaxHealth();// 0x40bcfd0
	float GetPlayerHealth();// 0x40bcf9c
	bool GetPlayerEvacuated();// 0x40bcf64
	Rotator GetPlayerCurRot();// 0x40bcf2c
	Vector GetPlayerCurLoc();// 0x40bcef4
	STExtraBaseCharacter* GetPlayerCharacter();// 0x40bcec0
	float GetMaxEnegyBuff();// 0x40bce8c
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x40bcdf8
	float GetForceJumpPercent();// 0x40bcddc
	float GetCanJumpPercent();// 0x40bcdc0
	float GetBreathPercentage();// 0x40bcd8c
	int GetBountyGold();// 0xffffff8f20d162a8
	void GetAssitPlayersOfCurKill(out STExtraPlayerState*[] OutList);// 0x40bccf8
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x40bcba4
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x40bc9d8
	void ForceNotifyAlertUpdate();// 0x40bc9c4
	void FollowInitialTeamParachuteLeaderAndShowTips(FString LeaderName);// 0x40bc8ec
	void FadeTeammatesMapMark();// 0x40bc8d8
	void DelayFreshTeammateIcon();// 0x40bc8c4
	void CreateHunterTeamDataMgrConditionly();// 0x40bc8b0
	bool ContainPopKartNode(int Group, int NodeIndex);// 0x40bc7e8
	void CompleteAchievementTask(int Achievement, bool IsNotifyOwnerClient);// 0x40bc728
	void ClientRPC_CompleteAchievementTask(int Achievement);// 0x40bc6a4
	void ClientDisplayGameTipWithMsgID(int ID, FString param1, FString param2);// 0x40bc55c
	void CheckIsInspector();// 0x40bc540
	void ChangeFadeMapMarkDist(float NewDist);// 0x40bc4c8
	bool CanSelfRevive();// 0x40bc490
	bool CanRevivalTeammate();// 0x40bc458
	void CanRevivalSelfDelegate__DelegateSignature(bool bCanRevivalSelf);// 0xffffff8f20d162a8
	bool CanBeRevival();// 0x40bc420
	void CalculateSegmentRatio();// 0x40bc40c
	byte CalculateEnegyStage();// 0x40bc3d8
	void BPCalculateKillMonterNum(int MonterLevel, int AddNum, int MonsterID, bool bHeadShot, int DamageType, int WeaponID);// 0xffffff8f20d162a8
	void AddPopKartRaceNode(int Group, int NodeIndex);// 0x40bc324
	void AddPopKartBeginNode(out PopKartRaceInfo Info);// 0x40bc28c
	void AddEnegySafety(float AddVal);// 0x40bc210

--------------------------------
Class: UAEPlayerState.PlayerState.Info.Actor.Object
	bool binitializedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	PlayerRestartConfig PlayerRestartConfig;//[Offset: 0x490, Size: 64]
	float Pronetime;//[Offset: 0x4d0, Size: 4]
	float BeInWaterTime;//[Offset: 0x4d4, Size: 4]
	float SwimmingDistance;//[Offset: 0x4d8, Size: 4]
	float marchDistance;//[Offset: 0x4dc, Size: 4]
	float travelDistance;//[Offset: 0x4e0, Size: 4]
	float driveDistance;//[Offset: 0x4e4, Size: 4]
	int destroyVehicleNum;//[Offset: 0x4e8, Size: 4]
	int rescueTimes;//[Offset: 0x4ec, Size: 4]
	float NightMarchDistance;//[Offset: 0x4f0, Size: 4]
	int KillWolfNum;//[Offset: 0x4f4, Size: 4]
	int GVMemberID;//[Offset: 0x4f8, Size: 4]
	FName PlayerType;//[Offset: 0x500, Size: 8]
	uint64 FinalTeamleaderUID;//[Offset: 0x508, Size: 8]
	uint32 PlayerKey;//[Offset: 0x510, Size: 4]
	FString RealPlayerName;//[Offset: 0x518, Size: 16]
	uint64 UID;//[Offset: 0x528, Size: 8]
	FString PlayerUID;//[Offset: 0x530, Size: 16]
	FString PlayerOpenID;//[Offset: 0x540, Size: 16]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	FString IconURL;//[Offset: 0x558, Size: 16]
	int Gender;//[Offset: 0x568, Size: 4]
	int PlayerLevel;//[Offset: 0x56c, Size: 4]
	int SegmentLevel;//[Offset: 0x570, Size: 4]
	int TopSegmentTimes;//[Offset: 0x574, Size: 4]
	delegate OnTopSegmentTimesChange;//[Offset: 0x578, Size: 16]
	FString LiveID;//[Offset: 0x588, Size: 16]
	int LiveType;//[Offset: 0x598, Size: 4]
	int imprint_info;//[Offset: 0x59c, Size: 4]
	int AvatarBoxId;//[Offset: 0x5a0, Size: 4]
	int TeamID;//[Offset: 0x5a4, Size: 4]
	byte IdxInTeam;//[Offset: 0x5a8, Size: 1]
	uint64 RoomTeammatesID;//[Offset: 0x5b0, Size: 8]
	delegate OnTeamIDChange;//[Offset: 0x5b8, Size: 16]
	delegate OnLiveStatusChange;//[Offset: 0x5c8, Size: 16]
	FString UDPSenderAddress;//[Offset: 0x5d8, Size: 16]
	int PlayerBornPointID;//[Offset: 0x5e8, Size: 4]
	int Kills;//[Offset: 0x5ec, Size: 4]
	int Assists;//[Offset: 0x5f8, Size: 4]
	byte PlatformGender;//[Offset: 0x610, Size: 1]
	bool bIsFireworksActOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 1]
	int MatchLabel;//[Offset: 0x614, Size: 4]
	bool IsBanPublicMic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 1]
	int JumpSegmentID;//[Offset: 0x61c, Size: 4]
	uint32 Killer;//[Offset: 0x620, Size: 4]
	FString KillerName;//[Offset: 0x628, Size: 16]
	HitDownPlayerTypeInfoData[] HitDownPlayersInfoData;//[Offset: 0x638, Size: 16]
	int8 is_regress;//[Offset: 0x648, Size: 1]
	int8 not_counter_ai;//[Offset: 0x649, Size: 1]
	int KillerWeaponId;//[Offset: 0x64c, Size: 4]
	float KillerDistance;//[Offset: 0x650, Size: 4]
	int ShootWeaponShotNum;//[Offset: 0x654, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x658, Size: 4]
	int HeadShotNum;//[Offset: 0x65c, Size: 4]
	int HealTimes;//[Offset: 0x660, Size: 4]
	float DamageAmount;//[Offset: 0x664, Size: 4]
	float ShootWeaponDamageAmount;//[Offset: 0x668, Size: 4]
	float HealAmount;//[Offset: 0x66c, Size: 4]
	FString[] KillFlow;//[Offset: 0x670, Size: 16]
	SuitSkinFlow SuitSkinFlow;//[Offset: 0x6e0, Size: 16]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x700, Size: 16]
	UseItemFlow[] UseItemFlow;//[Offset: 0x710, Size: 16]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x720, Size: 16]
	float OutsideBlueCircleTime;//[Offset: 0x730, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x738, Size: 16]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x748, Size: 4]
	int FirstOpenedMonsterTombBoxNum;//[Offset: 0x74c, Size: 4]
	int PickupMonsterTombBoxNum;//[Offset: 0x750, Size: 4]
	int FirstOpenedSuperWeaponBoxNum;//[Offset: 0x754, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x758, Size: 4]
	int[] BuildFlow;//[Offset: 0x760, Size: 16]
	int[] DestroyShelterFlow;//[Offset: 0x770, Size: 16]
	int ZombieKilledUsingTraps;//[Offset: 0x780, Size: 4]
	float HitShelterDamage;//[Offset: 0x784, Size: 4]
	float ShelterTakeDamage;//[Offset: 0x788, Size: 4]
	int PlayerSetLevel;//[Offset: 0x78c, Size: 4]
	float PlayerSetExp;//[Offset: 0x790, Size: 4]
	FlareGunReport FlareGunReport;//[Offset: 0x794, Size: 16]
	Vector LandLocation;//[Offset: 0x7a4, Size: 12]
	bool bHasPopupTopFiveTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 1]
	int TopFiveTipsUseResponse;//[Offset: 0x7b4, Size: 4]
	float SignalHealAmount;//[Offset: 0x7b8, Size: 4]
	int SignalHealCount;//[Offset: 0x7bc, Size: 4]
	Vector DeadLocation;//[Offset: 0x7c0, Size: 12]
	FString DeadDamangeType;//[Offset: 0x7d0, Size: 16]
	FString DeadTimeStr;//[Offset: 0x7e0, Size: 16]
	int DeadTimes;//[Offset: 0x7f0, Size: 4]
	int64[] KillerUIDs;//[Offset: 0x7f8, Size: 16]
	int BeDownTimes;//[Offset: 0x808, Size: 4]
	int KnockDownTimes;//[Offset: 0x80c, Size: 4]
	int BeSavedTimes;//[Offset: 0x810, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x818, Size: 112]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 1]
	int GamePlayingTime;//[Offset: 0x898, Size: 4]
	int ObserverTime;//[Offset: 0x89c, Size: 4]
	int TouchDownAreaID;//[Offset: 0x8a0, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x8a4, Size: 4]
	FString TouchDownObjectName;//[Offset: 0x8a8, Size: 16]
	GameModePlayerTaskDataSim[] CompletedTaskList;//[Offset: 0x8b8, Size: 16]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x8c8, Size: 16]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x8d8, Size: 16]
	int[] SecretAreaIDList;//[Offset: 0x8e8, Size: 16]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0x8f8, Size: 16]
	float DrivingHelicopterTime;//[Offset: 0x908, Size: 4]
	float InHelicopterTime;//[Offset: 0x90c, Size: 4]
	int RevivalNum;//[Offset: 0x910, Size: 4]
	int BeRevivedNum;//[Offset: 0x914, Size: 4]
	int SelfRevivedNum;//[Offset: 0x918, Size: 4]
	int KillNumInVehicle;//[Offset: 0x91c, Size: 4]
	int KillPlayerNum;//[Offset: 0x920, Size: 4]
	int KillAINum;//[Offset: 0x924, Size: 4]
	float TotalSprintDistance;//[Offset: 0x928, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x92c, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x930, Size: 4]
	int BreakDoorNum;//[Offset: 0x934, Size: 4]
	AreaTriggerRecord[] AreaTriggerRecordList;//[Offset: 0x938, Size: 16]
	UseItemFlow[] UseSpecificBulletFlow;//[Offset: 0x948, Size: 16]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0x958, Size: 16]
	WeaponLobbyInitialData WeaponLobbyInitialData;//[Offset: 0x968, Size: 16]
	int WeaponCreateStuckAutoRecoverNum;//[Offset: 0x978, Size: 4]
	FString[] DestroyVehicleFlow;//[Offset: 0x980, Size: 16]
	int UseHelicoperNum;//[Offset: 0x990, Size: 4]
	float UseHelicoperDistance;//[Offset: 0x994, Size: 4]
	int UseDragonBoatNum;//[Offset: 0x998, Size: 4]
	byte CharmRankIndex;//[Offset: 0x99c, Size: 1]
	<uint32> UseHelicoperRecord;//[Offset: 0x9a0, Size: 80]
	float GlidingDistance;//[Offset: 0x9f0, Size: 4]
	int BreakGlassNum;//[Offset: 0x9f4, Size: 4]
	int SlidingTackleNum;//[Offset: 0x9f8, Size: 4]
	int ClimbObstacleNum;//[Offset: 0x9fc, Size: 4]
	<FString,RedpackData> FireworksRedpackData;//[Offset: 0xa00, Size: 80]
	EmoteAnimIData[] EmoteAnimIDataArray;//[Offset: 0xa50, Size: 16]
	bool showNickname;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa60, Size: 1]
	int MemberIdInVoiceRoom;//[Offset: 0xa64, Size: 4]
	int RobotVoiceMemberId;//[Offset: 0xa68, Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6c, Size: 1]
	int FollowState;//[Offset: 0xa84, Size: 4]
	int InviteTimes;//[Offset: 0xa88, Size: 4]
	bool bCanBeWatchedByFriend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8c, Size: 1]
	bool bCanBeWatchedByOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8d, Size: 1]
	int OpnedMosnterBoxNum;//[Offset: 0xa90, Size: 4]
	bool IsInspector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa94, Size: 1]
	delegate OnWolfKillNumChange;//[Offset: 0xab8, Size: 16]
	GiftSentData[] GiftSentData;//[Offset: 0xac8, Size: 16]
	GiftReceivedData[] GiftReceivedData;//[Offset: 0xad8, Size: 16]
	int InactiveZombieCount;//[Offset: 0xae8, Size: 4]
	int DeactiveZombieCount;//[Offset: 0xaec, Size: 4]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 1]
	int CollectedEventType;//[Offset: 0xaf4, Size: 4]
	bool bLiveVideoReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf8, Size: 1]
	UAEDataTable* CollectedEventTable;//[Offset: 0xb00, Size: 8]
	bool bCollectedEVLiveEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb08, Size: 1]
	GameBaseInfo GameBaseInfo;//[Offset: 0xb10, Size: 128]
	int8 AreaID;//[Offset: 0xb90, Size: 1]
	int8 PlatID;//[Offset: 0xb91, Size: 1]
	float PlayerLandedTimeStamp;//[Offset: 0xb94, Size: 4]
	bool IsRescueAllTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb98, Size: 1]
	bool PendingBecomeRescuer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb99, Size: 1]
	int KillKingNum;//[Offset: 0xb9c, Size: 4]
	<uint64,uint16> MutualAid;//[Offset: 0xba0, Size: 80]
	<uint64,uint16> WhoRescuedMe;//[Offset: 0xbf0, Size: 80]
	<uint64,uint16> IRescuedWhom;//[Offset: 0xc40, Size: 80]
	<uint64,uint16> WhoRevivedMe;//[Offset: 0xc90, Size: 80]
	<uint64,uint16> IRevivedWhom;//[Offset: 0xce0, Size: 80]
	EmotionalMemoryData EmotionalMemoryData;//[Offset: 0xd30, Size: 80]
	int MinimalLevelOfKillThanks;//[Offset: 0xd80, Size: 4]
	int KillThanksCount;//[Offset: 0xd84, Size: 4]
	bool bPartiallyKillThanksToOthersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd88, Size: 1]
	bool bPartiallyKillThanksFromOthersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd89, Size: 1]
	delegate ResponseCanShowKillThanksUIDelegate;//[Offset: 0xd90, Size: 16]
	delegate ResponseKillThanksDelegate;//[Offset: 0xda0, Size: 16]
	WeaponRecord CurWeaponRecord;//[Offset: 0xdb0, Size: 72]
	PlayerClubTeamInfo ClubTeamInfo;//[Offset: 0xdf8, Size: 40]
	UGCPlayerInfo UGCPlayerInfo;//[Offset: 0xe20, Size: 24]
	int CampToolNum;//[Offset: 0xe38, Size: 4]
	void SetGVMemberIDServerCall(int memberID);// 0x49f8f94
	void SetGVMemberID(int memberID);// 0x49f8f18
	void ServerSetShowNicknameValue(bool flag);// 0x49f8e54
	void ServerSetCampToolNumValue(int Count);// 0x49f8da4
	void Server_RequestCanShowKillThanksUI(const RequestResponseCanShowKillThanksUIContext Context);// 0x49f8cd0
	void Server_KillThanksTo(const RequestResponseKillThanksContext Context);// 0x49f8c10
	void ReportTriggerAreaData(byte TriggerAreaType, int TriggerAreaID);// 0x49f8b58
	void ReportTaskExtInfo(int TaskID, FString ExtInfo);// 0x49f8a40
	void ReportTaskData(int TaskID, int process);// 0x49f898c
	void ReportSpecialCollection(int ItemID, int Count);// 0x49f88d8
	void ReportSecretAreaID(int SecretAreaID);// 0x49f885c
	void ReportLandLocType(int TouchDownLocType, FString TouchDownLocName);// 0x49f8744
	void ReportLandArea(int TouchDownArea);// 0x49f86c8
	void ReportActivityEventDataExt(int EventId, int InCount, int ExtraParam, Vector Loc, FString Str);// 0x49f84cc
	void ReportActivityEventData(TLog_ActivityEventType InEventType, int InCount);// 0x49f8408
	void RefreshWeaponDamageRecordList();// 0x49f83f4
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x49f8378
	void RecordUseDragonBoat(uint32 UseDragonBoatId);// 0x49f82fc
	void RecordCharmRankInfo(byte RankIndex);// 0x49f8280
	FString[] ParseKillFlowIntoArray(int RecorIndex);// 0x49f815c
	void OnReportSpecificBulletUsed(int ItemID, int Count);// 0x49f80a8
	void OnRep_WolfKillNumChange();// 0x49f808c
	void OnRep_UID();// 0x49f8078
	void OnRep_UGCPlayerInfo();// 0x49f8064
	void OnRep_UDPSenderAddress();// 0x49f8048
	void OnRep_TopSegmentTimes();// 0x49f802c
	void OnRep_TeamID();// 0x49f8018
	void OnRep_ShowNicknameChange();// 0x49f8004
	void OnRep_RobotVoiceMemberId();// 0x49f7fe8
	void OnRep_PlayerKillsChange();// 0x49f7fcc
	void OnRep_PlayerCurWeaponRecord();// 0x49f7fb0
	void OnRep_OpenID();// 0x49f7f9c
	void OnRep_MemberIdInVoiceRoom();// 0x49f7f88
	void OnRep_MatchLabel();// 0x49f7f74
	void OnRep_LiveStatus();// 0x49f7f58
	void OnRep_IsBanPublicMic();// 0x49f7f44
	void OnRep_imprint_info();// 0x49f7f30
	void OnRep_CollectItemRecord();// 0x49f7f1c
	void OnRep_Assists();// 0x49f7f00
	bool IsTeammate(UAEPlayerState* PlayerState);// 0x49f7e68
	bool IsSpecialPickItemCollectionCompleted(int ItemID);// 0x49f7dd8
	bool IsSpecialPickItem(int ItemID);// 0x49f7d48
	bool IsRobotMember(int memberID);// 0x49f7cb0
	bool IsPureSpectator();// 0x49f7c78
	bool IsEscapeReasonable();// 0x49f7c38
	bool IsCollectedEventMatchingType(byte EventId);// 0x49f7ba8
	int GetVIPLevel();// 0x49f7b8c
	uint32 GetUserIDByMemberID(int memberID);// 0x49f7af8
	int GetTriggerTimesByAreaType(int AreaType);// 0x49f7a6c
	int GetTriggerTimesByAreaID(int AreaID);// 0x49f79e0
	TrainingStatisticsData GetTrainingStatisticsData();// 0x49f7988
	TeammateHeroData GetTeammateBattleResultData_Hero();// 0x49f794c
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x49f78f4
	FString GetPlayerKey();// 0x49f7874
	GameModePlayerFlowResultData GetPlayerFlowResultData();// 0x49f776c
	GameModePlayerBattleResultData_SuperCold GetPlayerBattleResultData_SuperCold();// 0x49f76cc
	GameModePlayerBattleResultData_Hero GetPlayerBattleResultData_Hero();// 0x49f75b4
	GameModePlayerBattleResultData_GunMaster GetPlayerBattleResultData_GunMaster(FString Reason);// 0x49f7470
	GameModePlayerBattleResultData_BountyHunter GetPlayerBattleResultData_BountyHunter();// 0x49f73d0
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x49f7378
	int GetMatchRank();// 0x49f735c
	int64 GetInt64UID();// 0x49f7340
	int64 GetInt64PlayerKey();// 0x49f7324
	HunterRevivalDataFlow GetHunterRevivalDataFlow();// 0x49f7240
	int GetCharmRankIndex();// 0x49f720c
	int GetActivityEventTimes(int EventId);// 0x49f7180
	void CollectTrainingStatisticsData();// 0x49f7164
	void ClientSetShowNicknameValue(bool flag);// 0x49f70e0
	void ClientSetCampToolNumValue(int Count);// 0x49f7064
	void ClientRPC_ClientRespawnCompleteForReplay();// 0x49f7048
	void Client_ResponseKillThanks(const RequestResponseKillThanksContext Context);// 0x49f6f88
	void Client_ResponseCanShowKillThanksUI(const RequestResponseCanShowKillThanksUIContext Context);// 0x49f6eb4
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x49f6df4
	bool CanKillThanksTo(out RequestResponseKillThanksContext Context);// 0x49f6d3c
	void AddGiftSentData(UAEPlayerState* ReceiverPlayerState, int GiftID, int Count);// 0x49f6c4c
	void AddGiftReceivedData(UAEPlayerState* SenderPlayerState, int GiftID, int Count);// 0x49f6b5c

--------------------------------
Class: PlayerRestartConfig
	enum Reason;//[Offset: 0x0, Size: 1]
	Transform RestartTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: HitDownPlayerTypeInfoData
	FString PlayerName;//[Offset: 0x0, Size: 16]
	FString PlayerUID;//[Offset: 0x10, Size: 16]
	int DamageType;//[Offset: 0x20, Size: 4]

--------------------------------
Class: SuitSkinFlow
	SuitSkinUnitFlow[] flowList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: SuitSkinUnitFlow
	uint64 UID;//[Offset: 0x0, Size: 8]
	int ElapseTime;//[Offset: 0x8, Size: 4]
	int State;//[Offset: 0xc, Size: 4]
	int SuitID;//[Offset: 0x10, Size: 4]
	int LocationX;//[Offset: 0x14, Size: 4]
	int LocationY;//[Offset: 0x18, Size: 4]
	int LocationZ;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	int SourceType;//[Offset: 0x14, Size: 4]
	int AdditionalParam;//[Offset: 0x18, Size: 4]
	DateTime Time;//[Offset: 0x20, Size: 8]
	FString TimeStr;//[Offset: 0x28, Size: 16]

--------------------------------
Class: DateTime

--------------------------------
Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int64 TimeStamp;//[Offset: 0x8, Size: 8]
	bool IsFromOthers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: VehicleDriveDisData
	int VehicleType;//[Offset: 0x0, Size: 4]
	int VehicleUseCount;//[Offset: 0x4, Size: 4]
	float driveDistance;//[Offset: 0x8, Size: 4]
	float DriveTimeAsDriver;//[Offset: 0xc, Size: 4]
	float DriveTime;//[Offset: 0x10, Size: 4]
	float VehicleJumpDistanceMax;//[Offset: 0x14, Size: 4]
	float VehicleJumpDistanceMaxWithTeammate;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FlareGunReport
	int PickUpNum;//[Offset: 0x0, Size: 4]
	int FireNum;//[Offset: 0x4, Size: 4]
	int CallSuperAirDropSuccessNum;//[Offset: 0x8, Size: 4]
	int CallVehicleDropSuccessNum;//[Offset: 0xc, Size: 4]

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0, Size: 4]
	int ArmorID;//[Offset: 0x4, Size: 4]
	int BackPackID;//[Offset: 0x8, Size: 4]
	int MainWeapon1ID;//[Offset: 0xc, Size: 4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10, Size: 16]
	int MainWeapon2ID;//[Offset: 0x20, Size: 4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x28, Size: 16]
	int ViceWeaponID;//[Offset: 0x38, Size: 4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x40, Size: 16]
	int CloseWeaponID;//[Offset: 0x50, Size: 4]
	int[] ThrowWeaponsID;//[Offset: 0x58, Size: 16]
	int8 IsLuckyClothing;//[Offset: 0x68, Size: 1]

--------------------------------
Class: GameModePlayerTaskDataSim
	int task_id;//[Offset: 0x0, Size: 4]
	int process;//[Offset: 0x4, Size: 4]
	FString ext_info;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ReportCollection
	int item_id;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponDamageRecord
	int WeaponID;//[Offset: 0x0, Size: 4]
	int KillCount;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpecialPickItemState
	int item_id;//[Offset: 0x0, Size: 4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: AreaTriggerRecord
	byte AreaType;//[Offset: 0x0, Size: 1]
	int AreaID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActivityEventReportData
	int EventId;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	int[] ActivityAddiList;//[Offset: 0x18, Size: 16]
	FString ActivityAddiString;//[Offset: 0x28, Size: 16]

--------------------------------
Class: WeaponLobbyInitialData
	int[] BulletTrackSkinList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: RedpackData
	int Count;//[Offset: 0x0, Size: 4]
	FString RedpackID;//[Offset: 0x8, Size: 16]

--------------------------------
Class: EmoteAnimIData
	int EmoteIndex;//[Offset: 0x0, Size: 4]
	int EmoteAnimTimes;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GiftSentData
	int GiftID;//[Offset: 0x0, Size: 4]
	uint64 ReceiverUID;//[Offset: 0x8, Size: 8]
	int NumberReceived;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GiftReceivedData
	int GiftID;//[Offset: 0x0, Size: 4]
	uint64 SenderUID;//[Offset: 0x8, Size: 8]
	int NumberReceived;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Target;//[Offset: 0x8, Size: 8]

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0, Size: 16]
	FString GameAppID;//[Offset: 0x10, Size: 16]
	FString OpenID;//[Offset: 0x20, Size: 16]
	int8 AreaID;//[Offset: 0x30, Size: 1]
	int8 PlatID;//[Offset: 0x31, Size: 1]
	FString ZoneID;//[Offset: 0x38, Size: 16]
	uint64 BattleID;//[Offset: 0x48, Size: 8]
	FString UserName;//[Offset: 0x50, Size: 16]
	uint64 RoleID;//[Offset: 0x60, Size: 8]
	int8 RoleType;//[Offset: 0x68, Size: 1]
	FString PicURL;//[Offset: 0x70, Size: 16]

--------------------------------
Class: EmotionalMemoryData
	<int,MemoryDataArray> MemoryData;//[Offset: 0x0, Size: 80]

--------------------------------
Class: MemoryDataArray
	MemoryData[] MemoryDataArray;//[Offset: 0x0, Size: 16]

--------------------------------
Class: MemoryData
	enum RecordType;//[Offset: 0x0, Size: 1]
	FString[] Value;//[Offset: 0x8, Size: 16]
	uint16[] Num;//[Offset: 0x18, Size: 16]

--------------------------------
Class: WeaponRecord
	int WeaponID;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]
	int HitCount;//[Offset: 0x8, Size: 4]
	int KillCount;//[Offset: 0xc, Size: 4]
	float TotalDamage;//[Offset: 0x10, Size: 4]
	HitFlow[] HitFlow;//[Offset: 0x38, Size: 16]

--------------------------------
Class: HitFlow
	int AimType;//[Offset: 0x0, Size: 4]
	int Distance;//[Offset: 0x4, Size: 4]
	int IsKill;//[Offset: 0x8, Size: 4]
	float Damage;//[Offset: 0xc, Size: 4]
	bool bFallOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bFallOnGroundPostHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	byte[] PlayerStates;//[Offset: 0x18, Size: 16]
	byte HitPos;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PlayerClubTeamInfo
	int TeamID;//[Offset: 0x0, Size: 4]
	FString ClubTeamName;//[Offset: 0x8, Size: 16]
	FString ClubTeamLogo;//[Offset: 0x18, Size: 16]

--------------------------------
Class: UGCPlayerInfo
	int MatchRank;//[Offset: 0x0, Size: 4]
	int VIPLevel;//[Offset: 0x4, Size: 4]
	UGCPlayerCustomInfo[] CustomInfoList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: UGCPlayerCustomInfo
	FString PropKey;//[Offset: 0x0, Size: 16]
	float PropValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: RequestResponseCanShowKillThanksUIContext
	bool bCanShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum CanShowKillThanksUIOperation;//[Offset: 0x1, Size: 1]
	Actor* TombBox;//[Offset: 0x8, Size: 8]
	FString UID;//[Offset: 0x10, Size: 16]
	FString IconURL;//[Offset: 0x20, Size: 16]
	int Gender;//[Offset: 0x30, Size: 4]
	int PlatformGender;//[Offset: 0x34, Size: 4]
	int SegmentLevel;//[Offset: 0x38, Size: 4]
	int PlayerLevel;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: RequestResponseKillThanksContext
	int Result;//[Offset: 0x0, Size: 4]
	Actor* TombBox;//[Offset: 0x8, Size: 8]
	FString UID;//[Offset: 0x10, Size: 16]

--------------------------------
Class: TLog_ActivityEventType
	byte ActivityEventID;//[Offset: 0x0, Size: 1]
	Vector ActivityEventLoc;//[Offset: 0x4, Size: 12]

--------------------------------
Class: TrainingStatisticsData
	TrainingStatisticsItem[] ItemList;//[Offset: 0x0, Size: 16]
	TrainingStatisticsItem_Int32[] Int32ItemList;//[Offset: 0x10, Size: 16]
	TrainingStatisticsItem_Int64[] Int64ItemList;//[Offset: 0x20, Size: 16]

--------------------------------
Class: TrainingStatisticsItem
	FString ItemName;//[Offset: 0x0, Size: 16]
	float ItemValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: TrainingStatisticsItem_Int32
	FString ItemName;//[Offset: 0x0, Size: 16]
	int ItemValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: TrainingStatisticsItem_Int64
	FString ItemName;//[Offset: 0x0, Size: 16]
	uint64 ItemValue;//[Offset: 0x10, Size: 8]

--------------------------------
Class: TeammateHeroData
	int FinalHeroId;//[Offset: 0x0, Size: 4]
	int FinalHeroLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModeTeammateBattleResultData
	FString Name;//[Offset: 0x0, Size: 16]
	uint64 UID;//[Offset: 0x10, Size: 8]
	int Kill;//[Offset: 0x18, Size: 4]
	FString State;//[Offset: 0x20, Size: 16]
	float travelDistance;//[Offset: 0x30, Size: 4]
	float marchDistance;//[Offset: 0x34, Size: 4]
	float driveDistance;//[Offset: 0x38, Size: 4]
	float NightMarchDistance;//[Offset: 0x3c, Size: 4]
	int KillWolfNum;//[Offset: 0x40, Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0x44, Size: 4]
	float DamageAmount;//[Offset: 0x48, Size: 4]
	float ShootWeaponDamageAmount;//[Offset: 0x4c, Size: 4]
	float HealAmount;//[Offset: 0x50, Size: 4]
	int AssistNum;//[Offset: 0x54, Size: 4]
	int HeadShotNum;//[Offset: 0x58, Size: 4]
	float surviveTime;//[Offset: 0x5c, Size: 4]
	float ObserverTime;//[Offset: 0x60, Size: 4]
	int RevivalNum;//[Offset: 0x64, Size: 4]
	int BeRevivedNum;//[Offset: 0x68, Size: 4]
	int rescueTimes;//[Offset: 0x6c, Size: 4]
	int DestroyVehicles;//[Offset: 0x70, Size: 4]
	FString[] KillFlow;//[Offset: 0x78, Size: 16]
	int deduplicate_kill;//[Offset: 0x88, Size: 4]
	float OutsideBlueCircleTime;//[Offset: 0x8c, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x90, Size: 16]
	int FirstOpenedAirDropBoxNum;//[Offset: 0xa0, Size: 4]
	int FirstOpenedMonsterTombBoxNum;//[Offset: 0xa4, Size: 4]
	int FirstOpenedSuperWeaponBoxNum;//[Offset: 0xa8, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0xac, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0xb0, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	int GamePlayingTime;//[Offset: 0xb8, Size: 4]
	int TouchDownAreaID;//[Offset: 0xbc, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0xc0, Size: 4]
	FString TouchDownObjectName;//[Offset: 0xc8, Size: 16]
	AreaTriggerRecord[] AreaTriggerRecordList;//[Offset: 0xd8, Size: 16]
	int KillerWeaponId;//[Offset: 0xe8, Size: 4]
	float KillerDistance;//[Offset: 0xec, Size: 4]
	PVETeammateData[] PVETeammateData;//[Offset: 0xf0, Size: 16]
	int[] peak_kill_score_list;//[Offset: 0x100, Size: 16]

--------------------------------
Class: PVETeammateData
	int MonsterKillTotalNum;//[Offset: 0x0, Size: 4]
	int MonsterHeadShootKillTotalNum;//[Offset: 0x4, Size: 4]
	float MonsterDamageAmount;//[Offset: 0x8, Size: 4]
	<int,int> MonsterKillIDToNum;//[Offset: 0x10, Size: 80]

--------------------------------
Class: GameModePlayerFlowResultData.TLogBaseInfo
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x30, Size: 16]

--------------------------------
Class: TLogBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 16]
	int8 AreaID;//[Offset: 0x10, Size: 1]
	int8 PlatID;//[Offset: 0x11, Size: 1]
	FString ZoneID;//[Offset: 0x18, Size: 16]
	uint64 BattleID;//[Offset: 0x28, Size: 8]

--------------------------------
Class: GameModePlayerBattleResultData_SuperCold
	int MakeFiresNum;//[Offset: 0x0, Size: 4]
	int DeerBBQNum;//[Offset: 0x4, Size: 4]
	int ChichenBBQNum;//[Offset: 0x8, Size: 4]
	int UseKFNum;//[Offset: 0xc, Size: 4]
	int UseUAVNum;//[Offset: 0x10, Size: 4]
	int KFUsingTime;//[Offset: 0x14, Size: 4]
	int UAVUsingTime;//[Offset: 0x18, Size: 4]
	int SkateboardUsingCount;//[Offset: 0x1c, Size: 4]
	int SkateboardUsingTime;//[Offset: 0x20, Size: 4]
	int SkateboardUsingDistance;//[Offset: 0x24, Size: 4]
	KillAnimalData[] AnimalKillFlow;//[Offset: 0x28, Size: 16]

--------------------------------
Class: KillAnimalData
	byte AnimalType;//[Offset: 0x0, Size: 1]
	int KillNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData_Hero
	HeroSkillData[] HeroSkillDatas;//[Offset: 0x0, Size: 16]
	int FinalHeroId;//[Offset: 0x10, Size: 4]
	int FinalHeroLevel;//[Offset: 0x14, Size: 4]
	<uint64,TeammateHeroData> TeammateDatas;//[Offset: 0x18, Size: 80]

--------------------------------
Class: HeroSkillData
	int HeroID;//[Offset: 0x0, Size: 4]
	int HeroUsingCount;//[Offset: 0x4, Size: 4]
	HeroBaseInfo HeroRecord;//[Offset: 0x8, Size: 32]
	<int,SkillRecordData> SkillRecords;//[Offset: 0x28, Size: 80]

--------------------------------
Class: HeroBaseInfo
	int MaxLevel;//[Offset: 0x0, Size: 4]
	int TimeSeconds;//[Offset: 0x4, Size: 4]
	int KillCount;//[Offset: 0x8, Size: 4]
	int TotalDamage;//[Offset: 0xc, Size: 4]
	int TotalHeal;//[Offset: 0x10, Size: 4]
	int SaveCount;//[Offset: 0x14, Size: 4]
	int KillCountInAir;//[Offset: 0x18, Size: 4]
	int TotalDamageInAir;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SkillRecordData
	<FString,int> RecordList;//[Offset: 0x0, Size: 80]

--------------------------------
Class: GameModePlayerBattleResultData_GunMaster
	GunMaterialData[] GunMaterialDatas;//[Offset: 0x0, Size: 16]
	int EscapeType;//[Offset: 0x10, Size: 4]
	int BountyNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: GunMaterialData
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int GunMaterialNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData_BountyHunter
	int DragonBreathCastTimes;//[Offset: 0x0, Size: 4]
	int[] PlayerAchievementList;//[Offset: 0x8, Size: 16]
	int BountyGold;//[Offset: 0x18, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData
	FString Reason;//[Offset: 0x0, Size: 16]
	int RemainingPlayerCount;//[Offset: 0x10, Size: 4]
	int TotalPlayerCount;//[Offset: 0x14, Size: 4]
	int RemainingTeamCount;//[Offset: 0x18, Size: 4]
	int TotalTeamCount;//[Offset: 0x1c, Size: 4]
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool IsSafeExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	uint64 Killer;//[Offset: 0x28, Size: 8]
	FString KillerName;//[Offset: 0x30, Size: 16]
	HitDownPlayerTypeInfoData[] HitDownPlayersInfoData;//[Offset: 0x40, Size: 16]
	int ShootWeaponShotNum;//[Offset: 0x50, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x54, Size: 4]
	int HealTimes;//[Offset: 0x58, Size: 4]
	FString[] KillFlow;//[Offset: 0x60, Size: 16]
	int[] KillsInCircle;//[Offset: 0x70, Size: 16]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x80, Size: 16]
	int PickupMonsterTombBoxNum;//[Offset: 0x90, Size: 4]
	<FString,RedpackData> FireworksRedpackData;//[Offset: 0x98, Size: 80]
	GiftSentData[] GiftSentData;//[Offset: 0xe8, Size: 16]
	GiftReceivedData[] GiftReceivedData;//[Offset: 0xf8, Size: 16]
	uint64 parachute_leader_uid;//[Offset: 0x108, Size: 8]
	UseItemFlow[] UseItemFlow;//[Offset: 0x110, Size: 16]
	int destroyVehicleNum;//[Offset: 0x120, Size: 4]
	int is_escape;//[Offset: 0x124, Size: 4]
	GameModeTeammateBattleResultData[] TeammateList;//[Offset: 0x128, Size: 16]
	Vector LandLocation;//[Offset: 0x138, Size: 12]
	int TopFiveTipsUseResponse;//[Offset: 0x144, Size: 4]
	float SignalHealAmount;//[Offset: 0x148, Size: 4]
	int SignalHealCount;//[Offset: 0x14c, Size: 4]
	Vector DeadLocation;//[Offset: 0x150, Size: 12]
	FString DeadDamangeType;//[Offset: 0x160, Size: 16]
	FString DeadTimeStr;//[Offset: 0x170, Size: 16]
	FString logoutime;//[Offset: 0x180, Size: 16]
	float Pronetime;//[Offset: 0x190, Size: 4]
	float BeInWaterTime;//[Offset: 0x194, Size: 4]
	float SwimmingDistance;//[Offset: 0x198, Size: 4]
	int BeDownTimes;//[Offset: 0x19c, Size: 4]
	int KnockDownTimes;//[Offset: 0x1a0, Size: 4]
	int BeSavedTimes;//[Offset: 0x1a4, Size: 4]
	int PickUpAirDrops;//[Offset: 0x1a8, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x1b0, Size: 112]
	int Rank;//[Offset: 0x220, Size: 4]
	int TotalScore;//[Offset: 0x224, Size: 4]
	int FollowState;//[Offset: 0x228, Size: 4]
	int InviteTimes;//[Offset: 0x22c, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	int GamePlayingTime;//[Offset: 0x234, Size: 4]
	int TouchDownAreaID;//[Offset: 0x238, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x23c, Size: 4]
	FString TouchDownObjectName;//[Offset: 0x240, Size: 16]
	GameModePlayerTaskDataSim[] CompletedTaskList;//[Offset: 0x250, Size: 16]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x260, Size: 16]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x270, Size: 16]
	int[] SecretAreaIDList;//[Offset: 0x280, Size: 16]
	int KillNumInVehicle;//[Offset: 0x290, Size: 4]
	float TotalSprintDistance;//[Offset: 0x294, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x298, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x29c, Size: 4]
	int BreakDoorNum;//[Offset: 0x2a0, Size: 4]
	AreaTriggerRecord[] AreaTriggerRecordList;//[Offset: 0x2a8, Size: 16]
	int[] BuildFlow;//[Offset: 0x2b8, Size: 16]
	int[] DestroyShelterFlow;//[Offset: 0x2c8, Size: 16]
	float HitShelterDamage;//[Offset: 0x2d8, Size: 4]
	int ZombieKilledUsingTraps;//[Offset: 0x2dc, Size: 4]
	float ShelterTakeDamage;//[Offset: 0x2e0, Size: 4]
	int PlayerSetLevel;//[Offset: 0x2e4, Size: 4]
	float PlayerSetExp;//[Offset: 0x2e8, Size: 4]
	MonsterTreasureBoxData[] MonsterTreasureBoxOpenFlow;//[Offset: 0x2f0, Size: 16]
	int MonsterTreasureBoxGetNum;//[Offset: 0x300, Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0x304, Size: 4]
	BuildMaterialData[] BuildMaterialGetList;//[Offset: 0x308, Size: 16]
	BuildMaterialData[] BuildMaterialUseList;//[Offset: 0x318, Size: 16]
	UseItemFlow[] UseSpecificBulletFlow;//[Offset: 0x328, Size: 16]
	int WeaponCreateStuckAutoRecoverNum;//[Offset: 0x338, Size: 4]
	PVESelfData[] PVESelfData;//[Offset: 0x340, Size: 16]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0x350, Size: 16]
	FString[] DestroyVehicleFlow;//[Offset: 0x360, Size: 16]
	int UseHelicoperNum;//[Offset: 0x370, Size: 4]
	float UseHelicoperDistance;//[Offset: 0x374, Size: 4]
	int UseDragonBoatNum;//[Offset: 0x378, Size: 4]
	byte CharmRankIndex;//[Offset: 0x37c, Size: 1]
	int DrivingHelicopterTime;//[Offset: 0x380, Size: 4]
	int InHelicopterTime;//[Offset: 0x384, Size: 4]
	int ChangedYearBeastWarmScore;//[Offset: 0x388, Size: 4]
	float GlidingDistance;//[Offset: 0x38c, Size: 4]
	int BreakGlassNum;//[Offset: 0x390, Size: 4]
	int ClimbObstacleNum;//[Offset: 0x394, Size: 4]
	EmoteAnimIData[] EmoteAnimIDataArray;//[Offset: 0x398, Size: 16]
	int BattleshipDestroiedNum;//[Offset: 0x3a8, Size: 4]
	int BattleshipShieldBrokenNum;//[Offset: 0x3ac, Size: 4]
	int CallWingPlaneTimes;//[Offset: 0x3b0, Size: 4]
	int CampToolNum;//[Offset: 0x3b4, Size: 4]
	<uint64,uint16> MutualAid;//[Offset: 0x3b8, Size: 80]
	<uint64,uint16> WhoRescuedMe;//[Offset: 0x408, Size: 80]
	<uint64,uint16> IRescuedWhom;//[Offset: 0x458, Size: 80]
	<uint64,uint16> WhoRevivedMe;//[Offset: 0x4a8, Size: 80]
	<uint64,uint16> IRevivedWhom;//[Offset: 0x4f8, Size: 80]

--------------------------------
Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0, Size: 4]
	Vector BoxLocation;//[Offset: 0x4, Size: 12]
	uint64 BoxStartPlayer;//[Offset: 0x10, Size: 8]

--------------------------------
Class: BuildMaterialData
	int MatID;//[Offset: 0x0, Size: 4]
	int MatCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PVESelfData
	FString[] ZombieKillFlow;//[Offset: 0x0, Size: 16]
	float DamageFromMonsterAmount;//[Offset: 0x10, Size: 4]
	int SurvivalSeconds;//[Offset: 0x14, Size: 4]

--------------------------------
Class: HunterRevivalDataFlow
	HunterRevivalData[] HunterRevivalDatas;//[Offset: 0x0, Size: 16]

--------------------------------
Class: HunterRevivalData
	uint32 RevivalTime;//[Offset: 0x0, Size: 4]
	uint32 RevivalType;//[Offset: 0x4, Size: 4]
	FString RevivalPosStr;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0, Size: 4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	int LayerID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MarkSyncData
	enum Status;//[Offset: 0x0, Size: 1]
	int TypeID;//[Offset: 0x4, Size: 4]
	FString WidgetClassPath;//[Offset: 0x8, Size: 16]
	Vector Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	int InstanceID;//[Offset: 0x30, Size: 4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x38, Size: 32]
	enum MapAdded;//[Offset: 0x58, Size: 1]
	enum SyncDataType;//[Offset: 0x59, Size: 1]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	Property*[] DeltaProperties;//[Offset: 0x60, Size: 16]

--------------------------------
Class: CustomMarkEventData
	float CreateTime;//[Offset: 0x0, Size: 4]
	int CustomState;//[Offset: 0x4, Size: 4]
	FString CustomString;//[Offset: 0x8, Size: 16]
	enum InWhichMap;//[Offset: 0x18, Size: 1]

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Character;//[Offset: 0x8, Size: 8]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x10, Size: 8]

--------------------------------
Class: STExtraWheeledVehicle.STExtraBaseWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0x16b8, Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement4W;//[Offset: 0x16c0, Size: 8]
	PopKartPassDoorAccelerate PopKartPassDoorAccelerate;//[Offset: 0x16c8, Size: 16]
	float PopKartPassDoorAccelerateValidTime;//[Offset: 0x16d8, Size: 4]
	float PopKartAccelerateEffectElapseTime;//[Offset: 0x16dc, Size: 4]
	float PopKartAccelerateEffecTime;//[Offset: 0x16e0, Size: 4]
	int PopKartAccelerateEffectTag;//[Offset: 0x16e4, Size: 4]
	float PopKartWheelDamageFallOff;//[Offset: 0x16e8, Size: 4]
	int PopKartAccelerateTips;//[Offset: 0x16ec, Size: 4]
	int CanNotPopKartPassDoorAccelerateTips;//[Offset: 0x16f0, Size: 4]
	float UsePopKartPassDoorAccelerateThreshold;//[Offset: 0x16f4, Size: 4]
	float UsePopKartPassDoorAccelerateThrottleThreshold;//[Offset: 0x16f8, Size: 4]
	AkAudioEvent* Sfx_PopKartAccelerate;//[Offset: 0x1700, Size: 8]
	bool UseBoundCenterUnderTerrain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1708, Size: 1]
	void ProcessPopKartCameraEffect(bool Enable, STExtraBaseCharacter* BC);// 0x40f6494
	void PopKartJump(float UpSpeed);// 0x40f6410
	void PopKartAccelerate(float AcceleratePercent, float MaxSpeed, float minSpeed);// 0x40f6318
	void OnRep_PopKartAccelerateEffectTags();// 0x40f62fc
	void OnPopKartPassDoorAccelerate();// 0x40f62e0
	void OnEnablePopKartAccelerateEffect(float AccelerateEffecTime);// 0x40f625c
	void OnDisablePopKartAccelerateEffect();// 0x40f6240
	float GetVehicleSpeed();// 0x40f6204
	float GetVehicleSlip();// 0x40f61c8
	Vector GetRotationInputDir();// 0x40f6188
	bool GetIsAllWheelsInAir();// 0x40f6148
	int GetCurrentGear(float minSpeed);// 0x40f60b4
	bool CanUsePopKartPassDoorAccelerate();// 0x40f6074
	void BroadcastClientVehicleWheelDestroyEffect();// 0x40f6058

--------------------------------
Class: STExtraBaseWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0x12a0, Size: 8]
	ParticleSystemComponent* DustPSC;//[Offset: 0x12a8, Size: 8]
	ParticleSystemComponent*[] PSCs;//[Offset: 0x12c8, Size: 16]
	bool bNeedPlayWheelEnterWaterEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1328, Size: 1]
	float PlayEnterWaterEffectSpeed;//[Offset: 0x132c, Size: 4]
	ParticleSystem* WheelContactWaterEffect;//[Offset: 0x1330, Size: 40]
	float WheelEffectUpdateInterval;//[Offset: 0x1358, Size: 4]
	bool bWheelEffectUseSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135c, Size: 1]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0x1368, Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0x1390, Size: 8]
	Vector[] TrailOffsetArray;//[Offset: 0x1398, Size: 16]
	delegate OnVehicleWheelLanded;//[Offset: 0x13b0, Size: 16]
	float MinLandingWheelSuspensionOffset;//[Offset: 0x13c0, Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0x13c8, Size: 16]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0x13e0, Size: 8]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0x13e8, Size: 8]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0x13f0, Size: 8]
	AkAudioEvent* Sfx_Slip;//[Offset: 0x13f8, Size: 8]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0x1400, Size: 8]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0x1408, Size: 8]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0x1410, Size: 8]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x1418, Size: 8]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0x1420, Size: 112]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0x1490, Size: 112]
	AkComponent* AkComp_WheelFriction;//[Offset: 0x1500, Size: 8]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0x1508, Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0x150c, Size: 4]
	float WheelSfxUpdateInterval;//[Offset: 0x1534, Size: 4]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0x153c, Size: 5]
	ParticleSystem* PlumeSmokeTemplate;//[Offset: 0x1550, Size: 8]
	FString LoopSmokeCmpName;//[Offset: 0x1558, Size: 16]
	SoftObjectPath DustConfigClass;//[Offset: 0x1568, Size: 24]
	SoftObjectPath AccelerationPlumeLoopClass;//[Offset: 0x1580, Size: 24]
	SoftObjectPath AccelerationPlumeSmokeClass;//[Offset: 0x1598, Size: 24]
	FName IsStoppedBlackboardKeyName;//[Offset: 0x1610, Size: 8]
	FName TargetLocationBlackboardKeyName;//[Offset: 0x1618, Size: 8]
	FName PathingLocationBlackboardKeyName;//[Offset: 0x1620, Size: 8]
	FName PathInputLocationBlackboardKeyName;//[Offset: 0x1628, Size: 8]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1630, Size: 1]
	float TorqueMultiplierforBoosting;//[Offset: 0x1634, Size: 4]
	int ValidTransformMinWheelNum;//[Offset: 0x1638, Size: 4]
	WheeledVehicleMovementComponent* VehicleMovement;//[Offset: 0x1640, Size: 8]
	bool bEnablePostPhysXTickClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1658, Size: 1]
	VehiclePostPhysxTick PostPhysXTick;//[Offset: 0x1660, Size: 88]
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 InCurrentGear);// 0x40064c4
	void PostLoadMesh();// 0x40064a8
	void OnWheelsLanded();// 0x400648c
	void OnRep_ReplicatedState();// 0x4006470
	void OnRep_DustConfigClass();// 0x4006454
	void OnRep_AccelerationPlumeSmokeClass();// 0x4006438
	void OnRep_AccelerationPlumeLoopClass();// 0x400641c
	void OnGearChanged(bool bIsUp);// 0x4006390
	void MulticastDrawNavigationDebug(float DeltaSeconds, Vector TargetLocation, Vector PathingLocation, Vector PathInputLocation);// 0x400623c
	void MulticastDrawAvoidanceDebugLineTraceSingle(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x40060e8
	void MulticastDrawAvoidanceDebugLineTraceMulti(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x4005f94
	void MulticastDrawAvoidanceDebugBoxTraceSingle(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x4005db4
	void MulticastDrawAvoidanceDebugBoxTraceMulti(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x4005bd4
	float GetVehicleSpeed();// 0x4005b98
	float GetVehicleSlip();// 0x4005b5c
	bool GetIsAllWheelsInAir();// 0x4005b1c
	int GetCurrentGear(float minSpeed);// 0x4005a88

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x30, Size: 16]

--------------------------------
Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 1]
	ParticleSystem* MoveFx;//[Offset: 0x8, Size: 40]
	ParticleSystem* SlipFx;//[Offset: 0x30, Size: 40]
	ParticleSystem* HubFx;//[Offset: 0x58, Size: 40]
	float minSpeed;//[Offset: 0x80, Size: 4]

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x478, Size: 16]
	FName[] ExtraOptBoneNames;//[Offset: 0x488, Size: 16]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	VehicleWheel*[] WheelHubs;//[Offset: 0x4b0, Size: 16]
	byte[] SpecialModifyCollisionList;//[Offset: 0x4c0, Size: 16]
	int[] SpecialModifyShapeIndexList;//[Offset: 0x4d0, Size: 16]
	FName RootBodyName;//[Offset: 0x4e0, Size: 8]
	bool bAllowCollisionWeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x4f0, Size: 8]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0x534, Size: 4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0x538, Size: 4]
	<uint32,CachedWheelData> mapCachedWheelData;//[Offset: 0x550, Size: 80]
	void OnExpoldeStopWheel();// 0x40ee4c0
	void MoveWheelShapeHeight(float Height);// 0x40ee444
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x40ee350
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x40ee1e4
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x40ee0f0
	float GetFinalThrottleInput();// 0x40ee0bc
	float GetDisToLand();// 0x40ee080
	float GetBrakeInput();// 0x40ee04c
	void ForceWheelsRotate(float DriveTorque);// 0x40edfd0
	void ClearDestroyedWheel();// 0x40edfbc

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x318, Size: 144]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x3a8, Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x3c8, Size: 48]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x3f8, Size: 120]
	float AckermannAccuracy;//[Offset: 0x470, Size: 4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b0, Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x1b8, Size: 16]
	float Mass;//[Offset: 0x1c8, Size: 4]
	float DragCoefficient;//[Offset: 0x1cc, Size: 4]
	float ChassisWidth;//[Offset: 0x1d0, Size: 4]
	float ChassisHeight;//[Offset: 0x1d4, Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	float DragArea;//[Offset: 0x1dc, Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x1e0, Size: 4]
	float MaxEngineRPM;//[Offset: 0x1e4, Size: 4]
	float DebugDragMagnitude;//[Offset: 0x1e8, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x1ec, Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x1f8, Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x1fc, Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x200, Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x204, Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x208, Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x20c, Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x210, Size: 4]
	VehicleWheel*[] Wheels;//[Offset: 0x218, Size: 16]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x244, Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x248, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x24c, Size: 4]
	float RVOSteeringStep;//[Offset: 0x250, Size: 4]
	float RVOThrottleStep;//[Offset: 0x254, Size: 4]
	int AvoidanceUID;//[Offset: 0x258, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x25c, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x260, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x264, Size: 4]
	float AvoidanceWeight;//[Offset: 0x268, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x26c, Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x278, Size: 20]
	float RawSteeringInput;//[Offset: 0x290, Size: 4]
	float RawThrottleInput;//[Offset: 0x294, Size: 4]
	float RawBrakeInput;//[Offset: 0x298, Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29c, Size: 1]
	float SteeringInput;//[Offset: 0x2a0, Size: 4]
	float ThrottleInput;//[Offset: 0x2a4, Size: 4]
	float BrakeInput;//[Offset: 0x2a8, Size: 4]
	float HandbrakeInput;//[Offset: 0x2ac, Size: 4]
	float IdleBrakeInput;//[Offset: 0x2b0, Size: 4]
	float StopThreshold;//[Offset: 0x2b4, Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x2b8, Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x2bc, Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x2c4, Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x2cc, Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x2d4, Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc, Size: 1]
	bool EnableCleanDynamicInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	int SleepingFramesToCleanDynamicInterval;//[Offset: 0x30c, Size: 4]
	void SetUseAutoGears(bool bUseAuto);// 0x786e654
	void SetThrottleInput(float Throttle);// 0x786e5d0
	void SetTargetGear(int GearNum, bool bImmediate);// 0x786e510
	void SetSteeringInput(float Steering);// 0x786e48c
	void SetPhysActive(bool bActive);// 0x786e408
	void SetHandbrakeInput(bool bNewHandbrake);// 0x786e37c
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x786e2f4
	void SetGroupsToIgnore(int GroupFlags);// 0x786e278
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x786e1f0
	void SetGroupsToAvoid(int GroupFlags);// 0x786e174
	void SetGearUp(bool bNewGearUp);// 0x786e0f0
	void SetGearDown(bool bNewGearDown);// 0x786e06c
	void SetBrakeInput(float Brake);// 0x786dfe8
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x786df60
	void SetAvoidanceGroup(int GroupFlags);// 0x786dee4
	void SetAvoidanceEnabled(bool bEnable);// 0x786de60
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x786dcb8
	bool GetUseAutoGears();// 0x786dc80
	int GetTargetGear();// 0x786dc4c
	float GetForwardSpeed();// 0x786dc10
	float GetEngineRotationSpeed();// 0x786dbdc
	float GetEngineMaxRotationSpeed();// 0x786dba8
	int GetCurrentGear();// 0x786db74

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 120]
	float MaxRPM;//[Offset: 0x78, Size: 4]
	float MOI;//[Offset: 0x7c, Size: 4]
	float DampingRateFullThrottle;//[Offset: 0x80, Size: 4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x84, Size: 4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x88, Size: 4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 1]
	float FrontRearSplit;//[Offset: 0x4, Size: 4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 4]
	float CentreBias;//[Offset: 0x10, Size: 4]
	float FrontBias;//[Offset: 0x14, Size: 4]
	float RearBias;//[Offset: 0x18, Size: 4]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float GearSwitchTime;//[Offset: 0x4, Size: 4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 4]
	float FinalRatio;//[Offset: 0xc, Size: 4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 16]
	float ReverseGearRatio;//[Offset: 0x20, Size: 4]
	float NeutralGearUpRatio;//[Offset: 0x24, Size: 4]
	float ClutchStrength;//[Offset: 0x28, Size: 4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 4]
	float DownRatio;//[Offset: 0x4, Size: 4]
	float UpRatio;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 8]
	FName TireBoneName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x28, Size: 8]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	Vector Offset;//[Offset: 0x34, Size: 12]
	float ShapeRadius;//[Offset: 0x40, Size: 4]
	float ShapeWidth;//[Offset: 0x44, Size: 4]
	float Mass;//[Offset: 0x48, Size: 4]
	float DampingRate;//[Offset: 0x4c, Size: 4]
	float SteerAngle;//[Offset: 0x50, Size: 4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	TireType* TireType;//[Offset: 0x58, Size: 8]
	TireConfig* TireConfig;//[Offset: 0x60, Size: 8]
	float LatStiffMaxLoad;//[Offset: 0x68, Size: 4]
	float LatStiffValue;//[Offset: 0x6c, Size: 4]
	float LongStiffValue;//[Offset: 0x70, Size: 4]
	float SuspensionForceOffset;//[Offset: 0x74, Size: 4]
	float SuspensionMaxRaise;//[Offset: 0x78, Size: 4]
	float SuspensionMaxDrop;//[Offset: 0x7c, Size: 4]
	float SuspensionNaturalFrequency;//[Offset: 0x80, Size: 4]
	float SuspensionDampingRatio;//[Offset: 0x84, Size: 4]
	byte SweepType;//[Offset: 0x88, Size: 1]
	float MaxBrakeTorque;//[Offset: 0x8c, Size: 4]
	float MaxHandBrakeTorque;//[Offset: 0x90, Size: 4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x98, Size: 8]
	int WheelIndex;//[Offset: 0xa0, Size: 4]
	float DebugLongSlip;//[Offset: 0xa4, Size: 4]
	float DebugLatSlip;//[Offset: 0xa8, Size: 4]
	float DebugNormalizedTireLoad;//[Offset: 0xac, Size: 4]
	float DebugWheelTorque;//[Offset: 0xb4, Size: 4]
	float DebugLongForce;//[Offset: 0xb8, Size: 4]
	float DebugLatForce;//[Offset: 0xbc, Size: 4]
	Vector Location;//[Offset: 0xc0, Size: 12]
	Vector OldLocation;//[Offset: 0xcc, Size: 12]
	Vector Velocity;//[Offset: 0xd8, Size: 12]
	bool IsInAir();// 0x786d31c
	float GetSuspensionOffset();// 0x786d2e8
	float GetSteerAngle();// 0x786d2b4
	float GetRotationAngle();// 0x786d280

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x38, Size: 16]
	float[] TireFrictionVsSlipGraph;//[Offset: 0x50, Size: 16]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 8]
	float FrictionScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 8]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float BrakeInput;//[Offset: 0x8, Size: 4]
	float HandbrakeInput;//[Offset: 0xc, Size: 4]
	int CurrentGear;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 4]
	float FallRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CachedWheelData
	bool WheelsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float WheelSuspensionOffset;//[Offset: 0x4, Size: 4]
	PhysicalMaterial* WheelContactMaterial;//[Offset: 0x8, Size: 8]

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	class UserWidget* SettleAccountUI;//[Offset: 0x3168, Size: 40]
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x3190, Size: 16]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x31a0, Size: 16]
	delegate OnSkillFinishedDelegate;//[Offset: 0x31b0, Size: 16]
	delegate OnSkillStartDelegate;//[Offset: 0x31c0, Size: 16]
	delegate OnScopeOutDelegate;//[Offset: 0x31d0, Size: 16]
	delegate OnScopeInDelegate;//[Offset: 0x31e0, Size: 16]
	delegate OnPlayerGetOnOffBigAirShipDelegate;//[Offset: 0x31f0, Size: 16]
	delegate OnGetOnVehicleDelegate;//[Offset: 0x3200, Size: 16]
	STScreenAppearanceComponent* ScreenAppearanceComp;//[Offset: 0x3210, Size: 8]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x3218, Size: 8]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x3220, Size: 8]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x3228, Size: 8]
	float IndoorCheckDistance;//[Offset: 0x3230, Size: 4]
	float IndoorCheckTime;//[Offset: 0x3234, Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x3238, Size: 4]
	delegate OnPlayerIndoorStateChangedEvent;//[Offset: 0x3240, Size: 16]
	delegate OnPlayerIndoorLowerStateChangedEvent;//[Offset: 0x3250, Size: 16]
	byte ParachuteState;//[Offset: 0x326c, Size: 1]
	byte LastParachuteState;//[Offset: 0x326e, Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x3270, Size: 4]
	float SwimZDir;//[Offset: 0x3274, Size: 4]
	float SwimRotateX_Ex;//[Offset: 0x3278, Size: 4]
	delegate OnParachuteStateChangedDelegate;//[Offset: 0x3280, Size: 16]
	delegate OnParachuteAnimSubInstanceNeedSwitch;//[Offset: 0x3290, Size: 16]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x32a8, Size: 8]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x32b0, Size: 8]
	STParachuteCloudData[] ParachuteCloudAssestList;//[Offset: 0x32b8, Size: 16]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x32c8, Size: 8]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x32d0, Size: 8]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x32d8, Size: 8]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x32e0, Size: 8]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x32e8, Size: 8]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x32f0, Size: 8]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x32f8, Size: 8]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x3300, Size: 192]
	class CameraShake* FreeFallCamShake;//[Offset: 0x33d8, Size: 8]
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e0, Size: 1]
	float VehicleForwardInputRate;//[Offset: 0x33e4, Size: 4]
	float VehicleRightInputRate;//[Offset: 0x33e8, Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33ec, Size: 1]
	bool bHasSendBulletFlyPassEarRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33ed, Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x33f0, Size: 8]
	<byte,bool> WeatherEffectEnabled;//[Offset: 0x33f8, Size: 80]
	bool bIsParachuteAnimBeingAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344b, Size: 1]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3458, Size: 1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3459, Size: 1]
	AngledSightRepData AngledSightRepData;//[Offset: 0x345a, Size: 2]
	delegate OnPlayerHasPossessed;//[Offset: 0x3460, Size: 16]
	int TrySightCorrectionTime;//[Offset: 0x3474, Size: 4]
	float SightCorrectionDelay;//[Offset: 0x3478, Size: 4]
	bool IsStartObserverMainSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347c, Size: 1]
	bool IsStartObserverAngleSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347d, Size: 1]
	int CurrentSightCorrectionTimes;//[Offset: 0x3480, Size: 4]
	bool isRecommendBattery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348d, Size: 1]
	FString[] ShowDebugAnimNodeTypeList;//[Offset: 0x3498, Size: 16]
	float ClientHUDStateCheckFrequency;//[Offset: 0x34ac, Size: 4]
	bool CheckForActivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34b0, Size: 1]
	ActicityDisallowedData[] PreConfiguredActivityDisallowedData;//[Offset: 0x34b8, Size: 16]
	int CurrentActivityID;//[Offset: 0x34c8, Size: 4]
	int CurrentActivityIndex;//[Offset: 0x34cc, Size: 4]
	WarteringAreaCPP* MiniTreeRef;//[Offset: 0x34d0, Size: 8]
	bool bOpenPlatformGameFootEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d8, Size: 1]
	PawnChooserData PawnChooserData;//[Offset: 0x34e0, Size: 136]
	delegate OnSelectedActorDelegate;//[Offset: 0x3568, Size: 16]
	ActivityAnimationRepData ActivityAnimationRepData;//[Offset: 0x3578, Size: 8]
	ActivityAnimationRepData PrevActivityAnimationRepData;//[Offset: 0x3580, Size: 8]
	PartyDanceStateData PlayerPartyDanceState;//[Offset: 0x3590, Size: 32]
	<enum,PartyDance> PartyDancingMontageMap;//[Offset: 0x35b8, Size: 80]
	int DancePartyItemSubType;//[Offset: 0x3608, Size: 4]
	AnimMontage*[] CurrentPlayingPartyDanceAnimation;//[Offset: 0x3610, Size: 16]
	STExtraPlayerCharacter* OtherDancingPartner;//[Offset: 0x3620, Size: 8]
	<enum,ParticleSystem*> DanceParticleMap;//[Offset: 0x3628, Size: 80]
	<enum,Transform> DanceParticleMapOffset;//[Offset: 0x3678, Size: 80]
	<enum,ParticleSystemComponent*> DanceParticleInstances;//[Offset: 0x36c8, Size: 80]
	PlayerRoleCacheFrameData WeaponManagerUsedPlayerRoleCacheFrameData;//[Offset: 0x3718, Size: 16]
	PlayerSecurityInfoCollector* PlayerSecurityInfoCollector;//[Offset: 0x3730, Size: 8]
	delegate OnApplicationactivatedDelegate;//[Offset: 0x3738, Size: 16]
	MaterialBillboardComponent* ReplayEnemyFrameUI;//[Offset: 0x3748, Size: 8]
	StaticMeshComponent* FootMarkComponent;//[Offset: 0x3750, Size: 8]
	float ThresholdHeight;//[Offset: 0x3758, Size: 4]
	float FootMarkScaling;//[Offset: 0x375c, Size: 4]
	Texture* GreenMarkTexture;//[Offset: 0x3768, Size: 8]
	Texture* BlueMarkTexture;//[Offset: 0x3770, Size: 8]
	Texture* RedMarkTexture;//[Offset: 0x3778, Size: 8]
	MaterialInstance* FootMarkMaterialInstance;//[Offset: 0x3780, Size: 8]
	SoftObjectPath GreenMarkPath;//[Offset: 0x3788, Size: 24]
	SoftObjectPath BlueMarkPath;//[Offset: 0x37a0, Size: 24]
	SoftObjectPath RedMarkPath;//[Offset: 0x37b8, Size: 24]
	SoftObjectPath FootMarkMaterialPath;//[Offset: 0x37d0, Size: 24]
	float AreaCheckTime;//[Offset: 0x37f4, Size: 4]
	int AreaEventID;//[Offset: 0x37f8, Size: 4]
	float AreaCheckDis;//[Offset: 0x37fc, Size: 4]
	<int> ReachAreaSet;//[Offset: 0x3800, Size: 80]
	bool bIsBeginAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3854, Size: 1]
	bool bIgonreWeatherEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3855, Size: 1]
	CustomVoiceGroup CustomVoiceChannel;//[Offset: 0x3864, Size: 20]
	bool bIsEnablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3879, Size: 1]
	delegate OnActivityAnimationChanged;//[Offset: 0x3880, Size: 16]
	bool bIsOnBigAirShip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3890, Size: 1]
	FString[] TriggerLevelsClientWhiteList;//[Offset: 0x3898, Size: 16]
	FString[] TriggerLevelsClientBlackList;//[Offset: 0x38a8, Size: 16]
	<FString,TriggerLevelLoadProxy> TriggerLevelWhiteListProxy;//[Offset: 0x38b8, Size: 80]
	<FString,TriggerLevelLoadProxy> TriggerLevelBlackListProxy;//[Offset: 0x3908, Size: 80]
	float CheckTriggerLevelClientWhiteListDelay;//[Offset: 0x3958, Size: 4]
	bool bFlyingUseFreeFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3968, Size: 1]
	CharacterFlyingComponent* FlyingComponent;//[Offset: 0x3970, Size: 8]
	delegate OnPlayerExitParachute;//[Offset: 0x3978, Size: 16]
	bool bEnterDeferredPlaneAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3988, Size: 1]
	bool bAllowLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3989, Size: 1]
	Vector ExtraLauncherTargetLocationForValidation;//[Offset: 0x398c, Size: 12]
	Vector ExtraLauncherStartLocationForValidation;//[Offset: 0x3998, Size: 12]
	float ExtraTargetDist;//[Offset: 0x39a4, Size: 4]
	AnimMontage* ExtraLaunchAnimMontage;//[Offset: 0x39a8, Size: 8]
	bool bExtraLaunching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b0, Size: 1]
	Vector ExtraLaunchTargetLocation;//[Offset: 0x39c0, Size: 12]
	float ExtraLaunchDuration;//[Offset: 0x39cc, Size: 4]
	float ExtraLaunchFallingDamageFactor;//[Offset: 0x39d0, Size: 4]
	float ExtraLaunchLengthValidator;//[Offset: 0x39d4, Size: 4]
	enum TargetStateTypeCacheForReplay;//[Offset: 0x39d8, Size: 1]
	SyncPersionalOPInfo ReplayOPState;//[Offset: 0x39dc, Size: 8]
	void XmasStarHitServer(FString NewParam);// 0x4076b44
	void XmasStarHitMulti(FString Name);// 0x4076a8c
	void UpdateParachuteFallingCameraDistance(float Alpha);// 0x4076a10
	void UpdateIndoorState(bool IsIndoor);// 0x407694c
	void TouchCancelSkillLock();// 0x4076938
	void SyncLatestPlayerStatus(byte LatestParachuteState);// 0x4076888
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x4076804
	void SwitchSightAngledServer(byte Type, bool IsOnlyTurn);// 0x4076700
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x4076638
	void SwitchSightAngled(byte Type, bool IsOnlyTurn);// 0x4076578
	void SwitchCameraToParachuteOpening();// 0x407655c
	void SwitchCameraToParachuteFalling();// 0x4076540
	void SwitchCameraToNormal();// 0x4076524
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float Alpha);// 0x40764a8
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0xffffff8f20d162a8
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x4076494
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0xffffff8f20d162a8
	void StopCamShake();// 0x4076478
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x40763fc
	void StartSwitchColdDown(float SwitchColdDownTime);// 0x4076380
	void StartCamShake();// 0x4076364
	void ShowNightVisionFrame();// 0x4076348
	void ShowFootMark(STExtraVehicleBase* InVehicle);// 0x40762cc
	bool ShouldTriggerEntryEvent(enum EntryEvent);// 0x407623c
	bool ShouldSetRotation();// 0x40761fc
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x4076158
	void SetupExtraLaunch_Stop(bool bClearVelocity);// 0x40760cc
	void SetupExtraLaunch(out const Vector InTargetLocation, float Duration);// 0x4075fec
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x4075f70
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x4075eb8
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x4075db4
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x4075cf8
	void SetParachuteState(byte State);// 0x4075c74
	void SetActorMoveable(bool bMoveable);// 0x4075bf0
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x4075abc
	void ServerRPC_UploadPersionalOp(SyncPersionalOPInfo NewPersonalOP);// 0x40759e4
	void ServerPreSetExtraJump(out const Vector InTargetLocation, out const Vector InStartLocationLocation, bool InAllowLaunch);// 0x40758b0
	void ServerOnApplicationactivated(bool bActive);// 0x40757ec
	void S2C_ExtraLaunchCharacter_ServerForceStop(bool bClearVelocity);// 0x4075768
	void RequestLoadParachuteAnim();// 0x407574c
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x4075688
	bool ReplayCreateEnemyFrameUI();// 0x4075648
	void RemoveTriggerLevelsClientWhiteList(FString LevelName);// 0x4075570
	void RemoveTriggerLevelsClientBlackList(FString LevelName);// 0x4075498
	void ReleaseTrigger(enum Hand);// 0x4075414
	void RefreshAllAvatarVisibilityForBeObservedFinish();// 0x4075400
	void RefreshAllAvatarVisibilityForBeObserved();// 0x40753ec
	void RefreshActivityAnimation();// 0x40753d8
	void PushTrigger(enum Hand);// 0x4075354
	void ProneWithTerrain(Rotator CharacterRotation, bool IsMoving, float Offset, float deap);// 0x4075218
	void PossessedBy(Controller* NewController);// 0x4075194
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0xffffff8f20d162a8
	void ParachuteAnimSubInstanceNeedSwitch(bool bParam);// 0x4075110
	void OnSkillStartDelegate__DelegateSignature(int SkillID);// 0xffffff8f20d162a8
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0xffffff8f20d162a8
	void OnSelectedActorDelegate__DelegateSignature(out const ChooserActorInfo[] ChooserInfos);// 0xffffff8f20d162a8
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0xffffff8f20d162a8
	void OnScopeOutAction(bool InActionStart);// 0x407508c
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0xffffff8f20d162a8
	void OnScopeInAction(bool InActionStart);// 0x4075008
	void OnRep_TriggerLevelsClientWhiteList();// 0x4074ff4
	void OnRep_TriggerLevelsClientBlackList();// 0x4074fe0
	void OnRep_STPlayerController();// 0x4074fcc
	void OnRep_ReplayOPState();// 0x4074fb8
	void OnRep_PlayerPartyDanceState();// 0x4074fa4
	void OnRep_ParachuteState(byte State);// 0x4074f20
	void OnRep_IsEnablePickup();// 0x4074f0c
	void OnRep_ChangePlatformGameFootEffect();// 0x4074ef8
	void OnRep_AngleSightStateChanged();// 0x4074ee4
	void OnRep_ActivityAnimationRepData();// 0x4074ed0
	void OnRank(int Kills, int Rank);// 0x4074e1c
	void OnPlayerGetOnOffBigAirShipDelegate__DelegateSignature(Actor* Ship, bool bOn);// 0xffffff8f20d162a8
	void OnPlayerControllerStateChanged(enum TargetStateType);// 0x4074d98
	void OnPartyDanceAnimationLoaded(AnimMontage* InMontage);// 0x4074ca8
	void OnMiniTreeTriggerServerLogicCPP(FString ExMsg);// 0x4074c1c
	void OnLoadParachuteAnimCompleted();// 0x4074c08
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0xffffff8f20d162a8
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0xffffff8f20d162a8
	void OnFollowStateChange();// 0x4074bec
	void OnBPStateCheckIn();// 0xffffff8f20d162a8
	void OnAvatarEquippedSucc(int SlotType, bool IsEquipped);// 0x4074b2c
	void OnApplicationactivatedDelegate__DelegateSignature(bool bIsActive);// 0xffffff8f20d162a8
	void OnActorSelected(out const ChooserActorInfo[] SelectedActorInfos);// 0x4074a90
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x4074a04
	void MiniTreeTriggerServerLogic_Multicast();// 0x40749a4
	bool IsWeatherEffectEnabled(byte EffectType);// 0x4074914
	bool IsSwitchCoolingDownFinish();// 0x40748f0
	bool IsSelectedMetCondition(Actor* SelectedActor);// 0x4074858
	bool IsReplayViewTarget();// 0x4074818
	bool IsLocalControlOrView();// 0x40747e0
	bool IsIndoor();// 0x40747c4
	bool IsHoldAimButton();// 0xffffff8f20d162a8
	bool IsGrenadeEmpty();// 0x4074784
	void InitPawnChooser();// 0x4074770
	void InitFootMarkColor();// 0x407475c
	void InitAirAttackLocatorComponent();// 0x4074748
	void HideNightVisionFrame();// 0x407472c
	void HideFootMark(STExtraVehicleBase* InVehicle);// 0x40746b0
	void HandlePlayerGetOnOffBigAirShip(Actor* Ship, bool bOn);// 0x40745e8
	void HandleParachuteAnimChanged(enum TargetStateType);// 0x407456c
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x407442c
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x40742ec
	float GetSwimRotateX_Ex();// 0x40742b8
	int GetSkillIndexByActivityID();// 0xffffff8f20d162a8
	AnimationAsset* GetPlayerParachuteAnimByAnimType(byte AnimType);// 0x407422c
	STExtraPlayerController* GetPlayerControllerSafety();// 0x40741f0
	void GetOnVehicleDelegate__DelegateSignature();// 0xffffff8f20d162a8
	enum[] GetDisallowedStates(int ActivityID);// 0xffffff8f20d162a8
	Vector GetBonePos(FName BoneName);// 0x4074160
	Rotator GetAngledSightRotator(STExtraShootWeapon* NewParam);// 0x40740c8
	void FreeFallShakeCam();// 0x40740b4
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x4074038
	void ExtraLaunchCharacter_Stop(bool bClearVelocity);// 0x4073f74
	void ExtraLaunchCharacter_ServerForceStop(bool bClearVelocity);// 0x4073ee8
	void ExtraLaunchCharacter(const Vector InTargetLocation, float Duration);// 0x4073df4
	void EnterParachuteNone();// 0x4073de0
	void EnablePickUp(bool IsEnable);// 0x4073d5c
	void DynamicCreateComponents();// 0x4073d48
	void DumpCharacterAnimBPVars();// 0x4073d34
	void DisableFallingDamageForPerioud(float Duration);// 0x4073cb0
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x4073bb4
	void ClientHUDStateCheck(float DeltaTime);// 0x4073b38
	void ClearHPUI();// 0x4073b1c
	void CheckTriggerLevelClientWhiteList();// 0x4073b00
	bool CanPerformExtraLaunch(out const Vector InTargetLocation);// 0x4073a58
	bool CanAnimInstanceCacheParachuteAnim(STExtraAnimInstance* MyAnimInstance);// 0x40739c8
	Vector CalculateExtraLaunchVelocity();// 0x4073988
	void C2S_ExtraLaunchCharacter_Stop(bool bClearVelocity);// 0x4073904
	void C2S_ExtraLaunchCharacter(out const Vector InTargetLocation, float Duration);// 0x407382c
	bool AllowTriggerActivities(bool bCheckCanReceive);// 0x4073794
	void AddTriggerLevelsClientWhiteList(FString LevelName);// 0x40736bc
	void AddTriggerLevelsClientBlackList(FString LevelName);// 0x40735e4

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0x158, Size: 8]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0x160, Size: 16]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x170, Size: 48]
	CurveVector* NearClipToFOVCurve;//[Offset: 0x1a0, Size: 8]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x1a8, Size: 8]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x1b0, Size: 16]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x1c0, Size: 16]
	<int,ScreenParticleEffectData> CustomScreenEffectMap;//[Offset: 0x1d0, Size: 80]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x220, Size: 16]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x230, Size: 8]
	void StopScreenParticleEffect(byte EffectType);// 0x4106fb8
	void StopScreenEffect(int InKey);// 0x4106f3c
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x4106e70
	void StopAllScreenParticleEffect();// 0x4106e5c
	void StopAllScreenAppearance();// 0x4106e48
	void SetTextureParameterValue(FString AppearanceName, FName ParamName, Texture* tex);// 0x4106d4c
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x4106c94
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x4106b74
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x4106aa4
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x41069ec
	void PlayScreenEffect(int InKey, out const ScreenParticleEffectData InEffectData);// 0x4106880
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x41067a0
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI);// 0x410664c
	void OnPlayScreenEffect_Internal(int InKey);// 0x41065d0
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x4106554
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x41064bc
	void HandleEffectLoadFinish(byte EffectType);// 0x4106440

--------------------------------
Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 16]
	float LifeSpan;//[Offset: 0x10, Size: 4]
	AppearanceMatPeriodData[] PeriodParams;//[Offset: 0x18, Size: 16]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool SetDiffParamIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	AppearanceMatIndoorData[] IndoorParams;//[Offset: 0x30, Size: 16]
	bool LastIndoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x48, Size: 40]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x70, Size: 8]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x78, Size: 8]
	bool bHoldMatRef;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 1]
	MaterialInterface* LoadedMaterial;//[Offset: 0x88, Size: 8]

--------------------------------
Class: AppearanceMatPeriodData
	FName ParamName;//[Offset: 0x0, Size: 8]
	float HalfPeriod;//[Offset: 0x8, Size: 4]
	float CurrentTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AppearanceMatIndoorData
	FName IndoorParamName;//[Offset: 0x0, Size: 8]
	float IndoorRatio;//[Offset: 0x8, Size: 4]
	float prevValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0, Size: 8]

--------------------------------
Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0, Size: 1]
	bool bUseParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	ParticleSystem* ParticleEffect;//[Offset: 0x8, Size: 40]
	FName ParticleParamName;//[Offset: 0x30, Size: 8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x38, Size: 16]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x48, Size: 8]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	float CurrentParamValue;//[Offset: 0x54, Size: 4]
	bool bUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	CurveBase* Curve;//[Offset: 0x60, Size: 40]
	bool bAutoStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	float Duration;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x7e0, Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x810, Size: 48]
	Transform ScopeRelativeTransform;//[Offset: 0x840, Size: 48]
	void SetActivate(bool _IsActivate);// 0x3ece184

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0x120, Size: 4]
	float AALOpenSensibility;//[Offset: 0x124, Size: 4]
	float OpenAALFOV;//[Offset: 0x128, Size: 4]
	int MaxDist;//[Offset: 0x12c, Size: 4]
	int minDist;//[Offset: 0x130, Size: 4]
	int DangerDist;//[Offset: 0x134, Size: 4]
	CameraModifyData ADSModify;//[Offset: 0x140, Size: 352]
	ParticleSystem* FreeArrowParticle;//[Offset: 0x2a0, Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x2c8, Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x2f0, Size: 8]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x2f8, Size: 8]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x300, Size: 8]
	float FixArrowScaleDistance;//[Offset: 0x30c, Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x310, Size: 4]
	float ArrowScalePlus1;//[Offset: 0x314, Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x318, Size: 4]
	float ArrowScalePlus2;//[Offset: 0x31c, Size: 4]
	float BeginCheckDist;//[Offset: 0x320, Size: 4]
	float ShortDist;//[Offset: 0x324, Size: 4]
	byte ChannelType;//[Offset: 0x328, Size: 1]
	Vector TargetLocation;//[Offset: 0x32c, Size: 12]
	void SwitchAALCamera(bool bOpen);// 0x3c487f4
	void SetItemExsist(bool bExsist);// 0x3c48770
	void SetFinalLocation();// 0x3c4875c
	void SetAALFov(bool bOpen);// 0x3c486d8
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x3c485d0
	void OnFreeArrowLoadFinsh();// 0x3c485bc
	void OnCalledActorLoadFinish(Vector Location);// 0x3c4853c
	float GetTargetDistance();// 0x3c48508
	bool GetAALAvaliable();// 0x3c484d0

--------------------------------
Class: CameraModifyData
	FName ModifyName;//[Offset: 0x0, Size: 8]
	float LifeTime;//[Offset: 0x8, Size: 4]
	float TargetArmLength;//[Offset: 0xc, Size: 4]
	SceneComponent* AttachParentComp;//[Offset: 0x10, Size: 8]
	FName AttachSocket;//[Offset: 0x18, Size: 8]
	bool AttachKeepRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	Transform AttachRelativeTransform;//[Offset: 0x30, Size: 48]
	bool bModifyAttachRelativeLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	Vector AttachRelativeLocation;//[Offset: 0x64, Size: 12]
	float RelativeLocationOffsetInterpSpeed;//[Offset: 0x70, Size: 4]
	bool OverrideSocketOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	Vector SocketOffset;//[Offset: 0x78, Size: 12]
	bool bEnableModifySocketOffetZViaPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	Vector2D SocketOffetPitchMapZOffset;//[Offset: 0x88, Size: 8]
	Vector2D SocketOffetPitchRange;//[Offset: 0x90, Size: 8]
	bool OverrideTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	Vector TargetOffset;//[Offset: 0x9c, Size: 12]
	Rotator DesiredRotationOffset;//[Offset: 0xa8, Size: 12]
	bool bIsRotationLimitShouldActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	float ProbeSize;//[Offset: 0xb8, Size: 4]
	bool bModifySpringArmUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 1]
	bool bSpringArmUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 1]
	bool bModifyDoCollisionTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 1]
	bool bModifyEnableCameraLag;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xbc, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xbc, Size: 1]
	bool bModifyEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xbc, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xbc, Size: 1]
	bool bModifyUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbd, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbd, Size: 1]
	float CameraLagSpeed;//[Offset: 0xc0, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0xc4, Size: 4]
	bool bModifyShouldTraceArmOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 1]
	bool bShouldTraceArmOrigin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 1]
	float ArmLengthInterpSpeed;//[Offset: 0xcc, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0xd0, Size: 4]
	float SocketOffsetInterpSpeed;//[Offset: 0xd4, Size: 4]
	float DesiredRotationOffsetInterpSpeed;//[Offset: 0xd8, Size: 4]
	bool bModifyCameraUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 1]
	bool bCameraUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdc, Size: 1]
	float FieldOfView;//[Offset: 0xe0, Size: 4]
	Vector SpringArmRelativeScale3D;//[Offset: 0xe4, Size: 12]
	Transform CameraAdditiveOffset;//[Offset: 0xf0, Size: 48]
	float FieldOfViewInterpSpeed;//[Offset: 0x120, Size: 4]
	Rotator CameraRotOffset;//[Offset: 0x124, Size: 12]
	float CameraRotOffsetInterpSpeed;//[Offset: 0x130, Size: 4]
	enum OperateType;//[Offset: 0x134, Size: 1]
	FName[] ExclusionDataNames;//[Offset: 0x138, Size: 16]
	FName[] SameGroupDataNames;//[Offset: 0x148, Size: 16]

--------------------------------
Class: AirAttackLocatorCalledActor.Actor.Object
	float DestoryTime;//[Offset: 0x3e8, Size: 4]
	float AirAttackDelayTime;//[Offset: 0x3ec, Size: 4]
	int IconID;//[Offset: 0x3f0, Size: 4]
	float AttackAreaRadius;//[Offset: 0x3f4, Size: 4]

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0x900, Size: 16]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 1]
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x3d60fc0

--------------------------------
Class: STParachuteCloudData
	enum WeatherType;//[Offset: 0x0, Size: 1]
	ParticleSystem* CloudFastAsset;//[Offset: 0x8, Size: 8]
	ParticleSystem* CloudSlowAsset;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0, Size: 64]
	SceneComponent* ParentComp;//[Offset: 0x40, Size: 8]
	FName ParentSocketName;//[Offset: 0x48, Size: 8]
	float TargetArmLength;//[Offset: 0x54, Size: 4]
	Vector SocketOffset;//[Offset: 0x58, Size: 12]
	Vector TargetOffset;//[Offset: 0x64, Size: 12]
	Transform RelativeTransform;//[Offset: 0x70, Size: 48]
	float ProbeSize;//[Offset: 0xa0, Size: 4]
	byte ProbeChannel;//[Offset: 0xa4, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	float CameraLagSpeed;//[Offset: 0xac, Size: 4]
	enum PerspectiveMode;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: CameraParams
	Transform RelativeTransform;//[Offset: 0x0, Size: 48]
	float FieldOfView;//[Offset: 0x30, Size: 4]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: AngledSightRepData
	byte AngledSightType;//[Offset: 0x0, Size: 1]
	bool IsOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: ActicityDisallowedData
	enum[] DisallowedStates;//[Offset: 0x0, Size: 16]
	int ActivityID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WarteringAreaCPP.UAERegionActor.Actor.Object
	delegate OnPlayerBeforeAttachedToThisDelegate;//[Offset: 0x468, Size: 16]
	delegate OnPlayerAttachedToThisDelegate;//[Offset: 0x478, Size: 16]
	delegate OnPlayerDettachedFromThisDelegate;//[Offset: 0x488, Size: 16]
	delegate OnBattleResult;//[Offset: 0x498, Size: 16]
	bool bModifyCharacterMeshTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	bool bForceSkipCharacterMeshRotCheckWhenHasThisMiniTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 1]
	bool bCanEnterVehicleWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4aa, Size: 1]
	bool bCanPickUpWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ab, Size: 1]
	BunnyDanceSyncData DanceTimeStamp;//[Offset: 0x4ac, Size: 12]
	float CurrentScale;//[Offset: 0x4b8, Size: 4]
	int CurActTime;//[Offset: 0x4bc, Size: 4]
	PlayerController*[] PlayerCDTable;//[Offset: 0x4c0, Size: 16]
	bool bIsInMasterCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	FName SocketBaseTags;//[Offset: 0x4d8, Size: 8]
	float CurrentCarouselRotationAccel;//[Offset: 0x4e0, Size: 4]
	float CurrentCarouselRotation;//[Offset: 0x4e4, Size: 4]
	int CurrentInteractingPlayerCount;//[Offset: 0x4e8, Size: 4]
	int PlayerNumberForTriggerEvent;//[Offset: 0x4ec, Size: 4]
	SocketAttachmentInternalData[] OccupiedSockets;//[Offset: 0x4f0, Size: 16]
	SocketAttachmentNameTable[] SocketNames;//[Offset: 0x500, Size: 16]
	int AttachedNumber;//[Offset: 0x514, Size: 4]
	<SceneComponent*,int> SkeletalMeshAttachCounter;//[Offset: 0x518, Size: 80]
	SkeletalAnimationSyncData[] SkeletalAnimationSyncData;//[Offset: 0x568, Size: 16]
	SkeletalAnimationSyncData[] PrevSkeletalAnimationSyncData;//[Offset: 0x578, Size: 16]
	Vector[] DropOffLocations;//[Offset: 0x588, Size: 16]
	enum DropOffLocationType;//[Offset: 0x598, Size: 1]
	bool bDropOffRelativeUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 1]
	int AssociatedSkillIndex;//[Offset: 0x59c, Size: 4]
	STExtraBaseCharacter*[] AttachedPlayers;//[Offset: 0x5a0, Size: 16]
	byte IsDayTime;//[Offset: 0x5b0, Size: 1]
	bool bSimAnimUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 1]
	bool ShowRabbitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b2, Size: 1]
	Pawn*[] PawnDoneList;//[Offset: 0x5b8, Size: 16]
	bool bUseSkinWeightProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	bool bUseFixedDropPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 1]
	enum FixedDropOffLocationType;//[Offset: 0x5ca, Size: 1]
	Vector[] FixedRelativeDropPositions;//[Offset: 0x5d0, Size: 16]
	enum InteractiveObjectType;//[Offset: 0x5e0, Size: 1]
	bool bCanBePicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 1]
	bool UseDropFixedPosition();// 0x41ec9d4
	void StopDancing_Multicast(const Actor*[] Players);// 0x41ec91c
	void StartDancing_Multicast(int MontageIndex, const Actor*[] Players);// 0x41ec820
	void SpawnTreeParticleCPP_Multicast(PlayerController* PlayerController);// 0x41ec770
	static void SetupMinimapDisplay(UAEPlayerController* pController, out const LoveTreeData[] treeData);// 0x41ec6a4
	void SetCDFlagByPC(PlayerController* PlayerController);// 0x41ec628
	void ServerDoWaterLogic(PlayerController* PlayerController, FString ExMsg);// 0xffffff8f20d162a8
	void ResetPCByTime(PlayerController* PlayerController, float CDTime);// 0x41ec570
	void OnTimeStampRep(out const BunnyDanceSyncData SyncData);// 0x41ec4d0
	void OnStopDancing(out const Actor*[] Players);// 0x41ec434
	void OnStartDancing(int MontageIndex, out const Actor*[] Players);// 0x41ec358
	void OnSpawnTreeParticleCPP(PlayerController* PlayerController);// 0x41ec2d4
	void OnSkeletalAnimationSyncData(out const SkeletalAnimationSyncData InSkeletalAnimationSyncData);// 0xffffff8f20d162a8
	void OnSkeletalAnimationStateChanged(SceneComponent* AttachedComponent, bool bShouldStartAnimation);// 0xffffff8f20d162a8
	void OnRep_TimeStamp(out const BunnyDanceSyncData SyncData);// 0x41ec23c
	void OnRep_SkeletalAnimationSyncData();// 0x41ec228
	void OnRep_ShowRabbitAnim();// 0x41ec20c
	void OnRep_PawnDoneList();// 0x41ec1f0
	void OnRep_IsDayTime();// 0x41ec1d4
	void OnRep_CurrentScaleCPP();// 0x41ec1c0
	void OnRep_CurrentScaleBP();// 0xffffff8f20d162a8
	void OnRep_CurrentInteractingPlayerCount();// 0x41ec15c
	void OnRep_CurActTimeCPP();// 0x41ec0f8
	void OnRep_CurActTimeBP();// 0xffffff8f20d162a8
	void OnRep_AttachedNumber();// 0x41ec094
	void OnPlayersDance(out const Actor*[] Players, int MontageIndex, float JoinTime);// 0x41ebf70
	void OnPlayerNumberChanged(int Number);// 0xffffff8f20d162a8
	void OnPlayerDettachedFromThisDelegate__DelegateSignature(STExtraCharacter* Player);// 0xffffff8f20d162a8
	void OnPlayerDetached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0xffffff8f20d162a8
	void OnPlayerBeforeAttachedToThisDelegate__DelegateSignature(STExtraCharacter* Player);// 0xffffff8f20d162a8
	void OnPlayerAttachedToThisDelegate__DelegateSignature(STExtraCharacter* Player);// 0xffffff8f20d162a8
	void OnPlayerAttached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0xffffff8f20d162a8
	void OnPCCDCleared(PlayerController* PlayerController);// 0xffffff8f20d162a8
	void OnClientCurrentInteractingPlayerCountChanged();// 0xffffff8f20d162a8
	void OnBattleResult__DelegateSignature();// 0xffffff8f20d162a8
	bool IsDropFixedRelativePositionSetUp();// 0x41ebf30
	bool GetIsPCInCD(PlayerController* PlayerController);// 0x41ebea0
	Vector GetDropFixedRelativePosition(Actor* DropOwner);// 0x41ebe08
	STExtraBaseCharacter*[] GetAttachedPlayers();// 0x41ebd88
	void DispatchPlayerDance_Multicast(const Actor*[] Players, int MontageIndex, float JoinTime);// 0x41ebc4c
	bool CanTriggertEvent(Pawn* CurPawn);// 0xffffff8f20d162a8
	int CacheAssociatedSkillIndex();// 0xffffff8f20d162a8

--------------------------------
Class: UAERegionActor.Actor.Object
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	enum RegionSize;//[Offset: 0x3f1, Size: 1]
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f2, Size: 1]
	void ToggleRegionID(bool bOn);// 0x49fb68c

--------------------------------
Class: BunnyDanceSyncData
	int CurrentIndex;//[Offset: 0x0, Size: 4]
	bool bIsDancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float TimeStamp;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SocketAttachmentInternalData
	FName SocketName;//[Offset: 0x0, Size: 8]
	SceneComponent* SocketBase;//[Offset: 0x8, Size: 8]
	Actor* AttachedPlayer;//[Offset: 0x10, Size: 8]
	Vector OffsetLoc;//[Offset: 0x18, Size: 12]
	Rotator OffsetRot;//[Offset: 0x24, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x30, Size: 8]
	bool bFemaleUseDiffAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	AnimMontage* FemaleAnimMontage;//[Offset: 0x40, Size: 8]

--------------------------------
Class: SocketAttachmentNameTable
	FName SocketName;//[Offset: 0x0, Size: 8]
	Vector OffsetLoc;//[Offset: 0x8, Size: 12]
	Rotator OffsetRot;//[Offset: 0x14, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x20, Size: 8]
	bool bFemaleUseDiffAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	AnimMontage* FemaleAnimMontage;//[Offset: 0x30, Size: 8]

--------------------------------
Class: SkeletalAnimationSyncData
	SceneComponent* SocketBase;//[Offset: 0x0, Size: 8]
	bool Status;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: LoveTreeData
	int ID;//[Offset: 0x0, Size: 4]
	Vector Loc;//[Offset: 0x4, Size: 12]
	float minRate;//[Offset: 0x10, Size: 4]
	float maxRate;//[Offset: 0x14, Size: 4]

--------------------------------
Class: PawnChooserData
	bool MasterSwitchOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString[] EnabledGameModeID;//[Offset: 0x8, Size: 16]
	float DetectAngle;//[Offset: 0x18, Size: 4]
	Rotator RotationOffset;//[Offset: 0x1c, Size: 12]
	class Actor[] Classes;//[Offset: 0x28, Size: 16]
	Vector LocationOffset;//[Offset: 0x38, Size: 12]
	float DetectRaduis;//[Offset: 0x44, Size: 4]
	float TickInterval;//[Offset: 0x48, Size: 4]
	bool EnableDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool IsConsideringVehicleBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	float HorizontalTestRatio;//[Offset: 0x50, Size: 4]
	float VerticalCoverRatio;//[Offset: 0x54, Size: 4]
	bool DEBUGMODE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool isSelectUIShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	ChooserActorInfo[] PreChooserInfos;//[Offset: 0x70, Size: 16]
	bool isDebugTrainingUIBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]

--------------------------------
Class: ChooserActorInfo
	Actor* ChooseActor;//[Offset: 0x0, Size: 8]
	int ChooseDistance;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ActivityAnimationRepData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 8]

--------------------------------
Class: PartyDanceStateData
	enum DanceState;//[Offset: 0x0, Size: 1]
	SoftObjectPath Montage;//[Offset: 0x8, Size: 24]

--------------------------------
Class: PartyDance
	AnimMontage* MontageToPlay;//[Offset: 0x0, Size: 40]
	AnimMontage* MontageToPlay_FPP;//[Offset: 0x28, Size: 40]
	<int,AnimMontage*> ItemMontageMap;//[Offset: 0x50, Size: 80]
	<int,AnimMontage*> ItemMontageMap_FPP;//[Offset: 0xa0, Size: 80]

--------------------------------
Class: PlayerRoleCacheFrameData

--------------------------------
Class: PlayerSecurityInfoCollector.ActorComponent.Object
	int[] EnergyItemIDList;//[Offset: 0x158, Size: 16]
	int[] EnergySpeedUpPhaseIndexList;//[Offset: 0x168, Size: 16]
	bool bEnableDetailFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bEnableDetailHurtFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	ClientCircleFlow CurCircleFlow;//[Offset: 0x180, Size: 264]
	ClientCircleFlow CollectCircleFlow;//[Offset: 0x288, Size: 264]
	HurtFlow CurHurtFlow;//[Offset: 0x390, Size: 288]
	ClientJumpFlow JumpFlow;//[Offset: 0x4b0, Size: 168]
	ClientSecPlayerKillFlow SecPlayerKillFlow;//[Offset: 0x558, Size: 80]
	float ReportJoyStickInterval;//[Offset: 0x6a0, Size: 4]
	bool bFatalDamageNeedResetHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	void StartOnPlane();// 0x3f135d8
	void PlayerCanJump();// 0x3f135c4
	void HandleSyncCircleInfo(int Index);// 0x3f13548
	void HandleCharacterSafeZoneTips(float SafeZoneTime);// 0x3f134cc
	void HandleCharacterCircleWaveOver(int Index);// 0x3f13450
	void HandleCharacterCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index);// 0x3f1334c
	void HandleCharacterBlueCircleRun(float BlueCircleRunTime);// 0x3f132d0
	void HandleCharacterBlueCirclePreWarning(float BlueCirclePreWarningTime);// 0x3f13254
	void HandleCharacterAttrChangedWithDetail(Actor* nowActor, FString AttrName, float ValueDelta, float ResultValue);// 0x3f1311c
	void ExitParachute();// 0x3f13108
	void EnterParachute();// 0x3f130f4
	void EnterJumping();// 0x3f130e0

--------------------------------
Class: ClientCircleFlow
	uint32 ClientStartTime;//[Offset: 0x0, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 16]
	FString PicURL;//[Offset: 0x18, Size: 16]
	uint32 GameStartTime;//[Offset: 0x28, Size: 4]
	uint16 NewCircleBornTime;//[Offset: 0x2c, Size: 2]
	int NewCirclePositionX;//[Offset: 0x30, Size: 4]
	int NewCirclePositionY;//[Offset: 0x34, Size: 4]
	int NewCirclePositionRadius;//[Offset: 0x38, Size: 4]
	int8 NewCircleCount;//[Offset: 0x3c, Size: 1]
	int PlayerPositionX;//[Offset: 0x40, Size: 4]
	int PlayerPositionY;//[Offset: 0x44, Size: 4]
	int PlayerPositionZ;//[Offset: 0x48, Size: 4]
	int PlayerHP;//[Offset: 0x4c, Size: 4]
	uint16 OldCircleMoveTime;//[Offset: 0x50, Size: 2]
	uint16 OldCircleMoveEndTime;//[Offset: 0x52, Size: 2]
	uint16 PlayerOutTime;//[Offset: 0x54, Size: 2]
	byte CirclePoisonCount;//[Offset: 0x56, Size: 1]
	int16 CirclePoisonMin;//[Offset: 0x58, Size: 2]
	int16 CirclePoisonMax;//[Offset: 0x5a, Size: 2]
	int16 CirclePoisonAvg;//[Offset: 0x5c, Size: 2]
	int16 CirclePoisonTotal;//[Offset: 0x5e, Size: 2]
	byte CirclePoisonDrop;//[Offset: 0x60, Size: 1]
	byte CirclePoisonDead;//[Offset: 0x61, Size: 1]
	byte RecoveryCount;//[Offset: 0x62, Size: 1]
	int RecoveryMin;//[Offset: 0x64, Size: 4]
	int RecoveryMax;//[Offset: 0x68, Size: 4]
	int RecoveryTotal;//[Offset: 0x6c, Size: 4]
	int8 EnergyRecoveryCount;//[Offset: 0x70, Size: 1]
	int EnergyRecoveryMin;//[Offset: 0x74, Size: 4]
	int EnergyRecoveryMax;//[Offset: 0x78, Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x7c, Size: 4]
	int8 EnergyStartLv;//[Offset: 0x80, Size: 1]
	uint16 EnergyStartTime;//[Offset: 0x82, Size: 2]
	FString EnergyItemUse;//[Offset: 0x88, Size: 16]
	uint16 EnergyLvTimeInfo;//[Offset: 0x98, Size: 2]
	FString EnergyRunFastTime;//[Offset: 0xa0, Size: 16]
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0xb0, Size: 16]
	int8 EnergyEndLv;//[Offset: 0xc0, Size: 1]
	uint16 EnergyEndTime;//[Offset: 0xc2, Size: 2]
	int PlayerMoveDis;//[Offset: 0xc4, Size: 4]
	uint16 PlayerSpeedMax;//[Offset: 0xc8, Size: 2]
	uint16 PlayerSpeedAvg;//[Offset: 0xca, Size: 2]
	uint16 PlayerCarSpeedMax;//[Offset: 0xcc, Size: 2]
	uint16 PlayerCarSpeedAvg;//[Offset: 0xce, Size: 2]
	int PlayerSquatMoveDis;//[Offset: 0xd0, Size: 4]
	uint16 PlayerSquatMoveTime;//[Offset: 0xd4, Size: 2]
	int PlayerCreepMoveDis;//[Offset: 0xd8, Size: 4]
	uint16 PlayerCreepMoveTime;//[Offset: 0xdc, Size: 2]
	int PlayerRunMoveDis;//[Offset: 0xe0, Size: 4]
	uint16 PlayerRunMoveTime;//[Offset: 0xe4, Size: 2]
	int PlayerDriveMoveDis;//[Offset: 0xe8, Size: 4]
	uint16 PlayerDriveMoveTime;//[Offset: 0xec, Size: 2]
	byte PlayerCar;//[Offset: 0xee, Size: 1]
	uint16 PlayerCameraDistanceMax;//[Offset: 0xf0, Size: 2]
	byte SecCircleFlowID;//[Offset: 0xf2, Size: 1]
	byte AutoAimType;//[Offset: 0xf3, Size: 1]
	uint16 AutoAimTime;//[Offset: 0xf4, Size: 2]
	byte[] MrpcsFlowData;//[Offset: 0xf8, Size: 16]

--------------------------------
Class: HurtFlow
	FString GameSvrId;//[Offset: 0x0, Size: 16]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 16]
	FString OpenID;//[Offset: 0x28, Size: 16]
	int8 PlatID;//[Offset: 0x38, Size: 1]
	int8 AreaID;//[Offset: 0x39, Size: 1]
	FString ZoneID;//[Offset: 0x40, Size: 16]
	uint64 BattleID;//[Offset: 0x50, Size: 8]
	int64 ClientStartTime;//[Offset: 0x58, Size: 8]
	int8 MrpcsFlowcount_;//[Offset: 0x60, Size: 1]
	int[] MrpcsFlow;//[Offset: 0x68, Size: 16]
	FString UserName;//[Offset: 0x78, Size: 16]
	uint64 RoleID;//[Offset: 0x88, Size: 8]
	int8 RoleType;//[Offset: 0x90, Size: 1]
	FString EnemyOpenID;//[Offset: 0x98, Size: 16]
	FString EnemyUserName;//[Offset: 0xa8, Size: 16]
	uint64 EnemyRoleID;//[Offset: 0xb8, Size: 8]
	int EnemyRoleType;//[Offset: 0xc0, Size: 4]
	uint32 HurtTime;//[Offset: 0xc4, Size: 4]
	int HurtType;//[Offset: 0xc8, Size: 4]
	int hittype;//[Offset: 0xcc, Size: 4]
	int DamageStart;//[Offset: 0xd0, Size: 4]
	int DamageReduce;//[Offset: 0xd4, Size: 4]
	int ArmorDef;//[Offset: 0xd8, Size: 4]
	int HPstart;//[Offset: 0xdc, Size: 4]
	int HPEnd;//[Offset: 0xe0, Size: 4]
	int ArmorHPStart1;//[Offset: 0xe4, Size: 4]
	int ArmorHPEnd1;//[Offset: 0xe8, Size: 4]
	int ArmorHPStart2;//[Offset: 0xec, Size: 4]
	int ArmorHPEnd2;//[Offset: 0xf0, Size: 4]
	int CarHPStart;//[Offset: 0xf4, Size: 4]
	int CarHPEnd;//[Offset: 0xf8, Size: 4]
	int FallHeight;//[Offset: 0xfc, Size: 4]
	int HypoxiaTime;//[Offset: 0x100, Size: 4]
	int HypoxiaHurtTotal;//[Offset: 0x104, Size: 4]
	int PlayerKilled;//[Offset: 0x108, Size: 4]
	int ArmorKill;//[Offset: 0x10c, Size: 4]
	int CarKill;//[Offset: 0x110, Size: 4]
	int IfIsAI;//[Offset: 0x114, Size: 4]
	uint32 HurtFlowID;//[Offset: 0x118, Size: 4]

--------------------------------
Class: ClientJumpFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 16]
	FString MapName;//[Offset: 0x18, Size: 16]
	int8 WeatherID;//[Offset: 0x28, Size: 1]
	int64 GameStartTime;//[Offset: 0x30, Size: 8]
	uint32 StartJumpTime;//[Offset: 0x38, Size: 4]
	uint32 EndJumpTime;//[Offset: 0x3c, Size: 4]
	uint32 PlayerJumpTime;//[Offset: 0x40, Size: 4]
	uint32 PlayerOpenTime;//[Offset: 0x44, Size: 4]
	uint32 PlayerLandTime;//[Offset: 0x48, Size: 4]
	int PlayerJumpPositionX;//[Offset: 0x4c, Size: 4]
	int PlayerJumpPositionY;//[Offset: 0x50, Size: 4]
	int PlayerJumpPositionZ;//[Offset: 0x54, Size: 4]
	int PlaneJumpPositionX;//[Offset: 0x58, Size: 4]
	int PlaneJumpPositionY;//[Offset: 0x5c, Size: 4]
	int PlaneJumpPositionZ;//[Offset: 0x60, Size: 4]
	int PlayerLandPositionX;//[Offset: 0x64, Size: 4]
	int PlayerLandPositionY;//[Offset: 0x68, Size: 4]
	int PlayerLandPositionZ;//[Offset: 0x6c, Size: 4]
	uint32 PlayerLandDistance;//[Offset: 0x70, Size: 4]
	uint32 PlayerSpeedMax1;//[Offset: 0x74, Size: 4]
	uint32 PlayerSpeedMax2;//[Offset: 0x78, Size: 4]
	FString GVoiceTeamID;//[Offset: 0x80, Size: 16]
	FString GVoiceRoomID;//[Offset: 0x90, Size: 16]
	int GVoiceTeamMemberID;//[Offset: 0xa0, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0xa4, Size: 4]

--------------------------------
Class: ClientSecPlayerKillFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int8 SecPlayerKillFlowID;//[Offset: 0x8, Size: 1]
	int GunID;//[Offset: 0xc, Size: 4]
	uint32 KilledPlayerKey;//[Offset: 0x10, Size: 4]
	RecoilInfo RecoilInfo;//[Offset: 0x14, Size: 54]

--------------------------------
Class: RecoilInfo
	int16 VerticalRecoilMin;//[Offset: 0x0, Size: 2]
	int16 VerticalRecoilMax;//[Offset: 0x2, Size: 2]
	int16 VerticalRecoilVariation;//[Offset: 0x4, Size: 2]
	int16 VerticalRecoveryModifier;//[Offset: 0x6, Size: 2]
	int16 VerticalRecoveryClamp;//[Offset: 0x8, Size: 2]
	int16 VerticalRecoveryMax;//[Offset: 0xa, Size: 2]
	int16 LeftMax;//[Offset: 0xc, Size: 2]
	int16 RightMax;//[Offset: 0xe, Size: 2]
	int16 HorizontalTendency;//[Offset: 0x10, Size: 2]
	int16 BulletPerSwitch;//[Offset: 0x12, Size: 2]
	int16 TimePerSwitch;//[Offset: 0x14, Size: 2]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	int16 RecoilSpeedVertical;//[Offset: 0x18, Size: 2]
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a, Size: 2]
	int16 RecovertySpeedVertical;//[Offset: 0x1c, Size: 2]
	int16 RecoilValueClimb;//[Offset: 0x1e, Size: 2]
	int16 RecoilValueFail;//[Offset: 0x20, Size: 2]
	int16 RecoilModifierStand;//[Offset: 0x22, Size: 2]
	int16 RecoilModifierCrouch;//[Offset: 0x24, Size: 2]
	int16 RecoilModifierProne;//[Offset: 0x26, Size: 2]
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28, Size: 2]
	int16 BurstEmptyDelay;//[Offset: 0x2a, Size: 2]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int16 ShootSightReturnSpeed;//[Offset: 0x2e, Size: 2]
	int16 AccessoriesVRecoilFactor;//[Offset: 0x30, Size: 2]
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32, Size: 2]
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 2]

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x6a8, Size: 16]
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x672c4f0
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x672c340

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 8]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 8]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	float BaseSizeX;//[Offset: 0x14, Size: 4]
	float BaseSizeY;//[Offset: 0x18, Size: 4]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 8]

--------------------------------
Class: CustomVoiceGroup
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector VoicePosition;//[Offset: 0x4, Size: 12]
	int ID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: TriggerLevelLoadProxy
	int[] DeviceLevels;//[Offset: 0x0, Size: 16]
	int[] DeviceMemoryLevels;//[Offset: 0x10, Size: 16]

--------------------------------
Class: CharacterFlyingComponent.ActorComponent.Object
	float AddForceWeaken;//[Offset: 0x158, Size: 4]
	bool bFlyingSimulateUpdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	float UpdownDeltaZOffset;//[Offset: 0x160, Size: 4]
	float UpdownDeltaZOffsetMax;//[Offset: 0x164, Size: 4]
	enum[] EnterNotAllowedStateList;//[Offset: 0x168, Size: 16]
	enum[] FlyingNotAllowedStateList;//[Offset: 0x178, Size: 16]
	bool bFlyingStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool bFlyingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	Vector_NetQuantize100 FlyingMoveVelocity;//[Offset: 0x19c, Size: 12]
	bool bIgnoreMoveWhenConflictInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	int bAddforceUpOrDown;//[Offset: 0x1ac, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x1c0, Size: 8]
	float HorizontalSpeedModifier;//[Offset: 0x1c8, Size: 4]
	float VerticalSpeedModifier;//[Offset: 0x1cc, Size: 4]
	delegate OnFlyingMoveEnd;//[Offset: 0x1d0, Size: 16]
	bool bSimulateCheckWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bSimulateMoveSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 1]
	bool bAllowSmoothCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2, Size: 1]
	bool bAllowSmoothInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e3, Size: 1]
	float SmoothNetUpdateTime;//[Offset: 0x1e4, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x1e8, Size: 4]
	float MaxAllowPositionDistanceSqAtAutonomousClient;//[Offset: 0x1ec, Size: 4]
	float MaxAllowPositionToleranceAtSimulateClient;//[Offset: 0x1f0, Size: 4]
	float MaxAllowRotationToleranceAtSimulateClient;//[Offset: 0x1f4, Size: 4]
	float FreeFall_InputTriggerThreshold;//[Offset: 0x1f8, Size: 4]
	float FreeFall_AcceForward;//[Offset: 0x1fc, Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0x200, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x204, Size: 4]
	float FreeFall_AcceRight;//[Offset: 0x208, Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0x20c, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x210, Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x214, Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x218, Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x21c, Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x220, Size: 4]
	float DifferencePitchBetweenCharcterAndCamera;//[Offset: 0x224, Size: 4]
	bool bOpenSimulateTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	STFlyingMoveState STReplicateFlyingMoveState;//[Offset: 0x22c, Size: 60]
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, out const Rotator ControlRotation);// 0x3d2c070
	void UpdateFlyingMoveState(float DeltaTime, float ThrottleInput, float SteerInput, out const Rotator ControlRotation);// 0x3d2bf38
	void UpdateFlyingJoystickSensitivity(float FlyingJoystickSensitivity);// 0x3d2bebc
	void UpdateFlyingAccurateMoveComponent(float DeltaTime);// 0x3d2be40
	void SetMaxRightSpeed(float MaxRightSpeed);// 0x3d2bdc8
	void SetMaxForwardSpeed(float MaxForwardSpeed);// 0x3d2bd50
	void ServerUpdateState(float TimeStamp, float InThrottleInput, float InSteeringInput, const Vector ClientLoc, const Rotator ControlRotation);// 0x3d2bba8
	bool ServerStartFlying(float FallingTime, Vector DestPosition);// 0x3d2bad8
	bool ServerPauseFlying();// 0x3d2baa0
	void ServerEnterFlyingState(bool bEnter, bool bSetParachuteAnim);// 0x3d2b9d0
	void PostNetReceiveNewState();// 0x3d2b9bc
	void PlayerAddImpulse(Vector Impulse, bool bVelocityChange);// 0x3d2b8f4
	void PlayerAddForce(bool bAdd, Vector Force);// 0x3d2b824
	void OnRep_ReplicatedFlyingMoveState();// 0x3d2b810
	void OnRep_bFlyingStart();// 0x3d2b7fc
	void OnPreReconnectOnServer();// 0x3d2b7e8
	void OnPlayerExitParachute(STExtraPlayerCharacter* Character);// 0x3d2b76c
	void NotifyServerAddforceUpOrDown(int bUpOrDown);// 0x3d2b6bc
	void NotifyPlayerSimulateUpdown(bool bUpdown, float DeltaZOffset, float DeltaZOffsetMax);// 0x3d2b5bc
	void NotifyPlayerFlyingMove(bool bMove, Vector Velocity, bool bIgnoreWhenConflictInput);// 0x3d2b4a8
	void NotifyPlayerEnterFlying(bool bEnter, float FlyingJoystickSensitivity);// 0x3d2b3e0
	void ModifyFlyingDisabledState(bool bMergeOrRemove, enum[] PawnStateList);// 0x3d2b2c4
	bool IsFlying();// 0x3d2b2a8
	void GMServerStartFlying(float FallingTime, Vector DestPosition);// 0x3d2b1b4
	float GetReplicatedRightInput();// 0x3d2b180
	float GetReplicatedForwardInput();// 0x3d2b14c
	void ClientStartFlying(float FallingTime, Vector StartPosition, Vector DestPosition);// 0x3d2b004
	void ClientPauseFlying();// 0x3d2afa4
	void ClientEnterFlyingState(bool bEnter);// 0x3d2aee0
	void ClientAjustPosition(const Vector ServerLoc, const Rotator ServerRotation);// 0x3d2adf0

--------------------------------
Class: STFlyingMoveState
	bool bIsReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float SteerInput;//[Offset: 0x8, Size: 4]
	Rotator ControlRotation;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize100 Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	Vector_NetQuantize100 Velocity;//[Offset: 0x30, Size: 12]

--------------------------------
Class: SyncPersionalOPInfo
	int UniqueIndex;//[Offset: 0x0, Size: 4]
	byte OPType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PlayerTombBox.Actor.Object
	int DefaultObjectPoolSize;//[Offset: 0x490, Size: 4]
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x498, Size: 16]
	PickUpListWrapperActor* AirdropBoxWrapper;//[Offset: 0x4a8, Size: 8]
	float CustomPickUpRadius;//[Offset: 0x4b0, Size: 4]
	FName tombName;//[Offset: 0x4b8, Size: 8]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x4c8, Size: 8]
	FString TombPlayerUID;//[Offset: 0x4d0, Size: 16]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x4e0, Size: 8]
	int DeadTime;//[Offset: 0x4e8, Size: 4]
	int BoxLifeSpan;//[Offset: 0x4ec, Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	float HandleCollisionDelay;//[Offset: 0x4f4, Size: 4]
	Actor* AttachedActor;//[Offset: 0x4f8, Size: 8]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 1]
	enum BoxType;//[Offset: 0x501, Size: 1]
	uint32 OwnerUniqueID;//[Offset: 0x504, Size: 4]
	FString[] SkinResList;//[Offset: 0x508, Size: 16]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	Character* BoxOwner;//[Offset: 0x520, Size: 8]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x52c, Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x538, Size: 8]
	float TombBoxSkinAnimPlayDelay;//[Offset: 0x540, Size: 4]
	TombboxDeadEffect TombBoxSkinList;//[Offset: 0x548, Size: 160]
	FString TombBoxSkinTable;//[Offset: 0x5e8, Size: 16]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	int DropGroupID;//[Offset: 0x5fc, Size: 4]
	Vector DropStartLocation;//[Offset: 0x600, Size: 12]
	<uint32,byte> CollisionCache;//[Offset: 0x610, Size: 80]
	void SwitchToDeadTombBox();// 0x3f176b0
	void ShowTombBoxSkin();// 0x3f1769c
	void SetVisible(bool IsVisible);// 0x3f1761c
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x3f174c4
	void RegisterToCurveAnimComponent();// 0x3f174a8
	void RegisterModifyItems();// 0x3f17494
	void RecoverCollision();// 0x3f17480
	void PlayTombBoxParticle();// 0x3f17464
	void OnTombBoxResLoaded(int ReqID, FString ResName);// 0x3f1734c
	void OnRespawned();// 0x3f17330
	void OnRep_VisibilityChange();// 0x3f1731c
	void OnRep_UseDropCurve();// 0x3f17308
	void OnRep_TargetPlayer();// 0x3f172f4
	void OnRep_LoadDefaultSkin();// 0x3f172e0
	void OnRep_HandleCollisionDelay();// 0x3f172cc
	void OnRep_DisableCollision();// 0x3f172b8
	void OnRep_ChangeBoxMesh();// 0x3f172a4
	void OnRep_BoxType();// 0x3f17290
	void OnRep_BoxPickupWrapperActor();// 0x3f1727c
	void OnRep_BoxLifeSpan();// 0x3f17268
	void OnRep_AttachmentReplication();// 0x3f1724c
	void OnRep_AttachedActor();// 0x3f17238
	void OnRemoveItemInWrapper();// 0x3f17224
	void OnRecycled();// 0x3f17208
	void OnOwnerPawnDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCaster, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x3f16f98
	void HideDeadTombApparence();// 0x3f16f7c
	int GetUniqueInstanceID();// 0x3f16f48
	int GetTombboxLifespan();// 0x3f16f14
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x3f16edc
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x3f16df4
	void GeneratePlayerBackpackWrappersToGround();// 0x3f16dd8
	void GeneratePlayerBackpackWrappers();// 0x3f16dbc
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x3f16bfc
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x3f16ac4
	void GenerateBoxWrappersByItemsData(out const AirDropBoxGenerateWrapperItemData[] ItemsData, FName BoxName);// 0x3f169dc
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirDropBoxID);// 0x3f168b8
	void CollectPlayerTombBoxDropWrapperList(out PickUpItemData[] OutItemDataList);// 0x3f167c4
	void BPRecoverCollision();// 0xffffff8f20d162a8
	void BPOnRespawned();// 0xffffff8f20d162a8
	void BPOnRecycled();// 0xffffff8f20d162a8
	void ApplyTombSkin(int SkinType);// 0x3f16748

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x730, Size: 16]
	bool bDestroyAfterEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	delegate OnAnyonePickItem;//[Offset: 0x788, Size: 16]
	enum BoxType;//[Offset: 0x798, Size: 1]
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x3efa4ec
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x3efa3dc
	void OnWrapperEmptyDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey);// 0xffffff8f20d162a8
	void OnRep_PickUpDataList();// 0x3efa3c8
	void OnPickUpDataListChangedDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnBoxEmptyDelegate__DelegateSignature(int BoxId);// 0xffffff8f20d162a8
	void OnAnyonePickItemDelegate__DelegateSignature();// 0xffffff8f20d162a8
	PickUpItemData[] GetDataList();// 0x3efa28c
	bool FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount);// 0x3efa180

--------------------------------
Class: PickUpWrapperActor.UAENetActor.Actor.Object
	float CustomPickUpRadius;//[Offset: 0x4c0, Size: 4]
	bool bDestroyStaticMeshComponentDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 1]
	ItemDefineID DefineID;//[Offset: 0x4c8, Size: 24]
	int Count;//[Offset: 0x4e0, Size: 4]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 1]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e6, Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e7, Size: 1]
	FName OwnerName;//[Offset: 0x4e8, Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x4f0, Size: 4]
	Actor* AttachedActor;//[Offset: 0x4f8, Size: 8]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x500, Size: 16]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x514, Size: 4]
	bool bUseCustomTrainingModePickUpColdCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	bool bEnableTrainingModeRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 1]
	float TrainingModeDropLifeTime;//[Offset: 0x51c, Size: 4]
	bool bUseRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x520, Size: 1]
	bool bForceRelevantForNetworkRepays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x528, Size: 1]
	bool bOnRepCountInBP;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x528, Size: 1]
	FString PedestalClassPath;//[Offset: 0x530, Size: 16]
	int DefaultObjectPoolSize;//[Offset: 0x540, Size: 4]
	StaticMeshComponent* RootMeshComp;//[Offset: 0x548, Size: 8]
	bool bPostNetChangeUIDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	SoftObjectPath LightBeamConfig;//[Offset: 0x560, Size: 24]
	Vector LightBeamSpawnRelatedPosition;//[Offset: 0x578, Size: 12]
	ParticleSystemComponent* LightBeamComonent;//[Offset: 0x588, Size: 8]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x5b0, Size: 8]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	DropGroundEffectInfo DropGroundEffectInfo;//[Offset: 0x5c0, Size: 128]
	DropGroundEffectInfo DropTrailEffectInfo;//[Offset: 0x640, Size: 128]
	ParticleSystemComponent* DropGroundEffectComp;//[Offset: 0x6c0, Size: 8]
	float LightBeamLiftSpan;//[Offset: 0x6f8, Size: 4]
	Object* TriggerHost;//[Offset: 0x708, Size: 8]
	Object* TriggerHostActor;//[Offset: 0x710, Size: 8]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 1]
	int DropGroupID;//[Offset: 0x71c, Size: 4]
	Vector DropStartLocation;//[Offset: 0x720, Size: 12]
	void UpdateAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x3efde18
	FString ToDetailString();// 0x3efdd90
	void ShowMesh(bool bShow);// 0x3efdd0c
	void ShowActor();// 0x3efdcf8
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x3efdba0
	void SetDefineID(out const ItemDefineID DID);// 0x3efdb10
	void SetCountOnServerAfterSpawn(int _Count);// 0x3efda94
	void SetActorToGround(Actor* IgnoreActor);// 0x3efd9e4
	void SetActorAttachTo(Actor* TargetActor, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies, FName SocketName);// 0x3efd7e0
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x3efd700
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time, bool bPendingDestroy);// 0x3efd5fc
	void RegisterToCurveAnimComponent();// 0x3efd5e8
	void ReceiveOnRep_Count();// 0xffffff8f20d162a8
	void PickUpWrapperShow__DelegateSignature();// 0xffffff8f20d162a8
	void PickUpWrapperHide__DelegateSignature(float InRefreshTimeStamp);// 0xffffff8f20d162a8
	void PickUpWrapperDestroy__DelegateSignature();// 0xffffff8f20d162a8
	void OnWrapperPickedDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnRep_TearOff();// 0x3efd5cc
	void OnRep_Role();// 0x3efd5b0
	void OnRep_ReplicateMovement();// 0x3efd594
	void OnRep_ReplicatedMovement();// 0x3efd578
	void OnRep_RemoteRole();// 0x3efd55c
	void OnRep_Instigator();// 0x3efd540
	void OnRep_Hidden();// 0x3efd524
	void OnRep_DropGroundEffectInfo();// 0x3efd510
	void OnRep_Count();// 0x3efd4fc
	void OnRep_CanBeDamaged();// 0x3efd4e0
	void OnRep_AttachmentReplication();// 0x3efd4c4
	void OnRep_AttachedActor();// 0x3efd4b0
	void OnPostSetActorHiddenInGame(bool bNewHidden);// 0xffffff8f20d162a8
	void OnLoadDropEffectFinish(DropGroundEffectInfo effectInfo);// 0x3efd2f0
	void OnAsyncLoadLightBeam(SoftObjectPath _softPath, bool bShowParticle);// 0x3efd1cc
	void ModifyData(int _Count);// 0x3efd150
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget, PrimitiveComponent* AttachComponent);// 0x3efd050
	void LoadLightBeam(bool bShowParticle, bool bForceLight);// 0x3efcf80
	int GetNetGUIDOffsetValue();// 0x3efcf4c
	PickUpItemData[] GetDataList();// 0x3efce10
	void ForceNetUpdate();// 0x3efcdf4
	bool FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount);// 0x3efcce8
	bool CheckPickUpDataIsWeapon();// 0x3efccb0
	void BPOnRespawned();// 0xffffff8f20d162a8
	void BPOnRecycled();// 0xffffff8f20d162a8
	void BPDoPickUp(Actor* PickUpOwner, int AdditionalParam, int pickCount);// 0xffffff8f20d162a8
	void AddToRegionBasedNetConsideration();// 0x3efcc9c
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x3efcb14

--------------------------------
Class: UAENetActor.Actor.Object

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x20, Size: 16]
	int InstanceID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: DropGroundEffectInfo
	float GroundEffectLifeSpan;//[Offset: 0x0, Size: 4]
	Transform EffectTransform;//[Offset: 0x10, Size: 48]
	ParticleSystem* GroundEffect;//[Offset: 0x40, Size: 40]
	FString EffectPath;//[Offset: 0x68, Size: 16]
	bool bShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool bEffectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]

--------------------------------
Class: TombboxDeadEffect
	StaticMesh* DefaultStaticMesh;//[Offset: 0x0, Size: 8]
	ParticleSystem* DeadBoxSmokeEffect;//[Offset: 0x8, Size: 8]
	ParticleSystem* DeadBoxTwinkleEffect;//[Offset: 0x10, Size: 8]
	ParticleSystem* DeadBoxEnhancedTwinkleEffect;//[Offset: 0x18, Size: 8]
	<int,ItemTombParticle> ItemEffect;//[Offset: 0x20, Size: 80]
	StaticMesh* DeadBoxMesh;//[Offset: 0x70, Size: 8]
	SkeletalMesh* DeadBoxAnimMesh;//[Offset: 0x78, Size: 8]
	class Object* DeadBoxAnimInstanceClass;//[Offset: 0x80, Size: 8]
	AnimMontage* DeadBoxAnimMontage;//[Offset: 0x88, Size: 8]
	ParticleSystemComponent* SmokeParticle;//[Offset: 0x90, Size: 8]
	ParticleSystemComponent* TwinkleParticle;//[Offset: 0x98, Size: 8]

--------------------------------
Class: ItemTombParticle
	ParticleSystem* SoftPS;//[Offset: 0x0, Size: 40]
	ParticleSystemComponent* PS;//[Offset: 0x28, Size: 8]

--------------------------------
Class: STExtraDamageType.DamageType.Object
	<enum,float> DamageAdditionalRateMap;//[Offset: 0x40, Size: 80]
	<enum,float> AdditionaAbsoluteDamageMap;//[Offset: 0x90, Size: 80]
	<enum,float> MomentumAbsoluteRateMap;//[Offset: 0xe0, Size: 80]
	byte STExtraDamageType;//[Offset: 0x130, Size: 1]
	int DamageTag;//[Offset: 0x134, Size: 4]
	float STExtraDamage;//[Offset: 0x138, Size: 4]
	int STExtraDamageAdditionalParam;//[Offset: 0x13c, Size: 4]
	bool bForceWeaponAttackFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	bool isCanDamageSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 1]
	float DamageScaleOfSelf;//[Offset: 0x144, Size: 4]
	bool isCanDamageTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	float DamageScaleOfTeammate;//[Offset: 0x14c, Size: 4]
	bool bPlayCamersShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool isCanOverrideDamageTeammateByMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	bool bUseNewKillInfoCaculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 1]
	Texture2D* WeaponIcon;//[Offset: 0x158, Size: 8]
	FText KillTemplate;//[Offset: 0x160, Size: 24]
	FText KillDownTemplate;//[Offset: 0x178, Size: 24]
	FText DamageName;//[Offset: 0x190, Size: 24]
	FText LocalCauserKillInfoTemplate;//[Offset: 0x1a8, Size: 24]
	FText LocalVictimKillInfoTemplate;//[Offset: 0x1c0, Size: 24]
	FText CauserTeammateKillInfoTemplate;//[Offset: 0x1d8, Size: 24]
	FText VictimTeammateKillInfoTemplate;//[Offset: 0x1f0, Size: 24]
	int VictimerTlogStatisticsID;//[Offset: 0x208, Size: 4]
	int CauserTlogStatisticsID;//[Offset: 0x20c, Size: 4]
	bool bIsVictimerCaculateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	bool bIsCauserCaculateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 1]
	FString GetVictimName(UAECharacter* causer, UAECharacter* Victim, Controller* CauserInstigator, FString NormalName);// 0x403d744
	<enum,float> GetMomentumAbsoluteRateMap(Actor* InAttacker);// 0x403d58c
	void GetKillOrPutDownMessageData(out const ClientFatalDamageRecordData Data, out KillOrPutDownMessage Message, bool bIsLocalCauser, bool bIsLocalVictim, bool bIsVictimTeammate, bool bIsCauserTeammate);// 0x403d298
	FString GetIsTeammateVictim(FString CauserName, FString VictimeName, FString DamageResult);// 0x403d124
	FString GetIsTeammateCauser(FString CauserName, FString VictimeName, FString DamageResult);// 0x403cfb0
	FString GetIsLocalVictim(FString CauserName, FString DamageResult);// 0x403ce84
	FString GetIsLocalCauser(FString VictimName, FString DamageResult);// 0x403cd58
	<enum,float> GetDamageAdditionalRateMap(Actor* InAttacker);// 0x403cba0
	FString GetCauserName(UAECharacter* causer, UAECharacter* Victim, Controller* CauserInstigator, FString NormalName);// 0x403ca0c
	<enum,float> GetAdditionaAbsoluteDamageMap(Actor* InAttacker);// 0x403c854

--------------------------------
Class: AirDropBoxGenerateWrapperItemData
	class PickUpWrapperActor* WrapperClass;//[Offset: 0x0, Size: 8]
	int Count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraAnimInstance.STExtraAnimInstanceBase.SubAnimInstance_Event.SubAnimInstanceBase.AnimInstanceBase.AnimInstance.Object
	Rotator C_SightAngledRotOffset;//[Offset: 0x15cc, Size: 12]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d8, Size: 1]
	bool C_IsPickingUpItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d9, Size: 1]
	Rotator SwimRotate;//[Offset: 0x15dc, Size: 12]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e8, Size: 1]
	float C_HoldingShieldAlpha;//[Offset: 0x15ec, Size: 4]
	AnimMontage* C_FreeFallingStartMontage;//[Offset: 0x15f0, Size: 8]
	AnimMontage* C_PickUPMontage;//[Offset: 0x15f8, Size: 8]
	AnimMontage* C_RevivalMontage;//[Offset: 0x1600, Size: 8]
	Rotator OwnerAimRotation;//[Offset: 0x1608, Size: 12]
	Rotator LastOwnerAimRotation;//[Offset: 0x1614, Size: 12]
	MutexPair[] mutexByList;//[Offset: 0x1620, Size: 16]
	float StandbyAnimTimeInterval_Config;//[Offset: 0x1634, Size: 4]
	enum[] StandbyAnimPawnStateExclusion;//[Offset: 0x1640, Size: 16]
	<int,AnimTypeArray> StandyAnimType;//[Offset: 0x1650, Size: 80]
	enum[] StandbyGameModeType;//[Offset: 0x16a0, Size: 16]
	enum[] AllowStandbyAnimWeaponTypes;//[Offset: 0x16b0, Size: 16]
	int CurMapID;//[Offset: 0x16c8, Size: 4]
	AnimMontage* CurStandbyAnimMontage;//[Offset: 0x16d0, Size: 8]
	int[] DanceEmoteIdArray;//[Offset: 0x16d8, Size: 16]
	void TryPlayStandbyAnim();// 0x3fceb64
	void SetVelocityZFactor(float NewFactor);// 0x3fceae8
	void PostCacheParamList(float DeltaSeconds);// 0xffffff8f20d162a8
	void OnEmoteAnimFinished(int EmoteIndex, int StopReason);// 0x3fcea34
	void InterrupteStandbyAnim(STExtraBaseCharacter* SelfRef);// 0x3fce9b8
	void DumpAllProperties();// 0x3fce9a4
	void DumpAllAnimInstancesInThisWorld();// 0x3fce990
	PlayerAnimList CacheAnimVarList();// 0x3fce940
	void AsyncAnimStandbyCallback(AnimationAsset* retAsset);// 0x3fce8c4

--------------------------------
Class: STExtraAnimInstanceBase.SubAnimInstance_Event.SubAnimInstanceBase.AnimInstanceBase.AnimInstance.Object
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	AnimMontage* C_MontageRescue;//[Offset: 0x528, Size: 8]
	enum AnimInstanceType;//[Offset: 0x530, Size: 1]
	byte LastPoseTypeCache;//[Offset: 0x531, Size: 1]
	STExtraAnimMontageData[] MontagePlayQueue;//[Offset: 0x548, Size: 16]
	STExtraAnimFM_SubAnimMapReplacer_Weapon SubAnimReplacer_Weapon;//[Offset: 0x568, Size: 104]
	STExtraAnimFM_Character CharacterParam;//[Offset: 0x5d0, Size: 264]
	STExtraAnimFM_Move MoveParam;//[Offset: 0x6d8, Size: 360]
	STExtraAnimFM_Character_Movement MovementParam;//[Offset: 0x840, Size: 264]
	STExtraAnimFM_Character_Swim SwimParam;//[Offset: 0x948, Size: 128]
	STExtraAnimFM_Weapon WeaponParam;//[Offset: 0x9c8, Size: 152]
	STExtraAnimFM_Weapon_Aim AimParam;//[Offset: 0xa60, Size: 224]
	STExtraAnimFM_Weapon_GunOperation GunOperationParam;//[Offset: 0xb40, Size: 352]
	STExtraAnimFM_Weapon_Grenade GrenadeParam;//[Offset: 0xca0, Size: 80]
	STExtraAnimFM_IK IKParam;//[Offset: 0xcf0, Size: 296]
	STExtraAnimFM_Foregrip ForegripParam;//[Offset: 0xe18, Size: 208]
	STExtraAnimFM_ADS ADSParam;//[Offset: 0xee8, Size: 352]
	STExtraAnimFM_Parachute ParachuteParam;//[Offset: 0x1048, Size: 112]
	STExtraAnimFM_Character_Hurt HurtParam;//[Offset: 0x10b8, Size: 128]
	STExtraAnimFM_Character_Death DeathParam;//[Offset: 0x1138, Size: 80]
	STExtraAnimFM_Character_EyeWatch EyeWatchParam;//[Offset: 0x1188, Size: 200]
	STExtraAnimFM_Character_Hair HairParam;//[Offset: 0x1250, Size: 112]
	STExtraAnimFM_Shoveling ShovelingParam;//[Offset: 0x12c0, Size: 520]
	STExtraAnimFM_WeaponDrop WeaponDropParam;//[Offset: 0x14c8, Size: 152]
	STExtraAnimFM_LOD LODParam;//[Offset: 0x1560, Size: 88]
	AnimMontage* C_MontageImpactDead_Fly;//[Offset: 0x15b8, Size: 8]
	float StopDeathAnimSpeedThreshold;//[Offset: 0x15c0, Size: 4]
	float StopDeathAnimCheckDelay;//[Offset: 0x15c4, Size: 4]
	void PlayPostReloadWeaponAnimation(int RemainBulletNumToReload);// 0x3fd0428
	void PlayPlayerDeadAnimation();// 0x3fd0414
	void OnRespawned_BP();// 0x3fd03f8
	void OnRecycled_BP();// 0x3fd03dc
	void OnPawnDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x3fd0174
	void HandlePlayerWeaponStateChanged(enum NewState);// 0x3fd00f0
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x3fd0030
	void HandlePlayerPickUp(STExtraBaseCharacter* SelfRef);// 0x3fcffac
	void HandlePlayerEnterRescueState(bool bBeginRescueing);// 0x3fcff20
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0xffffff8f20d162a8
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, byte MontagePlayType, float StartPosition, bool PlayDirectly);// 0x3fcfd1c
	void HandlePlayerAnimMontageJumpSectionDelegate(FName StartSection, AnimMontage* MontageToPlay);// 0x3fcfc60
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float BlendTime);// 0x3fcfae0
	byte GetRole();// 0x3fcfaac

--------------------------------
Class: SubAnimInstance_Event.SubAnimInstanceBase.AnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x518, Size: 8]
	void RefreshAnimList_BP();// 0xffffff8f20d162a8
	void RefreshAnimList();// 0x410a2d8
	void HandlePlayerWeaponStateChanged_BP(enum NewState);// 0xffffff8f20d162a8
	void HandlePlayerWeaponStateChanged(enum NewState);// 0x410a254
	void HandlePlayerPoseChange_BP(byte LastPose, byte NewPose);// 0xffffff8f20d162a8
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x410a194
	void HandleOwnerAnimEvent_BP(FName EventMsg);// 0xffffff8f20d162a8
	void HandleOwnerAnimEvent(FName EventMsg);// 0x410a110

--------------------------------
Class: SubAnimInstanceBase.AnimInstanceBase.AnimInstance.Object

--------------------------------
Class: AnimInstanceBase.AnimInstance.Object
	bool bUpdateWhenNotRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x445, Size: 1]
	SubAnimUpdateCondition*[] UpdateAnimConditions;//[Offset: 0x448, Size: 16]
	FString[] FunctionModuleWhenNotRender;//[Offset: 0x458, Size: 16]
	bool IsSyncGroupRoot_Toggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	bool IsFunctionModuleRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 1]
	STExtraCharacter* C_Character;//[Offset: 0x4b0, Size: 8]
	STExtraBaseCharacter* C_BaseCharacter;//[Offset: 0x4b8, Size: 8]
	STExtraSimpleCharacter* C_SimpleCharacter;//[Offset: 0x4c0, Size: 8]
	<AnimationAsset*,AnimationAsset*> AnimRefMap;//[Offset: 0x4c8, Size: 80]
	void UpdateWhenOnlyTickMontage_BP(float DeltaSeconds);// 0xffffff8f20d162a8
	void UpdateWhenOnlyTickMontage(float DeltaSeconds);// 0x3c5f674
	void UpdateFuntionModuleByName(float DeltaSeconds, FString FunctionModuleName, bool bSyncUpdate);// 0x3c5f500
	void UpdateFuntionModule_Async(float DeltaSeconds);// 0x3c5f47c
	void UpdateFuntionModule(float DeltaSeconds);// 0x3c5f3f8
	void UpdateDirtyFunctionModule_Remove(float DeltaSeconds);// 0x3c5f374
	void UpdateDirtyFunctionModule_Add(float DeltaSeconds);// 0x3c5f2f0
	void UpdateDirtyFunctionModule(float DeltaSeconds);// 0x3c5f26c
	void UpdateAnimInstanceAnimList(bool bUpdate);// 0x3c5f1e0
	void UnInitFunctionModule();// 0x3c5f1cc
	void ResetSubAnimNodeAnimClass_BP(FName SubInstanceSlotName);// 0x3c5f150
	void ResetAllSubAnimNode();// 0x3c5f134
	AnimInstance* ReplaceSubAnimNodeAnimClass_BP(FName SubInstanceSlotName, class AnimInstance NewAnimClass);// 0x3c5f070
	void RecycleFunctionModule();// 0x3c5f054
	void OnRespawned_BP();// 0xffffff8f20d162a8
	void OnRecycled_BP();// 0xffffff8f20d162a8
	void InitFunctionModule();// 0x3c5f040
	void HandleUpdateAnimAssetEvent(byte UpdateAnimAssetEvent);// 0x3c5efbc
	STExtraSimpleCharacter* GetOwnerSimpleCharacter();// 0x3c5ef88
	STExtraCharacter* GetOwnerCharacter();// 0x3c5ef54
	STExtraBaseCharacter* GetOwnerBaseCharacter();// 0x3c5ef20
	void ForceRemoveDirtyFunctionModule();// 0x3c5ef04
	void ForceInitFunctionModule();// 0x3c5eee8
	void EmptyRemoveFMList();// 0x3c5eecc
	void EmptyFunctionModule();// 0x3c5eeb0
	void EmptyFMList();// 0x3c5ee94
	void EmptyAddFMList();// 0x3c5ee78
	void CollectFunctionModule();// 0x3c5ee5c
	void ClearFunctionModule();// 0x3c5ee40

--------------------------------
Class: MutexPair
	AnimMontage* Condition;//[Offset: 0x0, Size: 8]
	AnimMontage* mutTarget;//[Offset: 0x8, Size: 8]

--------------------------------
Class: AnimTypeArray
	byte[] DynamicLoadingAnimType;//[Offset: 0x0, Size: 16]

--------------------------------
Class: STExtraAnimMontageData
	AnimMontage* Montage;//[Offset: 0x0, Size: 8]

--------------------------------
Class: STExtraAnimFM_SubAnimMapReplacer_Weapon.AnimFunctionModule
	bool bSubAnimIsLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	WeaponAnimTypeConfig CurrentWeaponAnimUID;//[Offset: 0x50, Size: 24]

--------------------------------
Class: AnimFunctionModule
	bool bIsPendingKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool EnableUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool EnableAsyncUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool EnableOverrideNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	int UpdatePriorty;//[Offset: 0x14, Size: 4]
	bool bHasInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	AnimInstanceBase* OwnerAnimInstance;//[Offset: 0x1c, Size: 8]
	ScriptStruct* TheStruct;//[Offset: 0x28, Size: 8]
	int LastCachedNeedUpdate;//[Offset: 0x34, Size: 4]
	bool CheckRefSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool CachedNeedAsyncUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool CachedNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	AnimInstanceBase* CachedUpdateAnimInstance;//[Offset: 0x40, Size: 8]
	bool bWriteable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: WeaponAnimTypeConfig
	int UID_Runtime;//[Offset: 0x0, Size: 4]
	SubAnimTypeConfig WeaponSubAnimType_Aim;//[Offset: 0x4, Size: 1]
	SubAnimTypeConfig WeaponSubAnimType_Peek;//[Offset: 0x5, Size: 1]
	SubAnimTypeConfig WeaponSubAnimType_Fire;//[Offset: 0x6, Size: 1]
	AnimMapData[] SubAnimCustomList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: SubAnimTypeConfig
	enum SubAnimType;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimMapData
	class AnimInstance* AnimInstance;//[Offset: 0x0, Size: 40]
	FName SubAnimSlotName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: STExtraAnimFM_Character.AnimFunctionModule
	float PLAYER_TURN_RESET_TIME;//[Offset: 0x90, Size: 4]
	bool b_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	Rotator r_ViewRotation;//[Offset: 0x98, Size: 12]
	Rotator r_OwnerRotation;//[Offset: 0xa4, Size: 12]
	Rotator r_ControlRotation;//[Offset: 0xb0, Size: 12]
	byte e_LastPoseType;//[Offset: 0xbc, Size: 1]
	byte e_PoseType;//[Offset: 0xbd, Size: 1]
	float f_PoseChangeCD;//[Offset: 0xc0, Size: 4]
	bool b_IsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	bool b_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 1]
	float f_CharacterYawRotateRate;//[Offset: 0xc8, Size: 4]
	float f_CharacterYawRotateRate_Reverse;//[Offset: 0xcc, Size: 4]
	AnimSequence* as_TurnAnim;//[Offset: 0xd0, Size: 8]
	bool b_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool b_IsTurning_PlayAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool b_IsOnControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	bool b_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool b_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool b_WaistFollowingController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	Rotator r_DeltaRotationYawBetweenControlAndOwner;//[Offset: 0xe0, Size: 12]
	Rotator r_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0xec, Size: 12]
	bool b_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]

--------------------------------
Class: STExtraAnimFM_Move.STExtraAnimFM_EventInterface.AnimFunctionModule
	float ReloadMoveSpeed;//[Offset: 0x90, Size: 4]
	float MoveDirParachuteLerpSpeed;//[Offset: 0x94, Size: 4]
	float MoveDirNormalLerpSpeed;//[Offset: 0x98, Size: 4]
	float SwitchPoseTransTime;//[Offset: 0x9c, Size: 4]
	float ScopeVelocityInterpSpeed;//[Offset: 0xa0, Size: 4]
	float SwitchPoseMaxTime;//[Offset: 0xa4, Size: 4]
	byte e_MovementMode;//[Offset: 0xa8, Size: 1]
	byte e_LastMovementMode;//[Offset: 0xa9, Size: 1]
	Vector v_MoveVelocity;//[Offset: 0xac, Size: 12]
	Vector v_MoveDir;//[Offset: 0xb8, Size: 12]
	float MovementBlendTime;//[Offset: 0xc4, Size: 4]
	bool b_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool b_IsFlyingWithoutParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool b_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	bool b_SwitchingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 1]
	float SwitchPoseMaxTimeCounter;//[Offset: 0xcc, Size: 4]
	BlendSpace* bs_MovementBSCache_Stand;//[Offset: 0xd0, Size: 8]
	BlendSpace* bs_MovementBSCache_Crouch;//[Offset: 0xd8, Size: 8]
	BlendSpace* bs_MovementBSCache_Prone;//[Offset: 0xe0, Size: 8]
	AnimSequence* as_SwitchPose_Stand_To_Crouch;//[Offset: 0xe8, Size: 8]
	AnimSequence* as_SwitchPose_Stand_To_Prone;//[Offset: 0xf0, Size: 8]
	AnimSequence* as_SwitchPose_Crouch_To_Stand;//[Offset: 0xf8, Size: 8]
	AnimSequence* as_SwitchPose_Crouch_To_Prone;//[Offset: 0x100, Size: 8]
	AnimSequence* as_SwitchPose_Prone_To_Stand;//[Offset: 0x108, Size: 8]
	AnimSequence* as_SwitchPose_Prone_To_Crouch;//[Offset: 0x110, Size: 8]
	BlendSpace* bs_MovementBSCache_Stand_Dest;//[Offset: 0x118, Size: 8]
	BlendSpace* bs_MovementBSCache_Crouch_Dest;//[Offset: 0x120, Size: 8]
	BlendSpace* bs_MovementBSCache_Prone_Dest;//[Offset: 0x128, Size: 8]
	AnimSequence* as_SwitchPose_Stand_To_Crouch_Dest;//[Offset: 0x130, Size: 8]
	AnimSequence* as_SwitchPose_Stand_To_Prone_Dest;//[Offset: 0x138, Size: 8]
	AnimSequence* as_SwitchPose_Crouch_To_Stand_Dest;//[Offset: 0x140, Size: 8]
	AnimSequence* as_SwitchPose_Crouch_To_Prone_Dest;//[Offset: 0x148, Size: 8]
	AnimSequence* as_SwitchPose_Prone_To_Stand_Dest;//[Offset: 0x150, Size: 8]
	AnimSequence* as_SwitchPose_Prone_To_Crouch_Dest;//[Offset: 0x158, Size: 8]
	byte CacheLastPose;//[Offset: 0x160, Size: 1]
	byte CacheNewPose;//[Offset: 0x161, Size: 1]

--------------------------------
Class: STExtraAnimFM_EventInterface.AnimFunctionModule

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x140, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	float AnimLength;//[Offset: 0x84, Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x88, Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa0, Size: 4]
	byte NotifyTriggerMode;//[Offset: 0xa4, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xa8, Size: 16]
	int SampleIndexWithMarkers;//[Offset: 0xb8, Size: 4]
	BlendSample[] SampleData;//[Offset: 0xc0, Size: 16]
	EditorElement[] GridSamples;//[Offset: 0xd0, Size: 16]
	BlendParameter BlendParameters;//[Offset: 0xe0, Size: 32]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 4]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 8]
	Vector SampleValue;//[Offset: 0x8, Size: 12]
	float RateScale;//[Offset: 0x14, Size: 4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 4]
	float Weights;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 16]
	float Min;//[Offset: 0x10, Size: 4]
	float Max;//[Offset: 0x14, Size: 4]
	int GridNum;//[Offset: 0x18, Size: 4]

--------------------------------
Class: STExtraAnimFM_Character_Movement.AnimFunctionModule
	float f_FallingVelocityZFactor;//[Offset: 0xa0, Size: 4]
	float f_FallingSpeedInScoping_UnLockIK;//[Offset: 0xa4, Size: 4]
	Vector v_MoveVelocityInWorldSpace;//[Offset: 0xa8, Size: 12]
	float MoveVelocityLength2D;//[Offset: 0xb4, Size: 4]
	bool b_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool b_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	bool b_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 1]
	byte e_JumpType;//[Offset: 0xbb, Size: 1]
	bool b_IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	bool b_MovementUpBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	bool b_EnableMovementUpBodyOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 1]
	float b_WalkAdditiveAlpha;//[Offset: 0xc0, Size: 4]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 1]
	bool b_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 1]
	float f_MoveVelocity_X_FallingZFactor;//[Offset: 0xc8, Size: 4]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool b_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	float f_MaxFallingSpeed;//[Offset: 0xd0, Size: 4]
	BlendSpace1D* bs_MovementUpBodyOverride;//[Offset: 0xd8, Size: 8]
	BlendSpace1D* bs_FallingBS;//[Offset: 0xe0, Size: 8]
	AnimSequence* as_JumpStart;//[Offset: 0xe8, Size: 8]
	AnimSequence* as_LandLight;//[Offset: 0xf0, Size: 8]
	AnimSequence* as_LandHeavy;//[Offset: 0xf8, Size: 8]
	CurveFloat* C_FallingIKCurve;//[Offset: 0x100, Size: 8]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]

--------------------------------
Class: STExtraAnimFM_Character_Swim.AnimFunctionModule
	float f_SwimSpeed;//[Offset: 0x60, Size: 4]
	bool b_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float f_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0x68, Size: 4]
	float f_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0x6c, Size: 4]
	BlendSpace* bs_SwimBS_Up;//[Offset: 0x70, Size: 8]
	BlendSpace* bs_SwimBS_Down;//[Offset: 0x78, Size: 8]

--------------------------------
Class: STExtraAnimFM_Weapon.AnimFunctionModule
	bool b_HasWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	byte e_WeaponType;//[Offset: 0x71, Size: 1]
	enum e_WeaponTypeNew;//[Offset: 0x72, Size: 1]
	byte e_WeaponHoldType;//[Offset: 0x73, Size: 1]
	enum e_WeaponState;//[Offset: 0x74, Size: 1]
	byte e_LastWeaponType;//[Offset: 0x75, Size: 1]
	bool b_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]
	bool b_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 1]
	bool b_IsUsingFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool b_IsAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool b_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]
	bool b_IsMeleeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 1]
	bool b_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	AnimMontage* ReloadMontage;//[Offset: 0x80, Size: 8]
	AnimMontage* PreFireMontage;//[Offset: 0x88, Size: 8]
	AnimSequence* as_IdleAddtive;//[Offset: 0x90, Size: 8]

--------------------------------
Class: STExtraAnimFM_Weapon_Aim.STExtraAnimFM_EventInterface.AnimFunctionModule
	Rotator r_ScopeAimOffsetStand;//[Offset: 0xb0, Size: 12]
	bool b_IsScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	bool b_IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	bool b_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 1]
	byte e_SightType;//[Offset: 0xbf, Size: 1]
	bool b_ScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	float f_RecoilKickADS;//[Offset: 0xc4, Size: 4]
	bool b_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	float f_SightSlowBlendStandBaseAlpha;//[Offset: 0xcc, Size: 4]
	bool b_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	AimOffsetBlendSpace* bs_AimBlendSpace;//[Offset: 0xd8, Size: 8]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: STExtraAnimFM_Weapon_GunOperation.AnimFunctionModule
	int WeaponReloadSlotIndex;//[Offset: 0xa0, Size: 4]
	float f_FireAlpha;//[Offset: 0xa4, Size: 4]
	bool b_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	float f_WeaponState_EQ_Reload;//[Offset: 0xac, Size: 4]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool b_ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	float f_ReloadAnimAdditive_Alpha;//[Offset: 0xb4, Size: 4]
	float f_ReloadAnimAdditive_Alpha_SpeedIn;//[Offset: 0xb8, Size: 4]
	float f_ReloadAnimAdditive_Alpha_SpeedOut;//[Offset: 0xbc, Size: 4]
	float f_HandleFolderFactor;//[Offset: 0xc0, Size: 4]
	float f_ProneHandleAlpha;//[Offset: 0xc4, Size: 4]
	bool b_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool b_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	byte WeaponReloadMethod;//[Offset: 0xca, Size: 1]
	bool b_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 1]
	Rotator r_RecoilADSRotation;//[Offset: 0xcc, Size: 12]
	bool b_IsBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	<enum,int> RandomWeaponAnimSectionIndex;//[Offset: 0xe0, Size: 80]
	BlendSpace* bs_ObstructedAnim;//[Offset: 0x130, Size: 8]
	AnimMontage* PreFireMontage;//[Offset: 0x138, Size: 8]
	PlayerAnimData OutPlayerAnimData;//[Offset: 0x140, Size: 16]
	SpringArmComponent* ScopeSpringArm;//[Offset: 0x150, Size: 8]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 8]
	float Rate;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x2bc, Size: 4]
	Vector SocketOffset;//[Offset: 0x2c0, Size: 12]
	Vector TargetOffset;//[Offset: 0x2cc, Size: 12]
	float ProbeSize;//[Offset: 0x2d8, Size: 4]
	byte ProbeChannel;//[Offset: 0x2dc, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dd, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dd, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2dd, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2dd, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2dd, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2dd, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2dd, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2dd, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2de, Size: 1]
	float CameraLagSpeed;//[Offset: 0x2e0, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x2e4, Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x2e8, Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x2ec, Size: 4]
	void SetActive(bool bNewActive, bool bReset);// 0x67d92b0
	Rotator GetTargetRotation();// 0x67d9270
	Actor*[] GetExtraIgnoreActors();// 0x67d91e8

--------------------------------
Class: STExtraAnimFM_Weapon_Grenade.AnimFunctionModule
	bool b_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	bool b_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]

--------------------------------
Class: STExtraAnimFM_IK.AnimFunctionModule
	orceLockParam ForceLockCopyBone;//[Offset: 0xb0, Size: 8]
	orceLockTwoParam ForceLockIK;//[Offset: 0xb8, Size: 12]
	float BlendSpeed;//[Offset: 0xc4, Size: 4]
	bool b_EnableIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool B_NeedCopyBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool B_CopyHandRBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	float LeftHandBlendWeight;//[Offset: 0xcc, Size: 4]
	float RightHandBlendWeight;//[Offset: 0xd0, Size: 4]
	<enum,ForceIKState> ForceIKStateMap;//[Offset: 0xd8, Size: 80]

--------------------------------
Class: orceLockParam

--------------------------------
Class: orceLockTwoParam.orceLockParam

--------------------------------
Class: ForceIKState

--------------------------------
Class: STExtraAnimFM_Foregrip.AnimFunctionModule
	orceLockParam ForceLockForegrip;//[Offset: 0xa0, Size: 8]
	bool b_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	bool b_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 1]
	BlendSpace1D* bs_ForegripAnim;//[Offset: 0xb0, Size: 8]
	float f_ForegripAnimParam;//[Offset: 0xb8, Size: 4]
	float f_BlendForgripWeight;//[Offset: 0xbc, Size: 4]
	float f_BlendForgripWeight_Left;//[Offset: 0xc0, Size: 4]
	float f_BlendForgripWeight_Right;//[Offset: 0xc4, Size: 4]
	bool b_ShouldBlendForegripIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]

--------------------------------
Class: STExtraAnimFM_ADS.AnimFunctionModule
	Vector FirstAimSpine_StandAndCrouch;//[Offset: 0xa0, Size: 12]
	Vector FirstAimSpine_Prone;//[Offset: 0xac, Size: 12]
	Vector2D v_ScopeAimRollRangeIN;//[Offset: 0xb8, Size: 8]
	Vector2D v_ScopeAimRollRangeOut;//[Offset: 0xc0, Size: 8]
	float f_ScopeAimInterSpeed_Spector;//[Offset: 0xc8, Size: 4]
	Vector FirstAimSpine;//[Offset: 0xcc, Size: 12]
	Rotator r_C_FPPOffsetRotation_half;//[Offset: 0xd8, Size: 12]
	Vector C_FPPOffsetLocation;//[Offset: 0xe4, Size: 12]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	Rotator r_ScopeAimRotation;//[Offset: 0xf4, Size: 12]
	Vector r_ScopeAimTransform;//[Offset: 0x100, Size: 12]
	STCharacterMovementComponent* pCharacterMovementComponent;//[Offset: 0x158, Size: 8]

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bClientAdjustPositionApplyNetworkMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78e, Size: 1]
	bool bSendClientAdjustmentUseRealMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78f, Size: 1]
	bool bSendClientAdjustmentUseRealVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 1]
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x791, Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x792, Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x794, Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x798, Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x79c, Size: 4]
	bool bPassWallAdjustmentIsOpenSecondCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 1]
	bool bServerPassWallForceSafty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a1, Size: 1]
	bool bOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a2, Size: 1]
	bool bOpenPassWallPenetratingRevise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a3, Size: 1]
	bool bPassWallIgnoreHitPawnBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 1]
	bool bOpenCombinePassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a5, Size: 1]
	bool bServerCheckIfClientAuthorativeUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a6, Size: 1]
	bool bPassWallCheckNotMoveStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a7, Size: 1]
	float CombinePassWallCheckDeltaTime;//[Offset: 0x7a8, Size: 4]
	bool bAroundHasDynamicBodybyUseAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ac, Size: 1]
	float PassWallBoxOverlapCheckHalfExtentWidth;//[Offset: 0x7b0, Size: 4]
	float PassWallBoxOverlapCheckHalfExtentHeight;//[Offset: 0x7b4, Size: 4]
	float OverlapTestCapsuleScaleWhenUpdateBasedMovement;//[Offset: 0x7b8, Size: 4]
	float MaxPrisonmentMove;//[Offset: 0x7bc, Size: 4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c1, Size: 1]
	float TimeThresholdForceLeaveFallingState;//[Offset: 0x7c4, Size: 4]
	float FallingInPlaceDistanceSq;//[Offset: 0x7c8, Size: 4]
	bool bDoSecondCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc, Size: 1]
	bool bDoShapeTransformTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cd, Size: 1]
	bool bSimulateStaticFallingToWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ce, Size: 1]
	bool bCombineMoveBagCheckActorNotMoveStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	bool bCombineMoveBagOverlapTestByDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x829, Size: 1]
	bool bIsOpenCheckClientFallingFloorHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82a, Size: 1]
	float CheckClientFallingFloorHitByClientPosXYOffset;//[Offset: 0x82c, Size: 4]
	float CheckClientFallingFloorHitByClientPosHeightOffset;//[Offset: 0x830, Size: 4]
	float CheckClientFallingFloorHitImpactPointOffset;//[Offset: 0x834, Size: 4]
	float CheckClientFallingFloorHitTimeStamp;//[Offset: 0x838, Size: 4]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x840, Size: 4]
	float EnterShovelingMoveModeMinTime;//[Offset: 0x844, Size: 4]
	bool bIsOpenEnterShovelingMoveModeCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	bool bShowEnterShovelingMoveModeBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x849, Size: 1]
	float EnterShovelingMoveModeCheckTimeout;//[Offset: 0x84c, Size: 4]
	float EnterShovelCD;//[Offset: 0x850, Size: 4]
	float DSEnterShovelCD;//[Offset: 0x854, Size: 4]
	float ShovelingCollisionLength;//[Offset: 0x858, Size: 4]
	float ShovelingCollisionWidth;//[Offset: 0x85c, Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x860, Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x864, Size: 4]
	float UseVelocityDirMinSpeed;//[Offset: 0x868, Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x86c, Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x870, Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x874, Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x878, Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x87c, Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x880, Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x884, Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x888, Size: 4]
	float MinusGradeShovelingDCC1;//[Offset: 0x88c, Size: 4]
	float MinusGradeShovelingDCC2;//[Offset: 0x890, Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x894, Size: 4]
	float StopShovelingSpeed;//[Offset: 0x89c, Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x8a0, Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x8a4, Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x8a8, Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x8ac, Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x8b0, Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x8b4, Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x8b8, Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x8bc, Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x8c0, Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x8c4, Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x8c8, Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x8d0, Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x8e8, Size: 8]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x8f0, Size: 8]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x8f8, Size: 8]
	float nowShovelingSpeed;//[Offset: 0x900, Size: 4]
	Rotator ShovelingRotation;//[Offset: 0x904, Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 1]
	byte ShovelingPrePoseState;//[Offset: 0x912, Size: 1]
	float PreShovelFov;//[Offset: 0x914, Size: 4]
	float AddVelocityLogCDConfig;//[Offset: 0x918, Size: 4]
	float LastClientVelocityNotEqualServerValidTime;//[Offset: 0x920, Size: 4]
	float DSSendVelocityToTlogCDConfig;//[Offset: 0x948, Size: 4]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x988, Size: 1]
	float TimeSpeedFactor;//[Offset: 0x98c, Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x991, Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x992, Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x994, Size: 4]
	float JumpOffVelocityFactor;//[Offset: 0x998, Size: 4]
	PrimitiveComponent* LastMovementBase;//[Offset: 0x9a0, Size: 8]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a8, Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a9, Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x9ac, Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x9b0, Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x9b4, Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x9b8, Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x9bc, Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x9c0, Size: 4]
	float WalkSpeedCurveScale;//[Offset: 0x9c4, Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x9c8, Size: 8]
	float ProneFloorAngle;//[Offset: 0x9d0, Size: 4]
	float ProneFloorZ;//[Offset: 0x9d4, Size: 4]
	float JumpFloorAngle;//[Offset: 0x9d8, Size: 4]
	float JumpFloorZ;//[Offset: 0x9dc, Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x9e0, Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x9e4, Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e8, Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x9ec, Size: 4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x9f0, Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9f4, Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9f4, Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x9f8, Size: 4]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa4, Size: 1]
	float CheckDistanceAhead;//[Offset: 0xaa8, Size: 4]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0xab0, Size: 8]
	ParticleSystem* ShovelingEffectParticle;//[Offset: 0xab8, Size: 8]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0xac0, Size: 8]
	int MaxMultiJumpCount;//[Offset: 0xae4, Size: 4]
	int CurrentMultiJumpCount;//[Offset: 0xae8, Size: 4]
	float MultiJumpSpeed;//[Offset: 0xaec, Size: 4]
	float LocationDiff;//[Offset: 0xaf0, Size: 4]
	float LocationInterpSpeed;//[Offset: 0xaf4, Size: 4]
	float RotationDiff;//[Offset: 0xaf8, Size: 4]
	float RotationInterpSpeed;//[Offset: 0xafc, Size: 4]
	float MinMovebaseSpeed;//[Offset: 0xb00, Size: 4]
	float SendStuckLogCD;//[Offset: 0xb04, Size: 4]
	float MinInStuckTime;//[Offset: 0xb08, Size: 4]
	float NotMoveableDistance;//[Offset: 0xb0c, Size: 4]
	float MinMoveableVelocity;//[Offset: 0xb10, Size: 4]
	float CheckInStuckDelayTime;//[Offset: 0xb14, Size: 4]
	float SendFallingLogCD;//[Offset: 0xb18, Size: 4]
	float MinInFallingTime;//[Offset: 0xb1c, Size: 4]
	float MinFallingZChangeDistance;//[Offset: 0xb20, Size: 4]
	bool TryMultiJump();// 0x3fbb688
	FString ToStringHasLocation(FString Subtitle);// 0x3fbb554
	FString ToStringHasExtendInfoHasMiddleSimply(FString Subtitle, FString MiddleSimplyStr, bool bIsShowMesh);// 0x3fbb34c
	FString ToStringHasExtendInfo(FString Subtitle);// 0x3fbb218
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x3fbb168
	void SetShovelEnabledFlags(enum InShovelEnabledFlags);// 0x3fbb0ec
	void SetProneFloorZ(float InProneFloorZ);// 0x3fbb070
	void SetProneFloorAngle(float InProneFloorAngle);// 0x3fbaff4
	void SetJumpFloorZ(float InJumpFloorZ);// 0x3fbaf78
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x3fbaefc
	void ServerMoveFloor(float TimeStamp, Actor* HitActor, PrimitiveComponent* HitComp, Vector ImpactPoint, Vector ImpactNormal, byte ClientMovementMode);// 0x3fbad04
	void ServerMoveEx(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode, const ServerMoveExtraParams ExtraParams);// 0x3fbaa08
	void ServerMoveDualEx(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode, const ServerMoveDualExtraParams ExtraParams);// 0x3fba5ec
	void ServerAddVelocity(int AddType, int64 ClientTime, const byte ClientMovementMode, const Vector AddVelocity, FString InExtendStr);// 0x3fba42c
	void SendLevelTime(float LevelTime);// 0x3fba38c
	void PrintSmoothClientData(FString Title, FString Subtitle);// 0x3fba21c
	void PrintHit(FString Title, FString Subtitle, HitResult Hit);// 0x3fba01c
	void PrintExtendInfoHasMiddleSimply(FString Title, FString Subtitle, FString MiddleSimplyStr, FString EndStr, bool bIsShowMesh, bool bIsShowCamera);// 0x3fb9cfc
	void PrintCurrentFloor(FString Title, FString Subtitle);// 0x3fb9b8c
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x3fb9ac0
	void OnRespawned();// 0x3fb9aa4
	void OnRecycled();// 0x3fb9a88
	void OnRecoverOnServer();// 0x3fb9a6c
	void OnPreReconnectOnServer();// 0x3fb9a58
	float K2_GetProneFloorZ();// 0x3fb9a24
	float K2_GetProneFloorAngle();// 0x3fb99f0
	float K2_GetJumpFloorZ();// 0x3fb99bc
	float K2_GetJumpFloorAngle();// 0x3fb9988
	bool IsWalkable(out const HitResult Hit);// 0x3fb98cc
	bool IsProning();// 0x3fb9894
	FString GetToString();// 0x3fb980c
	STExtraBaseCharacter* GetSTCharacter();// 0x3fb97d8
	enum GetShovelEnabledFlags();// 0x3fb97a4
	float GetPawnRealVelocity();// 0x3fb9770
	float GetLastServerMoveTime();// 0x3fb973c
	bool GetIsOpenShovelingAbility();// 0x3fb9704
	bool GetIsOpenLongPressShovelingAbility();// 0x3fb96cc
	bool GetIsOpenCrouchShovelingAbility();// 0x3fb9694
	float GetEnterShovelingMoveModeMinTime();// 0x3fb9660
	void DSSendVelocityToTlog(out const byte ClientMovementMode, out const Vector ClientVelocity);// 0x3fb9570
	bool DragOnGround(float DeltaTime);// 0x3fb94e0
	void DoMultiJump();// 0x3fb9490
	void ClientVeryShortAdjustPositionReliable(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3fb9288
	void ClientVeryShortAdjustPositionAndRotationReliable(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3fb9044
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3fb8e00
	void ClientSetShovelEnabledFlags(enum InShovelEnabledFlags);// 0x3fb8d7c
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3fb8af0
	void ClientAddVelocity(int AddType, out const Vector AddVelocity, FString InExtendStr);// 0x3fb89c8
	void ChangePhysxShapeFlag();// 0x3fb89b4
	bool CanJump();// 0x3fb897c

--------------------------------
Class: ServerMoveExtraParams
	float ClientWorldTime;//[Offset: 0x0, Size: 4]
	float MaxMoveSpeed;//[Offset: 0x4, Size: 4]
	Vector_NetQuantize10 ClientVelocity;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ServerMoveDualExtraParams
	float ClientWorldTime;//[Offset: 0x0, Size: 4]
	float MaxMoveSpeed;//[Offset: 0x4, Size: 4]
	Vector_NetQuantize10 PendingClientVelocity;//[Offset: 0x8, Size: 12]
	Vector_NetQuantize10 ClientVelocity;//[Offset: 0x14, Size: 12]

--------------------------------
Class: STExtraAnimFM_Parachute.AnimFunctionModule
	byte ParachuteState;//[Offset: 0x60, Size: 1]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	Rotator r_DeltaViewOffset;//[Offset: 0x64, Size: 12]

--------------------------------
Class: STExtraAnimFM_Character_Hurt.AnimFunctionModule
	bool b_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	Vector v_HurtDir;//[Offset: 0x64, Size: 12]
	BlendSpace* bs_HitBlendSpace;//[Offset: 0x78, Size: 8]

--------------------------------
Class: STExtraAnimFM_Character_Death.AnimFunctionModule
	bool b_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	bool b_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]
	float f_EnterNearDeathCDTime;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: STExtraAnimFM_Character_EyeWatch.AnimFunctionModule
	float NeckTurnSpeed;//[Offset: 0x70, Size: 4]
	float NeckNotTurnAngle;//[Offset: 0x74, Size: 4]
	float NeckTurnUILeftAngle;//[Offset: 0x78, Size: 4]
	float NeckTurnUIRightAngle;//[Offset: 0x7c, Size: 4]
	float NeckTurnUIUPAngle;//[Offset: 0x80, Size: 4]
	float NeckTurnUIDownAngle;//[Offset: 0x84, Size: 4]
	float NeckMapAngleUp;//[Offset: 0x88, Size: 4]
	float NeckMapAngleDown;//[Offset: 0x8c, Size: 4]
	float NeckMapCrouchAngleUp;//[Offset: 0x90, Size: 4]
	float NeckMapCrouchAngleDown;//[Offset: 0x94, Size: 4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0x98, Size: 4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0x9c, Size: 4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0xa0, Size: 4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0xa4, Size: 4]
	float NeckMapAngleLeft;//[Offset: 0xa8, Size: 4]
	float NeckMapAngleRight;//[Offset: 0xac, Size: 4]
	float NeckMapCrouchAngleLeft;//[Offset: 0xb0, Size: 4]
	float NeckMapCrouchAngleRight;//[Offset: 0xb4, Size: 4]
	bool b_ApplyTurnAroundAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	Rotator r_HeadRotOffset;//[Offset: 0xbc, Size: 12]

--------------------------------
Class: STExtraAnimFM_Character_Hair.AnimFunctionModule
	bool b_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	Vector v_MoveVelocityInWorldSpaceReverse;//[Offset: 0x64, Size: 12]

--------------------------------
Class: STExtraAnimFM_Shoveling.AnimFunctionModule
	AnimForShovel AnimForShovel;//[Offset: 0x70, Size: 288]
	Rotator ShovelingRotation;//[Offset: 0x190, Size: 12]
	Rotator UpShovelingRotationAdd;//[Offset: 0x19c, Size: 12]
	Rotator ShovelingRotationCS;//[Offset: 0x1a8, Size: 12]
	Rotator UpShovelingRotationAddCS;//[Offset: 0x1b4, Size: 12]
	Rotator FloorRotation;//[Offset: 0x1c0, Size: 12]
	AnimSequence* ShovelEnterAnim;//[Offset: 0x1d0, Size: 8]
	AnimSequence* ShovelLoopAnim;//[Offset: 0x1d8, Size: 8]
	AnimSequence* ShovelLeaveAnim;//[Offset: 0x1e0, Size: 8]
	bool bIsFppAndHasGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	STCharacterMovementComponent* pCharacterMovementComponent;//[Offset: 0x1f0, Size: 8]

--------------------------------
Class: AnimForShovel
	BlendSpace1D* bs1_ShovelAnim;//[Offset: 0x0, Size: 8]
	BlendSpace* bs_ShovelAnim_Floor;//[Offset: 0x8, Size: 8]
	BlendSpace1D* bs1_ShovelAnim_Pitch;//[Offset: 0x10, Size: 8]
	BlendSpace1D* bs1_ShovelAnim_Unarm;//[Offset: 0x18, Size: 8]
	BlendSpace* bs_ShovelAnim_Unarm_Floor;//[Offset: 0x20, Size: 8]
	AnimSequence* se_ShovelAnim_F;//[Offset: 0x28, Size: 8]
	AnimationAsset* bs1_Shovel;//[Offset: 0x30, Size: 40]
	AnimationAsset* bs_Shovel_Floor;//[Offset: 0x58, Size: 40]
	AnimationAsset* bs1_Shovel_Pitch;//[Offset: 0x80, Size: 40]
	AnimationAsset* bs1_Shovel_Unarm;//[Offset: 0xa8, Size: 40]
	AnimationAsset* bs_Shovel_Unarm_Floor;//[Offset: 0xd0, Size: 40]
	AnimationAsset* se_Shovel_F;//[Offset: 0xf8, Size: 40]

--------------------------------
Class: STExtraAnimFM_WeaponDrop.AnimFunctionModule
	float AimBlendSpaceAlpha;//[Offset: 0x90, Size: 4]

--------------------------------
Class: STExtraAnimFM_LOD.AnimFunctionModule
	byte u_LODLevel;//[Offset: 0x49, Size: 1]
	bool b_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]
	bool b_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 1]
	float LODLevel2DistanceFactorMin;//[Offset: 0x4c, Size: 4]
	float LODLevel2DistanceFactorMax;//[Offset: 0x50, Size: 4]
	float LODLevel1DistanceFactorMax;//[Offset: 0x54, Size: 4]

--------------------------------
Class: SubAnimUpdateCondition.Object
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool CachedNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	void SetEnable(bool InEnable);// 0x410c184
	bool NeedUpdate_Internal(AnimInstanceBase* AnimInstance);// 0x410c0ec
	bool NeedUpdate(AnimInstanceBase* AnimInstance);// 0x410c054
	bool CheckNeedUpdate(AnimInstanceBase* AnimInstance);// 0x410bf8c

--------------------------------
Class: PlayerAnimList
	PlayerAnimData ReloadAnim;//[Offset: 0x0, Size: 16]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x10, Size: 16]
	PlayerAnimData PickUpAnim;//[Offset: 0x20, Size: 16]

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int DefaultObjectPoolSize;//[Offset: 0x102c, Size: 4]
	float IdleWalkSpeedRatio;//[Offset: 0x1034, Size: 4]
	float AttackWalkSpeedRatio;//[Offset: 0x1038, Size: 4]
	float SprintRunSpeedRatio;//[Offset: 0x103c, Size: 4]
	float SidewaysSpeedRatio;//[Offset: 0x1040, Size: 4]
	float MaxSpeedModeRatio;//[Offset: 0x1044, Size: 4]
	int GlobalTlogID;//[Offset: 0x1048, Size: 4]
	int PersonalTlogID;//[Offset: 0x104c, Size: 4]
	bool bRecordPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1050, Size: 1]
	bool bRecordTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1051, Size: 1]
	int IdleBlendSpaceValue;//[Offset: 0x1054, Size: 4]
	delegate OnChangeAnimParam;//[Offset: 0x1058, Size: 16]
	float jumpCheckOnGroundProtect;//[Offset: 0x1068, Size: 4]
	bool bTakeCirclePoisonDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1070, Size: 1]
	float CirclePoisonDamage;//[Offset: 0x1074, Size: 4]
	float CirclePoisonDamageInterval;//[Offset: 0x1078, Size: 4]
	float MomentumFactor;//[Offset: 0x1080, Size: 4]
	CapsuleComponent* RootCapsule;//[Offset: 0x1088, Size: 8]
	CapsuleComponent* HitBox_Stand;//[Offset: 0x1090, Size: 8]
	bool bDeactivationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1098, Size: 1]
	delegate OnTakeDamageModify_Override;//[Offset: 0x10a0, Size: 16]
	bool bIsOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bc, Size: 1]
	TimerHandle OnResumeMoveHandle;//[Offset: 0x10c0, Size: 8]
	bool bCanControlByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c8, Size: 1]
	bool bSetWalkStandState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c9, Size: 1]
	bool CanBeHiddenMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ca, Size: 1]
	float ImpluseScale;//[Offset: 0x10cc, Size: 4]
	bool bIgnoreMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	bool bHoldWeaponHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d1, Size: 1]
	float ImpluseZScale;//[Offset: 0x10d4, Size: 4]
	float DelayRemoveDeadBody;//[Offset: 0x10d8, Size: 4]
	bool EnableRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10dc, Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x10e0, Size: 4]
	bool ShowKillStreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e4, Size: 1]
	<int,MonsterDeathData> deadTypeConfigs;//[Offset: 0x10e8, Size: 80]
	float PlayerFirstProbability;//[Offset: 0x1138, Size: 4]
	float HatredRevolution;//[Offset: 0x113c, Size: 4]
	float[] AnimUpdateRateParams;//[Offset: 0x1140, Size: 16]
	bool bUseCustomAnimUpdateRateParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1150, Size: 1]
	float[] CustomAnimUpdateRateParams;//[Offset: 0x1158, Size: 16]
	bool bCanSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1168, Size: 1]
	SceneComponent* HitBoxComponent;//[Offset: 0x1170, Size: 8]
	delegate SimpleCharacterBirthEvent;//[Offset: 0x1178, Size: 16]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0x1188, Size: 8]
	CrowdAgentComponent* CrowdAgent;//[Offset: 0x1190, Size: 8]
	bool bEnableImpluse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1198, Size: 1]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0x11a0, Size: 8]
	PathInterpSyncComponent* PathInterpSync;//[Offset: 0x11a8, Size: 8]
	InterpMovementComponent* InterpMovement;//[Offset: 0x11b0, Size: 8]
	STExtraMonsterAnimInstance* monsterAnimInstance;//[Offset: 0x11b8, Size: 8]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0x11c0, Size: 4]
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c4, Size: 1]
	SimpleLagCompensationComponent* LagCompensationComponent;//[Offset: 0x11c8, Size: 8]
	float WalkSpeed;//[Offset: 0x11d0, Size: 4]
	float RunSpeed;//[Offset: 0x11d4, Size: 4]
	byte SpawnType;//[Offset: 0x11d8, Size: 1]
	MonsterBornStateConfig BornStateType;//[Offset: 0x11dc, Size: 12]
	MonsterShotGunDamageEventBroadcastData[] CachedShotGunDamageDataListOneFrame;//[Offset: 0x11e8, Size: 16]
	float MonsterDamageEXP;//[Offset: 0x11f8, Size: 4]
	float MonsterKillEXP;//[Offset: 0x11fc, Size: 4]
	int MonsterLevel;//[Offset: 0x1200, Size: 4]
	Actor* AttackTarget;//[Offset: 0x1208, Size: 8]
	Actor* OwnerTreasureBox;//[Offset: 0x1210, Size: 8]
	float SpeedValueFight;//[Offset: 0x1218, Size: 4]
	float SpeedValueClimb;//[Offset: 0x121c, Size: 4]
	float StunHealthPercentageThreshold;//[Offset: 0x1220, Size: 4]
	float StunProbability;//[Offset: 0x1224, Size: 4]
	float StunDuration;//[Offset: 0x1228, Size: 4]
	bool NoBattleEnterStun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122c, Size: 1]
	FString MonsterStunAttrModitfyName;//[Offset: 0x1230, Size: 16]
	MonsterStunAttrModitfyConfig[] MonsterStunAttrModitfyConfigList;//[Offset: 0x1240, Size: 16]
	int MonsterUniqueID;//[Offset: 0x1250, Size: 4]
	Vector DamagePos_HeadOffset;//[Offset: 0x1254, Size: 12]
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1260, Size: 1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1261, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1262, Size: 1]
	Vector HurtDir;//[Offset: 0x1264, Size: 12]
	float HurtDistance;//[Offset: 0x1270, Size: 4]
	float HurtResetDefaultTime;//[Offset: 0x1274, Size: 4]
	float ZombieSleepToDie;//[Offset: 0x1294, Size: 4]
	bool bEnableSimpleCharacterCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1298, Size: 1]
	delegate OnSimpleCharacterWeaponStateChanged;//[Offset: 0x12a0, Size: 16]
	delegate OnSimpleCharacterAnimEvent;//[Offset: 0x12b0, Size: 16]
	MonsterDurationData[] InitDurationData;//[Offset: 0x12c8, Size: 16]
	float[] FallSpeedSetting;//[Offset: 0x12e0, Size: 16]
	MonsterClimbData CurrentClimbData;//[Offset: 0x12f0, Size: 8]
	enum CurrentJumpExPhase;//[Offset: 0x12f8, Size: 1]
	bool IsInAIPathLinkRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f9, Size: 1]
	float MeshMaxVisibleDelay;//[Offset: 0x12fc, Size: 4]
	float DelayOpenCollisionTime;//[Offset: 0x1304, Size: 4]
	FName BornCollisitionTag;//[Offset: 0x1310, Size: 8]
	bool bPlayHitEvenIfPlayingMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1318, Size: 1]
	PrimitiveComponent* BornCollision;//[Offset: 0x1320, Size: 8]
	Transform BornCollisionTrans;//[Offset: 0x1330, Size: 48]
	FName BornCollisionAttach;//[Offset: 0x1360, Size: 8]
	StaticMesh* BoxModel;//[Offset: 0x1368, Size: 8]
	bool bEnabledForceFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1370, Size: 1]
	int DamageSyncFrameFrequency;//[Offset: 0x1374, Size: 4]
	bool EnableDamageSyncFrequencyControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1378, Size: 1]
	uint64 LastDamageSyncFrameCount;//[Offset: 0x1380, Size: 8]
	PartDamageComponent* PartDamageComponent;//[Offset: 0x1388, Size: 8]
	UAEMonsterAnimListComponentBase* MonsterAnimListComponent;//[Offset: 0x1390, Size: 8]
	FName MainAnimListTag;//[Offset: 0x1398, Size: 8]
	int[] MonsterAnimListNum;//[Offset: 0x13a0, Size: 16]
	float HearRadius;//[Offset: 0x13b4, Size: 4]
	float MinTimeLockHeardPos;//[Offset: 0x13b8, Size: 4]
	bool IsShowDamageNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c0, Size: 1]
	bool bIsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c1, Size: 1]
	bool bIsShowKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c2, Size: 1]
	delegate OnFinishJumpToTarget;//[Offset: 0x13c8, Size: 16]
	bool bIsJumpingToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d8, Size: 1]
	float DisableCollisionPeriod;//[Offset: 0x13dc, Size: 4]
	bool bDisableCollisionBothSide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e0, Size: 1]
	FString[] DrawDebugInfoContentList;//[Offset: 0x13e8, Size: 16]
	delegate OnSimpleCharacterHpChange;//[Offset: 0x1408, Size: 16]
	SkeletalMesh* MeshResourceForHighendDevice;//[Offset: 0x1418, Size: 40]
	SkeletalMesh* MeshResourceForLowendDevice;//[Offset: 0x1440, Size: 40]
	bool bNeedDestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1468, Size: 1]
	float DisappearOnDeathLifeSpan;//[Offset: 0x146c, Size: 4]
	void StopAIAndCrouch();// 0x40d31ac
	void StartJumpToTarget(out const Vector TargetLocation, float GravityScale, float Speed, bool bIsSkill, bool bIsLowArc);// 0x40d3014
	void StartJump_Multicast(const Vector Vel, float GravityScale, bool bIsSkill, bool bRotFollowVel);// 0x40d2ec0
	void ShowBeHitAnim(Actor* causer);// 0x40d2e44
	void SetIsOnGround(bool onGround);// 0x40d2db8
	void PostTakeDamage(float Damage, out const HitResult HitResult, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, bool IsHeadShot);// 0x40d2bbc
	void OpenDeadBodyRagDoll_Client(byte deadPoseType);// 0x40d2b38
	void OnStateLeave(enum EnteredState);// 0x40d2ab4
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x40d29f8
	void OnStateEnter(enum EnteredState);// 0x40d2974
	void OnRep_ReplicatedMovement();// 0x40d2958
	void OnRep_MonsterAnimListNum(int[] preAnimListNum);// 0x40d2880
	void OnRep_JumpingToTarget();// 0x40d286c
	void OnRep_IdleBlendSpaceValue();// 0x40d2858
	void OnRep_Health(float PrevHealth);// 0x40d27d4
	void OnPathInterpStatusChanged(bool bIsStart, bool bIsVault);// 0x40d2704
	void OnJumpToTargetImpact(out const HitResult ImpactResult);// 0x40d2664
	void OnHitAnimPlay();// 0xffffff8f20d162a8
	void OnCanControlByPlayerChangeEvent();// 0xffffff8f20d162a8
	void On_RepCanControlByPlayer();// 0x40d2650
	bool LeaveState(enum State);// 0x40d25b8
	bool HasState(enum State);// 0x40d2520
	void HandleStunEnd();// 0x40d250c
	void HandleReceiveBornType();// 0x40d24f8
	SkeletalMeshComponent* GetWeaponAttachMesh(STExtraWeapon* Weapon);// 0x40d2464
	SceneComponent* GetWeaponAttachComp();// 0x40d2428
	FString GetUIDisplayName();// 0xffffff8f20d162a8
	STExtraSimpleCharacterPhysics* GetSimpleCharacterPhysics();// 0x40d240c
	STExtraPlayerController* GetPlayerControllerSafety();// 0x40d23d0
	bool EnterState(enum State);// 0x40d2338
	void DisappearOnDeath();// 0x40d2324
	void ClearOnDeathByPose(Controller* EventInstigator, int DamageType, byte deadPoseType);// 0x40d2230
	void CalculateUniqueIDOnServer();// 0x40d2214
	void BroadcastCompactClientsSimulateShotGunDamage(const MonsterShotGunDamageEventBroadcastData[] DataList);// 0x40d2134
	void BroadcastCompactClientsSimulateDamage(float Damage, int damageTypeID, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x40d1fb0
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x40d1d5c
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x40d1b08
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x40d18b8
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x40d1668
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x40d140c
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x40d11a4
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x40d0f54
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x40d0d04
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x40d0ab0
	void BroadcastClientsDeath(float Damage, const DamageEvent DamageEvent, Actor* DamageCauser, Controller* killController, bool IsHeadShotDamage, int TypeID);// 0x40d08a8
	void BroadcastClientAnimMsg(FString AnimMsg);// 0x40d07f0
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0xffffff8f20d162a8
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0xffffff8f20d162a8
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, int damageTypeID);// 0x40d0658
	bool AllowState(enum State, bool withLog);// 0x40d057c

--------------------------------
Class: MonsterDeathData
	byte PoseType;//[Offset: 0x0, Size: 1]
	Vector deadDir;//[Offset: 0x4, Size: 12]
	Vector deadUpDir;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	float VelocityDampingOnGround;//[Offset: 0x124, Size: 4]
	float VelocityDampingInMidAir;//[Offset: 0x128, Size: 4]
	float StepHeight;//[Offset: 0x12c, Size: 4]
	float TestPassWallCapsuleHeightScaleForSkill;//[Offset: 0x130, Size: 4]
	float MaxVelocityForSimulation;//[Offset: 0x134, Size: 4]
	float VehicleHitFeedBack;//[Offset: 0x138, Size: 4]
	float VehicleImpluseScale;//[Offset: 0x13c, Size: 4]
	float HorizontalVelocitySquaredForSimulate;//[Offset: 0x140, Size: 4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0x144, Size: 4]
	int LinkJumpVelocityAngle;//[Offset: 0x148, Size: 4]
	int LinkJumpVelocityValue;//[Offset: 0x14c, Size: 4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	enum FindGroundTraceType;//[Offset: 0x151, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x1a8, Size: 8]
	bool StopSkillSimulate();// 0x40d7e10
	bool StopImpulseSimulate();// 0x40d7dd8
	bool StartSkillSimulate(Vector InVelocity, bool PreventPenetration);// 0x40d7cfc
	bool StartImpulseSimulate(Vector InVelocity, bool PreventPenetration);// 0x40d7c20
	void SetVelocity(Vector InVelocity);// 0x40d7ba0
	void SetSimulatePhysics(bool bInEnabled);// 0x40d7b20
	void SetEnabled(bool InEnabled);// 0x40d7aa0
	void SetCharacterMovementActive(bool _bIsActive);// 0x40d7a1c
	bool IsOnGround();// 0x40d79e4
	Vector GetVelocity();// 0x40d79ac
	Vector GetTouchGroundVelocity();// 0x40d7974
	bool FindGround();// 0x40d793c
	void AddVelocity(Vector InVelocity);// 0x40d78bc
	void ActivatePhysics();// 0x40d78a8

--------------------------------
Class: CrowdAgentComponent.ActorComponent.Object
	float AgentRadius;//[Offset: 0x124, Size: 4]
	float SegmentRadius;//[Offset: 0x128, Size: 4]
	float Height;//[Offset: 0x12c, Size: 4]
	float MaxSpeed;//[Offset: 0x130, Size: 4]
	float MaxForce;//[Offset: 0x134, Size: 4]
	float QueryNeighborRadius;//[Offset: 0x138, Size: 4]
	float QueryBoundaryRadius;//[Offset: 0x13c, Size: 4]
	float StopMoveDistance;//[Offset: 0x140, Size: 4]
	bool bSimulateCrowdAgent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x148, Size: 8]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool bNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	void StopMove();// 0x3d589c8
	void SetMaxSpeed(float MaxSpeed);// 0x3d5894c
	void SetEnabled(bool InEnabled);// 0x3d588cc
	void RandomMoveToPosition(float Radius);// 0x3d58850
	void MoveToLoc(out const Vector Loc);// 0x3d587c4
	void MoveToActor(const Actor* Actor);// 0x3d58748
	bool IsMoving();// 0x3d58710
	Vector GetVelocity();// 0x3d586d8
	float GetMaxSpeed();// 0x3d586a4

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0x158, Size: 56]
	float Snapshot_Timestamp;//[Offset: 0x190, Size: 4]
	RepSnapshot_Location Snapshot_Location;//[Offset: 0x194, Size: 12]
	RepMovement RepMovement;//[Offset: 0x1a0, Size: 52]
	RepSnapshot Snapshot;//[Offset: 0x1d4, Size: 56]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x20c, Size: 4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x210, Size: 4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x214, Size: 4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x218, Size: 4]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x220, Size: 392]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 1]
	bool FlipTurnRightFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 1]
	float TurnThreshold;//[Offset: 0x3d4, Size: 4]
	CurveFloat* TurnTimeCurve;//[Offset: 0x3d8, Size: 8]
	float TurnSpeed;//[Offset: 0x3e0, Size: 4]
	Vector LastUpdateLocation;//[Offset: 0x3e4, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x3f0, Size: 16]
	void SetVelocity(out const Vector Velocity);// 0x3f97738
	void SetFindFloorTraceUseLastZ(bool bUseLaseZ);// 0x3f976b8
	void SetEnabled(bool InEnabled);// 0x3f97638
	void SetDragLocationJudgeUseCorrectZ(bool bUseCorrectZ);// 0x3f975b8
	void SetDragLocationFindFloor(bool bFindFloor);// 0x3f97538
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x3f97448
	void OnRep_Snapshot();// 0x3f97434
	void OnRep_Movement();// 0x3f97420
	Vector GetVelocity();// 0x3f973e8
	void ForceUpdate(bool ClearVelocity);// 0x3f97364
	void ClearRepSnapShot();// 0x3f9734c

--------------------------------
Class: RepSnapshot
	Rotator Rotation;//[Offset: 0x10, Size: 12]
	Vector LinearVelocity;//[Offset: 0x1c, Size: 12]
	Vector AngularVelocity;//[Offset: 0x28, Size: 12]
	float ToleranceYaw;//[Offset: 0x34, Size: 4]

--------------------------------
Class: RepSnapshot_Location
	Vector Location;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SimulateSyncSmooth
	float MaxPredictMoveTime;//[Offset: 0x0, Size: 4]
	float AngularDeltaThreshold;//[Offset: 0x4, Size: 4]
	float AngularInterpAlpha;//[Offset: 0x8, Size: 4]
	float AngularRecipFixTime;//[Offset: 0xc, Size: 4]
	float LinearDeltaThresholdSq;//[Offset: 0x10, Size: 4]
	float LinearInterpAlpha;//[Offset: 0x14, Size: 4]
	float LinearRecipFixTime;//[Offset: 0x18, Size: 4]
	float SpeedThresholdSq;//[Offset: 0x1c, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x20, Size: 4]
	float SmoothNetUpdateTime;//[Offset: 0x24, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x28, Size: 4]
	byte FindFloorTraceChannel;//[Offset: 0x2c, Size: 1]
	float FindFloorInterval;//[Offset: 0x30, Size: 4]
	float FindFloorTraceZUp;//[Offset: 0x34, Size: 4]
	float FindFloorTraceZDown;//[Offset: 0x38, Size: 4]
	float FindFloorMaxAllowDiffZ;//[Offset: 0x3c, Size: 4]
	bool bFindFloorWhenSmoothInterpolate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bFindFloorTraceUseLastZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bDragLocationJudgeUseCorrectZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	bool bDragLocationFindFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 1]
	SmoothParamsBySpeed[] SmoothParams;//[Offset: 0x48, Size: 16]
	CurveFloat* RotationTimeCurve;//[Offset: 0x58, Size: 8]
	float DisableRotationThreshold;//[Offset: 0x60, Size: 4]
	bool bGetInterpVelocityWhenStopMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float InterpVelocityWhenStopMoveLimit;//[Offset: 0x68, Size: 4]

--------------------------------
Class: SmoothParamsBySpeed
	float Speed;//[Offset: 0x0, Size: 4]
	float LinearDeltaThresholdSq;//[Offset: 0x4, Size: 4]
	float SmoothNetUpdateLocationTime;//[Offset: 0x8, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0xc, Size: 4]
	float MaxPredictMoveTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PathInterpSyncComponent.ActorComponent.Object
	bool bUseForVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	PawnVaultConfig[] VaultConfigData;//[Offset: 0x140, Size: 16]
	<FName,PawnPathInterpCurveConfig> PathInterpCurveConfigData;//[Offset: 0x150, Size: 80]
	<FName,PathInterpAnimData> PathInterpAnimData;//[Offset: 0x1a0, Size: 80]
	float InterpCorrectionTimeInterval;//[Offset: 0x1f0, Size: 4]
	float LineInterpStopRadius;//[Offset: 0x1f4, Size: 4]
	PlayerAIVaultAnimData LoopAnimData;//[Offset: 0x1f8, Size: 16]
	PlayerAIVaultAnimData StartAnimData;//[Offset: 0x208, Size: 16]
	PlayerAIVaultAnimData EndAnimData;//[Offset: 0x218, Size: 16]
	CurveFloat* CurUpCurve;//[Offset: 0x270, Size: 8]
	CurveFloat* CurForwardCurve;//[Offset: 0x278, Size: 8]
	void PawnStartVault(float BlockDistance, float BlockHeight, float BlockLength, float BlockMaxFall, float BlockMaxDist, Vector StartPos, Vector hitpoint, Rotator movedir);// 0x3eec62c
	void PawnStartPathNodeInterp(const RepPathNodeData[] PathNodeData, Vector SvrStartLoc);// 0x3eec558
	void NotifyServerPathProgress(int PathIndex, float PathTime);// 0x3eec498
	void DoPathNodeInterp(float lookAtBlockHeight, float BlockLength, Vector StartPos, Vector EndPos);// 0x3eec35c

--------------------------------
Class: PawnVaultConfig
	FName AnimKey;//[Offset: 0x0, Size: 8]
	CurveFloat* UpCurve;//[Offset: 0x8, Size: 8]
	CurveFloat* ForwardCurve;//[Offset: 0x10, Size: 8]
	float BlockDistance;//[Offset: 0x18, Size: 4]
	float BlockHeight;//[Offset: 0x1c, Size: 4]
	float BlockLength;//[Offset: 0x20, Size: 4]
	bool bIsJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float CountTime;//[Offset: 0x28, Size: 4]
	float PlaySpeed;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PawnPathInterpCurveConfig
	CurveFloat* UpCurve;//[Offset: 0x0, Size: 8]
	CurveFloat* ForwardCurve;//[Offset: 0x8, Size: 8]
	float CurveTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PathInterpAnimData
	AnimMontage* PlayerAnimSoftPtr;//[Offset: 0x0, Size: 40]
	AnimMontage* ZombieAnimSoftPtr;//[Offset: 0x28, Size: 40]

--------------------------------
Class: PlayerAIVaultAnimData
	FName AnimKey;//[Offset: 0x0, Size: 8]
	float MoveLength;//[Offset: 0x8, Size: 4]
	float SpeedScale;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RepPathNodeData
	Vector Location;//[Offset: 0x0, Size: 12]
	float SpeedScale;//[Offset: 0xc, Size: 4]
	FName AnimKey;//[Offset: 0x10, Size: 8]
	FName CurveKey;//[Offset: 0x18, Size: 8]

--------------------------------
Class: InterpMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	FlyPathFollowingComponent* FlyPathFollowingComp;//[Offset: 0x1a8, Size: 8]
	float MaxMoveSpeed;//[Offset: 0x1b0, Size: 4]
	bool bUseDirectionAdjustVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 1]
	float ScalePower;//[Offset: 0x1b8, Size: 4]
	float MinScaleFactor;//[Offset: 0x1bc, Size: 4]
	bool bFindFloorWhenMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c0, Size: 1]
	bool bFindLandscapeAsFloorOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c0, Size: 1]
	byte FindFloorChannel;//[Offset: 0x1c1, Size: 1]
	float FindFloorTraceZUp;//[Offset: 0x1c4, Size: 4]
	float FindFloorTraceZDown;//[Offset: 0x1c8, Size: 4]
	bool bTestPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	byte TestPassWallChannel;//[Offset: 0x1cd, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ce, Size: 1]
	float AvoidanceWeight;//[Offset: 0x1d0, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1d4, Size: 4]
	bool bUseCustomAvoidanceShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8, Size: 1]
	float CustomAvoidanceRadius;//[Offset: 0x1dc, Size: 4]
	float CustomAvoidanceHalfHeight;//[Offset: 0x1e0, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1e4, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1e8, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1ec, Size: 4]
	bool bHasRequestedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x1f4, Size: 12]
	Character* CharacterOwner;//[Offset: 0x200, Size: 8]
	int AvoidanceUID;//[Offset: 0x218, Size: 4]

--------------------------------
Class: FlyPathFollowingComponent.NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	float DefaultFlyHeight;//[Offset: 0x348, Size: 4]
	float MinFlyHeight;//[Offset: 0x34c, Size: 4]
	float NavAgentRadius;//[Offset: 0x350, Size: 4]
	byte SweepTraceChannel;//[Offset: 0x354, Size: 1]
	byte[] DynamicTraceObjectTypes;//[Offset: 0x358, Size: 16]
	bool bDrawCurMoveTargetLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	bool bDrawSweepLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	bool bDrawPathRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 1]

--------------------------------
Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	float maxCheckDis;//[Offset: 0x300, Size: 4]
	float maxCheckDisTime;//[Offset: 0x304, Size: 4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	float PlayerHalfHeight;//[Offset: 0x310, Size: 4]
	float PlayerNewHalfHeight;//[Offset: 0x314, Size: 4]
	float MaxTransferDis;//[Offset: 0x318, Size: 4]
	float AgentRadiusMultiplier;//[Offset: 0x31c, Size: 4]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	bool bDrawNavPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	float DrawNavPathInterval;//[Offset: 0x324, Size: 4]
	bool bDrawCurTargetLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x168, Size: 8]
	NavigationData* MyNavData;//[Offset: 0x180, Size: 8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x5c2ed24
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x5c2ebc4
	Vector GetPathDestination();// 0x5c2eb8c
	byte GetPathActionType();// 0x5c2eb58

--------------------------------
Class: STExtraMonsterAnimInstance.AnimInstanceBase.AnimInstance.Object
	STExtraSimpleCharacter* C_OwnerMonsterCharacter;//[Offset: 0x518, Size: 8]
	bool C_State_IsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 1]
	bool C_State_IsInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x522, Size: 1]
	bool C_State_IsProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x523, Size: 1]
	bool C_State_IsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	bool C_State_IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 1]
	Vector C_State_HurtingDir;//[Offset: 0x528, Size: 12]
	float C_State_HurtingPoseAlpha;//[Offset: 0x534, Size: 4]
	float C_MoveSpeed;//[Offset: 0x538, Size: 4]
	float C_MoveForwardSpeed;//[Offset: 0x53c, Size: 4]
	float C_MoveRightSpeed;//[Offset: 0x540, Size: 4]
	float C_MoveSpeedRate;//[Offset: 0x544, Size: 4]
	bool bNegativeSpeedEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	bool bClientTurnEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 1]
	float bCLientTurnMinDuration;//[Offset: 0x54c, Size: 4]
	Vector C_MoveForce;//[Offset: 0x550, Size: 12]
	float C_PlayMoveAnimThreshold;//[Offset: 0x55c, Size: 4]
	enum C_IsInBattleState;//[Offset: 0x560, Size: 1]
	bool C_State_IsRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 1]
	bool C_State_IsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x562, Size: 1]
	bool C_State_IsJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x563, Size: 1]
	bool C_State_IsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 1]
	bool C_State_Observing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x565, Size: 1]
	bool C_State_IsStuning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x566, Size: 1]
	bool C_State_AIPathRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x567, Size: 1]
	bool C_State_Climbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	enum C_State_ClimbPhase;//[Offset: 0x569, Size: 1]
	enum C_State_JumpExPhase;//[Offset: 0x56a, Size: 1]
	bool C_IsClimpPhaseVerticalToHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56b, Size: 1]
	bool C_ShouldIdleInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	bool C_ShouldUseHurtAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56d, Size: 1]
	bool C_bRandomHurtDirect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56e, Size: 1]
	bool C_HasShootWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56f, Size: 1]
	Rotator C_AimRot;//[Offset: 0x570, Size: 12]
	bool C_UseDeadSnapPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	float StopDeathAnimSpeedThreshold;//[Offset: 0x580, Size: 4]
	float StopDeathAnimCheckDelay;//[Offset: 0x584, Size: 4]
	bool bOnFireCheckIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	float FireCheckStopBlend;//[Offset: 0x58c, Size: 4]
	bool bAutoSetDeathDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	float StopFallingDeathAnimCheckDelay;//[Offset: 0x598, Size: 4]
	int C_IdleBlendSpaceValue;//[Offset: 0x5a0, Size: 4]
	bool C_LeftLegDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	bool C_FirstStopDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a5, Size: 1]
	bool C_SecondStopDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a6, Size: 1]
	bool C_Turn_Left;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a7, Size: 1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	FName StopCurveName;//[Offset: 0x5b0, Size: 8]
	float C_StopCurveOutput;//[Offset: 0x5b8, Size: 4]
	int C_StopLegAnimType;//[Offset: 0x5bc, Size: 4]
	AnimSequence* C_Idle;//[Offset: 0x5c0, Size: 8]
	AnimSequence* C_Idle_Crouch;//[Offset: 0x5c8, Size: 8]
	AnimSequence* C_Idle_Prone;//[Offset: 0x5d0, Size: 8]
	AnimSequence* C_Combat_Idle;//[Offset: 0x5d8, Size: 8]
	AnimSequence* C_Combat_Idle_Crouch;//[Offset: 0x5e0, Size: 8]
	AnimSequence* C_Combat_Idle_Prone;//[Offset: 0x5e8, Size: 8]
	AnimSequence* C_Run;//[Offset: 0x5f0, Size: 8]
	AnimSequence* C_Run_Fighting;//[Offset: 0x5f8, Size: 8]
	BlendSpace* C_Hit;//[Offset: 0x600, Size: 8]
	AnimMontage* C_Stiff;//[Offset: 0x608, Size: 8]
	AnimSequence* C_Jump_Start;//[Offset: 0x610, Size: 8]
	AnimSequence* C_JumpEx_Start;//[Offset: 0x618, Size: 8]
	AnimSequence* C_JumpEx_Loop;//[Offset: 0x620, Size: 8]
	AnimSequence* C_JumpEx_End;//[Offset: 0x628, Size: 8]
	BlendSpace1D* C_Fall;//[Offset: 0x630, Size: 8]
	AnimSequence* C_Fall_Stand;//[Offset: 0x638, Size: 8]
	AnimSequence* C_Fall_Stand_Speed0;//[Offset: 0x640, Size: 8]
	AnimSequence* C_Fall_Stand_Speed1;//[Offset: 0x648, Size: 8]
	AnimSequence* C_Fall_Stand_Speed2;//[Offset: 0x650, Size: 8]
	AnimSequence* C_Fall_Stand_Speed3;//[Offset: 0x658, Size: 8]
	AnimSequence* C_Climb_WallVerticalLoop;//[Offset: 0x660, Size: 8]
	AnimSequence* C_Climb_WallVerticalToHorizontal;//[Offset: 0x668, Size: 8]
	AnimSequence* C_Climb_WallHorizontal;//[Offset: 0x670, Size: 8]
	AnimSequence* C_Climb_WallHorizontalToVertical;//[Offset: 0x678, Size: 8]
	AnimSequence* C_Climb_Window;//[Offset: 0x680, Size: 8]
	AnimSequence* C_Climb_SingleHands;//[Offset: 0x688, Size: 8]
	AnimSequence* C_Climb_DoubleHands;//[Offset: 0x690, Size: 8]
	AnimMontage* C_NormalDeath;//[Offset: 0x698, Size: 8]
	AnimMontage* C_HeadShotDeath;//[Offset: 0x6a0, Size: 8]
	AnimMontage* C_ImpulesDeath;//[Offset: 0x6a8, Size: 8]
	AnimMontage* C_MovingDeath;//[Offset: 0x6b0, Size: 8]
	AnimMontage* C_ClimbWallDeath;//[Offset: 0x6b8, Size: 8]
	AnimMontage* C_BurningDeath;//[Offset: 0x6c0, Size: 8]
	AnimMontage* C_MeleeDeath;//[Offset: 0x6c8, Size: 8]
	AnimMontage* C_GobackDeath;//[Offset: 0x6d0, Size: 8]
	AnimSequence* C_Observe;//[Offset: 0x6d8, Size: 8]
	AimOffsetBlendSpace* C_WeaponAim;//[Offset: 0x6e0, Size: 8]
	AimOffsetBlendSpace* C_WeaponAim_Crouch;//[Offset: 0x6e8, Size: 8]
	AimOffsetBlendSpace* C_WeaponAim_Prone;//[Offset: 0x6f0, Size: 8]
	AnimSequence* C_InSitu_Walk;//[Offset: 0x6f8, Size: 8]
	AnimSequence* C_Backward_Walk;//[Offset: 0x700, Size: 8]
	AnimMontage* C_BreakWallAnim;//[Offset: 0x708, Size: 8]
	AnimMontage* C_NormalDeath_Falling;//[Offset: 0x710, Size: 8]
	UAEMonsterAnimListComponentBase* MonsterAnimListComponent;//[Offset: 0x730, Size: 8]
	STExtraAnimFM_Monster_Turning MonsterTurningFM;//[Offset: 0x738, Size: 136]
	bool ShouldSituWalk();// 0x406dac8
	void OnWeaponStateChanged(enum CurState);// 0x406da4c
	void OnPawnDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x406d7e4
	void OnPawnBorn(enum PawnState, byte BornType);// 0x406d72c
	void OnLeaveState(enum State);// 0x406d6b0
	void OnEnterState(enum State);// 0x406d634
	void OnAnimLoadedFinished(MonsterAsyncloadAnimParams MonsterAsyncloadAnimParams);// 0x406d5ac
	bool IsFightrunning();// 0x406d56c
	void HandleStiff(bool Active);// 0x406d4e8
	void HandleAnimEventMsg(FString Msg);// 0x406d464
	enum GetSPCState();// 0x406d430
	AnimationAsset* GetMonsterAnimByPoseType(byte PoseType);// 0x406d3a4
	AnimationAsset*[] GetMonsterAnimArrayByPoseType(byte PoseType);// 0x406d2d4
	void CacheParamList(float DeltaSeconds);// 0x406d250
	void CacheAnimVarList(bool ForceRefreshVar);// 0x406d1cc

--------------------------------
Class: UAEMonsterAnimListComponentBase.SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	MonsterAnimPhaseData[] MosterAnimDatas;//[Offset: 0x2d8, Size: 16]
	bool bUseRunAnimSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	float runAnimSpeed;//[Offset: 0x2ec, Size: 4]
	float runFightingAnimSpeed;//[Offset: 0x2f0, Size: 4]
	delegate OnMonsterAnimLoadedFinished;//[Offset: 0x2f8, Size: 16]
	void SortAnimations();// 0x4163178
	void RemoveChildComponent(UAEAnimListComponentBase* ChildComponent);// 0x41630f4
	void OnAsyncLoadingFinished(AsyncLoadMonsterAnimParams loadAnimParams);// 0x4162f80
	void OnAsyncLoadingFinished(MonsterAsyncloadAnimParams loadAnimParams);// 0x4162ef8
	AnimationAsset*[] GetMonsterPhaseAnimAssetsByType(byte PoseType);// 0x4162e28
	MonsterAnimPhaseData[] GetMonsterAnimPhaseDataByType(byte PoseType);// 0x4162d04
	AnimationAsset*[] GetMonsterAnimArrayByType(byte PoseType);// 0x4162c34
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x4162b74

--------------------------------
Class: SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimDataPair[] AnimDataPairs;//[Offset: 0x238, Size: 16]
	CurveFloat* hitPoseAndDistanceCurve;//[Offset: 0x248, Size: 8]
	<int,float> moveAnimSpeed;//[Offset: 0x250, Size: 80]
	float PlayMoveDeathMinimumDist;//[Offset: 0x2a0, Size: 4]
	delegate OnAnimLoadedFinished;//[Offset: 0x2a8, Size: 16]
	void SortAnimations();// 0x3f918ec
	void RemoveChildComponent(UAEAnimListComponentBase* ChildComponent);// 0x3f91868
	void OnAsyncLoadingFinished(AsyncLoadAnimParams loadAnimParams);// 0x3f916f4
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x3f91634

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	PlayerShovelAnimData[] ShovelAnimDataList;//[Offset: 0x158, Size: 16]
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x1d0, Size: 80]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x220, Size: 16]
	void RequestAddChildComponent(UAEAnimListComponentBase* ChildComp, byte AnimLayer);// 0x42e4d70
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x42e4cb0

--------------------------------
Class: AnimDataPair
	int PoseTypeID;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* AnimHardPtr;//[Offset: 0x30, Size: 8]

--------------------------------
Class: MonsterAnimPhaseData
	byte PosType;//[Offset: 0x0, Size: 1]
	FName PhaseName;//[Offset: 0x8, Size: 8]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x10, Size: 40]
	AnimationAsset* PhaseAnimHardPtr;//[Offset: 0x38, Size: 8]

--------------------------------
Class: PlayerShovelAnimData
	byte shoveAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* ShovelAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* AnimAsset;//[Offset: 0x40, Size: 8]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 4]
	AnimationAsset* Animation;//[Offset: 0x8, Size: 8]

--------------------------------
Class: AsyncLoadMonsterAnimParams

--------------------------------
Class: MonsterAsyncloadAnimParams
	byte PosType;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AsyncLoadAnimParams

--------------------------------
Class: STExtraAnimFM_Monster_Turning.AnimFunctionModule
	AnimSequence* as_TurnAnim_Left;//[Offset: 0x50, Size: 8]
	AnimSequence* as_TurnAnim_Right;//[Offset: 0x58, Size: 8]
	bool b_IsTurningLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool b_IsTurningRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	float TurnResetTimeDefault;//[Offset: 0x64, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x68, Size: 4]
	float MoveMaxSpeedWhenTuring;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: SimpleCharAnimParamList
	int IdleBlendSpaceValue;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SimpleLagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool bUsePhysVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b, Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	float TolerateShootPointDistanceSqured;//[Offset: 0x140, Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0x144, Size: 4]
	bool bVerifyHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0x150, Size: 16]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0x164, Size: 4]
	float TolerateSimulatedDelayTime;//[Offset: 0x168, Size: 4]
	bool bVerifyBulletFlyTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 1]
	bool bVerifyMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e, Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	bool bVerifyHistoryLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 1]
	bool bVerifyShooterWeaponRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 1]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	float BulletFlyTimeVerifyMinTime;//[Offset: 0x178, Size: 4]
	float TolerateBulletFlyTimePercentage;//[Offset: 0x17c, Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0x180, Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x184, Size: 4]
	float TolerateShootHitAngle;//[Offset: 0x188, Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x18c, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x190, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x194, Size: 4]
	float TolerateShootRange;//[Offset: 0x198, Size: 4]
	byte[] TraceObjectTypes;//[Offset: 0x1a0, Size: 16]
	float ShooterWeaponRange;//[Offset: 0x1b0, Size: 4]
	float ShooterWeaponHeight;//[Offset: 0x1b4, Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1bc, Size: 4]
	float TolerateShootMuzzleHeight;//[Offset: 0x1c0, Size: 4]
	bool bUseSimpleVerifyHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	bool bUseSimpleVerifyHitParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c5, Size: 1]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c6, Size: 1]
	float TolerateLocusSingle;//[Offset: 0x1c8, Size: 4]
	float TolerateLocusDist;//[Offset: 0x1cc, Size: 4]
	float TolerateLocusSegment;//[Offset: 0x1d0, Size: 4]
	float TolerateLocusZOffsetUp;//[Offset: 0x1d4, Size: 4]
	float TolerateLocusZOffsetDown;//[Offset: 0x1d8, Size: 4]
	float LocusZHistoryUpInVehicle;//[Offset: 0x1dc, Size: 4]
	float MaxGunPosZHeight;//[Offset: 0x1e0, Size: 4]
	float MaxGunPosLength;//[Offset: 0x1e4, Size: 4]
	float LocusSearchBackTime;//[Offset: 0x1e8, Size: 4]
	float HistBack_SingleRadius;//[Offset: 0x1ec, Size: 4]
	float HistBack_TolerateBoxExpand;//[Offset: 0x1f0, Size: 4]
	Vector GiftHeadBoundingBoxUpperOffset;//[Offset: 0x1f4, Size: 12]
	Vector GiftHeadBoundingBoxLowerOffset;//[Offset: 0x200, Size: 12]
	bool bVerifyBonePointInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 1]
	float BonePointTorelate;//[Offset: 0x210, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0x214, Size: 4]
	Character* CharacterOwner;//[Offset: 0x218, Size: 8]
	float SimulatedCharacterServerTime();// 0x3e6aa1c
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x3e6a938

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0x124, Size: 8]
	ShootVictimAntiCheatAsset* AcAsset;//[Offset: 0x130, Size: 8]

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0, Size: 4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0, Size: 1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4, Size: 12]
	Vector HeadBoundBoxExtent;//[Offset: 0x10, Size: 12]
	Vector Offset;//[Offset: 0x1c, Size: 12]
	Vector PitchOffset;//[Offset: 0x28, Size: 12]
	float ReferenceHSlope;//[Offset: 0x34, Size: 4]
	float ReferenceVSlope;//[Offset: 0x38, Size: 4]
	float HMinScale;//[Offset: 0x3c, Size: 4]
	float VMinScale;//[Offset: 0x40, Size: 4]
	float HMaxScale;//[Offset: 0x44, Size: 4]
	float VMaxScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: ShootVictimAntiCheatAsset.Object
	<FName,KAggregateGeom> BoneGeoms;//[Offset: 0x28, Size: 80]

--------------------------------
Class: CharacterHistoryData
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Box BoundBox;//[Offset: 0x18, Size: 28]
	Box HeadBoundBox;//[Offset: 0x34, Size: 28]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	Vector VehicleLocation;//[Offset: 0x54, Size: 12]
	enum MoveBaseState;//[Offset: 0x60, Size: 1]

--------------------------------
Class: MonsterBornStateConfig
	enum PawnState;//[Offset: 0x0, Size: 1]
	int BornType;//[Offset: 0x4, Size: 4]
	int FrontBornType;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MonsterShotGunDamageEventBroadcastData
	ItemDefineID CauserWeaponID;//[Offset: 0x0, Size: 24]
	int DamageEventType;//[Offset: 0x18, Size: 4]
	float[] DamageList;//[Offset: 0x20, Size: 16]
	Pawn* DamageInstigatorPawn;//[Offset: 0x30, Size: 8]
	bool bIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: MonsterStunAttrModitfyConfig
	FString ModifyAttr;//[Offset: 0x0, Size: 16]
	enum Op;//[Offset: 0x10, Size: 1]
	float ModifyValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MonsterDurationData
	enum DurationType;//[Offset: 0x0, Size: 1]
	float DurationValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MonsterClimbData
	enum ClimbPhase;//[Offset: 0x0, Size: 1]
	float ClimbLocZ;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PartDamageComponent.ActorComponent.Object
	MaterialInterface* HiddenMaterial;//[Offset: 0x158, Size: 8]
	SkeletalMesh* damageSkeletalMesh;//[Offset: 0x160, Size: 8]
	SkeletalMesh* originSkeletalMesh;//[Offset: 0x168, Size: 8]
	bool IsPartDamaging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	PartDamagePair[] PartDamagePairs;//[Offset: 0x178, Size: 16]
	void SwitchedToNewPose(enum activePart);// 0x3ee7e00
	void ProcessDamagePart(enum activePart, bool Active);// 0x3ee7d38

--------------------------------
Class: PartDamagePair
	bool isDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum partName;//[Offset: 0x1, Size: 1]
	float brokenDamage;//[Offset: 0x4, Size: 4]
	float accumDamage;//[Offset: 0x8, Size: 4]
	SoftObjectPath FXPath;//[Offset: 0x10, Size: 24]
	FName FXSocket;//[Offset: 0x28, Size: 8]
	byte NewPose;//[Offset: 0x30, Size: 1]
	FName newAnimListTag;//[Offset: 0x38, Size: 8]
	AnimMontage* switchListAnimation;//[Offset: 0x40, Size: 8]
	float switchListTime;//[Offset: 0x48, Size: 4]
	FName MaterialSlotName;//[Offset: 0x50, Size: 8]
	FString attrModName;//[Offset: 0x58, Size: 16]
	PartDamageAttrModitfyConfig[] attrMods;//[Offset: 0x68, Size: 16]
	BloodSetting BloodSetting;//[Offset: 0x78, Size: 56]

--------------------------------
Class: PartDamageAttrModitfyConfig
	FString ModifyAttr;//[Offset: 0x0, Size: 16]
	enum Op;//[Offset: 0x10, Size: 1]
	float ModifyValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BloodSetting
	int DecalId;//[Offset: 0x0, Size: 4]
	int decalMaxID;//[Offset: 0x4, Size: 4]
	Rotator decalRotateStartDir;//[Offset: 0x8, Size: 12]
	Rotator decalRotateEndDir;//[Offset: 0x14, Size: 12]
	float decalOffsetMinDistance;//[Offset: 0x20, Size: 4]
	float decalOffsetMaxDistance;//[Offset: 0x24, Size: 4]
	Vector decalScale3D;//[Offset: 0x28, Size: 12]
	float decalShowDelay;//[Offset: 0x34, Size: 4]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 8]

--------------------------------
Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	bool bHitOtherDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]

--------------------------------
Class: STPointDamageEvent.PointDamageEvent.DamageEvent
	int ItemID;//[Offset: 0xb0, Size: 4]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x14, Size: 4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x18, Size: 12]
	HitResult HitInfo;//[Offset: 0x28, Size: 136]

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x14, Size: 20]
	Vector Origin;//[Offset: 0x28, Size: 12]
	HitResult[] ComponentHits;//[Offset: 0x38, Size: 16]

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 4]
	float MinimumDamage;//[Offset: 0x4, Size: 4]
	float InnerRadius;//[Offset: 0x8, Size: 4]
	float OuterRadius;//[Offset: 0xc, Size: 4]
	float DamageFalloff;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte MeleeWeaponSubType;//[Offset: 0xb4, Size: 1]
	byte AvatarDamagePosition;//[Offset: 0xb5, Size: 1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 1]

--------------------------------
Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	Vector FallingSpeed;//[Offset: 0xb4, Size: 12]

--------------------------------
Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: PopKartPassDoorAccelerate
	bool CanUsePassDoorAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float PassAcceleratePercent;//[Offset: 0x4, Size: 4]
	float MaxSpeed;//[Offset: 0x8, Size: 4]
	float minSpeed;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x3e8, Size: 4]
	float MaxQuadLength;//[Offset: 0x3ec, Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x3f0, Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x3f8, Size: 8]
	float DefaultTrailWidth;//[Offset: 0x400, Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	float DefaultTrailLength;//[Offset: 0x408, Size: 4]
	float TextureLength;//[Offset: 0x40c, Size: 4]
	int USegmentNum;//[Offset: 0x410, Size: 4]
	int CoordU;//[Offset: 0x414, Size: 4]
	int SlippingCoordU;//[Offset: 0x418, Size: 4]
	int BrokenCoordU;//[Offset: 0x41c, Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x424, Size: 4]
	float AdditionalTextureLength;//[Offset: 0x428, Size: 4]
	int AdditionalCoordU;//[Offset: 0x42c, Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x430, Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x434, Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x440, Size: 8]
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x4134068
	void StopUpdate();// 0x4134054
	bool IsUpdating();// 0x413401c

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x6d8, Size: 16]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e9, Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ea, Size: 1]
	enum CollisionMode;//[Offset: 0x6eb, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x6f0, Size: 8]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x728, Size: 16]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x738, Size: 16]
	BoxSphereBounds LocalBounds;//[Offset: 0x748, Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x768, Size: 88]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x7c0, Size: 16]
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0x7736d64
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0x7736c40
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x7736b80
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x7736ac0
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x7736a00
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x77368c8
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0xffffff8f20d162a8
	bool IsMeshSectionVisible(int SectionIndex);// 0x7736838
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x77367a8
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x7736718
	int GetNumSections();// 0x77366e4
	int GetLastSectionIndex();// 0x77366b0
	int FirstAvailableMeshSectionIndex();// 0x773667c
	void EndBatchUpdates();// 0x7736668
	bool DoesSectionExist(int SectionIndex);// 0x77365d8
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0x7736198
	void CookCollisionNow();// 0x7736184
	void ClearMeshSection(int SectionIndex);// 0x7736108
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x773608c
	void ClearCollisionConvexMeshes();// 0x7736078
	void ClearAllMeshSections();// 0x7736064
	void ClearAllMeshCollisionSections();// 0x7736050
	void BeginBatchUpdates();// 0x7736034
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x7735f58

--------------------------------
Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 16]
	int[] IndexBuffer;//[Offset: 0x10, Size: 16]

--------------------------------
Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 16]
	Box BoundingBox;//[Offset: 0x10, Size: 28]

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 12]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: TrailMarkInputData
	bool bContainValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector Normal;//[Offset: 0x40, Size: 12]
	enum Type;//[Offset: 0x4c, Size: 1]
	bool bBackWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x30, Size: 16]

--------------------------------
Class: WheelSfxOnSurface
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0, Size: 8]
	AkAudioEvent* EventStart;//[Offset: 0x8, Size: 8]
	AkAudioEvent* EventStop;//[Offset: 0x10, Size: 8]

--------------------------------
Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x58, Size: 8]

--------------------------------
Class: STExtraVehicleSfxLoopBase
	AkComponent* AKComp;//[Offset: 0x0, Size: 8]
	<uint32,float> MapRTPC;//[Offset: 0x8, Size: 80]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x2f8, Size: 8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x300, Size: 16]
	int EarlyReflectionOrder;//[Offset: 0x310, Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x314, Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x318, Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x320, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x322, Size: 1]
	bool bForceUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x322, Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x322, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x330, Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x334, Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x338, Size: 8]
	FString EventName;//[Offset: 0x340, Size: 16]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x71b5664
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool Floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x71b539c
	void StopPlayingID(int StopEventID);// 0x71b5320
	void Stop();// 0x71b530c
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x71b51a4
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x71b5120
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x71b500c
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x71b4ebc
	void SetOutputBusVolume(float BusVolume);// 0x71b4e40
	void SetListeners(out const AkComponent*[] Listeners);// 0x71b4dac
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x71b4d30
	void SetAutoDestroy(bool in_AutoDestroy);// 0x71b4cb0
	void SetAttenuationScalingFactor(float Value);// 0x71b4c34
	void PostTrigger(FString Trigger);// 0x71b4b5c
	int PostAssociatedAkEvent();// 0x71b4b28
	int PostAkEventByName(FString in_EventName);// 0x71b4a94
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x71b49c0
	bool IsStart();// 0x71b49a4
	bool HasActiveEvents();// 0x71b496c
	float GetAttenuationRadius();// 0x71b4938

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 8]

--------------------------------
Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x58, Size: 8]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x60, Size: 8]

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0, Size: 1]
	int8 ThrottleInput;//[Offset: 0x1, Size: 1]
	int8 BrakeInput;//[Offset: 0x2, Size: 1]
	int8 HandbrakeInput;//[Offset: 0x3, Size: 1]
	int8 CurrentGear;//[Offset: 0x4, Size: 1]

--------------------------------
Class: VehiclePostPhysxTick.TickFunction

--------------------------------
Class: PlayerLevel
	float CurrentExp;//[Offset: 0x0, Size: 4]
	float LevelUpExp;//[Offset: 0x4, Size: 4]
	float LastLevelUpExp;//[Offset: 0x8, Size: 4]
	int CurrentLevel;//[Offset: 0xc, Size: 4]
	int NextLevel;//[Offset: 0x10, Size: 4]
	float TotalDamage;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x3e8, Size: 8]
	int DecalId;//[Offset: 0x3f0, Size: 4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x400, Size: 112]
	STExtraPlayerState* OwnerPS;//[Offset: 0x470, Size: 8]
	void OnRep_DecalInfo();// 0x3e538d8

--------------------------------
Class: IdeaDecalInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform Transform;//[Offset: 0x10, Size: 48]
	enum ParentType;//[Offset: 0x50, Size: 1]
	PrimitiveComponent* Parent;//[Offset: 0x54, Size: 8]

--------------------------------
Class: HunterTaskTeamMgr.Actor.Object
	int MapMarkItemID;//[Offset: 0x3e8, Size: 4]
	int MapScanerItemID;//[Offset: 0x3ec, Size: 4]
	int HuntTaskTimeOut;//[Offset: 0x3f0, Size: 4]
	int HuntTaskID;//[Offset: 0x3f4, Size: 4]
	float HuntTaskScanInterval;//[Offset: 0x3f8, Size: 4]
	HunterTaskListener* HunterTaskListener;//[Offset: 0x400, Size: 8]
	HuntedTeammateInfo[] BeingHuntedPlayersInTeam;//[Offset: 0x408, Size: 16]
	HuntTargetInfo TargetHuntedPlayer;//[Offset: 0x418, Size: 28]
	HuntTargetRepInfo[] HuntTargetRepInfoList;//[Offset: 0x438, Size: 16]
	HuntTaskPickerInfo HuntPickerInfo;//[Offset: 0x448, Size: 20]
	int[] LocalMapMarkIDList;//[Offset: 0x460, Size: 16]
	int LocalMarkInstID;//[Offset: 0x470, Size: 4]
	Actor*[] VisitedHunterStores;//[Offset: 0x478, Size: 16]
	int CurrentTeamID;//[Offset: 0x488, Size: 4]
	MarkSyncData LocalMarkData;//[Offset: 0x490, Size: 112]
	<int> MapMarkIDSet;//[Offset: 0x500, Size: 80]
	void UpdateHuntedPlayerInfoInTeam(STExtraPlayerState* PlayerState, float Dist);// 0x3e4eb0c
	void SetHuntedTargetInfo(HuntTargetInfo TargetInfo);// 0x3e4ea60
	void RemoveHuntTargetPlayer(STExtraPlayerState* PlayerState);// 0x3e4e9e4
	void RemoveHuntedPlayerInTeam(STExtraPlayerState* PlayerState);// 0x3e4e968
	bool PickHuntTask(Object* Picker);// 0x3e4e8d8
	void OnUpdateBeingHuntedTeammate();// 0xffffff8f20d162a8
	void OnTaskCompleted(int TaskID);// 0xffffff8f20d162a8
	void OnRep_TargetHuntedPlayer();// 0x3e4e8c4
	void OnRep_HuntTaskPickerInfo();// 0x3e4e8b0
	void OnRep_HuntTargetRepInfoList();// 0x3e4e89c
	void OnRep_BeingHuntedPlayersInTeam();// 0x3e4e888
	void OnNotifyHuntTargetRepInfoList();// 0xffffff8f20d162a8
	bool IsTaskExist(int TaskID);// 0x3e4e7f8
	bool HasPlayerBeingHunted(STExtraPlayerState* PlayerState);// 0x3e4e768
	bool HandleUseTaskItem(int TaskID, Object* Picker);// 0x3e4e69c
	void GetVisitedHunterStores(out Actor*[] OutList);// 0x3e4e608
	int GetTaskCompletedTimes(int TaskID);// 0x3e4e57c
	void AddOrUpdateHuntTargetPlayer(HuntTargetRepInfo RepInfo);// 0x3e4e460
	void AddHuntedPlayerInTeam(STExtraPlayerState* PlayerState, float Dist);// 0x3e4e3a8

--------------------------------
Class: HunterTaskListener.UniversalTaskController.ActorComponent.Object
	<int,int> TaskCompletedTimes;//[Offset: 0x240, Size: 80]
	HunterTaskTeamMgr* DataOwner;//[Offset: 0x290, Size: 8]
	bool OnHandleUseTaskItem(int TaskID, Object* Picker);// 0x3e4d63c
	int GetTaskCompletedTimes(int TaskID);// 0x3e4d5b0

--------------------------------
Class: UniversalTaskController.ActorComponent.Object
	delegate OnNotifyTaskInfo;//[Offset: 0x120, Size: 16]
	<int,TaskEventCache> AutoTriggerEventRecord;//[Offset: 0x130, Size: 80]
	TaskRepInfo[] ReplicatedTaskList;//[Offset: 0x180, Size: 16]
	UniversalTaskMgr* OwnerManager;//[Offset: 0x190, Size: 8]
	<int,UniversalTaskBlackboard*> TaskBlackboardMap;//[Offset: 0x198, Size: 80]
	<int,int> TaskProgressRecord;//[Offset: 0x1e8, Size: 80]
	void TriggerTaskEvent(int TaskID, FString EventName);// 0x73e5680
	void TriggerOccupyEvent(int TaskID);// 0x73e5604
	void OnTaskDoneNotify(int TaskID);// 0xffffff8f20d162a8
	void OnRep_ReplicatedTaskList();// 0x73e55f0
	void OnRep_OwnerManager();// 0x73e55dc
	void OnClientReceiveOwnerManager();// 0xffffff8f20d162a8
	void Initialize(UniversalTaskMgr* TaskMgr);// 0x73e5558
	bool HasTask(int TaskID);// 0x73e54c8
	int GetTaskNumber();// 0x73e5494
	UniversalTaskBlackboard* GetTaskBlackboardByTaskID(int TaskID);// 0x73e5408
	UniversalTaskMgr* GetOwnerTaskMgr();// 0x73e53d4
	void AddNewTaskForPlayer(int TaskID, int TaskTypeID);// 0x73e5320

--------------------------------
Class: TaskEventCache
	float[] TriggerTimerList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: TaskRepInfo
	int TaskID;//[Offset: 0x0, Size: 4]
	int CurrentProcess;//[Offset: 0x4, Size: 4]
	int TotalProcess;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UniversalTaskMgr.Actor.Object
	<int,FString> TaskTemplateMap;//[Offset: 0x3f0, Size: 80]
	<int,int> AdditionMapList;//[Offset: 0x440, Size: 80]
	FString[] GlobalTaskClassList;//[Offset: 0x490, Size: 16]
	class UniversalTaskController* PlayerTaskControllerClass;//[Offset: 0x4a0, Size: 8]
	bool bApplyToObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	<int,UniversalTask*> PlayerTaskMap;//[Offset: 0x4b0, Size: 80]
	<int> PlayerBornTaskSet;//[Offset: 0x500, Size: 80]
	UniversalTask*[] GlobalTaskList;//[Offset: 0x550, Size: 16]
	<SharedBlackboardAsset*,UniversalTaskBlackboard*> SharedBlackboards;//[Offset: 0x560, Size: 80]
	UniversalTaskController*[] AllTaskControllers;//[Offset: 0x5b0, Size: 16]
	void SetPlayerTaskTargetProgress(int InTaskID, int TargetProgress);// 0x73e82a4
	void RunGlobalTasks();// 0x73e8290
	void RunAllPlayerTask();// 0x73e827c
	void RegisterPlayerBornTaskListener(UniversalTaskController* ParentController);// 0x73e8200
	void OnTaskDoneNotify(UniversalTaskController* Controller, int TaskID);// 0xffffff8f20d162a8
	void OnTaskControllerRegistered(UniversalTaskController* TaskController);// 0xffffff8f20d162a8
	void OnGameStateReady();// 0xffffff8f20d162a8
	bool NeedReplicatedTask(int TaskID);// 0x73e8168
	bool IsPlayerTaskTemplateExist(int InTaskType);// 0x73e80d8
	bool IsPlayerBornTask(int InTaskID);// 0x73e8048
	UniversalTaskBlackboard* InstantiateTaskBlackboardByType(int InTaskID, int InTaskTypeID, UniversalTaskController* ParentController);// 0x73e7f48
	UniversalTask* GetTaskByID(int InTaskID);// 0x73e7ebc
	bool CreatePlayerBornTaskFormDataTable();// 0xffffff8f20d162a8
	void CreateOnePlayerTask(int InTaskID, int InTaskTypeID, bool IsPlayerBornTask, bool RunTask, int TargetProgress);// 0x73e7d3c
	void CreateGlobalTasks();// 0x73e7d28
	bool CreateAndRegisterPlayerTaskListener(int InTaskID, int InTaskTypeID, UniversalTaskController* ParentController);// 0x73e7c24
	bool ConstructTaskFlow();// 0xffffff8f20d162a8

--------------------------------
Class: UniversalTask.UAETriggerObject.Object
	int TaskID;//[Offset: 0x1b8, Size: 4]
	int TaskTypeID;//[Offset: 0x1bc, Size: 4]
	int TargetTaskProgress;//[Offset: 0x1c0, Size: 4]
	int CurrentTaskProgress;//[Offset: 0x1c4, Size: 4]
	enum TaskRunningState;//[Offset: 0x1c8, Size: 1]
	UniversalTaskNode* RootNode;//[Offset: 0x1d0, Size: 8]
	bool bIsLuaTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	UniversalTaskBlackboard* TaskBlackboard;//[Offset: 0x1e0, Size: 8]
	SharedBlackboardAsset* SharedBlackboardAsset;//[Offset: 0x1e8, Size: 8]
	UniversalTaskFuncBPBase* TaskFuncBP;//[Offset: 0x1f0, Size: 8]
	UniversalTaskNode*[] AllTaskNodes;//[Offset: 0x1f8, Size: 16]
	UniversalTaskActionNodeEvent*[] EventRoots;//[Offset: 0x208, Size: 16]
	UniversalTaskActionNodeEvent*[] AutoTriggerEvents;//[Offset: 0x218, Size: 16]
	<Guid,DerivedTaskNodeModifiedDetail> DerivedTaskModifiedNodesDetail;//[Offset: 0x228, Size: 80]
	bool bIsEventTriggerTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	UniversalTaskBlackboardParameter[] BlackboardParamList;//[Offset: 0x280, Size: 16]
	UniversalTask* BaseTaskAsset;//[Offset: 0x290, Size: 8]
	class Object* TaskEventFunctionLibrary;//[Offset: 0x298, Size: 8]
	TriggerEventKeySelector TaskEventSelector;//[Offset: 0x2a0, Size: 8]
	Actor* OwnerActor;//[Offset: 0x2a8, Size: 8]
	ActorComponent* OwnerComp;//[Offset: 0x2b0, Size: 8]
	FString ContextString;//[Offset: 0x2b8, Size: 16]
	UniversalTaskNode*[] NodeEntryList;//[Offset: 0x2c8, Size: 16]
	UniversalTaskNode*[] NodeTickList;//[Offset: 0x2d8, Size: 16]
	UniversalTaskNode*[] TempTickList;//[Offset: 0x2e8, Size: 16]
	UniversalTaskController*[] PlayerTaskListenerList;//[Offset: 0x2f8, Size: 16]
	UniversalTaskController*[] PlayerTaskListenerTempList;//[Offset: 0x308, Size: 16]
	UniversalTaskController* CurrentTaskControllerRef;//[Offset: 0x318, Size: 8]
	UniversalTaskBlackboard* CurrentTaskBlackboardRef;//[Offset: 0x320, Size: 8]
	UniversalTaskBlackboard* SharedTaskBlackboardRef;//[Offset: 0x328, Size: 8]
	void TriggerTaskEventFrequently(UniversalTaskNode* EventRoot, UniversalTaskController* InTaskListener, UniversalTaskBlackboard* BlackBoard);// 0x73e0ae8
	void TriggerTaskEventByListener(FString EventName, UniversalTaskController* InTaskListener);// 0x73e09d4
	void TriggerTaskEventByFrequency(float TimeDelta);// 0x73e0958
	void TriggerTaskEvent(FString EventName);// 0x73e0880
	void Tick(float DeltaSeconds);// 0x73e0804
	void StopFlow();// 0x73e07f0
	void SetSharedTaskBlackboard(UniversalTaskBlackboard* SharedBlackboard);// 0x73e0774
	void SetOwnerComponent(ActorComponent* NewOwner);// 0x73e06f8
	void SetOwnerActor(Actor* NewOwner);// 0x73e067c
	void RunFlowOnce();// 0x73e0668
	void RunFlow();// 0x73e0654
	void ResumeFlow();// 0x73e0640
	void ReceiveTaskExecute();// 0xffffff8f20d162a8
	void PauseFlow();// 0x73e062c
	void InitTaskBlackboard();// 0x73e0618
	UniversalTaskBlackboard* GetTaskBlackboard();// 0x73e05e4
	FString GetTableValueAsString(enum ParamType);// 0x73e0514
	int GetTableValueAsInt32(enum ParamType);// 0x73e0488
	UniversalTaskBlackboard* GetSharedTaskBlackboard();// 0x73e0454
	UniversalTaskNode* GetRootNode();// 0x73e0438
	UniversalTaskController* GetPlayerTaskController();// 0x73e0404
	ActorComponent* GetOwnerComponent();// 0x73e03d0
	Actor* GetOwnerActor();// 0x73e039c
	Vector GetEventValueAsVector(out const FName Key);// 0x73e02fc
	FString GetEventValueAsString(out const FName Key);// 0x73e021c
	Object* GetEventValueAsObject(out const FName Key);// 0x73e0180
	int GetEventValueAsInt(out const FName Key);// 0x73e00e4
	float GetEventValueAsFloat(out const FName Key);// 0x73e0048
	bool GetEventValueAsBool(out const FName Key);// 0x73dffa8
	Actor* GetCurrentListeningActor();// 0x73dff74
	void ExecuteTaskByListener(UniversalTaskController* InTaskListener);// 0x73dfef8
	void EndPlay();// 0x73dfee4
	void BeginPlay();// 0x73dfed0
	void AddPlayerTaskListener(UniversalTaskController* InTaskListener);// 0x73dfe54

--------------------------------
Class: UAETriggerObject.Object
	enum RunType;//[Offset: 0x28, Size: 1]
	FString TriggerName;//[Offset: 0x30, Size: 16]
	Actor* OuterActor;//[Offset: 0x40, Size: 8]
	class Object[] TriggerEventsClass;//[Offset: 0x48, Size: 16]
	TriggerAction*[] TriggerActions;//[Offset: 0x58, Size: 16]
	TriggerCondition*[] TriggerConditions;//[Offset: 0x68, Size: 16]
	FlowNodeBase* CarrierFlowNode;//[Offset: 0x78, Size: 8]
	<TriggerEvent*> TriggeredEvents;//[Offset: 0xa8, Size: 80]
	<TriggerAction*> CompleteActions;//[Offset: 0xf8, Size: 80]
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x148, Size: 8]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	float TickInterval;//[Offset: 0x16c, Size: 4]
	bool bShouldReplicateAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	FString Description;//[Offset: 0x178, Size: 16]
	bool bCacheParamToTriggerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	Property*[] EventParams;//[Offset: 0x190, Size: 16]

--------------------------------
Class: UniversalTaskNode.Object
	Guid NodeGuid;//[Offset: 0x38, Size: 16]
	UniversalTask* OwnerUniversalTask;//[Offset: 0x48, Size: 8]
	UniversalTaskNode* ParentNode;//[Offset: 0x50, Size: 8]
	UniversalTaskNodePinOut[] OutputPinList;//[Offset: 0x58, Size: 16]
	enum CurrentState;//[Offset: 0x68, Size: 1]
	void TriggerTaskEvent(FString EventName);// 0x73ebe50
	void SetSharedBlackboardValueAsWeakObject(out const TaskBlackboardKeySelector Key, Object* ObjectValue);// 0x73ebd7c
	void SetSharedBlackboardValueAsVector(out const TaskBlackboardKeySelector Key, Vector VectorValue);// 0x73ebca0
	void SetSharedBlackboardValueAsString(out const TaskBlackboardKeySelector Key, FString StringValue);// 0x73ebb78
	void SetSharedBlackboardValueAsRotator(out const TaskBlackboardKeySelector Key, Rotator VectorValue);// 0x73ebaa4
	void SetSharedBlackboardValueAsObject(out const TaskBlackboardKeySelector Key, Object* ObjectValue);// 0x73eb9d0
	void SetSharedBlackboardValueAsName(out const TaskBlackboardKeySelector Key, FName NameValue);// 0x73eb8fc
	void SetSharedBlackboardValueAsInt(out const TaskBlackboardKeySelector Key, int IntValue);// 0x73eb828
	void SetSharedBlackboardValueAsFloat(out const TaskBlackboardKeySelector Key, float FloatValue);// 0x73eb754
	void SetSharedBlackboardValueAsEnum(out const TaskBlackboardKeySelector Key, byte EnumValue);// 0x73eb680
	void SetSharedBlackboardValueAsClass(out const TaskBlackboardKeySelector Key, class Object ClassValue);// 0x73eb5ac
	void SetSharedBlackboardValueAsBool(out const TaskBlackboardKeySelector Key, bool BoolValue);// 0x73eb4d0
	void SetNodeState(enum NewState);// 0x73eb458
	void SetCurrentTaskProgress(int Progress);// 0x73eb3dc
	void SetBlackboardValueAsWeakObject(out const TaskBlackboardKeySelector Key, Object* ObjectValue);// 0x73eb308
	void SetBlackboardValueAsVector(out const TaskBlackboardKeySelector Key, Vector VectorValue);// 0x73eb22c
	void SetBlackboardValueAsString(out const TaskBlackboardKeySelector Key, FString StringValue);// 0x73eb104
	void SetBlackboardValueAsRotator(out const TaskBlackboardKeySelector Key, Rotator VectorValue);// 0x73eb030
	void SetBlackboardValueAsObject(out const TaskBlackboardKeySelector Key, Object* ObjectValue);// 0x73eaf5c
	void SetBlackboardValueAsName(out const TaskBlackboardKeySelector Key, FName NameValue);// 0x73eae88
	void SetBlackboardValueAsInt(out const TaskBlackboardKeySelector Key, int IntValue);// 0x73eadb4
	void SetBlackboardValueAsFloat(out const TaskBlackboardKeySelector Key, float FloatValue);// 0x73eace0
	void SetBlackboardValueAsEnum(out const TaskBlackboardKeySelector Key, byte EnumValue);// 0x73eac0c
	void SetBlackboardValueAsClass(out const TaskBlackboardKeySelector Key, class Object ClassValue);// 0x73eab38
	void SetBlackboardValueAsBool(out const TaskBlackboardKeySelector Key, bool BoolValue);// 0x73eaa5c
	void OnTick(float DeltaSeconds);// 0xffffff8f20d162a8
	void OnTaskCompleted();// 0x73eaa48
	void OnEndPlay();// 0xffffff8f20d162a8
	void OnBeginPlay();// 0xffffff8f20d162a8
	bool IsNodeActive();// 0x73eaa24
	bool IsDedicatedServer();// 0x73ea9ec
	bool IsBlackboardExistWeakObject(out const TaskBlackboardKeySelector Key);// 0x73ea94c
	bool IsBlackboardExistVector(out const TaskBlackboardKeySelector Key);// 0x73ea8ac
	bool IsBlackboardExistString(out const TaskBlackboardKeySelector Key);// 0x73ea80c
	bool IsBlackboardExistRotator(out const TaskBlackboardKeySelector Key);// 0x73ea76c
	bool IsBlackboardExistObject(out const TaskBlackboardKeySelector Key);// 0x73ea6cc
	bool IsBlackboardExistName(out const TaskBlackboardKeySelector Key);// 0x73ea62c
	bool IsBlackboardExistInt(out const TaskBlackboardKeySelector Key);// 0x73ea58c
	bool IsBlackboardExistFloat(out const TaskBlackboardKeySelector Key);// 0x73ea4ec
	bool IsBlackboardExistEnum(out const TaskBlackboardKeySelector Key);// 0x73ea44c
	bool IsBlackboardExistClass(out const TaskBlackboardKeySelector Key);// 0x73ea3ac
	bool IsBlackboardExistBool(out const TaskBlackboardKeySelector Key);// 0x73ea30c
	void GoToNext(int PinIndex);// 0x73ea290
	float GetTimeSeconds();// 0x73ea25c
	int GetTaskType();// 0x73ea228
	int GetTaskTargetProcess();// 0x73ea1f4
	int GetTaskID();// 0x73ea1c0
	UniversalTaskBlackboard* GetTaskBlackboard();// 0x73ea18c
	bool GetTableParameterString(out FString Dest, enum ParamType);// 0x73ea0a0
	bool GetTableParameterInt32(out int Dest, enum ParamType);// 0x73e9fc0
	Object* GetSharedBlackboardValueAsWeakObject(out const TaskBlackboardKeySelector Key);// 0x73e9f24
	Vector GetSharedBlackboardValueAsVector(out const TaskBlackboardKeySelector Key);// 0x73e9e84
	FString GetSharedBlackboardValueAsString(out const TaskBlackboardKeySelector Key);// 0x73e9da4
	Rotator GetSharedBlackboardValueAsRotator(out const TaskBlackboardKeySelector Key);// 0x73e9d04
	Object* GetSharedBlackboardValueAsObject(out const TaskBlackboardKeySelector Key);// 0x73e9c68
	FName GetSharedBlackboardValueAsName(out const TaskBlackboardKeySelector Key);// 0x73e9bcc
	int GetSharedBlackboardValueAsInt(out const TaskBlackboardKeySelector Key);// 0x73e9b30
	float GetSharedBlackboardValueAsFloat(out const TaskBlackboardKeySelector Key);// 0x73e9a94
	byte GetSharedBlackboardValueAsEnum(out const TaskBlackboardKeySelector Key);// 0x73e99f8
	class Object GetSharedBlackboardValueAsClass(out const TaskBlackboardKeySelector Key);// 0x73e995c
	bool GetSharedBlackboardValueAsBool(out const TaskBlackboardKeySelector Key);// 0x73e98bc
	int GetRuntimeOutputPinNumber();// 0x73e98a0
	UniversalTaskNode* GetParentNode();// 0x73e9884
	UniversalTask* GetOwner();// 0x73e9868
	ActorComponent* GetOuterComponent();// 0x73e9834
	Actor* GetOuterActor();// 0x73e9800
	enum GetNodeState();// 0x73e97e4
	Actor* GetListenActor();// 0x73e97b0
	UniversalTaskNode*[] GetFollowNodesByPinIndex(int PinIndex);// 0x73e96e0
	FString GetEventValueAsString(out const TriggerEventParamKeySelector Key);// 0x73e95f0
	int GetEventValueAsInt(out const TriggerEventParamKeySelector Key);// 0x73e9544
	float GetEventValueAsFloat(out const TriggerEventParamKeySelector Key);// 0x73e9498
	bool GetEventValueAsBool(out const TriggerEventParamKeySelector Key);// 0x73e93e8
	int GetCurrentTaskProcess();// 0x73e93b4
	Object* GetBlackboardValueAsWeakObject(out const TaskBlackboardKeySelector Key);// 0x73e9318
	Vector GetBlackboardValueAsVector(out const TaskBlackboardKeySelector Key);// 0x73e9278
	FString GetBlackboardValueAsString(out const TaskBlackboardKeySelector Key);// 0x73e9198
	Rotator GetBlackboardValueAsRotator(out const TaskBlackboardKeySelector Key);// 0x73e90f8
	Object* GetBlackboardValueAsObject(out const TaskBlackboardKeySelector Key);// 0x73e905c
	FName GetBlackboardValueAsName(out const TaskBlackboardKeySelector Key);// 0x73e8fc0
	int GetBlackboardValueAsInt(out const TaskBlackboardKeySelector Key);// 0x73e8f24
	float GetBlackboardValueAsFloat(out const TaskBlackboardKeySelector Key);// 0x73e8e88
	byte GetBlackboardValueAsEnum(out const TaskBlackboardKeySelector Key);// 0x73e8dec
	class Object GetBlackboardValueAsClass(out const TaskBlackboardKeySelector Key);// 0x73e8d50
	bool GetBlackboardValueAsBool(out const TaskBlackboardKeySelector Key);// 0x73e8cb0
	void ExecuteNext(int PinIndex);// 0x73e8c34

--------------------------------
Class: UniversalTaskNodePinOut
	Guid PinId;//[Offset: 0x0, Size: 16]
	UniversalTaskNode*[] FollowNodes;//[Offset: 0x10, Size: 16]

--------------------------------
Class: TaskBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UniversalTaskBlackboard.Object
	<FName,Object*> ObjectParamMap;//[Offset: 0x28, Size: 80]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x78, Size: 80]
	<FName,class Object> ClassParamMap;//[Offset: 0xc8, Size: 80]
	<FName,byte> EnumParamMap;//[Offset: 0x118, Size: 80]
	<FName,int> IntParamMap;//[Offset: 0x168, Size: 80]
	<FName,uint32> UIntParamMap;//[Offset: 0x1b8, Size: 80]
	<FName,float> FloatParamMap;//[Offset: 0x208, Size: 80]
	<FName,bool> BoolParamMap;//[Offset: 0x258, Size: 80]
	<FName,FString> StringParamMap;//[Offset: 0x2a8, Size: 80]
	<FName,FName> NameParamMap;//[Offset: 0x2f8, Size: 80]
	<FName,Vector> VectorParamMap;//[Offset: 0x348, Size: 80]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x398, Size: 80]
	void SetValueAsWeakObject(out const FName KeyName, Object* ObjectValue);// 0x73e3b2c
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x73e3a50
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x73e3928
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x73e3854
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x73e3780
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x73e36ac
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x73e35d8
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x73e3504
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x73e3430
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x73e335c
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x73e3280
	bool IsExistWeakObject(out const FName KeyName);// 0x73e31e0
	bool IsExistVector(out const FName KeyName);// 0x73e3140
	bool IsExistString(out const FName KeyName);// 0x73e30a0
	bool IsExistRotator(out const FName KeyName);// 0x73e3000
	bool IsExistObject(out const FName KeyName);// 0x73e2f60
	bool IsExistName(out const FName KeyName);// 0x73e2ec0
	bool IsExistInt(out const FName KeyName);// 0x73e2e20
	bool IsExistFloat(out const FName KeyName);// 0x73e2d80
	bool IsExistEnum(out const FName KeyName);// 0x73e2ce0
	bool IsExistClass(out const FName KeyName);// 0x73e2c40
	bool IsExistBool(out const FName KeyName);// 0x73e2ba0
	Object* GetValueAsWeakObject(out const FName KeyName);// 0x73e2b04
	Vector GetValueAsVector(out const FName KeyName);// 0x73e2a64
	FString GetValueAsString(out const FName KeyName);// 0x73e2984
	Rotator GetValueAsRotator(out const FName KeyName);// 0x73e28e4
	Object* GetValueAsObject(out const FName KeyName);// 0x73e2848
	FName GetValueAsName(out const FName KeyName);// 0x73e27ac
	int GetValueAsInt(out const FName KeyName);// 0x73e2710
	float GetValueAsFloat(out const FName KeyName);// 0x73e2674
	byte GetValueAsEnum(out const FName KeyName);// 0x73e25d8
	class Object GetValueAsClass(out const FName KeyName);// 0x73e253c
	bool GetValueAsBool(out const FName KeyName);// 0x73e249c

--------------------------------
Class: TriggerEventParamKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]
	FString ParamData;//[Offset: 0x8, Size: 16]

--------------------------------
Class: SharedBlackboardAsset.DataAsset.Object
	<FName,byte> SharedBlackboardParameters;//[Offset: 0x30, Size: 80]

--------------------------------
Class: UniversalTaskFuncBPBase.UniversalTaskNode.Object
	TaskFuncNameSelector FuncNameKey;//[Offset: 0x70, Size: 8]

--------------------------------
Class: TaskFuncNameSelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UniversalTaskActionNodeEvent.UniversalTaskActionNode.UniversalTaskNode.Object
	FString EventName;//[Offset: 0x70, Size: 16]
	TriggerEventKeySelector CustomEventSelector;//[Offset: 0x80, Size: 8]
	bool bIsAutoTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	float TriggerFrequency;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: UniversalTaskActionNode.UniversalTaskNode.Object
	bool OnExecute();// 0xffffff8f20d162a8

--------------------------------
Class: TriggerEventKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: DerivedTaskNodeModifiedDetail
	UniversalTaskNode* ModifiedNode;//[Offset: 0x0, Size: 8]
	<FName> ModifiedPropertyNames;//[Offset: 0x8, Size: 80]

--------------------------------
Class: UniversalTaskBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 8]
	byte Type;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TriggerAction.Object
	VariableSet* DataSource;//[Offset: 0x28, Size: 8]
	bool bEnableActionTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	enum ExecPolicy;//[Offset: 0x49, Size: 1]
	UAETriggerObject* ParentTrigger;//[Offset: 0x50, Size: 8]
	UAELevelDirector* ActionOuterActor;//[Offset: 0x58, Size: 8]

--------------------------------
Class: VariableSet.Object
	<FName,UAETriggerVariableDesc> BlackboardVariableDescList;//[Offset: 0x28, Size: 80]
	VariableSetCachedActors DataActors;//[Offset: 0x78, Size: 88]

--------------------------------
Class: UAETriggerVariableDesc
	enum Type;//[Offset: 0x0, Size: 1]

--------------------------------
Class: VariableSetCachedActors
	Actor* LastAccessActor;//[Offset: 0x50, Size: 8]

--------------------------------
Class: UAELevelDirector.Actor.Object
	LevelDirectorInstCondition[] InstanceConditions;//[Offset: 0x3e8, Size: 16]
	LevelDirectorInstAction[] InstanceActions;//[Offset: 0x3f8, Size: 16]
	FString[] ClassPaths;//[Offset: 0x408, Size: 16]
	FString ConfigFilePath;//[Offset: 0x418, Size: 16]
	class UAELevelDirector_PlayerRepInfo* PlayerRepInfoClass;//[Offset: 0x428, Size: 8]
	UAELevelDirectorRepData LevelDirectorRepData;//[Offset: 0x430, Size: 24]
	<uint32,UAELevelDirector_PlayerRepInfo*> AllPlayersRepInfo;//[Offset: 0x448, Size: 80]
	UAETriggerFuncLib*[] FunctionLibList;//[Offset: 0x498, Size: 16]
	TriggersFlowTree* TriggersFlowTree;//[Offset: 0x4a8, Size: 8]
	<FString,UAETriggerObject*> TriggerObjectMap;//[Offset: 0x4b0, Size: 80]
	VariableSet* AllVariableSet;//[Offset: 0x500, Size: 8]
	FString DescData;//[Offset: 0x508, Size: 16]
	UAELevelDirector_PlayerRepInfo* CurLevelDirector_PlayerRepInfo;//[Offset: 0x518, Size: 8]
	<uint32,UAELevelDirector_PlayerRepInfo*> HistoryLevelDirector_PlayerRepInfos;//[Offset: 0x520, Size: 80]
	FString[] IDIP_Action_SpecialTag;//[Offset: 0x578, Size: 16]
	bool StartLevelDirector();// 0x73bc76c
	void SetTriggerRunType(FString TriggerName, enum RunType);// 0x73bc658
	void RequestTriggerComplete(UAETriggerObject* CompleteTrigger);// 0x73bc5a8
	void OnRep_LevelDirectorData();// 0x73bc594
	bool InitialLevelDirector();// 0x73bc554
	VariableSet* GetDataSet();// 0x73bc520
	bool FlowControllSubControll(FString[] TriggerNames);// 0x73bc39c
	bool FlowControllOr(FString[] TriggerNames);// 0x73bc218
	bool FlowControllOneSequence(FString TriggerName);// 0x73bc134
	bool FlowControllMultiSequence(FString[] TriggerNames);// 0x73bbfb0
	bool FlowControllAnd(FString[] TriggerNames);// 0x73bbe2c
	void ClientExecuteAction(FString ActionClassName, int64 UID, const TriggerParamRepData[] RepParams, bool IsKeep, bool IsRevert, UAELevelDirector_PlayerRepInfo* InLevelDirector_PlayerRepInfo);// 0x73bbc18
	void AddEventToTrigger(FString TriggerName, class Object Event);// 0x73bbb04
	TriggerCondition* AddConditionToTrigger(FString TriggerName, class Object Condition);// 0x73bb9e8

--------------------------------
Class: LevelDirectorInstCondition
	int64 ConditionUniqueID;//[Offset: 0x0, Size: 8]
	TriggerCondition* Condition;//[Offset: 0x8, Size: 8]

--------------------------------
Class: TriggerCondition.Object
	VariableSet* DataSource;//[Offset: 0x28, Size: 8]
	UAETriggerObject* ParentTrigger;//[Offset: 0x48, Size: 8]

--------------------------------
Class: LevelDirectorInstAction
	int64 ActionUniqueID;//[Offset: 0x0, Size: 8]
	TriggerAction* Action;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UAELevelDirector_PlayerRepInfo.Info.Actor.Object
	TriggerActionRepData[] ActionRepDatas;//[Offset: 0x3e8, Size: 16]
	uint32 UniqueId;//[Offset: 0x3f8, Size: 4]
	UAELevelDirector* RelevantLevelDirector;//[Offset: 0x400, Size: 8]
	void OnRep_LevelDirector();// 0x73bd258
	void OnRep_ActionRepDatas();// 0x73bd244
	void ClientExecuteAction(const TriggerActionRepData InActionRepData);// 0x73bd16c

--------------------------------
Class: TriggerActionRepData
	int64 RepID;//[Offset: 0x0, Size: 8]
	int64 UID;//[Offset: 0x8, Size: 8]
	FString ActionClassName;//[Offset: 0x10, Size: 16]
	TriggerParamRepData[] ParamDatas;//[Offset: 0x20, Size: 16]

--------------------------------
Class: TriggerParamRepData
	byte ParamType;//[Offset: 0x0, Size: 1]
	byte ParamSubType;//[Offset: 0x1, Size: 1]
	FString ParamName;//[Offset: 0x8, Size: 16]
	byte[] ParamData;//[Offset: 0x18, Size: 16]

--------------------------------
Class: UAELevelDirectorRepData
	UFlowNodeRepData FlowNodeRepData;//[Offset: 0x0, Size: 24]

--------------------------------
Class: UFlowNodeRepData
	FString RepData;//[Offset: 0x0, Size: 16]
	int NodeID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: UAETriggerFuncLib.Object
	TriggerClassItem[] ClassItemList;//[Offset: 0x28, Size: 16]
	FString[] EventsShowInUGC;//[Offset: 0x38, Size: 16]
	FString[] ConditionsShowInUGC;//[Offset: 0x48, Size: 16]
	FString[] ActionsShowInUGC;//[Offset: 0x58, Size: 16]
	VariableSet* DataSet;//[Offset: 0x68, Size: 8]
	Actor* GetLastIteratorActor();// 0x73bf270

--------------------------------
Class: TriggerClassItem
	FString TagName;//[Offset: 0x0, Size: 16]
	FString ClassFullPath;//[Offset: 0x10, Size: 16]
	float RandomRadius;//[Offset: 0x20, Size: 4]

--------------------------------
Class: TriggersFlowTree.Object
	FlowNodeBase* RootNode;//[Offset: 0x28, Size: 8]
	FlowNodeBase* TailNode;//[Offset: 0x30, Size: 8]
	FlowNodeBase* CurrentNode;//[Offset: 0x38, Size: 8]
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x50, Size: 8]

--------------------------------
Class: FlowNodeBase.Object
	FlowNodeBase* NextFlowNode;//[Offset: 0x28, Size: 8]
	UFlowNodeRepData RepData;//[Offset: 0x30, Size: 24]
	TriggersFlowTree* CarriedFlowTree;//[Offset: 0x50, Size: 8]
	enum NodeType;//[Offset: 0x58, Size: 1]
	UAETriggerObject*[] TriggerObjects;//[Offset: 0x60, Size: 16]

--------------------------------
Class: TriggerEvent.Object
	Object* EventInstigator;//[Offset: 0x28, Size: 8]
	<FString,TriggerEventListenerTrigger> RelevantListener;//[Offset: 0x40, Size: 80]

--------------------------------
Class: TriggerEventListenerTrigger
	UAETriggerObject* ListenerTrigger;//[Offset: 0x0, Size: 8]

--------------------------------
Class: HuntedTeammateInfo
	FString PlayerName;//[Offset: 0x0, Size: 16]
	float DangerDistance;//[Offset: 0x10, Size: 4]
	bool bIsNewHuntedTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: HuntTargetInfo
	STExtraPlayerState* TargetState;//[Offset: 0x0, Size: 8]
	Vector MarkCircleCenter;//[Offset: 0x8, Size: 12]
	float MarkCircleRadius;//[Offset: 0x14, Size: 4]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: HuntTargetRepInfo
	STExtraPlayerState* TargetState;//[Offset: 0x0, Size: 8]
	int MarkInstID;//[Offset: 0x8, Size: 4]
	Vector MarkCircleCenter;//[Offset: 0xc, Size: 12]
	float MarkCircleRadius;//[Offset: 0x18, Size: 4]
	float RotationAngle;//[Offset: 0x1c, Size: 4]
	FString PlayerKey;//[Offset: 0x20, Size: 16]

--------------------------------
Class: HuntTaskPickerInfo
	Vector PickerLocation;//[Offset: 0x0, Size: 12]
	float ScanRadius;//[Offset: 0xc, Size: 4]
	int HuntTaskTimeLeft;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PopKartRaceInfo
	int RaceGroup;//[Offset: 0x0, Size: 4]
	int[] NodeList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: RenderQualityCVarsToSync
	float StaticMeshLodDistanceScale;//[Offset: 0x0, Size: 4]
	int ShadowQuality;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SegmentChoosableSituation
	int SegmentID;//[Offset: 0x0, Size: 4]
	bool bChoosable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: CharacterAvatar_WearInfo
	CharacterAvatar_EquipSkinInfo[] EquipedSkinList;//[Offset: 0x0, Size: 16]
	CharacterAvatar_PendantInfo[] EquipedPendantList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: CharacterAvatar_EquipSkinInfo
	int ReplacedItemID;//[Offset: 0x0, Size: 4]
	CharacterAvatar_WearItemMetaInfo SkinMetaInfo;//[Offset: 0x4, Size: 20]

--------------------------------
Class: CharacterAvatar_WearItemMetaInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemType;//[Offset: 0x4, Size: 4]
	int ItemSubType;//[Offset: 0x8, Size: 4]
	int ItemLevel;//[Offset: 0xc, Size: 4]
	bool ValidInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: CharacterAvatar_PendantInfo
	int PendantItemID;//[Offset: 0x0, Size: 4]
	CharacterAvatar_WearItemMetaInfo AttachedItemMetaInfo;//[Offset: 0x4, Size: 20]

--------------------------------
Class: BackpackComponent.ActorComponent.Object
	delegate WeaponAttachmentChangedDelegate;//[Offset: 0x130, Size: 16]
	delegate ItemBeforeRemovedDelegate;//[Offset: 0x140, Size: 16]
	delegate ItemListUpdatedDelegate;//[Offset: 0x150, Size: 16]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x160, Size: 16]
	delegate SingleItemDeleteDelegate;//[Offset: 0x170, Size: 16]
	delegate SingleItemListUpdate;//[Offset: 0x180, Size: 16]
	delegate SingleItemListDelete;//[Offset: 0x190, Size: 16]
	delegate CapacityUpdatedDelegate;//[Offset: 0x1a0, Size: 16]
	delegate ItemOperationDelegate;//[Offset: 0x1b0, Size: 16]
	delegate ItemOperationInfoDelegate;//[Offset: 0x1c0, Size: 16]
	delegate ItemOperationFailedDelegate;//[Offset: 0x1d0, Size: 16]
	delegate ItemClearAllDelegate;//[Offset: 0x1e0, Size: 16]
	delegate ItemInitialPickupDelegate;//[Offset: 0x1f0, Size: 16]
	delegate SuitSkinUpdatedDelegate;//[Offset: 0x200, Size: 16]
	delegate SuitSkinCDDelegate;//[Offset: 0x210, Size: 16]
	delegate ItemUpdatedDelegate;//[Offset: 0x220, Size: 16]
	delegate ItemRemovedDelegate;//[Offset: 0x230, Size: 16]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x240, Size: 16]
	LimitItem[] LimitItemList;//[Offset: 0x250, Size: 16]
	bool showBounty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	ItemDefineID[] DisuseButUndropItemList;//[Offset: 0x268, Size: 16]
	BattleItemData[] ItemList;//[Offset: 0x278, Size: 16]
	IncNetArrayNew ItemListNetNew;//[Offset: 0x288, Size: 32]
	IncNetArrayNew ItemListNetCacheNew;//[Offset: 0x2a8, Size: 32]
	bool bNewNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	bool AutoEquipAimAKM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca, Size: 1]
	SuitSkinList SuitSkinList;//[Offset: 0x2d0, Size: 32]
	GlidSkinUnit[] GlidSkinList;//[Offset: 0x2f0, Size: 16]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x308, Size: 16]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x318, Size: 80]
	int CapacityThreshold;//[Offset: 0x368, Size: 4]
	float Capacity;//[Offset: 0x36c, Size: 4]
	float OtherCapacity;//[Offset: 0x370, Size: 4]
	float OccupiedCapacity;//[Offset: 0x374, Size: 4]
	int virtualitemid;//[Offset: 0x38c, Size: 4]
	int[] LimitedClothAvatarIDArray;//[Offset: 0x390, Size: 16]
	void UseSuitSkinServer(int Index);// 0x4997f3c
	void UseSuitSkinClient(int Index);// 0x4997ec0
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x4997d84
	void UpdatePlanWeaponAdd(bool isApply, out const WeaponUsefulCfg[] OldWeaponCfgList, out const WeaponUsefulCfg[] NewWeaponCfgList);// 0x4997bec
	float UpdateOtherCapacity();// 0x4997bb0
	float UpdateCapacity();// 0x4997b74
	void UnlockUpdateItemListReceive();// 0x4997b60
	void UnequipItem(ItemDefineID DefineID);// 0x4997ad4
	void TryMergeItemHandles(ItemDefineID DefineID);// 0x4997a48
	bool TestPickupItem(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x49977b8
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x4997698
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x49975a4
	void ServerUpdatePlanLua(bool isApply, out const WeaponUsefulCfg[] weaponCfgList);// 0xffffff8f20d162a8
	void ServerUpdatePlan(bool isApply, const WeaponUsefulCfg[] weaponCfgList);// 0x499746c
	void ServerSetShowBounty(bool bShowBounty);// 0x49973a8
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x4997280
	int ReturnItem(ItemDefineID DefineID, int Count, bool bCallHandlePickup);// 0x4997160
	bool RemoveItemHandle(ItemDefineID DefineID);// 0x49970b8
	void ReceiveItemListNew();// 0x499709c
	void ReceiveCapacity();// 0x4997080
	bool PickupItem(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x4996de8
	void OnRep_SuitSkinListNet();// 0x4996dd4
	void OnRep_specialCountLimit();// 0x4996dc0
	void OnRep_showBounty();// 0x4996dac
	void OnRep_OtherCapacity();// 0x4996d98
	void OnRep_ItemListNetNew();// 0x4996d84
	void OnRep_ItemList();// 0x4996d70
	void OnRep_Capacity();// 0x4996d5c
	void NotifyItemUpdated(ItemDefineID DefineID);// 0x4996cc8
	void NotifyItemRemoved(ItemDefineID DefineID);// 0x4996c34
	void NotifyItemListUpdated();// 0x4996c18
	void NotifyCapacityUpdated();// 0x4996bfc
	BattleItemHandleBase* NewItemHandle(ItemDefineID DefineID);// 0x4996b58
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x4996a98
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int Count);// 0x49969e0
	void ModifyAimNotAutoUseForAKM(bool bEquipAimAKM);// 0x499691c
	void ModifyAimNotAutoUse(bool bEequipAim);// 0x4996858
	WeaponUsefulCfg[] MergeWeaponCfg(out const WeaponUsefulCfg[] OldWeaponCfgList, out const WeaponUsefulCfg[] DiffWeaponCfgList);// 0x499666c
	void LockUpdateItemListReceive();// 0x4996658
	FString ItemsToString();// 0x49965d8
	bool IsNewPlanAttachNeedOnWeapon(int AttachID, int WeaponID, int OtherAttachID);// 0xffffff8f20d162a8
	bool IsNewPlanApply();// 0xffffff8f20d162a8
	ItemUsefulType IsItemUsefulInner(ActorComponent* weaponComp, out const ItemDefineID DefineID);// 0xffffff8f20d162a8
	bool IsAutoUse(int ItemID);// 0xffffff8f20d162a8
	void InitLua();// 0xffffff8f20d162a8
	bool HasItemBySubType(int SubType);// 0x4996548
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x4996480
	World* GetWorld_BP();// 0x499644c
	bool GetSwitcherCfgList(FString ConfigName);// 0xffffff8f20d162a8
	BattleItemData GetLeastElectrictyBattleItemData(ItemDefineID DefineID, FString AdditionalDataName);// 0x49962b4
	void GetItemListByTypeSpecificID(int TypeSpecificID, out BattleItemData[] OutItemList);// 0x49961e4
	BattleItemData[] GetItemListByDefineID(ItemDefineID DefineID);// 0x4996134
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x49960f4
	ItemHandleBase*[] GetItemHandleList();// 0x4996068
	BattleItemData GetItemByDefineID(ItemDefineID DefineID);// 0x4995f68
	bool GetIsOpenLimitCloseStatus(out const ItemDefineID DefineID);// 0x4995ebc
	BattleItemData GetFirstItemByDefineIDIgnoreInstance(ItemDefineID DefineID);// 0x4995dbc
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID);// 0x4995d08
	BattleItemData[] GetAllItemList();// 0x4995cd0
	void ForceNetUpdate();// 0x4995cb4
	void EquipItem(ItemDefineID DefineID);// 0x4995c28
	bool DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x4995b08
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x4995a24
	void DestroyLua();// 0xffffff8f20d162a8
	BattleItemHandleBase* CreateItemHandleInternal(ItemDefineID DefineID);// 0x4995980
	ItemHandleBase* CreateItemHandle(ItemDefineID DefineID);// 0x49958dc
	void CreateBattleItemHandleAsync(ItemDefineID DefineID);// 0xffffff8f20d162a8
	int ConsumeItem(ItemDefineID DefineID, int Count);// 0x4995804
	bool ClientUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x49956c8
	void ClientUpdateSingleItem(const ItemDefineID DefineID);// 0x4995640
	void ClientSuitSkinIntoCD(float CDSkill);// 0x49955bc
	void ClientBroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x49954b0
	void ClientBroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x49953a4
	void ClearItemsByReason(enum Reason);// 0x4995320
	void ClearItems();// 0x4995304
	int CheckCapacityForItem(ItemDefineID DefineID, int Count);// 0x499522c
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x499518c
	void BroadcastItemOperationInfoDelegate(out const ItemOperationInfo ItemOperationInfo);// 0x49950e4
	void BroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x4994fe0
	void BroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x4994edc
	void BroadcastInitialPickupDelegate();// 0x4994ec8
	bool AddItemHandle(ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x4994de4
	void AddClientItemHandle(BattleItemHandleBase* ItemHandle);// 0x4994d68

--------------------------------
Class: SpecialPickInfo
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LimitItem
	int item_type;//[Offset: 0x0, Size: 4]
	int SubType;//[Offset: 0x4, Size: 4]
	int Num;//[Offset: 0x8, Size: 4]

--------------------------------
Class: IncNetArrayNew
	NetArrayUnitNew[] incArray;//[Offset: 0x0, Size: 16]

--------------------------------
Class: NetArrayUnitNew
	BattleItemNetNew Unit;//[Offset: 0x0, Size: 96]
	bool markDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]

--------------------------------
Class: BattleItemNetNew
	ItemDefineIDNet DefineIDNet;//[Offset: 0x0, Size: 16]
	int Count;//[Offset: 0x28, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bCanBeClientHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x30, Size: 16]
	ItemAssociationNet[] AssociationsNet;//[Offset: 0x40, Size: 16]
	ItemAssociation[] Associations;//[Offset: 0x50, Size: 16]

--------------------------------
Class: ItemDefineIDNet
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	uint64 InstanceID;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ItemAssociationNet
	byte AssociationType;//[Offset: 0x0, Size: 1]
	ItemDefineIDNet itemNet;//[Offset: 0x8, Size: 16]

--------------------------------
Class: SuitSkinList
	SuitSkinUnit[] SuitSkinList;//[Offset: 0x0, Size: 16]
	int currUseIndex;//[Offset: 0x10, Size: 4]
	float CDTime;//[Offset: 0x14, Size: 4]
	bool SuitSkinOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int willUseIndexBeforeSkill;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SuitSkinUnit
	int stype_type;//[Offset: 0x0, Size: 4]
	int Slot;//[Offset: 0x4, Size: 4]
	int style_id;//[Offset: 0x8, Size: 4]
	bool lock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	ItemDefineID[] ItemDefineList;//[Offset: 0x10, Size: 16]
	GameModePlayer_WearInfo suitWear;//[Offset: 0x20, Size: 192]
	Suit_WearInfo suitWearNet;//[Offset: 0xe0, Size: 24]
	ItemDefineID[] WearItemList;//[Offset: 0xf8, Size: 16]

--------------------------------
Class: GameModePlayer_WearInfo
	GameModePlayer_WearItem[] EquipedSkinList;//[Offset: 0x0, Size: 16]
	GameModePlayer_WearItem[] EquipedPendantList;//[Offset: 0x10, Size: 16]
	GameModePlayer_WearItem[] WeaponPendantList;//[Offset: 0x20, Size: 16]
	GameModePlayer_WearItem[] WingAvatarList;//[Offset: 0x30, Size: 16]
	GameModePlayerItem[] WeaponSkinAvatarList;//[Offset: 0x40, Size: 16]
	GameModePlayerItem[] WeaponSkinAbilityList;//[Offset: 0x50, Size: 16]
	GameModePlayerItem[] WeaponAttachmentAvatarList;//[Offset: 0x60, Size: 16]
	GameModePlayerItem[] VehicleSkinAvatarList;//[Offset: 0x70, Size: 16]
	GameModePlayerItem[] VehicleSkinAbilityList;//[Offset: 0x80, Size: 16]
	GameModePlayer_ItemExtraInfo[] VehiclePendantInfoList;//[Offset: 0x90, Size: 16]
	GameModePlayer_ItemCustomName[] ItemCustomNameList;//[Offset: 0xa0, Size: 16]
	GameModePlayerItem[] TombBoxAvatarList;//[Offset: 0xb0, Size: 16]

--------------------------------
Class: GameModePlayer_WearItem
	int WearPart_ItemID;//[Offset: 0x0, Size: 4]
	int WearItemID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayer_ItemExtraInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int[] ItemPendantList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: GameModePlayer_ItemCustomName
	int ItemID;//[Offset: 0x0, Size: 4]
	FString CustomName;//[Offset: 0x8, Size: 16]

--------------------------------
Class: Suit_WearInfo
	GameModePlayer_WearItem[] EquipedSkinList;//[Offset: 0x0, Size: 16]
	int WeaponSkinAvatarListCount;//[Offset: 0x10, Size: 4]
	int VehicleSkinAvatarListCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: GlidSkinUnit
	int glid_item_id;//[Offset: 0x0, Size: 4]
	GlidCost[] cost_list;//[Offset: 0x8, Size: 16]

--------------------------------
Class: GlidCost
	int cost_item_id;//[Offset: 0x0, Size: 4]
	int cost_count;//[Offset: 0x4, Size: 4]
	int own_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponUsefulCfg
	int WeaponID;//[Offset: 0x0, Size: 4]
	int[] attachmentList;//[Offset: 0x8, Size: 16]
	int bulletNum;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ItemUsefulType
	int PickUsefulCount;//[Offset: 0x0, Size: 4]
	bool bColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: ItemOperationInfo
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum BattleItemOperationType;//[Offset: 0x18, Size: 1]
	byte Reason;//[Offset: 0x19, Size: 1]
	int Count;//[Offset: 0x1c, Size: 4]
	Object* Source;//[Offset: 0x20, Size: 8]
	bool bTriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	PUBGDoor* TriggeredDoor;//[Offset: 0x120, Size: 8]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0x128, Size: 8]
	PUBGDoor*[] InRangeDoorList;//[Offset: 0x130, Size: 16]
	int InRangeDoorListSize;//[Offset: 0x140, Size: 4]
	int CheckRangeSize;//[Offset: 0x144, Size: 4]
	int CheckRangeSizeOffset;//[Offset: 0x148, Size: 4]
	int CheckRangeInterval;//[Offset: 0x14c, Size: 4]
	int CurrentCheckRangeFrames;//[Offset: 0x150, Size: 4]
	int HitInRangeFrameInterval;//[Offset: 0x154, Size: 4]
	int HitOutRangeFrameInterval;//[Offset: 0x158, Size: 4]
	bool HitDoorUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	bool DebugDrawShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	float DebugDrawShapeTime;//[Offset: 0x160, Size: 4]
	void UpdateDoorBtnShow();// 0x3d4e52c
	void UpdateClientPlayerOurDoorRange();// 0x3d4e518
	void UpdateClientPlayerInDoorRange();// 0x3d4e504
	void SetAutoOpenDoorMode(int Mode);// 0x3d4e488
	void SetAutoOpenDoorEnable(bool bEnable);// 0x3d4e404
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x3d4e374
	PUBGDoor* GetPriorityDoor();// 0x3d4e340
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor);// 0x3d4e23c
	void BP_SimulateUIClick(bool bExtraDoor);// 0xffffff8f20d162a8
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0xffffff8f20d162a8

--------------------------------
Class: PUBGDoor.UAEDoorActor.UAENetActor.Actor.Object
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x45c, Size: 4]
	float autoOpenAngel;//[Offset: 0x460, Size: 4]
	float forwardSpeedRatio;//[Offset: 0x464, Size: 4]
	bool bHideButtons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	int doorState;//[Offset: 0x46c, Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	float DoorOperateTime;//[Offset: 0x474, Size: 4]
	SceneComponent* RootScene;//[Offset: 0x478, Size: 8]
	StaticMeshComponent* doorMesh;//[Offset: 0x480, Size: 8]
	BoxComponent* interactionBox;//[Offset: 0x488, Size: 8]
	BoxComponent* InnerBox;//[Offset: 0x490, Size: 8]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	int DoorStateEx;//[Offset: 0x49c, Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x4a8, Size: 8]
	BoxComponent* interactionBoxEx;//[Offset: 0x4b0, Size: 8]
	BoxComponent* InnerBoxEx;//[Offset: 0x4b8, Size: 8]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	bool bForceNoWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 1]
	delegate OnDoorAniFinsihDelegate;//[Offset: 0x4c8, Size: 16]
	delegate OnDoorStateChange;//[Offset: 0x4d8, Size: 16]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x4e8, Size: 16]
	bool bUseDelayDoorAng;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	float fDoorDelayAng;//[Offset: 0x4fc, Size: 4]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x500, Size: 4]
	bool bAutoSetPosAndExtent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	Vector SimulateBoxOrigin;//[Offset: 0x508, Size: 12]
	Vector SimulateBoxOriginEx;//[Offset: 0x514, Size: 12]
	Vector SimulateBoxExtent;//[Offset: 0x520, Size: 12]
	Vector SimulateTriggerBoxExtent;//[Offset: 0x52c, Size: 12]
	Vector SimulateTriggerBoxCenter;//[Offset: 0x538, Size: 12]
	bool DebugDrawShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 1]
	bool IgnoreMotionState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545, Size: 1]
	float DebugDrawShapeTime;//[Offset: 0x548, Size: 4]
	byte RCRBoxIndex;//[Offset: 0x54c, Size: 1]
	Actor* ParentActor;//[Offset: 0x550, Size: 8]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x559, Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55a, Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55b, Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55d, Size: 1]
	Character* PlayerCharacter;//[Offset: 0x560, Size: 8]
	float autoOpenAngelCosinValue;//[Offset: 0x568, Size: 4]
	TimerHandle DelayUnRegisterHandle;//[Offset: 0x578, Size: 8]
	float DelayUnRegisterTime;//[Offset: 0x580, Size: 4]
	bool Islocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	bool NeedShowUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 1]
	bool IsLockAutoOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x586, Size: 1]
	bool NeedDestroyChildActorCom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x587, Size: 1]
	StaticMesh* NormalDoorMesh;//[Offset: 0x588, Size: 8]
	DoorRotationMoation[] DoorMationList;//[Offset: 0x590, Size: 16]
	void UpdateTickfunction();// 0x3f381b0
	void SimulateOverlapCharacter(StaticMeshComponent* InDoorMesh, int InMultVal);// 0x3f380f8
	void SetDoorNeedShowUI(bool InNeedShowUI);// 0x3f38074
	void SetDoorMation(bool InIsExDoor, int InState);// 0x3f37fac
	void SetDoorLock(bool InLock);// 0x3f37f28
	void SetDoorBroken(bool bExtraDoor, Actor* brokenCauser);// 0x3f37e60
	void ResetUIOnClient();// 0x3f37e4c
	void RefreshUIOnClient();// 0x3f37e38
	void Refresh_DoorIgnore(bool InIsExDoor, float InDoorAng);// 0x3f37d70
	void OpenDoorByParam(bool inRoom, bool extraDoor);// 0x3f37ca0
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x3f37be0
	void OnRep_RepNeedShowUI();// 0x3f37bcc
	void OnRep_RepDoorStateEx();// 0x3f37bb0
	void OnRep_RepDoorState();// 0x3f37b94
	void OnRep_RepDoorBrokenEx();// 0x3f37b80
	void OnRep_RepDoorBroken();// 0x3f37b6c
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3f37a40
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3f37914
	void OnDoorStateChange__DelegateSignature(PUBGDoor* door, Character* Character, int TargetState, bool IsExDoor);// 0xffffff8f20d162a8
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x3f37854
	void OnDoorAniFinsihDelegate__DelegateSignature(PUBGDoor* door);// 0xffffff8f20d162a8
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3f3767c
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3f374a4
	void On_DoorAniFinsihNew(StaticMeshComponent* InDoorMesh, bool extraDoor);// 0x3f373e4
	bool IsTriggerDoor(bool IsEx);// 0x3f3734c
	bool IsInRoom(Character* Character);// 0x3f372bc
	bool IsDoorOpened(bool IsExDoor);// 0x3f37224
	bool IsAnyDoorOpened();// 0x3f371ec
	void InsertDoorMation(StaticMeshComponent* InMesh, bool InIsExDoor, int InState);// 0x3f370e8
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx);// 0x3f36f74
	enum[] GetDamageableGameObjectType();// 0x3f36eec
	bool GetCanBePicked();// 0x3f36eac
	void ForceNetUpdate();// 0x3f36e90
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x3f36dd0
	void BP_DoorBroken_Callback(bool isBeginPlay, bool bExtraDoor);// 0xffffff8f20d162a8
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0xffffff8f20d162a8
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0xffffff8f20d162a8
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0xffffff8f20d162a8

--------------------------------
Class: UAEDoorActor.UAENetActor.Actor.Object

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x6c0, Size: 12]
	float LineThickness;//[Offset: 0x6cc, Size: 4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x6661c50
	Vector GetUnscaledBoxExtent();// 0x6661c28
	Vector GetScaledBoxExtent();// 0x6661bf0

--------------------------------
Class: DoorRotationMoation
	bool IgnoreMotionState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIsExDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	int FromState;//[Offset: 0x4, Size: 4]
	int ToState;//[Offset: 0x8, Size: 4]
	float RotationFrom;//[Offset: 0xc, Size: 4]
	float RotationTo;//[Offset: 0x10, Size: 4]
	float RotationCurrent;//[Offset: 0x14, Size: 4]
	float RotationTime;//[Offset: 0x18, Size: 4]
	float RotationLerpTime;//[Offset: 0x1c, Size: 4]
	float RotationCurrentTime;//[Offset: 0x20, Size: 4]
	float RotationCurrentLerpTime;//[Offset: 0x24, Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ChatComponent.ActorComponent.Object
	int end_time;//[Offset: 0x124, Size: 4]
	FString Reason;//[Offset: 0x128, Size: 16]
	int end_timeNoPerception;//[Offset: 0x138, Size: 4]
	FString VoicePackets;//[Offset: 0x140, Size: 16]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0x150, Size: 16]
	QuickChatIDAndAudio[] chatAvatarQuickList;//[Offset: 0x160, Size: 16]
	QuickChatIDAndAudio[] chatQuickListFilterBySetting;//[Offset: 0x170, Size: 16]
	FString TeammateColor;//[Offset: 0x180, Size: 16]
	FString MyColor;//[Offset: 0x190, Size: 16]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x1a0, Size: 80]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x1f0, Size: 16]
	float SendMsgCD;//[Offset: 0x200, Size: 4]
	float lastShowChatTime;//[Offset: 0x204, Size: 4]
	float ShowChatDuration;//[Offset: 0x208, Size: 4]
	RoundDiceInfo LastDiceInfo;//[Offset: 0x20c, Size: 8]
	float LastSelfDiceTime;//[Offset: 0x214, Size: 4]
	float DiceRoundCD;//[Offset: 0x218, Size: 4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x248, Size: 16]
	FString EndChar;//[Offset: 0x258, Size: 16]
	FString ColonChar;//[Offset: 0x268, Size: 16]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x318, Size: 8]
	int itemIDOnGround;//[Offset: 0x338, Size: 4]
	PickUpWrapperActor* itemOnGround;//[Offset: 0x340, Size: 8]
	Vector hitItemPosition;//[Offset: 0x348, Size: 12]
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	Vector hitGroundPosition;//[Offset: 0x358, Size: 12]
	int DiceMsgID;//[Offset: 0x364, Size: 4]
	FString DiceMsg;//[Offset: 0x368, Size: 16]
	FString EndDiceMsg;//[Offset: 0x378, Size: 16]
	FString CongregationPlayerName;//[Offset: 0x388, Size: 16]
	QuickGroundFlag[] QuickGroundFlagList;//[Offset: 0x3f8, Size: 16]
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0xffffff8f20d162a8
	void UpdateFlagIcon();// 0x3d35544
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x3d353fc
	void ShowQuickPanel(bool bShow);// 0x3d35378
	void ShowFlag(out const InGameChatMsg msgItem, enum flatType);// 0x3d35278
	void SetAvatarQuickList(int res);// 0xffffff8f20d162a8
	void SetAvatarQuickCheckMap();// 0x3d35264
	void ServerSetEditorQuickTextList(const int[] SettingQuickTextList);// 0x3d351ac
	void ServerSendMsg(const InGameChatMsg msgItem);// 0x3d350d0
	void ServerSendDice(bool StartDice);// 0x3d3500c
	void SendDirtyFilterContent(FString Content);// 0xffffff8f20d162a8
	void SendDirtyFilter(FString Name, FString Content, bool isMe, bool isSys, int MsgID);// 0xffffff8f20d162a8
	void ReportBattleChat(FString Msg);// 0xffffff8f20d162a8
	void RemoveQuickGroundFlag(int InInstanceID);// 0x3d34f90
	void RemoveInvalidQuickGroundFlag();// 0x3d34f7c
	void RemoveAllQuickGroundFlag();// 0x3d34f68
	void PostName(const AkAudioEvent* pEvent);// 0x3d34eec
	void OnRep_LastSelfTime();// 0x3d34ed8
	void OnRep_LastDiceInfo();// 0x3d34ec4
	void OnRep_chatQuickList();// 0x3d34eb0
	void OnRep_chatAvatarQuickList();// 0x3d34e9c
	void OnPlayerEnterFlying();// 0x3d34e80
	void OnInviteNextBattle(FString gid, FString Name);// 0x3d34db0
	void OnFilterFinish(FString filterText, FString callback_data);// 0xffffff8f20d162a8
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0xffffff8f20d162a8
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0xffffff8f20d162a8
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0xffffff8f20d162a8
	bool IsStartRoundDice();// 0x3d34d78
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x3d34c64
	float GetCurrentTimeSeconds();// 0x3d34c30
	bool FindQuickGroundFlag(int InInstanceID, out QuickGroundFlag outFlag);// 0x3d34b34
	void FilterQuickChatListBySetting();// 0xffffff8f20d162a8
	void EndDiceRound();// 0x3d34b20
	bool DiceRoundStartBySelf();// 0x3d34ae8
	void CloseChatHistoryList();// 0xffffff8f20d162a8
	void ClientReceiveMsg(const InGameChatMsg msgItem, bool isMe);// 0x3d349f4
	bool CanDiceNow();// 0x3d349bc
	void AddQuickGroundFlag(int InInstanceID, out const QuickGroundFlag InFlag);// 0x3d348d4
	void AddOneMsgToUI1(out const InGameChatMsg Item, FString Name, FString Content, int MsgID, int AudioID, bool isMe, bool PlaySound);// 0xffffff8f20d162a8
	void AddFriendChat(FString gid, FString Name, FString Content, bool isSelf);// 0x3d34698

--------------------------------
Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0, Size: 4]
	int AudioID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0, Size: 16]
	FString Content;//[Offset: 0x10, Size: 16]
	bool isSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	int MsgType;//[Offset: 0x24, Size: 4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: QuickChatFlag
	enum Type;//[Offset: 0x0, Size: 1]
	int chatID;//[Offset: 0x4, Size: 4]
	int AlternateChatID;//[Offset: 0x8, Size: 4]
	int FlagIndex;//[Offset: 0xc, Size: 4]
	int traceDist;//[Offset: 0x10, Size: 4]
	float minDist;//[Offset: 0x14, Size: 4]

--------------------------------
Class: RoundDiceInfo
	float LastTeamDiceTime;//[Offset: 0x0, Size: 4]
	uint32 LastDicePlayerKey;//[Offset: 0x4, Size: 4]

--------------------------------
Class: QuickGroundFlag
	int Index;//[Offset: 0x4, Size: 4]
	int flagID;//[Offset: 0x8, Size: 4]
	Vector HitPosition;//[Offset: 0xc, Size: 12]
	int ItemID;//[Offset: 0x18, Size: 4]
	bool isValidPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0x158, Size: 4]
	float PickUpZLimit;//[Offset: 0x15c, Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x168, Size: 16]
	int FindPutDownPointCircleSplitNum;//[Offset: 0x178, Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0x17c, Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0x180, Size: 4]
	Vector2D RegionXRange;//[Offset: 0x184, Size: 8]
	Vector2D RegionYRange;//[Offset: 0x18c, Size: 8]
	Vector PutDownOffset;//[Offset: 0x194, Size: 12]
	bool bEnableMultiObjPickUpVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool bTraceUseOwnerUpDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2, Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a3, Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x1a4, Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x1b0, Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x1b4, Size: 4]
	float DrawTime;//[Offset: 0x1b8, Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	bool bEnableUpdatePlayerTombWrapperOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x1c0, Size: 8]
	PrimitiveComponent* CacheRepBaseForGetRandomLoc;//[Offset: 0x1c8, Size: 8]
	delegate OnPickUpAvailableDataChangeDelegate;//[Offset: 0x1d0, Size: 16]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x1e0, Size: 16]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x1f0, Size: 16]
	Actor*[] OldConfirmedPickupActorPool;//[Offset: 0x200, Size: 16]
	bool bIsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	void UpdatePickupDirty();// 0x3efb980
	void UpdatePickupAvailableActors();// 0x3efb964
	void SetEnable(bool IsEnable);// 0x3efb8e0
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x3efb7e4
	void ServerPutDownTarget(Actor* Target);// 0x3efb734
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount);// 0x3efb60c
	void ResetPickupPool();// 0x3efb5f8
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x3efb538
	void PutDownTarget(Actor* Target);// 0x3efb4bc
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount);// 0x3efb3cc
	void OnPickUpAvailableDataChangeDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x3efb350
	void NotifyMeetPickupAvailableActor(Actor* Target);// 0x3efb2d4
	Vector GetRandomPutDownLocationWithPutDownOffset(float OverrideFindPutDownPointZThreshold);// 0x3efb244
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x3efb1b4
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x3efb0b0
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x3efafb4
	void ControlClientPutDownTarget(Actor* Target);// 0x3efaf04
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x3efae14
	void ClampWorldLocation(out Vector OutVector);// 0x3efad88

--------------------------------
Class: InGameChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 16]
	uint32 playerIdentifier;//[Offset: 0x10, Size: 4]
	FString msgContent;//[Offset: 0x18, Size: 16]
	int MsgID;//[Offset: 0x28, Size: 4]
	int AudioID;//[Offset: 0x2c, Size: 4]
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	Vector HitPosition;//[Offset: 0x34, Size: 12]
	int itemIDOnGround;//[Offset: 0x40, Size: 4]

--------------------------------
Class: QuickSignComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0x120, Size: 16]
	delegate OnDelSignMarkDelegate;//[Offset: 0x130, Size: 16]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int TextID_OutRange;//[Offset: 0x144, Size: 4]
	FString PreFix_Command;//[Offset: 0x148, Size: 16]
	FString PreFix_Command_Res;//[Offset: 0x158, Size: 16]
	FString PreFix_Mark;//[Offset: 0x168, Size: 16]
	int MinTraceDist;//[Offset: 0x178, Size: 4]
	int MaxTraceDist;//[Offset: 0x17c, Size: 4]
	int ItemTraceDist;//[Offset: 0x180, Size: 4]
	int RobotItemTraceDist;//[Offset: 0x184, Size: 4]
	int MaxAirDropMarkDist;//[Offset: 0x188, Size: 4]
	int MarkMutualExclusionDist;//[Offset: 0x18c, Size: 4]
	int MiniMapAttentionIconID;//[Offset: 0x190, Size: 4]
	int MiniMapThingIconID;//[Offset: 0x194, Size: 4]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x198, Size: 8]
	<int,FString> CommandTypeIDMap;//[Offset: 0x1a0, Size: 80]
	<FString,class Object> MarkNameClassMap;//[Offset: 0x1f0, Size: 80]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x240, Size: 80]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x290, Size: 80]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x2e0, Size: 80]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x330, Size: 80]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x380, Size: 16]
	FString[] TempIDArray;//[Offset: 0x390, Size: 16]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x428, Size: 80]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x478, Size: 80]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x4c8, Size: 80]
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x3f41c04
	void SpecialActorState(Actor* TargetActor, FString InputConfigKey, out FString ConfigKey);// 0xffffff8f20d162a8
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool isSelf);// 0xffffff8f20d162a8
	void SetTouchPointStatus();// 0x3f41bf0
	void ServerSendMsg(const QuickSignMsg msgItem);// 0x3f41aec
	void ServerDelMsg(FString MsgID);// 0x3f41a34
	void RemoveActorMask(int ActorNetGUID);// 0x3f41984
	void OperMark(byte InputSignType, FString MsgID);// 0x3f418c0
	void MakeQuickMark_PickupActorTombox(PickUpWrapperActor* PickUpActor, int TypespeacialID, int InstanceID);// 0x3f417d0
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor);// 0x3f41754
	void MakeQuickMark();// 0x3f41740
	void MakeQuickCommand(byte InputSignType, int AudioTextId, int AudioID, byte SignType);// 0x3f41614
	bool IsSelfMark(FString MsgID);// 0x3f4157c
	bool IsRepliedMark(FString MsgID);// 0x3f414e4
	FString GetNewMsgID(int idx);// 0x3f41414
	bool GenerateMarkInfo(out const QuickSignMsg msgItem, out QuickSignMark MarkInfo);// 0xffffff8f20d162a8
	void DelMarkFromPool(FString MsgMark);// 0x3f41390
	void DealWithNewMsg(out const QuickSignMsg msgItem, bool isSelf, bool ShowChat);// 0x3f4121c
	void ClientReceiveMsg(const QuickSignMsg msgItem, bool isSelf);// 0x3f41100
	void ClientDelMsg(FString MsgID);// 0x3f41074
	void AnalysisConfigKeyClass(FString ConfigID, FString ConfigScriptParam);// 0x3f40fa4
	void AddMarkToPool(out const QuickSignMark MsgMark);// 0x3f40ea4
	void AddActorMask(int ActorNetGUID);// 0x3f40df4

--------------------------------
Class: QuickSignMark
	FString MsgID;//[Offset: 0x0, Size: 16]
	FString MarkType;//[Offset: 0x10, Size: 16]
	int PlayerInTeamIndex;//[Offset: 0x20, Size: 4]
	FString IconPath;//[Offset: 0x28, Size: 16]
	FString IconBGPath;//[Offset: 0x38, Size: 16]
	FString IconOuterPath;//[Offset: 0x48, Size: 16]
	FString IconOuterBGPath;//[Offset: 0x58, Size: 16]
	FString ReplyID;//[Offset: 0x68, Size: 16]
	Vector Loc;//[Offset: 0x78, Size: 12]
	int MaxNum;//[Offset: 0x84, Size: 4]
	int LifeSpan;//[Offset: 0x88, Size: 4]
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	bool IsReplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 1]

--------------------------------
Class: QuickSignIDArray
	FString[] InnerArray;//[Offset: 0x0, Size: 16]

--------------------------------
Class: QuickSignMsg
	FString MsgID;//[Offset: 0x0, Size: 16]
	FString PlayerName;//[Offset: 0x10, Size: 16]
	Vector HitPos;//[Offset: 0x20, Size: 12]
	FString ConfigKey;//[Offset: 0x30, Size: 16]
	int AudioID;//[Offset: 0x40, Size: 4]
	FString ParamString;//[Offset: 0x48, Size: 16]
	int BindActorGUID;//[Offset: 0x58, Size: 4]
	float HitPosDirect;//[Offset: 0x5c, Size: 4]
	uint32 PlayerKey;//[Offset: 0x60, Size: 4]
	int MiniMapIconTypeId;//[Offset: 0x64, Size: 4]
	byte InputSignType;//[Offset: 0x68, Size: 1]
	uint32 AuidoTextId;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0x120, Size: 8]
	FString OwningPlayerName;//[Offset: 0x128, Size: 16]
	UAETriggerObject*[] TaskTriggerObjects;//[Offset: 0x138, Size: 16]
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x148, Size: 80]
	<int,AreaParam> AreaParamCache;//[Offset: 0x198, Size: 80]
	int LastAreaID;//[Offset: 0x1e8, Size: 4]
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x3cc5a30
	int RetrieveLandLocType(FString TargetName);// 0x3cc5950
	void ReportTaskAndSpecialCollection(byte TaskType, int TaskID, int process);// 0x3cc5858
	bool RegisterEvent(class Object RegisterEventClass, UAETriggerObject* TriggerListener, byte TaskEventType);// 0x3cc574c
	bool IsTriggerActive(int InTaskID);// 0x3cc56bc
	bool IsSpecialPickItem(int InItemID);// 0x3cc562c
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName, int AreaID);// 0x3cc538c
	bool IsCacheAreaParam();// 0x3cc5364
	void HandlePlayerPickupItem(int ItemID, int Count, STExtraPlayerController* PC);// 0x3cc5274
	void HandlePlayerKilling();// 0x3cc5260
	void HandlePlayerEnterArea(int AreaID);// 0x3cc51e4
	void HandlePlayerDropItem(int ItemID, int Count, STExtraPlayerController* PC);// 0x3cc50f4
	void HandlePlayerDoEmote(int EmoteIndex);// 0x3cc5078
	void HandleInitTaskData(int TaskID, int process, FString ext_info);// 0x3cc4f1c
	void HandleInitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x3cc4e2c
	void HandleDeathBoxSpawned(Transform SpawnTransform);// 0x3cc4d88
	UAETriggerObject* GetTriggerObject(int InTaskID);// 0x3cc4cfc
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0xffffff8f20d162a8
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0xffffff8f20d162a8
	bool GetTaskParams(int InTaskID, out FString outMainConditionParamStr, out int outTaskProcess);// 0x3cc4bc4
	FString GetTaskClassPath(byte TaskType, int TaskUID);// 0x3cc4ab0
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0xffffff8f20d162a8
	FString GetOwningPlayerName();// 0x3cc4a30
	FString GetMapName();// 0x3cc49b0
	int GetLandLocIDFromDataTable(FString InTargetName);// 0xffffff8f20d162a8
	void FireEvent(byte TaskEventType, int Param, FString ExtMsg);// 0x3cc4854
	int FetchSpecifiedAreaIDByCache(Vector PlayerLocation);// 0x3cc47c4
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x3cc4704
	UAETriggerObject_Task* CreateTriggerObject(byte TaskType, int TaskID);// 0x3cc4634
	bool AddTrigger(byte TaskType, int TaskID, int process, FString ext_info);// 0x3cc4488
	void AddEventToTrigger(UAETriggerObject* TriggerObj, class Object Event, byte TaskEventType);// 0x3cc4390
	void ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x3cc42d0

--------------------------------
Class: AreaParam
	Vector[] AreaAnchors;//[Offset: 0x0, Size: 16]
	int BattleTextID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: UAETriggerObject_Task.UAETriggerObject.Object
	TriggerCondition* RootCondition;//[Offset: 0x1a8, Size: 8]
	byte[] TaskEventTypes;//[Offset: 0x1b0, Size: 16]
	TriggerAction*[] RedoTriggerActions;//[Offset: 0x1c0, Size: 16]
	int TaskID;//[Offset: 0x1d0, Size: 4]
	byte TaskType;//[Offset: 0x1d4, Size: 1]
	void SetTaskProcess(int process, FString ext_info);// 0x41a3df0
	void RedoAction();// 0x41a3dd4
	void NofityTriggerComplete();// 0x41a3db8
	bool IsConditionsSatisfy(const TriggerEvent* Event);// 0x41a3d20
	void InitConfigurableCondition(int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x41a3bcc
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x41a3b04
	TriggerCondition* CreateTeamActionCondition(byte TeamActionConType, float TimeIntervalForSameEmote);// 0x41a3a34
	TriggerCondition* CreateSpecifiedSpaceCondition(byte SpecifiedSpace);// 0x41a39a0
	TriggerCondition* CreateSpecifiedItemCondition(int ItemID);// 0x41a3914
	TriggerCondition* CreateSpecifiedAreaCondition(byte SpecifiedArea);// 0x41a3880
	TriggerAction* CreateRedoAction(byte ActionType);// 0x41a37ec
	TriggerCondition* CreateORCondition(TriggerCondition*[] ChildConditions);// 0x41a370c
	TriggerCondition* CreateOperatorCondition(class TriggerCondition_Operator OperatorClass, TriggerCondition*[] ChildConditions);// 0x41a35e4
	TriggerCondition* CreateKillPlayerCondition();// 0x41a35b0
	TriggerCondition* CreateGameModeCondition(enum GameModeType);// 0x41a3524
	TriggerAction* CreateDoAction(byte ActionType);// 0x41a3490
	TriggerCondition* CreateCondition(class TriggerCondition ConditionClass);// 0x41a3404
	TriggerCondition* CreateCollectItemCondition(int ItemID, int CollectCount);// 0x41a3340
	TriggerCondition* CreateANDCondition(TriggerCondition*[] ChildConditions);// 0x41a3260
	TriggerAction* CreateAction(byte ActionType);// 0x41a31cc
	bool ConstructTask(int InTaskID, int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x41a3028
	byte[] ConstructRedoActions();// 0xffffff8f20d162a8
	byte[] ConstructEvents();// 0xffffff8f20d162a8
	TriggerCondition* ConstructConditions();// 0xffffff8f20d162a8
	byte[] ConstructActions();// 0xffffff8f20d162a8
	void AddEventTypes(byte[] EventTypes);// 0x41a2f50
	bool ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x41a2e74

--------------------------------
Class: TriggerCondition_Operator.TriggerCondition_Task.TriggerCondition.Object
	TriggerCondition*[] ChildConditions;//[Offset: 0x58, Size: 16]
	void AddChildCondition(TriggerCondition* NewChildCond);// 0x414d338

--------------------------------
Class: TriggerCondition_Task.TriggerCondition.Object
	byte TaskConditionType;//[Offset: 0x50, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bIsConfigurable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	void SetTargetParam(int Value);// 0x414efa0
	void SetConditionParam(int Value);// 0x414ef1c
	bool IsSatisfy(const TriggerEvent* Event);// 0x414ee84
	bool IsSameCondition(byte InTaskConditionType);// 0x414edec
	bool FillDataSource(VariableSet* InDataSource);// 0x414ed54
	bool DeactiveCondition(VariableSet* InDataSource);// 0x414ecbc
	bool CompareParam(VariableSet* InDataSource);// 0x414ec24
	bool ActiveCondition(VariableSet* InDataSource);// 0x414eb8c

--------------------------------
Class: FriendObserver
	FString PlayerName;//[Offset: 0x0, Size: 16]
	byte Gender;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SyncOBDataActor.Actor.Object
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x418, Size: 16]
	PlayerWeatherMap[] TotalPlayerWeatherMap;//[Offset: 0x428, Size: 16]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x438, Size: 16]
	OBPlayerAdditionalInfo[] OBPlayerInfoList;//[Offset: 0x448, Size: 16]
	BattleItemData[] CacheObservedItemListOnReplay;//[Offset: 0x4c0, Size: 16]
	IncNetArrayNew CacheOBItemOnReplay;//[Offset: 0x4d0, Size: 32]
	RouteSegment[] RouteSegmentData;//[Offset: 0x560, Size: 16]
	PlayerStaticInfoInOB[] TotalPlayers_s;//[Offset: 0x570, Size: 16]
	<int,RouteSegment> RouteSegmentList;//[Offset: 0x580, Size: 80]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x5d0, Size: 16]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x5e0, Size: 16]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x5f0, Size: 16]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x600, Size: 16]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x610, Size: 80]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 1]
	PlayerOBUIDMap[] TotalPlayerOBUIDMap;//[Offset: 0x6e0, Size: 16]
	PlayerOBFlowMap[] TotalPlayerOBFlowMap;//[Offset: 0x6f0, Size: 16]
	void SyncStopFirePlayers(const uint32[] InPlayerList);// 0x41115e0
	void SyncStartFirePlayers(const uint32[] InPlayerList);// 0x4111554
	void OnRep_TotalPlayerWeatherMap();// 0x4111540
	void OnRep_TotalPlayerOBUIDMap();// 0x411152c
	void OnRep_TotalPlayerOBFlowMap();// 0x4111518
	void OnRep_RouteSegmentList();// 0x4111504
	void OnRep_RefreshTotalPlayers();// 0x41114f0
	void OnRep_RefreshAirDropBox();// 0x41114dc
	void OnRep_ObservedItemList_OnReplay();// 0x41114c8
	void OnRep_ObservedItemList();// 0x41114b4
	void OnPlayerRespawned(uint32 PlayerKey, bool bIsAI);// 0x41113f4
	void OnPlayerItemUpdate(ItemHandleBase* Handle);// 0x4111378
	Vector GetNewestAirDropBoxPos();// 0x4111340
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x411124c

--------------------------------
Class: PlayerBaseInfoInOB
	int PosX;//[Offset: 0x0, Size: 4]
	int PosY;//[Offset: 0x4, Size: 4]
	int PosZ;//[Offset: 0x8, Size: 4]
	int Health;//[Offset: 0xc, Size: 4]
	int HealthMax;//[Offset: 0x10, Size: 4]
	int LiveState;//[Offset: 0x14, Size: 4]
	int KillNum;//[Offset: 0x18, Size: 4]
	int Yaw;//[Offset: 0x1c, Size: 4]
	int Pitch;//[Offset: 0x20, Size: 4]
	float SignalHP;//[Offset: 0x24, Size: 4]
	uint32 PlayerKey;//[Offset: 0x28, Size: 4]
	uint32 KillByCauserKey;//[Offset: 0x2c, Size: 4]
	int GruopID;//[Offset: 0x30, Size: 4]
	bool KillByObGMDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bSnapsPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]

--------------------------------
Class: PlayerWeatherMap
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	int WeatherIndex;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AirDropBoxInOb
	int BoxId;//[Offset: 0x0, Size: 4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Vector Pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: OBPlayerAdditionalInfo
	uint32 uPlayerKey;//[Offset: 0x0, Size: 4]
	IncNetArrayNew OBItemList;//[Offset: 0x8, Size: 32]

--------------------------------
Class: RouteSegment
	int Index;//[Offset: 0x0, Size: 4]
	FString SegmentName;//[Offset: 0x8, Size: 16]
	float StartRatio;//[Offset: 0x18, Size: 4]
	float EndRatio;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0, Size: 16]
	FString PlayerOpenID;//[Offset: 0x10, Size: 16]
	FString PicURL;//[Offset: 0x20, Size: 16]
	int TeamID;//[Offset: 0x30, Size: 4]
	byte IdxInTeam;//[Offset: 0x34, Size: 1]
	uint32 PlayerKey;//[Offset: 0x38, Size: 4]
	FString PlayerUID;//[Offset: 0x40, Size: 16]
	int JumpSegmentID;//[Offset: 0x50, Size: 4]

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	FString PlayerName;//[Offset: 0x38, Size: 16]
	FString PlayerRemarkName;//[Offset: 0x48, Size: 16]
	FString PlayerOpenID;//[Offset: 0x58, Size: 16]
	FString PlayerUID;//[Offset: 0x68, Size: 16]
	FString PicURL;//[Offset: 0x78, Size: 16]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	int TeamID;//[Offset: 0x8c, Size: 4]
	Pawn* Character;//[Offset: 0x90, Size: 8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	Vector ShootPos;//[Offset: 0xa0, Size: 12]
	bool BeHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 1]
	bool bMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 1]
	bool bHasDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf, Size: 1]
	FString StrPlayerKey;//[Offset: 0xb0, Size: 16]
	byte IdxInTeam;//[Offset: 0xd5, Size: 1]

--------------------------------
Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0, Size: 4]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FString LogoPicUrl;//[Offset: 0x8, Size: 16]
	int KillNum;//[Offset: 0x18, Size: 4]
	int LiveMemberNum;//[Offset: 0x1c, Size: 4]
	Vector LogoWorldPostion;//[Offset: 0x20, Size: 12]

--------------------------------
Class: PlayerOBUIDMap
	uint64 SrcOBPlayerUID;//[Offset: 0x0, Size: 8]
	uint64 DestOBPlayerUID;//[Offset: 0x8, Size: 8]
	bool bIsWatchingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: PlayerOBFlowMap
	uint64 SrcOBPlayerUID;//[Offset: 0x0, Size: 8]
	enum ObserveFlow;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0, Size: 16]
	FString PicURL;//[Offset: 0x10, Size: 16]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	int TeamID;//[Offset: 0x24, Size: 4]
	FString PlayerUID;//[Offset: 0x28, Size: 16]
	Vector[] PosList;//[Offset: 0x38, Size: 16]
	float CanJumpLocInMapSelf;//[Offset: 0x4c, Size: 4]
	float ForceJumpLocInMapSelf;//[Offset: 0x50, Size: 4]

--------------------------------
Class: OwnerClientCreateWeaponCache
	ItemDefineID[] IDList;//[Offset: 0x0, Size: 16]
	uint32 CharacterGUID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x3e8, Size: 8]
	Actor* ReturnActor;//[Offset: 0x3f0, Size: 8]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x418, Size: 8]
	CameraComponent* ObservingCamera;//[Offset: 0x420, Size: 8]
	float MinMovingSpeed;//[Offset: 0x440, Size: 4]
	float MaxMovingTime;//[Offset: 0x444, Size: 4]
	float ObservingTime;//[Offset: 0x448, Size: 4]
	float TrackingDelay;//[Offset: 0x44c, Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x450, Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x454, Size: 4]
	void CancelTrackingEnd(UAEPlayerController* PlayerController);// 0x3e69a70

--------------------------------
Class: InformPlayerTypeInfo
	FString InstigatorName;//[Offset: 0x0, Size: 16]
	bool IsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FString InstigatorUID;//[Offset: 0x18, Size: 16]
	int DamageType;//[Offset: 0x28, Size: 4]
	bool IsTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool IsMurder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool IsInCurrentWatchTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	bool IsHitDownPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f, Size: 1]
	bool IsUseCustomEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	FString ExString;//[Offset: 0x38, Size: 16]

--------------------------------
Class: VehicleUserComponent.ActorComponent.Object
	bool bGameModeHasMobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	ItemDefineID LastUsedItemDefineID;//[Offset: 0x128, Size: 24]
	float LastFinishCD;//[Offset: 0x140, Size: 4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 1]
	STExtraVehicleBase* Vehicle;//[Offset: 0x148, Size: 8]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0x150, Size: 8]
	STExtraPlayerCharacter* Character;//[Offset: 0x158, Size: 8]
	enum VehicleUserState;//[Offset: 0x160, Size: 1]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0x168, Size: 8]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0x170, Size: 4]
	bool bAllowTickUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	float UpdateClosestVehicleInterval;//[Offset: 0x17c, Size: 4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x188, Size: 16]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x198, Size: 16]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x1a8, Size: 8]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x1c4, Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	float VehiclePitchMin;//[Offset: 0x1d8, Size: 4]
	float VehiclePitchMax;//[Offset: 0x1dc, Size: 4]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x1e0, Size: 4]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x1f0, Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x204, Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x208, Size: 4]
	float CurrentMoveUpRate;//[Offset: 0x20c, Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x214, Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x218, Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x21c, Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x220, Size: 4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x228, Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x238, Size: 8]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x240, Size: 8]
	Rotator InputExtraRot;//[Offset: 0x248, Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x254, Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x264, Size: 4]
	bool bResetInputExtraRotPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	bool isHelicopterSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272, Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x29c, Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x2a4, Size: 4]
	float ControllerYawClampMin;//[Offset: 0x2ac, Size: 4]
	float ControllerYawClampMax;//[Offset: 0x2b0, Size: 4]
	enum CurrentSeatType;//[Offset: 0x2b4, Size: 1]
	delegate OnClientEnterVehicleDelegate;//[Offset: 0x2d0, Size: 16]
	delegate OnClientExitVehicleDelegate;//[Offset: 0x2e0, Size: 16]
	bool IsEnteredByJoystickClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	float ValidClickInterval;//[Offset: 0x2f4, Size: 4]
	float ValidClickDistance;//[Offset: 0x2f8, Size: 4]
	Vector2D ValidClickCenter;//[Offset: 0x2fc, Size: 8]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x310, Size: 8]
	void UseVehicleWeaponOrNot();// 0x41d9f84
	void UsePopKartPassDoorAccelerate();// 0x41d9f24
	void UpdateVehWeaponPassengerViewLimit();// 0x41d9f10
	void UpdatePassengerViewYawLimit();// 0x41d9efc
	void UpdatePassengerViewPitchLimit();// 0x41d9ee8
	void TurnVehicle(float Rate);// 0x41d9e6c
	void TryUseHorn(bool bUse);// 0x41d9de8
	void TryStopRemoteControlVehicle();// 0x41d9dd4
	void TryShutDownUnmannedVehicle();// 0x41d9dc0
	void TryRemoteControlVehicle(STExtraVehicleBase* InVehicle);// 0x41d9d44
	void TryPauseUnmannedVehicle();// 0x41d9d30
	bool TryLeanOutOrIn(bool bAutoLeanOut);// 0x41d9c98
	void TryLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x41d9c1c
	void TryLaunchCurrentUnmannedVehicle();// 0x41d9bfc
	void TryExitVehicle();// 0x41d9be8
	void TryEnterVehicle_IgnoreDistanceAndBlock(STExtraVehicleBase* InVehicle, enum SeatType);// 0x41d9b30
	void TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x41d9a78
	void TryChangeVehicleSeat();// 0x41d9a64
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x41d99d4
	bool TryChangeFreeFireSeatAndScopeIn();// 0x41d999c
	bool TryChangeFreeFireSeatAndLeanOut();// 0x41d9964
	void TryAutonomousDriving(bool bEnable);// 0x41d98e0
	void ToggleHighSpeedMode();// 0x41d98cc
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0xffffff8f20d162a8
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x41d980c
	void StopFireVehicleWeapon();// 0x41d97f8
	bool ShowVehicleWeaponUI();// 0x41d97c0
	void SetBrake(float Rate);// 0x41d9744
	void SetBoosting(bool bEnabled);// 0x41d96c0
	void SetAirControlF(float Rate);// 0x41d9644
	void SetAirControlB(float Rate);// 0x41d95c8
	void ServerUseVehicleWeaponOrNot(int SeatID, bool bUse);// 0x41d94c4
	void ServerStopFireVehicleWeapon();// 0x41d9464
	void ServerBoost();// 0x41d9404
	void Server_JoystickCenterClickHandler();// 0x41d93a4
	void SendToServerUnmannedVehicleUse();// 0x41d9344
	void SendToServerUnmannedVehicleRecall();// 0x41d92e4
	void SendToServerUnmannedVehiclePause();// 0x41d9284
	void RspStopRemoteControlVehicle(bool bSuccess, bool bKeepState);// 0x41d91ac
	void RspShutDownUnmannedVehicle(bool bSucceed);// 0x41d9120
	void RspResumeRemoteControlVehicle();// 0x41d9104
	void RspRemoteControlVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType);// 0x41d8ff8
	void RspPauseUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x41d8f30
	void RspPauseRemoteControlVehicle();// 0x41d8f14
	void RspLeanOut(bool bOut);// 0x41d8e88
	void RspLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x41d8dc0
	void RspExitVehicle(bool bSuccess);// 0x41d8d34
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd, enum FailReason);// 0x41d8bb0
	void RspEnterControlledVehicle(STExtraVehicleBase* InVehicle, enum SeatType, bool bCanEnter);// 0x41d8aac
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn, enum FailReason);// 0x41d88d4
	void RspAutonomousDriving(bool bEnable, bool bSucceed);// 0x41d87fc
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x41d8714
	void ReqStopRemoteControlVehicle();// 0x41d86b4
	void ReqShutDownUnmannedVehicle();// 0x41d8654
	void ReqResumeRemoteControlVehicle(STExtraVehicleBase* InVehicle);// 0x41d85a4
	void ReqRemoteControlVehicle(STExtraVehicleBase* InVehicle);// 0x41d84f4
	void ReqPauseUnmannedVehicle();// 0x41d8494
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x41d83ac
	void ReqLeanOut(bool IsLeanOut);// 0x41d82e8
	void ReqLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x41d8238
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x41d8180
	void ReqEraseLastDriveVehicle();// 0x41d8120
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x41d8030
	void ReqEnterControlledVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x41d7f40
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x41d7e90
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x41d7dcc
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x41d7d08
	void ReqAutonomousDriving(bool bEnable);// 0x41d7c44
	void ProcessDragonBoatDrumSeat(bool enterDrumSeat);// 0x41d7bb8
	void PostStopRemoteControlVehicle();// 0x41d7b9c
	void OnUnmannedVehicle_Standby_Reconnet();// 0xffffff8f20d162a8
	void OnShutDownUnmannedVehicleCompleted(float CDTime);// 0xffffff8f20d162a8
	void OnServerReconnected();// 0x41d7b88
	void OnScopeInAfterChangeSeat();// 0x41d7b74
	void OnRep_DefineID();// 0x41d7b60
	void OnPauseUnmannedVehicleCompleted();// 0xffffff8f20d162a8
	void OnLeanOutAfterChangeSeat();// 0x41d7b4c
	void OnLaunchUnmannedVehicleCompleted();// 0xffffff8f20d162a8
	void OnInputAxisMoveRight(float Rate);// 0xffffff8f20d162a8
	void OnInputAxisMoveForward(float Rate);// 0xffffff8f20d162a8
	void OnExitVehicleCompleted();// 0xffffff8f20d162a8
	void OnEnterVehicleCompleted(enum SeatType);// 0xffffff8f20d162a8
	void OnCurrrentClosestVehicleChanged();// 0xffffff8f20d162a8
	void OnClientReconnected();// 0x41d7b38
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0xffffff8f20d162a8
	void NotifyResumeRemoteControlVehicle();// 0x41d7b1c
	void NotifyPopKartWin(int RaceGroup);// 0x41d7a98
	void NotifyPopKartBegin(int RaceGroup);// 0x41d7a14
	void NotifyPassDoorAccelerate();// 0x41d79f8
	void NotifyLeaveVehicleFailed();// 0x41d79dc
	void NotifyGetPassDoorAccelerate();// 0x41d79c0
	void NotifyEnterAccelerateJumpArea(STPopkartJumpArea* JumpArea);// 0x41d793c
	void NotifyEnterAccelerateArea(STPopkartAccelerateArea* AccelerateArea);// 0x41d78b8
	void MoveVehicleUp(float Rate);// 0x41d783c
	void MoveVehicleRight(float Rate);// 0x41d77c0
	void MoveVehicleForward(float Rate);// 0x41d7744
	void MaintenanceVehicle(float addpercenthp, bool FixTire);// 0x41d7684
	bool IsHighSpeedMode();// 0x41d764c
	bool IsDriverShoot();// 0x41d7614
	bool IsControllingUnmannedVehicle();// 0x41d75e4
	bool IsAutoDriving();// 0x41d75ac
	void InputJumpUp();// 0x41d7598
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x41d751c
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x41d7508
	void HandleLocalBackpackCurrentWeaponFinished();// 0x41d74f4
	bool HandleClientReconnecting();// 0x41d74bc
	enum GetVehicleUserState();// 0x41d74a0
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x41d7484
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x41d7450
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x41d7338
	void FireVehicleWeapon();// 0x41d7324
	void ClientUpdateSingleItem(ItemDefineID DefineID);// 0x41d7298
	void ClientRetryChangeVehicleSeat(int InSeatIndex);// 0x41d7214
	void ClientDeleteSingleItem(ItemDefineID DefineID);// 0x41d7188
	void Client_UnbindTouchEvents();// 0x41d7128
	void Client_ShouldBindTouchEvents();// 0x41d70c8
	bool CheckCanLeanOutVehicle();// 0x41d7090
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x41d7000
	bool CanUseVehicleHorn();// 0x41d6fc8
	bool CanControlVehicle();// 0x41d6f90
	bool CanAutoDriving();// 0x41d6f58
	void BoostByPassenger();// 0x41d6f44
	void AddVehicleFuel(float Amount);// 0x41d6ec8

--------------------------------
Class: STPopkartJumpArea.STPopkartAreaTrigger.Actor.Object
	float AcceleratePercent;//[Offset: 0x560, Size: 4]
	float UpSpeed;//[Offset: 0x564, Size: 4]
	float MaxSpeed;//[Offset: 0x568, Size: 4]
	float minSpeed;//[Offset: 0x56c, Size: 4]
	Vector JumpDirection;//[Offset: 0x570, Size: 12]
	bool UseServerNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	void OnVehicleJump(STExtraWheeledVehicle* Vehicle);// 0xffffff8f20d162a8
	void AccelerateVehicle(STExtraWheeledVehicle* Vehicle);// 0x4103438

--------------------------------
Class: STPopkartAreaTrigger.Actor.Object
	enum AreaType;//[Offset: 0x3e8, Size: 1]
	byte RaceGroup;//[Offset: 0x3e9, Size: 1]
	byte NodeIndex;//[Offset: 0x3ea, Size: 1]
	int RacePathNameID;//[Offset: 0x3ec, Size: 4]
	int MapIconID;//[Offset: 0x3f0, Size: 4]
	int ShowMapMarkDistance;//[Offset: 0x3f4, Size: 4]
	int MapIconInstanceID;//[Offset: 0x3f8, Size: 4]
	AkAudioEvent* Sfx_EnterArea;//[Offset: 0x400, Size: 8]
	AkAudioEvent* Sfx_AreaBGM;//[Offset: 0x408, Size: 8]
	<enum> ExcludeVehicleType;//[Offset: 0x410, Size: 80]
	bool CheckSeatChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	<enum,float> VehicleAcceMaxSpeed;//[Offset: 0x468, Size: 80]
	bool NeedServerTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 1]
	Vector BoxExtent;//[Offset: 0x4bc, Size: 12]
	Vector BoxOffset;//[Offset: 0x4c8, Size: 12]
	bool DrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	void NotifySeatStateChange(STExtraWheeledVehicle* Vehicle);// 0xffffff8f20d162a8
	void LeaveAreaEffect(STExtraWheeledVehicle* Vehicle);// 0xffffff8f20d162a8
	void EnterAreaEffect(STExtraWheeledVehicle* Vehicle);// 0xffffff8f20d162a8

--------------------------------
Class: STPopkartAccelerateArea.STPopkartAreaTrigger.Actor.Object
	float AcceleratePercent;//[Offset: 0x560, Size: 4]
	float MaxSpeed;//[Offset: 0x564, Size: 4]
	float minSpeed;//[Offset: 0x568, Size: 4]
	bool UseServerNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	Vector AccelerateDirection;//[Offset: 0x570, Size: 12]
	void OnAccelerateVehicle(STExtraWheeledVehicle* Vehicle);// 0xffffff8f20d162a8
	void AccelerateVehicle(STExtraWheeledVehicle* Vehicle);// 0x4101e5c

--------------------------------
Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	ParticleSystem* DefaultFX;//[Offset: 0x3f0, Size: 8]
	ParticleSystem* ConcreteFX;//[Offset: 0x3f8, Size: 8]
	ParticleSystem* DirtFX;//[Offset: 0x400, Size: 8]
	ParticleSystem* WaterFX;//[Offset: 0x408, Size: 8]
	ParticleSystem* MetalFX;//[Offset: 0x410, Size: 8]
	ParticleSystem* WoodFX;//[Offset: 0x418, Size: 8]
	ParticleSystem* GlassFX;//[Offset: 0x420, Size: 8]
	ParticleSystem* GrassFX;//[Offset: 0x428, Size: 8]
	ParticleSystem* FleshFX;//[Offset: 0x430, Size: 8]
	ParticleSystem* AutonomousFleshFX;//[Offset: 0x438, Size: 8]
	ParticleSystem* SteelFX;//[Offset: 0x440, Size: 8]
	ParticleSystem* SandbagFX;//[Offset: 0x448, Size: 8]
	ParticleSystem* SandFX;//[Offset: 0x450, Size: 8]
	ParticleSystem* ClothFX;//[Offset: 0x458, Size: 8]
	ParticleSystem* PlasticFX;//[Offset: 0x460, Size: 8]
	ParticleSystem* LeatherFX;//[Offset: 0x468, Size: 8]
	ParticleSystem* CeramicsFX;//[Offset: 0x470, Size: 8]
	ParticleSystem* PaperFX;//[Offset: 0x478, Size: 8]
	ParticleSystem* StoneFX;//[Offset: 0x480, Size: 8]
	ParticleSystem* SnowFX;//[Offset: 0x488, Size: 8]
	ParticleSystem* PopCanFX;//[Offset: 0x490, Size: 8]
	ParticleSystem* PyreflyFX;//[Offset: 0x498, Size: 8]
	ParticleSystem* LeafFX;//[Offset: 0x4a0, Size: 8]
	ParticleSystem* CarFX;//[Offset: 0x4a8, Size: 8]
	ParticleSystem* AsphaltFX;//[Offset: 0x4b0, Size: 8]
	ParticleSystem* IceFX;//[Offset: 0x4b8, Size: 8]
	ParticleSystem* FoodFX;//[Offset: 0x4c0, Size: 8]
	ParticleSystem* MonsterFleshFX;//[Offset: 0x4c8, Size: 8]
	ParticleSystem* IceEngravingFX;//[Offset: 0x4d0, Size: 8]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	<FString,ParticleSystem*> ExtendFleshFX;//[Offset: 0x4e0, Size: 80]
	AkAudioEvent* DefaultSound;//[Offset: 0x530, Size: 8]
	AkAudioEvent* ConcreteSound;//[Offset: 0x538, Size: 8]
	AkAudioEvent* DirtSound;//[Offset: 0x540, Size: 8]
	AkAudioEvent* WaterSound;//[Offset: 0x548, Size: 8]
	AkAudioEvent* MetalSound;//[Offset: 0x550, Size: 8]
	AkAudioEvent* WoodSound;//[Offset: 0x558, Size: 8]
	AkAudioEvent* GlassSound;//[Offset: 0x560, Size: 8]
	AkAudioEvent* GrassSound;//[Offset: 0x568, Size: 8]
	AkAudioEvent* FleshSound;//[Offset: 0x570, Size: 8]
	AkAudioEvent* SteelSound;//[Offset: 0x578, Size: 8]
	AkAudioEvent* SandbagSound;//[Offset: 0x580, Size: 8]
	AkAudioEvent* SandSound;//[Offset: 0x588, Size: 8]
	AkAudioEvent* ClothSound;//[Offset: 0x590, Size: 8]
	AkAudioEvent* PlasticSound;//[Offset: 0x598, Size: 8]
	AkAudioEvent* LeatherSound;//[Offset: 0x5a0, Size: 8]
	AkAudioEvent* CeramicsSound;//[Offset: 0x5a8, Size: 8]
	AkAudioEvent* PaperSound;//[Offset: 0x5b0, Size: 8]
	AkAudioEvent* StoneSound;//[Offset: 0x5b8, Size: 8]
	AkAudioEvent* SnowSound;//[Offset: 0x5c0, Size: 8]
	AkAudioEvent* PopCanSound;//[Offset: 0x5c8, Size: 8]
	AkAudioEvent* PyreflySound;//[Offset: 0x5d0, Size: 8]
	AkAudioEvent* LeafSound;//[Offset: 0x5d8, Size: 8]
	AkAudioEvent* CarSound;//[Offset: 0x5e0, Size: 8]
	AkAudioEvent* AsphaltSound;//[Offset: 0x5e8, Size: 8]
	AkAudioEvent* IceSound;//[Offset: 0x5f0, Size: 8]
	AkAudioEvent* FoodSound;//[Offset: 0x5f8, Size: 8]
	AkAudioEvent* MonsterFleshSound;//[Offset: 0x600, Size: 8]
	AkAudioEvent* IceEngravingSound;//[Offset: 0x608, Size: 8]
	DecalData DefaultDecal;//[Offset: 0x610, Size: 32]
	DecalData ConcreteDecal;//[Offset: 0x630, Size: 32]
	DecalData DirtDecal;//[Offset: 0x650, Size: 32]
	DecalData WaterDecal;//[Offset: 0x670, Size: 32]
	DecalData MetalDecal;//[Offset: 0x690, Size: 32]
	DecalData WoodDecal;//[Offset: 0x6b0, Size: 32]
	DecalData GrassDecal;//[Offset: 0x6d0, Size: 32]
	DecalData GlassDecal;//[Offset: 0x6f0, Size: 32]
	DecalData FleshDecal;//[Offset: 0x710, Size: 32]
	DecalData FleshDecalAutomonous;//[Offset: 0x730, Size: 32]
	DecalData SteelDecal;//[Offset: 0x750, Size: 32]
	DecalData SandbagDecal;//[Offset: 0x770, Size: 32]
	DecalData SandDecal;//[Offset: 0x790, Size: 32]
	DecalData ClothDecal;//[Offset: 0x7b0, Size: 32]
	DecalData PlasticDecal;//[Offset: 0x7d0, Size: 32]
	DecalData LeatherDecal;//[Offset: 0x7f0, Size: 32]
	DecalData CeramicsDecal;//[Offset: 0x810, Size: 32]
	DecalData PaperDecal;//[Offset: 0x830, Size: 32]
	DecalData StoneDecal;//[Offset: 0x850, Size: 32]
	DecalData SnowDecal;//[Offset: 0x870, Size: 32]
	DecalData PopCanDecal;//[Offset: 0x890, Size: 32]
	DecalData PyreflyDecal;//[Offset: 0x8b0, Size: 32]
	DecalData LeafDecal;//[Offset: 0x8d0, Size: 32]
	DecalData CarDecal;//[Offset: 0x8f0, Size: 32]
	DecalData AsphaltDecal;//[Offset: 0x910, Size: 32]
	DecalData IceDecal;//[Offset: 0x930, Size: 32]
	DecalData FoodDecal;//[Offset: 0x950, Size: 32]
	DecalData IceEngravingDecal;//[Offset: 0x970, Size: 32]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x990, Size: 304]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac0, Size: 1]
	bool bFXOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac1, Size: 1]
	bool bIsAutonomousClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac2, Size: 1]
	DecalComponent* ImpactDecalComp;//[Offset: 0xac8, Size: 8]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0xad0, Size: 8]
	SceneComponent* TargetImpactComp;//[Offset: 0xaf8, Size: 8]
	ParticleSystem* CachedImpactFX;//[Offset: 0xb00, Size: 8]
	void TimerHideDecal();// 0x3fc2500

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 4]
	float LifeSpan;//[Offset: 0x4, Size: 4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 8]
	float ImpactEffectStartScaleDistance;//[Offset: 0x10, Size: 4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x14, Size: 4]
	float ImpactEffectStartScaleValue;//[Offset: 0x18, Size: 4]
	float ImpactEffectEndScaleValue;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc, Size: 12]
	Vector VictimLocation;//[Offset: 0x18, Size: 12]
	Vector BulletPos;//[Offset: 0x24, Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x30, Size: 12]
	Vector ShootDir;//[Offset: 0x3c, Size: 12]
	int8 SurfaceType;//[Offset: 0x48, Size: 1]
	uint32 ShootID;//[Offset: 0x4c, Size: 4]
	uint16 CompensationTime;//[Offset: 0x50, Size: 2]
	Actor* Actor;//[Offset: 0x54, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x5c, Size: 8]
	int HitTargetLagTime;//[Offset: 0x64, Size: 4]
	int ClientShootTime;//[Offset: 0x68, Size: 4]
	byte HitBodyType;//[Offset: 0x6c, Size: 1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x70, Size: 4]
	float MuzzleFloorHeight;//[Offset: 0x74, Size: 4]
	float DamageRate;//[Offset: 0x78, Size: 4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool bIsUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	bool bShootToDeath;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d, Size: 1]
	bool bOutRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	FName BoneName;//[Offset: 0x80, Size: 8]
	Transform BoneTrans;//[Offset: 0x90, Size: 48]
	MoveBaseInfo_NetQuantize VictimBase;//[Offset: 0xc0, Size: 80]
	BulletID BulletID;//[Offset: 0x110, Size: 2]

--------------------------------
Class: MoveBaseInfo_NetQuantize

--------------------------------
Class: BulletID
	byte PelletID;//[Offset: 0x0, Size: 1]
	byte DataID;//[Offset: 0x1, Size: 1]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x2c0, Size: 8]
	int SortOrder;//[Offset: 0x2c8, Size: 4]
	float FadeScreenSize;//[Offset: 0x2cc, Size: 4]
	float FadeStartDelay;//[Offset: 0x2d0, Size: 4]
	float FadeDuration;//[Offset: 0x2d4, Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 1]
	Vector DecalSize;//[Offset: 0x2dc, Size: 12]
	void SetSortOrder(int Value);// 0x66877b0
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x6687734
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x668763c
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x66875c0
	float GetFadeStartDelay();// 0x668758c
	float GetFadeDuration();// 0x6687558
	MaterialInterface* GetDecalMaterial();// 0x6687524
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x66874e8

--------------------------------
Class: SuitSkinData
	bool Open;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	StyleUnit[] SuitSkinList;//[Offset: 0x8, Size: 16]
	GlidSkinUnit[] GlidSkinList;//[Offset: 0x18, Size: 16]

--------------------------------
Class: StyleUnit
	int stype_type;//[Offset: 0x0, Size: 4]
	int Slot;//[Offset: 0x4, Size: 4]
	int style_id;//[Offset: 0x8, Size: 4]
	bool lock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	GameModePlayerItem[] ItemList;//[Offset: 0x10, Size: 16]
	GameModePlayer_WearInfo wearInfo;//[Offset: 0x20, Size: 192]

--------------------------------
Class: WeaponModData
	int ModeID;//[Offset: 0x0, Size: 4]
	WeaponModificationData[] WeaponModificationDataList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: WeaponModificationData
	int WeaponID;//[Offset: 0x0, Size: 4]
	int[] ModuleList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: VehicleAvatarItemPairData
	int DefaultItemID;//[Offset: 0x0, Size: 4]
	int ChangeSkinItemID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerItemList
	GameModePlayerItem[] PlayerItemList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: VehicleAvatarSkinItem

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	uint64 UID;//[Offset: 0x8, Size: 8]
	uint32 PlayerKey;//[Offset: 0x10, Size: 4]
	int SegmentLevel;//[Offset: 0x14, Size: 4]
	int BattleMode;//[Offset: 0x18, Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int GameCount;//[Offset: 0x20, Size: 4]
	int WinCount;//[Offset: 0x24, Size: 4]
	int TopTenCount;//[Offset: 0x28, Size: 4]
	int KillNum;//[Offset: 0x2c, Size: 4]
	float KDNum;//[Offset: 0x30, Size: 4]
	int Title_Type;//[Offset: 0x34, Size: 4]
	int Title_RankID;//[Offset: 0x38, Size: 4]
	int Title_RankType;//[Offset: 0x3c, Size: 4]
	int Title_RankNo;//[Offset: 0x40, Size: 4]
	int TopSegmentTime;//[Offset: 0x44, Size: 4]
	GameModePlayer_WearInfo OBPlayerWearInfo;//[Offset: 0x48, Size: 192]
	GameModePlayer_BattlePrepareDisplayWearInfo OBPlayerBattlePrepareDisplayWearInfo;//[Offset: 0x108, Size: 80]

--------------------------------
Class: GameModePlayer_BattlePrepareDisplayWearInfo
	int[] DisplayWearAvatarInfoList;//[Offset: 0x0, Size: 16]
	int[] DisplayWearWeaponInfoList;//[Offset: 0x10, Size: 16]
	int[] DisplayWearBackpackInfoList;//[Offset: 0x20, Size: 16]
	int[] DisplayWearHelmetInfoList;//[Offset: 0x30, Size: 16]
	int[] DisplayVehicleInfoList;//[Offset: 0x40, Size: 16]

--------------------------------
Class: GameModePlayerDecalItem.GameModePlayerItem

--------------------------------
Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0, Size: 4]
	int process;//[Offset: 0x4, Size: 4]
	int week_index;//[Offset: 0x8, Size: 4]
	bool is_traced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool is_mode_fit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	FString ext_info;//[Offset: 0x10, Size: 16]

--------------------------------
Class: SpecialPickItem
	int task_id;//[Offset: 0x0, Size: 4]
	int item_id;//[Offset: 0x4, Size: 4]
	int cur_count;//[Offset: 0x8, Size: 4]
	int total_count;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AllPlayerFixInfo
	SinglePlayerFixInfo[] RepData;//[Offset: 0x0, Size: 16]

--------------------------------
Class: SinglePlayerFixInfo
	FString PlayerName;//[Offset: 0x0, Size: 16]
	uint32 PlayerKey;//[Offset: 0x10, Size: 4]
	FString PlayerUID;//[Offset: 0x18, Size: 16]
	int AnchorPlatformResID;//[Offset: 0x28, Size: 4]
	int AnchorPlatformColorID;//[Offset: 0x2c, Size: 4]
	FString PicURL;//[Offset: 0x30, Size: 16]
	FString MedalPicUrl;//[Offset: 0x40, Size: 16]

--------------------------------
Class: PlayerOBBattleInfo
	int BattleMode;//[Offset: 0x0, Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int GameCount;//[Offset: 0x8, Size: 4]
	int WinCount;//[Offset: 0xc, Size: 4]
	int TopTenCount;//[Offset: 0x10, Size: 4]
	int KillNum;//[Offset: 0x14, Size: 4]
	FString KDNum;//[Offset: 0x18, Size: 16]
	int TopSegmentTimes;//[Offset: 0x28, Size: 4]

--------------------------------
Class: CollectedEventKeysValues
	FString[] Keys;//[Offset: 0x0, Size: 16]
	FString[] Values;//[Offset: 0x10, Size: 16]

--------------------------------
Class: CollectedEventData
	<FString,FString> KeyValueMap;//[Offset: 0x0, Size: 80]

--------------------------------
Class: UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	Object* UtilsPtr;//[Offset: 0x4c0, Size: 8]
	float GridCheckSize;//[Offset: 0x4c8, Size: 4]
	float DeepCheckSize;//[Offset: 0x4cc, Size: 4]
	int MaxPlayerLimit;//[Offset: 0x4d8, Size: 4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dd, Size: 1]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4de, Size: 1]
	int WeatherID;//[Offset: 0x4e0, Size: 4]
	FString WeatherName;//[Offset: 0x4e8, Size: 16]
	int RoomMode;//[Offset: 0x4f8, Size: 4]
	FString RoomName;//[Offset: 0x500, Size: 16]
	int MainModeId;//[Offset: 0x510, Size: 4]
	int CustomGameModeId;//[Offset: 0x514, Size: 4]
	bool IsMatchRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool IsCompetitionOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool IsGMatchRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]
	int SeasonIdx;//[Offset: 0x520, Size: 4]
	int AirdropId;//[Offset: 0x524, Size: 4]
	float MeteorShowerRatio;//[Offset: 0x528, Size: 4]
	FString ItemTableName;//[Offset: 0x530, Size: 16]
	FString ItemClassPath;//[Offset: 0x540, Size: 16]
	<FString,int> ItemTypeParam;//[Offset: 0x550, Size: 80]
	<FString,int> ItemSubTypeParam;//[Offset: 0x5a0, Size: 80]
	<FString,int> VehicleTypeParam;//[Offset: 0x5f0, Size: 80]
	<FString,int> VehicleSubTypeParam;//[Offset: 0x640, Size: 80]
	bool UseSelfAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 1]
	FString PickupBoxConfigClassPath;//[Offset: 0x698, Size: 16]
	float DeadTombBoxLifeSpan;//[Offset: 0x6a8, Size: 4]
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 1]
	FString PickupBoxConfigDataTableName;//[Offset: 0x6b0, Size: 16]
	FString VehicleTableName;//[Offset: 0x6c0, Size: 16]
	FString VehicleClassPath;//[Offset: 0x6d0, Size: 16]
	int GameType;//[Offset: 0x6e0, Size: 4]
	int SubGameType;//[Offset: 0x6e4, Size: 4]
	<FString,float> BattleCustomConfig;//[Offset: 0x6e8, Size: 80]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x738, Size: 4]
	int AINoRepTimeInReady;//[Offset: 0x73c, Size: 4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x740, Size: 8]
	int NetServerMaxTickRateInMatchRoom;//[Offset: 0x748, Size: 4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74c, Size: 1]
	bool bKillCharacterOnPlayerExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74d, Size: 1]
	bool bUseSpawnItemZombieMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74e, Size: 1]
	SpawnZombieActiveMaxCfg[] SpawnZombieActiveMaxList;//[Offset: 0x750, Size: 16]
	SpawnZombieActiveMaxCfg[] SpawnZombieActiveMaxCfgList;//[Offset: 0x760, Size: 16]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x770, Size: 16]
	int[] BuildingAdvertismentIds;//[Offset: 0x780, Size: 16]
	int MapId;//[Offset: 0x790, Size: 4]
	FString MapName;//[Offset: 0x798, Size: 16]
	FString NavlinkPath;//[Offset: 0x7a8, Size: 16]
	FString NavMeshPath;//[Offset: 0x7b8, Size: 16]
	enum RouteSegmentMode;//[Offset: 0x7c8, Size: 1]
	<int,RouteSegment> RouteSegmentList;//[Offset: 0x7d0, Size: 80]
	<int,int> CompetitionModeTeamOrder;//[Offset: 0x820, Size: 80]
	int IsGameModeFpp;//[Offset: 0x870, Size: 4]
	bool bIsUGCGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874, Size: 1]
	bool bUseUserDefinedMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x875, Size: 1]
	DropdownSchemeData[] DropdownSchemeArray;//[Offset: 0x878, Size: 16]
	bool bKillThanksEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	bool bEnableSoundSpatialization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x889, Size: 1]
	bool bNoUIOpenedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88a, Size: 1]
	int PeakCompetitionMatchType;//[Offset: 0x88c, Size: 4]
	delegate OnPlayerStateChanged;//[Offset: 0x8a0, Size: 16]
	delegate OnGameModeInitFinished;//[Offset: 0xea8, Size: 16]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb8, Size: 1]
	<byte,bool> EnabledCollectedEventDataEventIds;//[Offset: 0xec0, Size: 80]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf70, Size: 1]
	float OBInfoTimeStep;//[Offset: 0x10d8, Size: 4]
	float OBFiringTimeStep;//[Offset: 0x10dc, Size: 4]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0x1150, Size: 16]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0x11c8, Size: 16]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0x11d8, Size: 16]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e8, Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0x11f0, Size: 16]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0x1200, Size: 16]
	ReplaceTextureURLCfg[] ReplaceTextureURLList;//[Offset: 0x1210, Size: 16]
	ReplaceTextureURLCfg[] ReplaceMeshAssetPathList;//[Offset: 0x1220, Size: 16]
	CakeInfo CakeInfo;//[Offset: 0x1230, Size: 32]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x1250, Size: 8]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0x1258, Size: 8]
	int GameRatingId;//[Offset: 0x1260, Size: 4]
	int ChooseRatingType;//[Offset: 0x1264, Size: 4]
	uint32[] NeedReplayPlayers;//[Offset: 0x1268, Size: 16]
	int TotalPlayerNum;//[Offset: 0x1278, Size: 4]
	int TotalRealPlayerNum;//[Offset: 0x127c, Size: 4]
	int TotalGeneratedPickup;//[Offset: 0x1280, Size: 4]
	DSTestComponent* DSTestComponent;//[Offset: 0x1910, Size: 8]
	DeadBoxItem[] InitialDeadBoxItemList;//[Offset: 0x1918, Size: 16]
	<uint64,TrainingStatisticsData> TrainingStatisticsDataMap;//[Offset: 0x1950, Size: 80]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f8, Size: 1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0x1a00, Size: 16]
	GMDataManager* DataManager;//[Offset: 0x1ab0, Size: 8]
	GMComponentManager* ComponentManager;//[Offset: 0x1ab8, Size: 8]
	ObjectPoolReservation[] ObjectPoolReservations;//[Offset: 0x1ac0, Size: 16]
	float DelayKillDSTimeWhenClassFieldAccessDeniedTime;//[Offset: 0x1ad0, Size: 4]
	bool bReadyStateWithoutCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad4, Size: 1]
	void TestPlaneBannerInEditor();// 0x49e3ff8
	void SyncPlayerStaticInfo();// 0x49e3fdc
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x49e3f18
	void SyncLiveInfo(uint64 UID, FString LiveID, int LiveType);// 0x49e3dc4
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x49e3ccc
	void SoftKickPlayer(uint32 PlayerKey, FName PlayerType, bool bSendFailure, FString FailureMessage);// 0x49e3b18
	void SoftCloseConnection(NetConnection* Connection, bool bSendFailure, FString FailureMessage);// 0x49e39ac
	void SetTrainingStatisticsData(uint64 UID, TrainingStatisticsData TrainingStatisticsData);// 0x49e38bc
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x49e37f0
	void SetPlayerAllowWatch(uint32 PlayerKey, bool allowWatch);// 0x49e3728
	void SetEnablePlaneBanner(bool bEnable);// 0x49e36a4
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x49e35fc
	int[] RetrieveRemainingTeams();// 0x49e3574
	GameModeMatchGoalAchievedData RetrieveGameModeMatchGoalAchievedData();// 0x49e3538
	void RestartPlayerAtPlayerStartWithClass(Controller* NewPlayer, Actor* StartSpot, class Pawn PawnClass);// 0x49e3440
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x49e3384
	void Rescue(int RescuerKey, uint32 SavorKey);// 0x49e32c8
	bool ReportCollectedEventDataWithPlayerValidation(UAEPlayerController* UAEPlayerController, byte EventId, delegate CollectReportedEventDataCallback);// 0x49e31a0
	bool ReportCollectedEventDataWithPlayersValidation(byte EventId, delegate CollectReportedEventDataCallback);// 0x49e30b4
	bool ReportCollectedEventData(out const FString UID, byte EventId, out const CollectedEventData Data);// 0x49e2f2c
	void RemoveUnuseComponentInternal(ActorComponent* CompToRemove);// 0x49e2ea8
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x49e2dec
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x49e2d68
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x49e2ca8
	void RefreshPlayerStaticInfo(uint32 InPlayerKey, FString InPlayerName, FString PlayerUID, int TeamID, byte IdxInTeam, int JumpSegmentID, bool IsLogin);// 0x49e29f8
	int RecoardAlivePlayerNum();// 0x49e29bc
	bool QuitGameIsNotEscape();// 0x49e297c
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x49e28e8
	void OnPlayerStopFire(uint32 InPlayerKey);// 0x49e2864
	void OnPlayerStartFire(uint32 InPlayerKey);// 0x49e27e0
	void OnPlayerRealExit(PlayerController* Exiting);// 0x49e275c
	void OnObserverLogout(UAEPlayerController* InController);// 0x49e26e0
	void OnObserverLogin(UAEPlayerController* InController);// 0x49e2664
	void OnNotifyPlayerExit(UAEPlayerController* ExitPlayer, FString Message);// 0xffffff8f20d162a8
	void OnNormalPlayerLogin(UAEPlayerController* InController);// 0x49e25e0
	void OnMsg(FString Msg);// 0x49e2554
	void NotifyTeamParamsSynced(out const GameModeTeamParams[] TeamParams);// 0x49e2490
	void NotifyPrePlayerExit(uint32 PlayerKey, FName PlayerType);// 0x49e23d0
	void NotifyPlayerPrompt(uint32 PlayerKey, int TeamID, int PromptType, FString Msg);// 0x49e2224
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage);// 0x49e1fe0
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x49e1f20
	void NotifyGameModeInit();// 0x49e1f04
	float ModifyFinalDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x49e1d64
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x49e1bc4
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x49e1a74
	void KillCharacterOnPlayerExit(PlayerController* PC);// 0x49e19f0
	bool IsPlayerCollectedEventDataReportingEnabled(UAEPlayerController* UAEPlayerController, byte EventId);// 0x49e1924
	bool IsFeatureSupported(enum SubSystemType);// 0x49e188c
	bool IsCollectedEventEnabled(byte EventId);// 0x49e17fc
	void InitAdvertisement();// 0x49e17e0
	bool HasMatchGoalAchieved();// 0x49e17a0
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int Count);// 0x49e1630
	void HandlePlayerGiftItemResponse(uint32 PlayerKey, FName PlayerType, int Result, int GiftResID, int Count);// 0x49e14c0
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x49e1404
	int GetUniqueLogicID();// 0x49e13d0
	TrainingStatisticsData GetTrainingStatisticsDataByUID(uint64 UID);// 0x49e1328
	int GetSurvivingTeamCount();// 0x49e12ec
	int GetSurvivingCharacterCount();// 0x49e12b0
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x49e11a4
	UAEPlayerState* GetPlayerStateByUID(out const FString UID);// 0x49e1100
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x49e0ff4
	void GetPlayerAndRealAiNum(out int OutPlayerNum, out int OutRealAiNum);// 0x49e0f08
	FString GetPlayerAddress(uint32 PlayerKey);// 0x49e0e38
	UAEPlayerController*[] GetObserverControllerList();// 0x49e0db8
	DynamicBattleRankInfo[] GetDynamicBattleRankInfoList();// 0x49e0cd4
	GameModePlayerParams[] GetDSPlayerList();// 0x49e0c00
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x49e0b38
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x49e0a70
	UAEPlayerController* FindPlayerControllerWithInt64PlayerKey(int64 PlayerKey);// 0x49e09e4
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x49e0960
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x49e08dc
	void CreateDynamicComponentForPlayerController(PlayerController* NewPlayer);// 0x49e0858
	void CreateDynamicComponentForCharacter(Pawn* NewPawn);// 0x49e07d4
	CollectedEventData CollectReportedEventDataCallback__DelegateSignature(UAEGameMode* UAEGameMode, UAEPlayerController* UAEPlayerController, byte EventId);// 0xffffff8f20d162a8
	bool CheckPickupItemLimitedCount(out const ItemDefineID InTargetItem, const BackpackComponent* InTargetBackpack, const int InTargetPickupCount, out int OutLimitedItemCount);// 0x49e0660
	bool CheckFeatureSupported(byte SubSystemId);// 0x49e05c8
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x49e04b8
	UAEPlayerState* BPFindPlayerStateWithPlayerKey(FString PlayerKey);// 0x49e03d8
	UAEPlayerController* BPFindPlayerControllerWithPlayerKey(FString PlayerKey);// 0x49e02f8

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object
	bool IsPureSpectator();// 0x49eae58

--------------------------------
Class: SpawnZombieActiveMaxCfg
	FString Name;//[Offset: 0x0, Size: 16]
	int Max;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x2b9, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba, Size: 1]
	int WorldCompositionID;//[Offset: 0x2bc, Size: 4]
	float LastGenerateItemTime;//[Offset: 0x2c0, Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x2c4, Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	bool bHasRegisterToGenenrator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca, Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cb, Size: 1]
	void SetGroupValid(bool Valid);// 0x49b9d80
	bool IsValidGroup();// 0x49b9d40
	int FindWorldCompositionID();// 0x49b9d0c
	void DoPickUp();// 0x49b9cf8

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DropdownSchemeData
	int SchemeId;//[Offset: 0x0, Size: 4]
	int ItemID;//[Offset: 0x4, Size: 4]
	FString ItemName;//[Offset: 0x8, Size: 16]
	int MaxNum;//[Offset: 0x18, Size: 4]
	int MinNum;//[Offset: 0x1c, Size: 4]
	int Probability;//[Offset: 0x20, Size: 4]
	byte DropType;//[Offset: 0x24, Size: 1]

--------------------------------
Class: AdvertisementActorConfig
	FString resPath;//[Offset: 0x0, Size: 16]
	FString HttpImgPath;//[Offset: 0x10, Size: 16]
	Vector Loc;//[Offset: 0x20, Size: 12]
	Rotator Rot;//[Offset: 0x2c, Size: 12]
	Vector Scale;//[Offset: 0x38, Size: 12]
	bool HideWhenFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]

--------------------------------
Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	StaticMesh* StaticMesh;//[Offset: 0x408, Size: 8]
	FString StaticMeshPath;//[Offset: 0x410, Size: 16]
	FString PicURL;//[Offset: 0x420, Size: 16]
	FrontendHUD* FrontendHUD;//[Offset: 0x430, Size: 8]
	float NetCullDistance;//[Offset: 0x43c, Size: 4]
	bool NeedDestroyChildActorCom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool ShouldBeDisabled(int DisableAdvertisementCategories);// 0x49d68d4
	void SetStaticMeshPath(FString InMeshPath);// 0x49d6848
	void SetScale(Vector InScale);// 0x49d67c0
	void SetHttpImage(FString InPicURL);// 0x49d6734
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x49d6670
	void OnRep_PicURL();// 0x49d665c
	void OnRep_MeshPath();// 0x49d6648
	static int GetDisableAdvertisementCategories();// 0x49d6610

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x3e8, Size: 8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x3f1, Size: 1]

--------------------------------
Class: ReplaceTextureURLCfg
	FString URL;//[Offset: 0x0, Size: 16]
	int ID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CakeInfo
	FString CakeActorPath;//[Offset: 0x0, Size: 16]
	FString CakeButtonImage;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x2f4, Size: 12]
	bool bUseCookedSpreadPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	byte BornIslandGroupType;//[Offset: 0x301, Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x308, Size: 256]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x410, Size: 16]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 1]
	FString[] AreaIDList;//[Offset: 0x428, Size: 16]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x438, Size: 16]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x448, Size: 80]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x498, Size: 24]
	CurveFloat* SpotRateCurve;//[Offset: 0x4b0, Size: 8]
	CurveFloat* ItemRateCurve;//[Offset: 0x4b8, Size: 8]
	<FString,float> CategoryRates;//[Offset: 0x4c0, Size: 80]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x510, Size: 80]
	Actor*[] BornIslandItems;//[Offset: 0x560, Size: 16]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x570, Size: 16]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x588, Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x590, Size: 8]
	<FString,int> ItemTypeParam;//[Offset: 0x598, Size: 80]
	<FString,int> ItemSubTypeParam;//[Offset: 0x5e8, Size: 80]
	float DelayGenerateTime;//[Offset: 0x638, Size: 4]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x690, Size: 16]
	int TotalGeneratedPickup;//[Offset: 0x70c, Size: 4]
	void WriteItemClassStatisticsDatas();// 0x49bd6b4
	void WriteGroupStatisticsDatas();// 0x49bd6a0
	void WriteBuildingStatisticsDatas();// 0x49bd68c
	void WriteAllStatisticsDatasToLog();// 0x49bd670
	void WriteAllStatisticsDatas();// 0x49bd654
	void SetCatetoryRateConfig(float Scale, out <FString,float> Rates);// 0x49bd544
	void SetCatetoryRate(<FString,float> Rates);// 0x49bd428
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x49bd2f4
	void RegisterBornIslandItem(Actor* Item);// 0x49bd270
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x49bd160
	ItemGenerateSpawnData RandomItemGenerateSpawnData(out ItemGenerateSpawnData[] Items);// 0x49bd068
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x49bcfc4
	void RandomGroups();// 0x49bcfa8
	void RandomBornIslandGroups();// 0x49bcf8c
	void LoadItemGenerateTable();// 0x49bcf70
	bool IsCatetoryEnabled();// 0x49bcf38
	void InitItemGenerator(out FString InItemTableName, out <FString,int> InItemTypeParam, out <FString,int> InItemSubTypeParam);// 0x49bcd68
	void InitCatetorysEx();// 0x49bcd54
	void InitCatetorys();// 0x49bcd40
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x49bcc90
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem);// 0x49bcae0
	int GetItemTypeParamValueByName(FString Name);// 0x49bca00
	int GetItemSubTypeParamValueByName(FString Name);// 0x49bc920
	float GetCatetoryRate(FString Catetory);// 0x49bc88c
	void GenerateSpotOnTick(float DeltaTime);// 0x49bc808
	void DeleteValidGroups();// 0x49bc7f4
	void DeleteBornIslandItems();// 0x49bc7e0

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0x124, Size: 4]
	FString ItemTableName;//[Offset: 0x128, Size: 16]
	UAEDataTable* ItemTable;//[Offset: 0x138, Size: 8]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int DefaultParam;//[Offset: 0x144, Size: 4]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0x148, Size: 80]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x198, Size: 16]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x1a8, Size: 80]
	GroupSpotSceneComponent*[] RepeatGroups;//[Offset: 0x1f8, Size: 16]
	float DetalRepeatTime;//[Offset: 0x208, Size: 4]
	float LineOffsetZ;//[Offset: 0x210, Size: 4]
	FString CookedFilePath;//[Offset: 0x218, Size: 16]
	FString[] CookedFilePathForLayers;//[Offset: 0x228, Size: 16]
	UAESpotDataSerialize SpotDataSerialize;//[Offset: 0x238, Size: 176]
	bool bUseVehicleLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	int MaxItemCount;//[Offset: 0x2ec, Size: 4]
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x4999fa4
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x4999f20
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x4999e9c
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x4999d80
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x4999ce8
	void GenerateSpots();// 0x4999ccc
	void GenerateSpotOnTick(float DeltaTime);// 0x4999c48
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x4999974
	void CheckTileLevelsVisible();// 0x4999958

--------------------------------
Class: ItemActorComponent.ActorComponent.Object

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x4, Size: 4]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10, Size: 80]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x60, Size: 80]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0xb0, Size: 80]

--------------------------------
Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x8, Size: 1]
	int AllGroupSpotCount;//[Offset: 0xc, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x10, Size: 4]
	int AllSpotCount;//[Offset: 0x14, Size: 4]
	int AllValidSpotCount;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TableRowBase

--------------------------------
Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x8, Size: 16]
	float BuildingLocationX;//[Offset: 0x18, Size: 4]
	float BuildingLocationY;//[Offset: 0x1c, Size: 4]
	int AllGroupSpotCount;//[Offset: 0x20, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x24, Size: 4]
	int AllSpotCount;//[Offset: 0x28, Size: 4]
	int AllValidSpotCount;//[Offset: 0x2c, Size: 4]
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x30, Size: 80]

--------------------------------
Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x8, Size: 1]
	int AllSpotCount;//[Offset: 0xc, Size: 4]
	int AllValidSpotCount;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ItemClassStatisticsData.TableRowBase
	FString ItemPath;//[Offset: 0x8, Size: 16]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int ItemCount;//[Offset: 0x1c, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x20, Size: 16]
	int ItemTogetherCount;//[Offset: 0x30, Size: 4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0, Size: 1]
	int SpotGroupPercent;//[Offset: 0x4, Size: 4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8, Size: 16]

--------------------------------
Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	int SpotPercentMin;//[Offset: 0x4, Size: 4]
	int SpotPercentMax;//[Offset: 0x8, Size: 4]
	int SpotPercentDot;//[Offset: 0xc, Size: 4]
	int ItemPerSpotMin;//[Offset: 0x10, Size: 4]
	int ItemPerSpotMax;//[Offset: 0x14, Size: 4]
	int ItemPerSpotTotal;//[Offset: 0x18, Size: 4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x20, Size: 16]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x30, Size: 16]
	float DelayToBeginSpawn;//[Offset: 0x40, Size: 4]
	float CDBetweenSpawn;//[Offset: 0x44, Size: 4]

--------------------------------
Class: SpotWeight
	FString Name;//[Offset: 0x0, Size: 16]
	int weight;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0, Size: 1]
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0, Size: 16]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ItemGenerateSpawnData
	int keyID;//[Offset: 0x0, Size: 4]
	FString ItemValue;//[Offset: 0x8, Size: 16]
	FString ItemCategory;//[Offset: 0x18, Size: 16]
	FString ItemSubCategory;//[Offset: 0x28, Size: 16]
	int ItemWeight;//[Offset: 0x38, Size: 4]
	FString ItemPath;//[Offset: 0x40, Size: 16]
	int ItemStackCount;//[Offset: 0x50, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x58, Size: 16]
	int ItemTogetherStackCount;//[Offset: 0x68, Size: 4]
	int ItemTogetherCountMin;//[Offset: 0x6c, Size: 4]
	int ItemTogetherCountMax;//[Offset: 0x70, Size: 4]
	FString MetaData;//[Offset: 0x78, Size: 16]

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x2b9, Size: 1]
	float HalfHeight;//[Offset: 0x2bc, Size: 4]
	int SpotProbability;//[Offset: 0x2c0, Size: 4]
	int WorldCompositionID;//[Offset: 0x2c4, Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	float LineOffsetZ;//[Offset: 0x2cc, Size: 4]
	void SetSpotValid(bool Valid);// 0x49d59fc
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x49d5780
	bool IsSpotValid();// 0x49d5740
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x49d5624
	bool GenerateSpot();// 0x49d55e4
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x49d5308

--------------------------------
Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0, Size: 4]
	class Object* ItemClass;//[Offset: 0x8, Size: 8]
	int ItemCount;//[Offset: 0x10, Size: 4]
	FString MetaData;//[Offset: 0x18, Size: 16]
	FString ItemValue;//[Offset: 0x28, Size: 16]
	FString ItemCategory;//[Offset: 0x38, Size: 16]
	bool IsNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	Actor* HostActor;//[Offset: 0x88, Size: 8]

--------------------------------
Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0, Size: 4]
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x8, Size: 16]

--------------------------------
Class: UAESpotDataSerialize

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2d8, Size: 8]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x2e0, Size: 16]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x2f0, Size: 16]
	byte RegionType;//[Offset: 0x300, Size: 1]
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x49be89c
	void RepeatSpots();// 0x49be888
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x49be80c
	void RegisterSpotsToGenerator();// 0x49be7f8
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x49be654
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x49be4f4
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x49be448

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x2d0, Size: 4]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x2d8, Size: 16]
	byte SpotGroupType;//[Offset: 0x2ec, Size: 1]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2f0, Size: 8]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x2f8, Size: 8]
	<FString,int> CacheItemValeCategory;//[Offset: 0x300, Size: 80]
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x49bf128
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x49bf02c
	bool GenerateSpot();// 0x49befec
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x49bef5c
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x49bedf4
	int CountCacheItemValeCategory();// 0x49bedc0

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x2f8, Size: 16]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x308, Size: 16]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x318, Size: 16]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x330, Size: 80]
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x380, Size: 80]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x3d0, Size: 80]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x420, Size: 96]
	byte RegionType;//[Offset: 0x480, Size: 1]
	UAEDataTable* VehicleDataTable;//[Offset: 0x488, Size: 8]
	<FString,int> VehicleTypeParam;//[Offset: 0x490, Size: 80]
	<FString,int> VehicleSubTypeParam;//[Offset: 0x4e0, Size: 80]
	<FString,float> CategoryRates;//[Offset: 0x530, Size: 80]
	void WriteVehicleSpotStatisticsDatas();// 0x49ff7d8
	void WriteVehicleClassStatisticsDatas();// 0x49ff7c4
	void WriteAllVehicleStatisticsDatasToLog();// 0x49ff7b0
	void WriteAllVehicleStatisticsDatas();// 0x49ff79c
	void SetCatetoryRate(<FString,float> Rates);// 0x49ff680
	void RegisterVehicleGenerateSpawnData(VehicleGenerateSpawnData Data);// 0x49ff4d4
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x49ff450
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x49ff32c
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x49ff208
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x49ff0e4
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x49fefc0
	void RandomGroups();// 0x49fefa4
	void LoadVehicleGenerateTable();// 0xffffff8f20d162a8
	bool IsCatetoryEnabled();// 0x49fef6c
	void InitVehicleGenerator(out FString InItemTableName, out <FString,int> InVehicleTypeParam, out <FString,int> InVehicleSubTypeParam);// 0x49fed9c
	void InitCatetorys();// 0x49fed88
	int GetVehicleTypeParamValueByName(FString Name);// 0x49feca8
	int GetVehicleSubTypeParamValueByName(FString Name);// 0x49febc8
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType);// 0x49fea9c
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out VehicleSpotProperty SpotProperty);// 0x49fe934
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x49fe7cc
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x49fe618
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x49fe4fc
	float GetCatetoryRate(FString Catetory);// 0x49fe468
	void GenerateSpotOnTick(float DeltaTime);// 0x49fe3e4
	void DeleteGroups();// 0x49fe3d0
	void CheckTileLevelsVisible();// 0x49fe3b4
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x49fe1e8
	void AddVehicleClassCount(FString Path, bool IsValid, int Count);// 0x49fe090

--------------------------------
Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x2d8, Size: 1]
	byte RegionType;//[Offset: 0x2d9, Size: 1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 1]
	float RandomRotationMin;//[Offset: 0x2dc, Size: 4]
	float RandomRotationMax;//[Offset: 0x2e0, Size: 4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x2e8, Size: 40]
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x4a01b04
	bool GenerateSpot();// 0x4a01ac4

--------------------------------
Class: VehicleGenerateRandomInfo
	FString VehicleType;//[Offset: 0x0, Size: 16]
	FString VehiclePath;//[Offset: 0x10, Size: 16]
	float FuelPercent;//[Offset: 0x20, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]

--------------------------------
Class: VehicleSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x8, Size: 16]
	int FuelPercentMin;//[Offset: 0x18, Size: 4]
	int FuelPercentMax;//[Offset: 0x1c, Size: 4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	byte RandomType;//[Offset: 0x21, Size: 1]
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x24, Size: 4]
	int TotalCountRangeMin;//[Offset: 0x28, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x2c, Size: 4]
	float ProbabilityPersent;//[Offset: 0x30, Size: 4]
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x34, Size: 4]

--------------------------------
Class: TreasureBoxSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x8, Size: 16]
	int TotalCountRangeMin;//[Offset: 0x18, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: VehicleSpotComponentArray
	byte SpotType;//[Offset: 0x0, Size: 1]
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x8, Size: 16]

--------------------------------
Class: VehicleGenerateSpawnDataArray
	FString Catetory;//[Offset: 0x0, Size: 16]
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0x10, Size: 16]

--------------------------------
Class: VehicleGenerateSpawnData
	int keyID;//[Offset: 0x0, Size: 4]
	FString VehicleType;//[Offset: 0x8, Size: 16]
	FString VehicleSubType;//[Offset: 0x18, Size: 16]
	FString VehiclePath;//[Offset: 0x28, Size: 16]
	int VehicleWeight;//[Offset: 0x38, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0, Size: 16]
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0x10, Size: 80]

--------------------------------
Class: VehicleSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x8, Size: 1]
	FString VehiclePath;//[Offset: 0x10, Size: 16]
	float VehicleLocationX;//[Offset: 0x20, Size: 4]
	float VehicleLocationY;//[Offset: 0x24, Size: 4]
	float VehicleLocationZ;//[Offset: 0x28, Size: 4]

--------------------------------
Class: VehicleClassStatisticsData.TableRowBase
	FString VehiclePath;//[Offset: 0x8, Size: 16]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int AllVehicleCount;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: DSTestComponent.ActorComponent.Object
	UAEGameMode* GameMode;//[Offset: 0x120, Size: 8]
	void SpawnPlayer(int Count);// 0x499d144

--------------------------------
Class: DeadBoxItem
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]
	int weight;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GMDataManager.Object
	GMDataSource*[] DataSources;//[Offset: 0x28, Size: 16]

--------------------------------
Class: GMDataSource.Object

--------------------------------
Class: GMComponentManager.Object
	<enum,ActorComponent*> Components;//[Offset: 0x28, Size: 80]
	Object* OwnerGameMode;//[Offset: 0x78, Size: 8]
	GMSubSystemBase*[] ComponentConfigs;//[Offset: 0x80, Size: 16]

--------------------------------
Class: GMSubSystemBase.Object
	enum SubSystemId;//[Offset: 0x28, Size: 1]
	class Object* SubSystemClass;//[Offset: 0x30, Size: 8]
	DynamicCompConfig[] DynamicComponents;//[Offset: 0x38, Size: 16]

--------------------------------
Class: DynamicCompConfig
	enum CompType;//[Offset: 0x0, Size: 1]
	bool bIsServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	class Object* DynamicCompClass;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ObjectPoolReservation
	class Object* ObjectClass;//[Offset: 0x0, Size: 8]
	enum FeatureSetType;//[Offset: 0x8, Size: 1]
	int MinNumOverride;//[Offset: 0xc, Size: 4]
	int MaxNumOverride;//[Offset: 0x10, Size: 4]

--------------------------------
Class: DSCorpsInfo
	uint64 CorpsID;//[Offset: 0x0, Size: 8]
	FString CorpsName;//[Offset: 0x8, Size: 16]
	int Icon;//[Offset: 0x18, Size: 4]
	int SegmentLevel;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: GameModeTeamBattleResultData
	FString Reason;//[Offset: 0x0, Size: 16]
	int RemainTeamCount;//[Offset: 0x10, Size: 4]
	int RemainAlivePlayerCount;//[Offset: 0x14, Size: 4]
	<FString,FString> PlayersLogoutTime;//[Offset: 0x18, Size: 80]
	GameModeCorpsDetailData[] RealTimeCorpsRank;//[Offset: 0x68, Size: 16]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	<uint64,RevengeEvent> RevengeEventList;//[Offset: 0x80, Size: 80]

--------------------------------
Class: GameModeCorpsDetailData
	FString Name;//[Offset: 0x0, Size: 16]
	int CorpsHeadIcon;//[Offset: 0x10, Size: 4]
	int KilledNum;//[Offset: 0x14, Size: 4]
	int SegmentLevel;//[Offset: 0x18, Size: 4]
	int RealtimeRank;//[Offset: 0x1c, Size: 4]
	int DefeatPlayerNum;//[Offset: 0x20, Size: 4]
	float TotalDamage;//[Offset: 0x24, Size: 4]
	float SurvivalTime;//[Offset: 0x28, Size: 4]

--------------------------------
Class: RevengeEvent
	<uint64,uint16> IRevengedWhom;//[Offset: 0x0, Size: 80]

--------------------------------
Class: GameModeMatchGoalAchievedData
	int RemainAlivePlayerCount;//[Offset: 0x0, Size: 4]
	int GamePlayingTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModeTeamParams
	int TeamID;//[Offset: 0x0, Size: 4]
	int[] UIDs;//[Offset: 0x8, Size: 16]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int CollectedEventType;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: DynamicBattleRankInfo
	int BattleRank;//[Offset: 0x0, Size: 4]
	uint64 PlayerUID;//[Offset: 0x8, Size: 8]
	int RevivalTimes;//[Offset: 0x10, Size: 4]
	int64[] KillerUIDs;//[Offset: 0x18, Size: 16]
	int DeadTimes;//[Offset: 0x28, Size: 4]

--------------------------------
Class: GameModePlayerParams
	uint64 UID;//[Offset: 0x0, Size: 8]
	FName PlayerType;//[Offset: 0x8, Size: 8]
	FString PlayerName;//[Offset: 0x10, Size: 16]
	uint32 PlayerKey;//[Offset: 0x20, Size: 4]
	uint32 WorldParallelismID;//[Offset: 0x24, Size: 4]
	int TeamID;//[Offset: 0x28, Size: 4]
	uint64 RoomTeammatesID;//[Offset: 0x30, Size: 8]
	FString OpenID;//[Offset: 0x38, Size: 16]
	bool NeedScreenShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	int PlayerBornPointID;//[Offset: 0x4c, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bIsEnableUGCGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool bIsGMWatcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	bool bHighPriorityRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	byte Gender;//[Offset: 0x55, Size: 1]
	FString PIC_URL;//[Offset: 0x58, Size: 16]
	int Level;//[Offset: 0x68, Size: 4]
	int Segment_Level;//[Offset: 0x6c, Size: 4]
	int AvatarBoxId;//[Offset: 0x70, Size: 4]
	int TopSegmentTimes;//[Offset: 0x74, Size: 4]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	GameModePlayerItem[] ItemList;//[Offset: 0x80, Size: 16]
	GameModePlayerItem[] fireworksInfo;//[Offset: 0x90, Size: 16]
	SuitSkinData SuitSkinData;//[Offset: 0xa0, Size: 40]
	WeaponModData[] WeaponModDatas;//[Offset: 0xc8, Size: 16]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0xd8, Size: 16]
	GameModePlayerDecalItem[] DecalItemList;//[Offset: 0xe8, Size: 16]
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0xf8, Size: 16]
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0x108, Size: 16]
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0x118, Size: 16]
	FString[] KeepWeaponDataList;//[Offset: 0x128, Size: 16]
	GameModePlayer_WearInfo PlayerWearInfo;//[Offset: 0x138, Size: 192]
	PlayerOBInfo PlayerOBInfo;//[Offset: 0x1f8, Size: 360]
	GameModePlayerBanChat[] banList;//[Offset: 0x360, Size: 16]
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x370, Size: 16]
	DeadBoxItem[] deadBoxItemList;//[Offset: 0x380, Size: 16]
	WeaponLobbyInitialData WeaponLobbyInitialData;//[Offset: 0x390, Size: 16]
	PlayerTotalWeaponsConfig PlayerTotalWeaponsConfig;//[Offset: 0x3a0, Size: 24]
	AchievementPrize EquippedAchievementPrize;//[Offset: 0x3b8, Size: 64]
	int[] audioChat;//[Offset: 0x3f8, Size: 16]
	FName CurrentPlayerState;//[Offset: 0x408, Size: 8]
	FName CurrentCharacterState;//[Offset: 0x410, Size: 8]
	float SyncedTimestamp;//[Offset: 0x418, Size: 4]
	float DestinyValue;//[Offset: 0x41c, Size: 4]
	float WarmScore;//[Offset: 0x420, Size: 4]
	int LeaderCount;//[Offset: 0x424, Size: 4]
	uint64 LastGameLeaderUID;//[Offset: 0x428, Size: 8]
	uint64[] LastGameTeammatesUID;//[Offset: 0x430, Size: 16]
	int JumpSegmentID;//[Offset: 0x440, Size: 4]
	uint64 LastGameBattleID;//[Offset: 0x448, Size: 8]
	int YearBeastWarmScore;//[Offset: 0x450, Size: 4]
	float RatingScore;//[Offset: 0x454, Size: 4]
	bool bDoPlayerUseAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	float MaxRankingScore;//[Offset: 0x45c, Size: 4]
	float VSTeamRatingScore;//[Offset: 0x460, Size: 4]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 1]
	bool bObserverHost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x465, Size: 1]
	int OBGM;//[Offset: 0x468, Size: 4]
	int ObserverEnemyDist;//[Offset: 0x46c, Size: 4]
	uint64 WatchPlayerKey;//[Offset: 0x470, Size: 8]
	byte PlatformGender;//[Offset: 0x478, Size: 1]
	bool bIsFireworksActOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 1]
	int MatchLabel;//[Offset: 0x47c, Size: 4]
	bool IsBanPublicMic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	int AnchorPlatColorID;//[Offset: 0x484, Size: 4]
	int AnchorPlatResID;//[Offset: 0x488, Size: 4]
	FString MedalClubID;//[Offset: 0x490, Size: 16]
	int MedalClubLevel;//[Offset: 0x4a0, Size: 4]
	int PassCardBuyType;//[Offset: 0x4a4, Size: 4]
	int PassCardBuyLevel;//[Offset: 0x4a8, Size: 4]
	bool IsEnjoyCardOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	bool NeedShowEnjoyCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ad, Size: 1]
	int64 LastGameResultTime;//[Offset: 0x4b0, Size: 8]
	int64 CorpsID;//[Offset: 0x4b8, Size: 8]
	int PlayerStartSerialNum;//[Offset: 0x4c0, Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 1]
	int special_ver;//[Offset: 0x4c8, Size: 4]
	bool allow_watch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 1]
	bool allow_like;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd, Size: 1]
	bool allow_friend_like;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ce, Size: 1]
	bool allow_teammate_like;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cf, Size: 1]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	int CollectedEventType;//[Offset: 0x4d4, Size: 4]
	bool bLiveVideoReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	bool bCollectedEVLiveEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d9, Size: 1]
	PlayerCharmInfo CharmInfo;//[Offset: 0x4dc, Size: 16]
	PlayerPeakInfo PeakInfo;//[Offset: 0x4f0, Size: 72]
	WingManInfo WingManInfo;//[Offset: 0x538, Size: 88]
	bool IsInspector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	int GlideTypeId;//[Offset: 0x594, Size: 4]
	bool bGlideConfigState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	int GlideCount;//[Offset: 0x59c, Size: 4]
	bool GlideGlobalVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	bool showIslandNickname;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 1]
	int InitDropId;//[Offset: 0x5a4, Size: 4]
	int SpecMotionRestCostCount;//[Offset: 0x5a8, Size: 4]
	int SeasonWeekIndex;//[Offset: 0x5ac, Size: 4]
	int JoinSourceType;//[Offset: 0x5b0, Size: 4]
	int8 is_regress;//[Offset: 0x5b4, Size: 1]
	int8 not_counter_ai;//[Offset: 0x5b5, Size: 1]
	bool bCampPrivileges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b6, Size: 1]
	bool bShowAirLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b7, Size: 1]
	bool bUseDistanceMeasurement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	bool bShowTeammateKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 1]
	bool bDice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ba, Size: 1]
	bool bShowResPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bb, Size: 1]
	int iCampToolStatusFromServer;//[Offset: 0x5bc, Size: 4]
	bool bAchieveAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 1]
	byte room_team_pos;//[Offset: 0x5c1, Size: 1]
	UGCPlayerInfo UGCPlayerInfo;//[Offset: 0x5c8, Size: 24]
	FString playerFaceInfo;//[Offset: 0x5e0, Size: 16]
	int playerFaceHandleID;//[Offset: 0x5f0, Size: 4]
	int KillThanksCount;//[Offset: 0x5f4, Size: 4]
	bool bPartiallyKillThanksToOthersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	bool bPartiallyKillThanksFromOthersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9, Size: 1]
	bool bPlayGunMasterVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fa, Size: 1]
	int imprint_info;//[Offset: 0x5fc, Size: 4]
	bool bNeedRCR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	uint64[] LobbyTeammates;//[Offset: 0x608, Size: 16]
	PlayerPetInfo PlayerPetInfo;//[Offset: 0x618, Size: 8]
	PlayerClubTeamInfo ClubTeamInfo;//[Offset: 0x620, Size: 40]

--------------------------------
Class: GameModePlayerBanChat
	int end_time;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x8, Size: 16]
	int ban_type;//[Offset: 0x18, Size: 4]

--------------------------------
Class: PlayerTotalWeaponsConfig
	int DefaultSelectedIndex;//[Offset: 0x0, Size: 4]
	PlayerWeaponsConfig[] WeaponsConfigList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: PlayerWeaponsConfig
	FString ConfigName;//[Offset: 0x0, Size: 16]
	SingleWeaponConfig[] WeaponDataList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: SingleWeaponConfig
	int WeaponID;//[Offset: 0x0, Size: 4]
	int[] AttachmentIDList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AchievementPrize
	int[] AnimationList;//[Offset: 0x0, Size: 16]
	int[] MedalList;//[Offset: 0x10, Size: 16]
	int[] NotifyTitleList;//[Offset: 0x20, Size: 16]
	int[] BulleEffectList;//[Offset: 0x30, Size: 16]

--------------------------------
Class: PlayerCharmInfo
	int CharmValue;//[Offset: 0x0, Size: 4]
	int CharmLevel;//[Offset: 0x4, Size: 4]
	int SeasonId;//[Offset: 0x8, Size: 4]
	bool AllowViewCharmValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: PlayerPeakInfo
	int LastPeakMatchScore;//[Offset: 0x0, Size: 4]
	int LastPeakKillScore;//[Offset: 0x4, Size: 4]
	int LastPeakRankScore;//[Offset: 0x8, Size: 4]
	int LastPeakRank;//[Offset: 0xc, Size: 4]
	int LastPeakKillNum;//[Offset: 0x10, Size: 4]
	int PeakSegmentLevel;//[Offset: 0x14, Size: 4]
	FString TeamName;//[Offset: 0x18, Size: 16]
	bool bIsTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int64 JoinTeamTime;//[Offset: 0x30, Size: 8]
	FString TeamLogoID;//[Offset: 0x38, Size: 16]

--------------------------------
Class: WingManInfo
	int CurrentWingManID;//[Offset: 0x0, Size: 4]
	FString CurrentWingManName;//[Offset: 0x8, Size: 16]
	bool bFuelNotEnoughHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bFuelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	WingManFuelInfo[] FuelInfoList;//[Offset: 0x20, Size: 16]
	bool bDisplayWingMan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int WingPlaneCallerID;//[Offset: 0x34, Size: 4]
	int[] EquippedWingmanEffects;//[Offset: 0x38, Size: 16]
	WingManFuelInfo[] EffectsFuelInfoList;//[Offset: 0x48, Size: 16]

--------------------------------
Class: WingManFuelInfo
	int FuelID;//[Offset: 0x0, Size: 4]
	int FuelNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerPetInfo
	int PetID;//[Offset: 0x0, Size: 4]
	bool Park_Visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool Park_Teammate_Visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: NetRelevancyGroup

--------------------------------
Class: UAEGameState.GameState.GameStateBase.Info.Actor.Object
	delegate UAEGameStateReplicatedWorldTimeSecondsSynced;//[Offset: 0x450, Size: 16]
	int MonsterCount;//[Offset: 0x460, Size: 4]
	int ItemCount;//[Offset: 0x464, Size: 4]
	int VehicleCount;//[Offset: 0x468, Size: 4]
	int InactiveZombieCount;//[Offset: 0x46c, Size: 4]
	int DeactiveZombieCount;//[Offset: 0x470, Size: 4]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 1]
	bool bEnableAllPlayerFixInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x475, Size: 1]
	AllPlayerFixInfo AllPlayerFixInfo;//[Offset: 0x478, Size: 96]
	uint64 GameID;//[Offset: 0x4d8, Size: 8]
	bool IsGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 1]
	bool IsGeneRateZombie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 1]
	bool IsGeneRateStaticConfigZombie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e6, Size: 1]
	bool IsCanRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e7, Size: 1]
	FString[] ModeUIManagerArray;//[Offset: 0x4f0, Size: 16]
	bool IsSetItemMaxCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	float ReplayStartRecordTime;//[Offset: 0x514, Size: 4]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	bool bUseMoveInputStateUseSixteenDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 1]
	int GameRatingId;//[Offset: 0x51c, Size: 4]
	int ChooseRatingType;//[Offset: 0x520, Size: 4]
	bool IsMatchRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	int RoomMode;//[Offset: 0x528, Size: 4]
	bool bIsUGCGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 1]
	bool bUseUserDefinedMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52d, Size: 1]
	bool IsCompetitionOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52e, Size: 1]
	bool IsGMatchRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52f, Size: 1]
	bool bKillThanksEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	bool bEnableSoundSpatialization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 1]
	bool bNoUIOpenedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x532, Size: 1]
	bool bShowKillingTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x533, Size: 1]
	bool bShowVoiceInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 1]
	int PeakCompetitionMatchType;//[Offset: 0x538, Size: 4]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	byte[] DisabledCollectedEventDataEventIds;//[Offset: 0x540, Size: 16]
	class WidgetToTextureRenderTarget2DManager* WidgetToTextureRenderTarget2DManagerClass;//[Offset: 0x550, Size: 40]
	class WidgetToTextureRenderTarget2DManager* LoadedWidgetToTextureRenderTarget2DManagerClass;//[Offset: 0x578, Size: 8]
	WidgetToTextureRenderTarget2DManager* WidgetToTextureRenderTarget2DManager;//[Offset: 0x580, Size: 8]
	DynaConfigInfo[] DynaConfigList;//[Offset: 0x588, Size: 16]
	void UpdateBornLandVehicles();// 0x49e82c0
	void ServerUpdateServerTimeSeconds();// 0x49e8260
	void OnRep_UseUserDefinedMap();// 0x49e824c
	void OnRep_UseMoveInputStateUseSixteenDir();// 0x49e8238
	void OnRep_ShowVoiceInMinimap();// 0x49e821c
	void OnRep_ReplicatedWorldTimeSeconds();// 0x49e8200
	void OnRep_PeakCompetitionMatchType();// 0x49e81e4
	void OnRep_ModifyDynamicConfigVariables();// 0x49e81d0
	void OnRep_ModeUIManagerArray();// 0x49e81bc
	void OnRep_IsUGCGameMode();// 0x49e81a8
	void OnRep_GameID();// 0x49e8194
	void OnRep_bEnableSoundSpatialization();// 0x49e8178
	void OnRep_AllPlayerFixInfo(out AllPlayerFixInfo OldInfo);// 0x49e803c
	bool IsCollectedEventEnabled(byte EventId);// 0x49e7fac
	void InitGameStateParams();// 0x49e7f90
	WidgetToTextureRenderTarget2DManager* GetWidgetToTextureRenderTarget2DManager();// 0x49e7f5c

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x430, Size: 8]
	FName PreviousMatchState;//[Offset: 0x438, Size: 8]
	int ElapsedTime;//[Offset: 0x440, Size: 4]
	void OnRep_MatchState();// 0x66bba8c
	void OnRep_ElapsedTime();// 0x66bba70

--------------------------------
Class: WidgetToTextureRenderTarget2DManager.Object
	<FName,TextureRenderTarget2DManagerWidgetInfo> NameToTextureRenderTarget2DManagerWidgetInfos;//[Offset: 0x28, Size: 80]
	DrawTextToTextureRenderTarget2DParams[] CachedParams;//[Offset: 0x78, Size: 16]
	void ReleaseCachedParams();// 0x42f6bc4
	bool ReceivePreDrawTextToTextureRenderTarget2DAsync(out DrawTextToTextureRenderTarget2DParams Params);// 0xffffff8f20d162a8
	void ReceivePostDrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params);// 0xffffff8f20d162a8
	void DrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params, out const delegate OnWidgetToTextureRenderTarget2DManagerDrawn);// 0x42f6a08

--------------------------------
Class: TextureRenderTarget2DManagerWidgetInfo
	class UserWidget* UserWidgetClass;//[Offset: 0x0, Size: 40]
	class UserWidget* LoadedUserWidgetClass;//[Offset: 0x28, Size: 8]
	UserWidget* UserWidget;//[Offset: 0x30, Size: 8]
	FName UpdateWidgetFunctionName;//[Offset: 0x38, Size: 8]

--------------------------------
Class: DrawTextToTextureRenderTarget2DParams
	FText Text;//[Offset: 0x0, Size: 24]
	FName WidgetName;//[Offset: 0x18, Size: 8]
	int DrawWidth;//[Offset: 0x20, Size: 4]
	int DrawHeight;//[Offset: 0x24, Size: 4]
	TextureRenderTarget2D* OptionalInOutTextureRenderTarget2D;//[Offset: 0x28, Size: 8]
	bool bMaterialInstanceDynamicCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x38, Size: 40]
	FName TextureParameterName;//[Offset: 0x60, Size: 8]
	MaterialInstanceDynamic* OptionalInOutMaterialInstanceDynamic;//[Offset: 0x68, Size: 8]
	FString Payload;//[Offset: 0x70, Size: 16]
	bool bParamsCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]

--------------------------------
Class: DynaConfigInfo
	FString ConfigName;//[Offset: 0x0, Size: 16]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte Type;//[Offset: 0x11, Size: 1]

--------------------------------
Class: WaterSoundVolume.Actor.Object
	ShapeComponent*[] VolumeAreaList;//[Offset: 0x3e8, Size: 16]

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0x120, Size: 16]
	enum StartStateType;//[Offset: 0x130, Size: 1]
	enum FinishStateType;//[Offset: 0x131, Size: 1]
	delegate StateMsgNotify;//[Offset: 0x138, Size: 16]
	State* CurrentState;//[Offset: 0x148, Size: 8]
	enum CurrentStateType;//[Offset: 0x150, Size: 1]
	int64 CurrentStateEnterTime;//[Offset: 0x158, Size: 8]
	enum LastStateType;//[Offset: 0x160, Size: 1]

--------------------------------
Class: State.Object

--------------------------------
Class: StateType
	enum StateType;//[Offset: 0x0, Size: 1]
	int64 TimeStamp;//[Offset: 0x8, Size: 8]

--------------------------------
Class: RCRBodyBoundingSize
	Vector StandLocatingExtent;//[Offset: 0x0, Size: 12]
	Vector CrouchLocatingExtent;//[Offset: 0xc, Size: 12]
	Vector ProneLocatingExtent;//[Offset: 0x18, Size: 12]
	Vector ProneLocatingMove;//[Offset: 0x24, Size: 12]
	Vector DyingLocatingExtent;//[Offset: 0x30, Size: 12]
	Vector StandExtent;//[Offset: 0x3c, Size: 12]
	float PitchCoefficient;//[Offset: 0x48, Size: 4]
	float CrouchPitchCoefficient;//[Offset: 0x4c, Size: 4]
	Vector CrouchExtentAddition;//[Offset: 0x50, Size: 12]
	Vector ProneExtentAddition;//[Offset: 0x5c, Size: 12]
	Vector DyingExtentAddition;//[Offset: 0x68, Size: 12]
	Vector MeleeWeaponExtentAddition;//[Offset: 0x74, Size: 12]
	float MeleeWeaponAttackingExtentWidth;//[Offset: 0x80, Size: 4]
	float MeleeWeaponAttackingExtentUp;//[Offset: 0x84, Size: 4]
	float GunFrontLengthThreshold;//[Offset: 0x88, Size: 4]
	float GunPlusCoefficient;//[Offset: 0x8c, Size: 4]
	float GunMultipliedCoefficient;//[Offset: 0x90, Size: 4]
	float ProneGunPlusCoefficient;//[Offset: 0x94, Size: 4]
	float PitchGunLengthThreshold;//[Offset: 0x98, Size: 4]
	float BackRightWeaponLengthThreshold;//[Offset: 0x9c, Size: 4]
	float BackLeftWeaponLengthThreshold;//[Offset: 0xa0, Size: 4]
	float BackWeaponLeftLengthAddition;//[Offset: 0xa4, Size: 4]
	float BackWeaponLeftLengthAdditionNoWeapon;//[Offset: 0xa8, Size: 4]
	float BackWeaponRightLengthMultipliedCoefficient;//[Offset: 0xac, Size: 4]
	float BackWeaponRightLengthPlusCoefficient;//[Offset: 0xb0, Size: 4]
	float StandMoveX;//[Offset: 0xb4, Size: 4]
	float CrouchMoveZ;//[Offset: 0xb8, Size: 4]
	float ProneMoveX;//[Offset: 0xbc, Size: 4]
	float ProneMoveZ;//[Offset: 0xc0, Size: 4]
	float DyingMoveX;//[Offset: 0xc4, Size: 4]
	float DyingMoveZ;//[Offset: 0xc8, Size: 4]
	float DyingGunLeftLengthThreshold;//[Offset: 0xcc, Size: 4]
	float DyingGunLeftLengthMultipliedCoefficient;//[Offset: 0xd0, Size: 4]

--------------------------------
Class: PreProcessedRelevancySet

--------------------------------
Class: HeartbeatData
	byte[] TssSdkAntiData;//[Offset: 0x0, Size: 16]
	int TssSdkAntiDataLen;//[Offset: 0x10, Size: 4]
	int8 RetCode;//[Offset: 0x14, Size: 1]
	int NetworkStatus;//[Offset: 0x18, Size: 4]

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x548, Size: 16]
	float TotalHP;//[Offset: 0x558, Size: 4]
	float BrokenHPPropotion;//[Offset: 0x55c, Size: 4]
	float TotalTime;//[Offset: 0x560, Size: 4]
	int BoxId;//[Offset: 0x564, Size: 4]
	Vector GroupLoc;//[Offset: 0x568, Size: 12]
	float DestroyTime;//[Offset: 0x574, Size: 4]
	float OperationalDistance;//[Offset: 0x578, Size: 4]
	float VisibleHUDlDistance;//[Offset: 0x57c, Size: 4]
	ParticleSystem* StandbyEffect;//[Offset: 0x580, Size: 8]
	Transform StandbyEffectTrans;//[Offset: 0x590, Size: 48]
	ParticleSystem* OpenningEffect;//[Offset: 0x5c0, Size: 8]
	Transform OpenningEffectTrans;//[Offset: 0x5d0, Size: 48]
	ParticleSystem* OpennedEffect;//[Offset: 0x600, Size: 8]
	Transform OpennedEffectTrans;//[Offset: 0x610, Size: 48]
	ParticleSystem* BrokenEffect1;//[Offset: 0x640, Size: 8]
	Transform BrokenEffect1Trans;//[Offset: 0x650, Size: 48]
	ParticleSystem* BrokenEffect2;//[Offset: 0x680, Size: 8]
	Transform BrokenEffect2Trans;//[Offset: 0x690, Size: 48]
	MaterialInterface* BlackMat;//[Offset: 0x6c0, Size: 8]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x6c8, Size: 8]
	SceneComponent* DefaultRoot;//[Offset: 0x6d0, Size: 8]
	class Controller[] InstigatorList;//[Offset: 0x6d8, Size: 16]
	class Actor[] DamageCauserList;//[Offset: 0x6e8, Size: 16]
	enum PickUpBoxType;//[Offset: 0x6f8, Size: 1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f9, Size: 1]
	int IconID;//[Offset: 0x6fc, Size: 4]
	FString IconCustomStr;//[Offset: 0x700, Size: 16]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x714, Size: 1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x716, Size: 1]
	int ClientAutoActiveBoxCD;//[Offset: 0x718, Size: 4]
	int AutoActiveBoxCD;//[Offset: 0x71c, Size: 4]
	int HideLightColumn;//[Offset: 0x790, Size: 4]
	float GoUpAnimationWait;//[Offset: 0x798, Size: 4]
	float GoUpAnimationSpeed;//[Offset: 0x79c, Size: 4]
	float GoUpAnimationHight;//[Offset: 0x7a0, Size: 4]
	float GoUpAnimationYawSpeed;//[Offset: 0x7a8, Size: 4]
	float GoUpAnimationYawTotal;//[Offset: 0x7ac, Size: 4]
	Vector BoxCoverLoc;//[Offset: 0x7b0, Size: 12]
	Rotator BoxCoverRot;//[Offset: 0x7bc, Size: 12]
	float ItemBoxZ;//[Offset: 0x7c8, Size: 4]
	bool NeedGoDownBeforeDestroied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc, Size: 1]
	float NeedGoDownBeforeDestroiedDelay;//[Offset: 0x7d0, Size: 4]
	float GoDownStartTime;//[Offset: 0x7d4, Size: 4]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x7e0, Size: 8]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x7e8, Size: 8]
	Transform BoxTransform;//[Offset: 0x800, Size: 48]
	float CurHP;//[Offset: 0x844, Size: 4]
	float StartedTime;//[Offset: 0x848, Size: 4]
	enum CurState;//[Offset: 0x84c, Size: 1]
	int StartedTeamId;//[Offset: 0x854, Size: 4]
	float CountDownTime;//[Offset: 0x858, Size: 4]
	float StartDestroytime;//[Offset: 0x860, Size: 4]
	int MonsterBoxId;//[Offset: 0x864, Size: 4]
	int MonsterBoxTempleteId;//[Offset: 0x868, Size: 4]
	<FString,FString> DataStrs;//[Offset: 0x870, Size: 80]
	bool bIsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x8c8, Size: 8]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x8d0, Size: 8]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x8d8, Size: 8]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x8e0, Size: 8]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x8e8, Size: 8]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x8f0, Size: 8]
	MonsterTreasureBoxGroupComponent* BornGropComponent;//[Offset: 0x908, Size: 8]
	Object* TriggerActionHost;//[Offset: 0x938, Size: 8]
	float TickFrequenceTime;//[Offset: 0x958, Size: 4]
	void SpawnBrokenParticle();// 0x3ea31e8
	void ShowMonsterTreasureBoxSkelemesh(bool isShow);// 0xffffff8f20d162a8
	void ShowMonsterTreasureBox();// 0x3ea31d4
	void SetClientClientAutoActiveBoxCD(int CD);// 0x3ea3158
	void OnTreasureBoxPicked__DelegateSignature();// 0xffffff8f20d162a8
	void OnSomeonePickItem(uint32 InPC);// 0x3ea30dc
	void OnRep_HideLightColumn();// 0x3ea30c8
	void OnRep_HasItems();// 0x3ea30b4
	void OnRep_CurState();// 0x3ea30a0
	void OnRep_CurHP();// 0x3ea308c
	void OnRep_BoxTransform();// 0x3ea3078
	void OnBoxEmpty();// 0x3ea3064
	bool IsShowIcon();// 0x3ea302c
	bool IsGoingToBeBroken();// 0x3ea2ff4
	int GetMonsterBoxId();// 0x3ea2fc0
	enum[] GetDamageableGameObjectType();// 0x3ea2f38
	enum GetCurState();// 0x3ea2f04
	int GetClientClientAutoActiveBoxCD();// 0x3ea2ed0
	void DeActiveMonsterTreasureBox();// 0x3ea2ebc
	bool CanBeDamaged();// 0x3ea2e84
	void BPOnStopMonsterTreasureBox();// 0xffffff8f20d162a8
	void BPOnStartMonsterTreasureBox();// 0xffffff8f20d162a8
	void BPOnHideLightColumn();// 0xffffff8f20d162a8
	void BPOnCountdownEnd();// 0xffffff8f20d162a8
	void BPOnBreakMonsterTreasureBox();// 0xffffff8f20d162a8
	void BPOnAnimationStop();// 0xffffff8f20d162a8
	void BPOnAnimationAkAudioStop();// 0xffffff8f20d162a8
	void BPOnAnimationAkAudioStart();// 0xffffff8f20d162a8

--------------------------------
Class: UAEHouseActor.UAENetActor.Actor.Object
	bool TestCleanWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	float WindowHideDistanceSquared;//[Offset: 0x404, Size: 4]
	float WindowLoadDistanceSquared;//[Offset: 0x408, Size: 4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x40c, Size: 4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x410, Size: 4]
	UAEWindowRepData[] WindowList;//[Offset: 0x418, Size: 16]
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x428, Size: 80]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	static void ProcessWindowCreateList();// 0x49e910c
	void OnRep_WindowList();// 0x49e90f8
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x49e8fc0

--------------------------------
Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0, Size: 48]
	FString PathToLoad;//[Offset: 0x30, Size: 16]
	int ID;//[Offset: 0x40, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x48, Size: 8]

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x7dc, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x7e8, Size: 8]
	StaticMesh* BrokenMesh;//[Offset: 0x7f0, Size: 40]
	ParticleSystem* BrokenEffect;//[Offset: 0x818, Size: 40]
	UAEWindowRepData CachedRepData;//[Offset: 0x840, Size: 80]
	void NotifyServerBroken();// 0xffffff8f20d162a8
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x49fd4d8
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0xffffff8f20d162a8
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x49fd408
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x49fd348
	UAEWindowRepData GetRepData();// 0x49fd2a0

--------------------------------
Class: ProduceDropItemComponent.ActorComponent.Object
	CustomDropRule CustomDropRule;//[Offset: 0x128, Size: 3]
	HitResult GroundHitInfo;//[Offset: 0x130, Size: 136]
	int GridStep;//[Offset: 0x1b8, Size: 4]
	STExtraCharacter* OwnerPawn;//[Offset: 0x1c0, Size: 8]
	FString DropItemCfgTableName;//[Offset: 0x1c8, Size: 16]
	FString DropItemRuleTableName;//[Offset: 0x1d8, Size: 16]
	UAEDataTable* pDropItemCfgTable;//[Offset: 0x1e8, Size: 8]
	UAEDataTable* pDropItemRuleTable;//[Offset: 0x1f0, Size: 8]
	UAEDataTable*[] CachedDataTable;//[Offset: 0x1f8, Size: 16]
	UAEDataTable* UGCDropItemCfgTable;//[Offset: 0x208, Size: 40]
	UAEDataTable* UGCDropItemRuleTable;//[Offset: 0x230, Size: 40]
	int ProduceID;//[Offset: 0x258, Size: 4]
	bool IsDropSuc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x260, Size: 8]
	float DelayDropTime;//[Offset: 0x26c, Size: 4]
	float TombBoxLifeTime;//[Offset: 0x270, Size: 4]
	ParticleSystem* DropGroundEffect;//[Offset: 0x280, Size: 40]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	Transform DropGroundEffectTransform;//[Offset: 0x2b0, Size: 48]
	float DropGroundItemLifeOverride;//[Offset: 0x2e0, Size: 4]
	bool IsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	bool bIsIgonreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 1]
	float DropGroundEffectLifeSpan;//[Offset: 0x2e8, Size: 4]
	float DropGroundNetCullDistanceSquared;//[Offset: 0x2ec, Size: 4]
	bool DropGroundInRandomCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	bool UseLocalCenterOffest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	bool TraceUseOwnerUpDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 1]
	Vector DropGroundCenterOffest;//[Offset: 0x2f4, Size: 12]
	float DropGroundOuterCircleRadius;//[Offset: 0x300, Size: 4]
	float DropGroundInnerCircleRadius;//[Offset: 0x304, Size: 4]
	float DropGroundStartAndgle;//[Offset: 0x308, Size: 4]
	float DropGroundEndAngle;//[Offset: 0x30c, Size: 4]
	bool bDropGroundAngleRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	Vector2D[] DropGroundAngleRangeList;//[Offset: 0x318, Size: 16]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool bApplyBoxTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	bool bDropGroundForceStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32a, Size: 1]
	int OpenDropGroundEffect;//[Offset: 0x32c, Size: 4]
	int RandomDropGroundEffect;//[Offset: 0x330, Size: 4]
	float DropGroundItemLifeSpan;//[Offset: 0x334, Size: 4]
	bool IsDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	PickUpWrapperActor*[] GenerateActorList;//[Offset: 0x340, Size: 16]
	float MaxTraceDist;//[Offset: 0x360, Size: 4]
	bool bUseDropCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	bool bUseDropCurveAnim_DropToTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 1]
	delegate OnItemSpawned;//[Offset: 0x368, Size: 16]
	DropItemCurveAnimComponent* DropItemCurveAnimComponent;//[Offset: 0x378, Size: 8]
	bool IsFoeceNotTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	Vector TraceGroundPoint(Vector StartPos, Actor* IgnoreActor);// 0x3f305ac
	void StartDropToPosition(Vector DestinPos, Character* KillerPawn, Actor* DeadPawn, bool InTraceGround);// 0x3f30470
	void StartDrop(Actor* DeadCharacter, Controller* Killer);// 0x3f303bc
	void SetProduceID(int ProduceID);// 0x3f30344
	void SetDropItemLifeSpan(int ItemTime);// 0x3f302c8
	void SetAutoDrop(bool bAutoDrop);// 0x3f30244
	void RandomCircleDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x3f30070
	int PickItemByUnionRandom(int WeightCount, out RandomPropData[] WeightMap);// 0x3f2ff58
	int PickItemByIndependentRandom(int weight);// 0x3f2fecc
	void OnPickUpDataEmptyOnServer(Actor* SelfRef);// 0xffffff8f20d162a8
	void OnOwnerPawnDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x3f2fc64
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x3f2fa90
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x3f2f9a8
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x3f2f904
	PickUpWrapperActor*[] GetGenerateWrapperList();// 0x3f2f844
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x3f2f750
	UAEDataTable* GetDataTable(out FString TableName);// 0x3f2f6ac
	FString GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x3f2f5c0
	bool DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector SpawnLoc, bool ShouldTreasureBoxHidden, float InLifeTime, bool bAddToNewRegion);// 0x3f2f2dc
	void DropToTombBox(out const PickUpItemData[] PropData, Character* DeadPawn, FString BoxName);// 0x3f2f108
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* Backpack);// 0x3f2effc
	Actor* DropToGround(out const PickUpItemData PropData, Transform WrapperTrans, Vector StartPos, bool ShowGroundEffect);// 0x3f2ee20
	void DropToCommonTreasureBox(Actor* Producer);// 0x3f2ed9c
	void DropToCommonLootBox(Actor* Producer, Transform BoxTrans, CommonTreasureBox* CommonTreasureBox);// 0x3f2ec78
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Actor* DeadPawn, FString BoxName);// 0x3f2eab0
	Actor* DropItemToGround(out const PickUpItemData PropData, out const Transform WrapperTrans, bool bSnapToGround);// 0x3f2e914
	void ClearGenerateActorList();// 0x3f2e900
	void CalcDropItemListByDropRule(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList);// 0x3f2e800

--------------------------------
Class: CustomDropRule
	bool bTraceIgnorePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bTraceIgnoreWarteringArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAttachToTargetActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: DropItemCurveAnimComponent.ActorComponent.Object
	Vector2D RangeHigh;//[Offset: 0x120, Size: 8]
	Vector CustomStartOffset;//[Offset: 0x128, Size: 12]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	bool UseTrailParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 1]
	bool ClientDropOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 1]
	float ClientDropOneByOneInterval;//[Offset: 0x138, Size: 4]
	float CustomGravity;//[Offset: 0x13c, Size: 4]
	float TrailParticleDelayTime;//[Offset: 0x140, Size: 4]
	float LandDirectlyAfterTheReplicatedTime;//[Offset: 0x144, Size: 4]
	float ParticleScale;//[Offset: 0x148, Size: 4]
	ParticleSystem* DropTailsParticle;//[Offset: 0x150, Size: 40]
	ParticleSystem* DropTailsParticleSystem;//[Offset: 0x178, Size: 8]
	bool bUseDropGroundParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	float DropGroundParticleLifeTime;//[Offset: 0x184, Size: 4]
	ParticleSystem* DropGroundParticle;//[Offset: 0x188, Size: 40]
	ParticleSystem* DropGroundParticleSystem;//[Offset: 0x1b0, Size: 8]
	DropGroupContainer[] ItemGroupList;//[Offset: 0x1b8, Size: 16]
	CurveFloat* AnimCurve;//[Offset: 0x1c8, Size: 8]
	bool bUseAnimCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	FString ReportUpdateAnimListItemName;//[Offset: 0x1d8, Size: 16]
	int UseReportUpdateAnim;//[Offset: 0x1e8, Size: 4]
	bool ReportUpdateAnimBegin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool ReportUpdateAnimEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	void OnDropTailsLoadFinsh2(int GroupID);// 0x3d79904
	void OnDropGroundLoadFinsh();// 0x3d798f0
	void AddItemClient(int Group, Vector InStartPos, Vector InEndPos, Actor* Target);// 0x3d797b0
	void AddDropActorServer(Actor* PickUpWrapper, Vector InStartPos, int UserAddr);// 0x3d796b4

--------------------------------
Class: DropGroupContainer
	int GroupIndex;//[Offset: 0x0, Size: 4]
	float GroupTime;//[Offset: 0x4, Size: 4]
	ItemCurveAnim[] List;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ItemCurveAnim
	enum CurState;//[Offset: 0x0, Size: 1]
	bool ShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float DropDuration;//[Offset: 0x4, Size: 4]
	float CurrentTime;//[Offset: 0x8, Size: 4]
	float DropStartSpeed;//[Offset: 0xc, Size: 4]
	float DelayDestroyParticleTime;//[Offset: 0x10, Size: 4]
	float DelayStartTime;//[Offset: 0x14, Size: 4]
	float DelayDestroyGroundParticleTime;//[Offset: 0x18, Size: 4]
	Vector StartPos;//[Offset: 0x1c, Size: 12]
	Vector EndPos;//[Offset: 0x28, Size: 12]
	Actor* TargetActor;//[Offset: 0x34, Size: 8]
	ParticleSystemComponent* TailParticleComponent;//[Offset: 0x40, Size: 8]
	ParticleSystemComponent* GroundParticleComponent;//[Offset: 0x48, Size: 8]

--------------------------------
Class: RandomPropData
	int[] ItemIds;//[Offset: 0x0, Size: 16]
	int[] ItemCounts;//[Offset: 0x10, Size: 16]
	int RuleId;//[Offset: 0x20, Size: 4]
	int weight;//[Offset: 0x24, Size: 4]

--------------------------------
Class: DropItemConfig
	int ItemDropPercent;//[Offset: 0x0, Size: 4]
	int ItemDropRuleStartID;//[Offset: 0x4, Size: 4]
	int ItemDropRuleEndID;//[Offset: 0x8, Size: 4]
	int ItemDropMode;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DropPropData
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]
	int DropMode;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CommonTreasureBox.PlayerTombBox.Actor.Object
	void RegisterToCurveAnimComponent();// 0x3d507d4

--------------------------------
Class: MonsterTreasureBoxGroupComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	float WeightValue;//[Offset: 0x2cc, Size: 4]
	MonsterTreasureBox* CurMonsterTreasureBox;//[Offset: 0x2d0, Size: 8]
	delegate OnMonsterDie_MonsterTreasureBoxGroup;//[Offset: 0x2d8, Size: 16]
	delegate OnMonsterTreasureBoxActive;//[Offset: 0x2e8, Size: 16]
	delegate OnMonsterTreasureBoxBreak;//[Offset: 0x2f8, Size: 16]
	int CurLiveMonsterNum;//[Offset: 0x308, Size: 4]
	MonsterSpotSceneComponent*[] CurrentMonsterSpotSceneComponent;//[Offset: 0x310, Size: 16]
	int64 LastSpawnTime;//[Offset: 0x330, Size: 8]
	bool IsStartGenerateMosnters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	int CurMonsterRefeshPlanID;//[Offset: 0x33c, Size: 4]
	int MaxLiveMonsterNum;//[Offset: 0x340, Size: 4]
	void Update(float DeltaTime);// 0x3ea6758
	void Reset();// 0x3ea6744
	void RegisterMonsterSpotSceneComponent(MonsterSpotSceneComponent* MonsterSpotSceneComponent);// 0x3ea66c8
	void MonsterTreasureBoxStateChanged(enum State);// 0x3ea664c
	void MonsterTreasureBoxBreak(FString MonsterTreasureBoxName);// 0x3ea6574
	void MonsterTreasureBoxActive(FString MonsterTreasureBoxName);// 0x3ea649c
	void MonsterDie_MonsterTreasureBoxGroup(FString MonsterName);// 0x3ea63c4
	MonsterTreasureBoxProbeComponent* GetMonsterTreasureBoxProbeComponent();// 0x3ea6390
	int GetMonsterID();// 0x3ea635c
	void GeneratorTreasureBox();// 0x3ea6348
	void GeneratorMonsters(FString MonsterTreasureBoxGroupName);// 0x3ea6270
	bool CanGeneratorTreaseurBox();// 0x3ea6230

--------------------------------
Class: MonsterSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int Label;//[Offset: 0x2d0, Size: 4]
	byte MonsterBornType;//[Offset: 0x2d4, Size: 1]
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x3ea21b8

--------------------------------
Class: MonsterTreasureBoxProbeComponent.GameModeProbeComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	MonsterTreasureBoxGroupComponent*[] AllMonsterSpotGroups;//[Offset: 0x2f8, Size: 16]
	MonsterTreasureBoxGroupComponent*[] CurrentMonsterSpotGroups;//[Offset: 0x308, Size: 16]
	MonsterTreasureBoxTableData[] MonsterTreasureBoxTableDatas;//[Offset: 0x320, Size: 16]
	BTZombieModeLabelOfMonster[] ZombieModeLabelOfMonsters;//[Offset: 0x330, Size: 16]
	BTZombieModeLevelZombiePlan[] ZombieModeLevelZombiePlans;//[Offset: 0x340, Size: 16]
	int MaxLiveMonsterNum;//[Offset: 0x354, Size: 4]
	MonsterTreasureBoxGroupComponent*[] NeedToUpdateMonsterSpotGroups;//[Offset: 0x358, Size: 16]
	void Update(float DeltaTime);// 0x3ea7798
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x3ea7714
	void RangeMonsterTreasureBoxGroups(int WaveNum, int MonsterTreasureBoxNum, int DistanceWeight, int AngleWeight, int MonsterRefeshPlanID);// 0x3ea75b0
	void InitialItemTable();// 0x3ea7594
	BTZombieModeLevelZombiePlan[] GetZombieModeLevelZombiePlanTableDataByID(int ID);// 0x3ea74c4
	BTZombieModeLabelOfMonster[] GetZombieModeLabelOfMonsterTableDataByMonsterId(int MonsterID);// 0x3ea73f4
	BTZombieModeLabelOfMonster[] GetZombieModeLabelOfMonsterTableDataByLabel(int Label);// 0x3ea7324
	BTZombieModeLabelOfMonster GetZombieModeLabelOfMonsterTableDataByID(int ID);// 0x3ea7298
	MonsterTreasureBoxTableData GetMonsterTreasureBoxTableDataByID(int ID);// 0x3ea717c
	void GeneratorMonsterTreaseureBox();// 0x3ea7168

--------------------------------
Class: GameModeProbeComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	void Update(float DeltaTime);// 0x3dfbf64
	void UnInit();// 0x3dfbf48
	void Init();// 0x3dfbf2c

--------------------------------
Class: MonsterTreasureBoxTableData
	int ID;//[Offset: 0x0, Size: 4]
	FString PathName;//[Offset: 0x8, Size: 16]
	float TotalHP;//[Offset: 0x18, Size: 4]
	float TotalTime;//[Offset: 0x1c, Size: 4]
	float BrokenHPPropotion;//[Offset: 0x20, Size: 4]
	int DropBoxId;//[Offset: 0x24, Size: 4]
	FString MetaData;//[Offset: 0x28, Size: 16]

--------------------------------
Class: BTZombieModeLabelOfMonster
	int ID;//[Offset: 0x0, Size: 4]
	int weight;//[Offset: 0x4, Size: 4]
	int Label;//[Offset: 0x8, Size: 4]
	int MonsterID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BTZombieModeLevelZombiePlan
	int ID;//[Offset: 0x0, Size: 4]
	int PlanID;//[Offset: 0x4, Size: 4]
	int MonsterCount;//[Offset: 0x8, Size: 4]
	int MonsterID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BountyBoughtInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int BoughtCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: RescueHelicopterBase.Character.Pawn.Actor.Object
	int MaxRescueNum;//[Offset: 0x838, Size: 4]
	float FlyingZ;//[Offset: 0x83c, Size: 4]
	float WaitingHeight;//[Offset: 0x840, Size: 4]
	BoxComponent* HelicopterBox;//[Offset: 0x848, Size: 8]
	int OwnerPlayerKey;//[Offset: 0x850, Size: 4]
	byte HelicopterState;//[Offset: 0x854, Size: 1]
	int HelicopterID;//[Offset: 0x858, Size: 4]
	Vector TargetLocation;//[Offset: 0x85c, Size: 12]
	int[] PlayerKeys;//[Offset: 0x868, Size: 16]
	float CountDownSeconds;//[Offset: 0x878, Size: 4]
	bool bCanSeeInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 1]
	Vector RandomTargetLoc(out const Vector InCenter, float InRadius, FName ValidActorTag, float InGrowRadiusBy);// 0x3f5822c
	void OwnedByPlayer(int InPlayerKey);// 0x3f581b0
	void OnRep_HelicopterState();// 0x3f5819c
	void OnPlayerRescued(STExtraBaseCharacter* Player);// 0x3f58120
	void OnHelicopterLeft();// 0x3f5810c
	void OnHelicopterArrived();// 0x3f580f8
	bool IsOwnedByPlayer(int InPlayerKey);// 0x3f58068
	int GetOwnerPlayerKey();// 0x3f5804c
	Vector GetHelicopterTargetLocation();// 0x3f58024
	int GetHelicopterId();// 0x3f58008
	void GetBoardedPlayerPlayerState(out STExtraPlayerState*[] PS);// 0x3f57f74
	void BP_FlyToTargetLocation(out const Vector TargetLoc);// 0xffffff8f20d162a8
	void BP_BoardPlayer(STExtraBaseCharacter* Player);// 0xffffff8f20d162a8

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x3e8, Size: 80]
	MaterialInterface* MaterialInstances;//[Offset: 0x438, Size: 8]
	MaterialInterface* BoxTestMat;//[Offset: 0x440, Size: 8]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x450, Size: 16]
	RuntimeMeshComponent* Decal;//[Offset: 0x6f0, Size: 8]

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 8]
	Texture* DecalTexure;//[Offset: 0x8, Size: 8]

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0xe0, Size: 8]
	Texture* DecalTexure;//[Offset: 0xe8, Size: 8]
	int CoordX;//[Offset: 0xf0, Size: 4]
	int CoordY;//[Offset: 0xf4, Size: 4]

--------------------------------
Class: SlotWeaponData
	int ID;//[Offset: 0x0, Size: 4]
	int[] AttachmentIDList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AvatarCapture.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x3e8, Size: 8]
	MeshComponent* WeaponMesh;//[Offset: 0x3f0, Size: 8]
	STExtraPlayerController* ASTPC;//[Offset: 0x3f8, Size: 8]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x400, Size: 80]
	<int,AvatarDisplayAnimData> DisplayWeaponAnimInfoMap;//[Offset: 0x450, Size: 80]
	WeaponAnimAsset WeaponAnimData;//[Offset: 0x4a0, Size: 128]
	class AnimInstance* AnimBP;//[Offset: 0x520, Size: 40]
	TextureRenderTarget2D* TargetTexture;//[Offset: 0x548, Size: 40]
	delegate OnWeaponBlendAnim;//[Offset: 0x570, Size: 16]
	enum[] ExcludeHiddenAvatarSlotList;//[Offset: 0x580, Size: 16]
	<int,FName> slotToSocket;//[Offset: 0x590, Size: 80]
	FName OBPlayerName;//[Offset: 0x5e0, Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x5e8, Size: 8]
	CharacterAvatarComponent* OBAvatar;//[Offset: 0x5f0, Size: 8]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x5f8, Size: 16]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x608, Size: 16]
	FName[] HideBoneNames;//[Offset: 0x618, Size: 16]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x628, Size: 16]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x638, Size: 16]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x648, Size: 8]
	<BattleItemHandleBase*,SocketMesh> SkMeshUseOwnAnimBP;//[Offset: 0x650, Size: 80]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	bool bUseNewDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a1, Size: 1]
	bool bCheckGender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a2, Size: 1]
	void SetTrainingRangePlayerOBInfo(out const PlayerOBInfo InPlayerOBInfo);// 0x3c73274
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent* AvatarComp);// 0x3c731ac
	void SetEnable(bool IsEnable);// 0x3c73128
	void RenderCaptureScene();// 0x3c73114
	void RefreshAvatar(int SlotType, bool IsEquipped);// 0x3c73054
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x3c72f6c
	void InitBGMat();// 0xffffff8f20d162a8
	class AnimInstance GetWeaponAnimBP(const int TargetWeaponID);// 0x3c72eac
	AnimationAsset* GetWeaponAnimAsset(int TargetWeaponID, enum AnimType);// 0x3c72db0
	CharacterAvatarComponent* GetOBAvatarComponent();// 0x3c72d7c
	AnimSequenceBase* GetAnimSeqAsset(SoftObjectPath AnimResRef);// 0x3c72c94
	void EquipWeapon(int PlayerKey);// 0x3c72c18
	void EquipPlayerAvatar(CharacterAvatarComponent* AvatarComponent, bool IsRefrsh);// 0x3c72b58
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x3c72a90
	void CreateWeapon(bool IsSkeletalMesh);// 0x3c72a0c
	void ApplyAnimation();// 0x3c729f8

--------------------------------
Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0, Size: 8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8, Size: 40]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30, Size: 40]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58, Size: 40]

--------------------------------
Class: AvatarDisplayAnimData
	int WeaponID;//[Offset: 0x0, Size: 4]
	class AnimInstance* WeaponAnimBP;//[Offset: 0x8, Size: 40]
	AvatarDisplayPoseData[] DisplayAnimList;//[Offset: 0x30, Size: 16]

--------------------------------
Class: AvatarDisplayPoseData
	enum DisplayAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* DisplayAnim;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharacterAvatarComponent.AvatarComponent.SceneComponent.ActorComponent.Object
	delegate OnItemHandleListLoadFinished;//[Offset: 0x8c8, Size: 16]
	MeshSynData[] AvatarSyncData;//[Offset: 0x8d8, Size: 16]
	MeshSynData[] OverrideSyncData;//[Offset: 0x8e8, Size: 16]
	float PlayerBackPackCapacity;//[Offset: 0x8f8, Size: 4]
	bool GlideGlobalVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fc, Size: 1]
	BattleItemHandleBase*[] LoadedHandleList;//[Offset: 0x900, Size: 16]
	bool bForeceDisableSKinweight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 1]
	bool bIsLobbyIgnore_SkirtPose_Lobby_Paragliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 1]
	bool bIsLobbyIgnore_Fashion_Show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x912, Size: 1]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x913, Size: 1]
	BattleItemHandleBase*[] itemHandleCache;//[Offset: 0x978, Size: 16]
	int[] ignoreSlots;//[Offset: 0x988, Size: 16]
	int WholeBodyModelID;//[Offset: 0x998, Size: 4]
	SkeletalMesh* ZombieSkeletalMesh;//[Offset: 0x9a0, Size: 8]
	enum[] ConsiderAnimHiddenByLODList;//[Offset: 0x9a8, Size: 16]
	enum[] ForceUpdateHiddenBonesSlotList;//[Offset: 0x9b8, Size: 16]
	bool WaitCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c8, Size: 1]
	int EnableEquipAvatarSkin;//[Offset: 0x9cc, Size: 4]
	int EnableEquipAvatarPendant;//[Offset: 0x9d0, Size: 4]
	int ClearPendingEntityCfg;//[Offset: 0x9d4, Size: 4]
	AvatarEntity*[] PendingUpdateBoneList;//[Offset: 0x9d8, Size: 16]
	<int,AsyncLoadRenderResReq> PendingLoadRenderRequestList;//[Offset: 0x9e8, Size: 80]
	PendingDeleteEntity[] PendingDeleteEntityList;//[Offset: 0xa38, Size: 16]
	int SimulateDefaultHandleID;//[Offset: 0xa48, Size: 4]
	float IsAutonomousDetectInterval;//[Offset: 0xa54, Size: 4]
	<int,ChildHandleList> ChildItems;//[Offset: 0xa58, Size: 80]
	FName IgnoreSkinWeightAnimSlotName;//[Offset: 0xaa8, Size: 8]
	<enum,DefaultAvatarConfig> DefaultAvatarHandles;//[Offset: 0xab0, Size: 80]
	<enum,ItemDefineID> DefaultAvatar4ReadyPak;//[Offset: 0xb00, Size: 80]
	int[] PinchFaceIDs;//[Offset: 0xb50, Size: 16]
	int PauseIMPhysicsCountWhenDetachFromVehicle;//[Offset: 0xb60, Size: 4]
	int PauseIMPhysicsCountWhenLeaveParachute;//[Offset: 0xb64, Size: 4]
	bool AsyncLoadOnClientModeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb78, Size: 1]
	bool bEnableLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb79, Size: 1]
	float MeshSectionVisibilityCheckInterval;//[Offset: 0xb7c, Size: 4]
	float MeshSectionVisibilityCheckCounter;//[Offset: 0xb80, Size: 4]
	bool bMeshSectionVisibilityCheckReportDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb84, Size: 1]
	bool bUseSetFuncCorrectMeshSectionVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb85, Size: 1]
	bool bUseForceCorrectMeshSectionVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb86, Size: 1]
	MaterialInterface* SuperLowMaterial;//[Offset: 0xb88, Size: 8]
	int[] EnableBatchList;//[Offset: 0xb90, Size: 16]
	float FarDistance;//[Offset: 0xba8, Size: 4]
	float MiddleDistance;//[Offset: 0xbac, Size: 4]
	float FarTime;//[Offset: 0xbb0, Size: 4]
	float MiddleTime;//[Offset: 0xbb4, Size: 4]
	bool bHasSendSickLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb8, Size: 1]
	bool bHasSendBoneNonCompatible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb9, Size: 1]
	bool bHasSendAvatarMeshError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbba, Size: 1]
	bool bHasSendNoAvatarMasterMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbbb, Size: 1]
	int SickLODNum;//[Offset: 0xbbc, Size: 4]
	int BoneNonCompatibleErrorNum;//[Offset: 0xbc0, Size: 4]
	int AvatarMeshErrorNum;//[Offset: 0xbc4, Size: 4]
	int NoAvatarMasterMeshNum;//[Offset: 0xbc8, Size: 4]
	float SickLODDetectInterval;//[Offset: 0xbcc, Size: 4]
	float SickLODDetectCounter;//[Offset: 0xbd0, Size: 4]
	float BoneNonCompatibleCheckInterval;//[Offset: 0xbd4, Size: 4]
	float BoneNonCompatibleCheckCounter;//[Offset: 0xbd8, Size: 4]
	float AvatarMeshErrorCheckInterval;//[Offset: 0xbdc, Size: 4]
	float AvatarMeshErrorCheckCounter;//[Offset: 0xbe0, Size: 4]
	float NoAvatarMasterMeshCheckInterval;//[Offset: 0xbe4, Size: 4]
	float NoAvatarMasterMeshCheckCounter;//[Offset: 0xbe8, Size: 4]
	void TryRepairSickLOD(const int InTargetSlot);// 0x3d213b4
	void TryRepairBoneNonCompatible(const int InTargetSlot);// 0x3d21330
	void TryRepairAvatarMeshError(const int InTargetSlot);// 0x3d212ac
	void TickNoAvatarMasterMesh(float DeltaTime);// 0x3d21228
	void TickMeshSectionVisibililtyCheck(float DeltaTime);// 0x3d211ac
	bool ShouldUseHairDynamicEffect();// 0x3d21174
	bool ShouldDisplayByQuality(int SlotID);// 0x3d210e4
	void SetSkinWeightProfileBySkelMeshCmp(SkeletalMeshComponent* SkeletalMeshCmp, FName ProfileName, bool bUseSkinWeightProfile, enum Reason);// 0x3d20fa8
	void SetSkinMaterialInternel(MeshComponent* MeshComp, MaterialInterface* MatSkin, FName SlotName, int SlotID);// 0x3d20e7c
	bool SetSkinMaterial(int SlotID);// 0x3d20dec
	void SetSelfSkinWeightProfile(SkeletalMeshComponent* SkeletalMeshCmp, FName ProfileName, bool bUseSkinWeightProfile, int SlotID, enum Reason);// 0x3d20c74
	void SetNormalMaterial(out MeshPackage meshPack, MeshComponent* MeshComp, int SlotID);// 0x3d20b58
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x3d20adc
	void SetColorMaterial(int SlotID, MeshComponent* MeshComp, MaterialInstance* Material, out MeshPackage meshPack);// 0x3d2098c
	void SetCastShadowEnabled(bool IsEnabled);// 0x3d20908
	bool SetBodySuitsMaterial(out MeshPackage meshPack, MeshComponent* MeshComp);// 0x3d20814
	void SetAvatarVisibility(enum SlotType, bool Visible, bool IsForCE);// 0x3d20708
	void SetAvatarSectionVisibility(bool Visible, const byte InCameraMode, FString MeshKey);// 0x3d205a4
	void SetAvatarSectionSlotIdx(int slotIdex, bool Visible, FString MaterialKey);// 0x3d20440
	void SetAvatarGender(int AGender);// 0x3d203c4
	void SetAsyncLoadingOnClientModeEnabled(bool IsEnable);// 0x3d20340
	void SetAllSelfSkinWeightProfileByState(enum profilestate, FName ProfileName, bool bUseSkinWeightProfile, enum Reason);// 0x3d20200
	void SetAllSelfSkinWeightProfile(FName ProfileName, bool bUseSkinWeightProfile, enum Reason);// 0x3d200fc
	void RetrieveAvatarFromRepDataOnClient(out MeshSynData[] SynData);// 0x3d20010
	bool ResetSkinWeightProfile(int Slot, out SkinWeightProfileStates states);// 0x3d1ff00
	void RenderEntityInStandAloneMode(CharacterAvatarEntity* AvatarEntity);// 0x3d1fe84
	void RemovePendingDeleteEntity(AvatarEntity* AVEntity);// 0x3d1fe08
	void ReloadAvatarWithSlotList(enum[] InSlotList, bool needDirectLoad);// 0x3d1fcec
	BattleItemHandleBase* ReloadAvartItemHandle(BattleItemHandleBase* InItemHandleBase);// 0x3d1fc60
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x3d1fbd4
	void RegisterSkinWeightProfileStateWithTempName(bool bUseSkinWeightProfile, FName TempStateName);// 0x3d1fb0c
	void RegisterSkinWeightProfileState(bool bUseSkinWeightProfile, enum InSkinWeightProfileState);// 0x3d1fa44
	void RefreshMaterials();// 0x3d1fa30
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x3d1f9a4
	void RefreshAvatar();// 0x3d1f990
	bool PutOnEquipmentsByResIDList(out <int,int> AvatarList, out MeshSynData[] OtherSynData);// 0x3d1f7c8
	bool PutOnEquipmentByItemHandleInner(BattleItemHandleBase* Handle, SkeletalMesh* skMesh, StaticMesh* stMesh, bool bClear);// 0x3d1f680
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x3d1f574
	bool PutOnChildEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, int ParentSlotID);// 0x3d1f4a0
	void PushHandlesToPipeline(BattleItemHandleBase*[] handleList);// 0x3d1f3c8
	bool ProcessAssetFilter(out AsyncLoadRenderResReq RenderResReq);// 0x3d1f304
	bool PreFiltHandles(BackpackAvatarHandle* AvatarHandle, out MeshSynData SyncData);// 0x3d1f1f0
	void PauseIMSimulation(int InPauseFrameCount);// 0x3d1f174
	void OnRespawned();// 0x3d1f158
	void OnReplayTargetChanged(FString LastPlayerUID, FString NewPlayerUID);// 0x3d1f088
	void OnReplacedMeshNotLoaded(CharacterAvatarEntity* TargetEntity);// 0x3d1f00c
	void OnRep_BackPackCapacityChanged();// 0x3d1eff8
	void OnRep_AvatarMeshChanged();// 0x3d1efe4
	void OnRecycled();// 0x3d1efc8
	void OnParachuteStateChanged(byte preState, byte CurState);// 0x3d1ef10
	void OnMeshLoaded(SoftObjectPath AssetList, BattleItemHandleBase* ItemHandles, bool isReplaced);// 0x3d1edb0
	void OnLobbyEmoteMontageStartEvent(int EmoteIndex);// 0x3d1ed34
	void OnLobbyEmoteMontageFinishedEvent(int EmoteIndex);// 0x3d1ecb8
	void OnItemHandleLoaded(ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x3d1ebf0
	void OnItemHandleListLoaded(BattleItemHandleBase*[] ItemHandles, int AsyncLoadID);// 0x3d1eadc
	void OnDebugVisibleChanged(SkeletalMeshComponent* DebugMeshComp);// 0x3d1ea60
	void OnCharacterDetachedFromVehicle(STExtraVehicleBase* InLastVehicle);// 0x3d1e9e4
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x3d1e824
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x3d1e728
	bool LoadMeshsAsync(BattleItemHandleBase* handleList, bool needDirectLoad);// 0x3d1e64c
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x3d1e550
	bool IsUseSSSMaterial();// 0x3d1e518
	bool IsTeammate();// 0x3d1e4d8
	bool IsSlotNeedReplaced(int SlotID);// 0x3d1e448
	bool IsReadyToNextStep(out bool IsReadyState);// 0x3d1e3a8
	bool IsPinceFace();// 0x3d1e368
	bool IsNeedLoadMeshListSync();// 0x3d1e330
	bool IsNamedSectionCutExclude(out const FName InMatSlotName, const int InAvatarSlotIndex, const byte InCameraMode);// 0x3d1e214
	bool IsInLowDevice();// 0x3d1e1dc
	bool IsForceUpdateHiddenBonesSlot(int InSlotID);// 0x3d1e14c
	bool IsForceUpdateHiddenBonesComp(SkeletalMeshComponent* InSkeletalMeshComp);// 0x3d1e0bc
	bool IsConsiderAnimHiddenByLOD(int InSlotID);// 0x3d1e024
	bool IsBattle_ROLE_AutonomousProxy();// 0x3d1dfec
	bool IsAdditionalItemsHiddenBy(int itemResID);// 0x3d1df5c
	void InitialAvatarParam(int AGender);// 0x3d1ded8
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x3d1de54
	void InitDefaultAvatarByResID(int avatarGender, int head, int hair);// 0x3d1dd5c
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x3d1dcd8
	bool InitBodyMeshByHead(BackpackAvatarHandle* AvatarHandle);// 0x3d1dc40
	void HideHeadBone(bool IsHide);// 0x3d1dbbc
	bool HasSkinWeightProfileBySlotID(int SlotID, enum profilestate);// 0x3d1daf0
	void HandleHeadEntityFaceInfo(bool bNeedFaceInfo);// 0x3d1da6c
	enum[] GetVisibleAvatarSlots(bool bCheckInner, bool bCheckOuter);// 0x3d1d950
	FString GetPlayerName();// 0x3d1d8c8
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef);// 0x3d1d7d4
	MaterialInterface* GetHighQualityBaseMaterial(MaterialInstance* matIns, MaterialInterface* AdvancedMat, bool FindBaseMat);// 0x3d1d6cc
	int[] GetHandleParentSlot(BattleItemHandleBase* ItemHandle);// 0x3d1d5fc
	AvatarEntityFactory* GetEntityFactory();// 0x3d1d5c0
	BattleItemHandleBase* GetDefaultHandle(enum SlotID);// 0x3d1d534
	int[] GetDefaultBodyItemIDList();// 0x3d1d4b4
	void GetDefaultBodyHandles(BackpackAvatarHandle* HeadHandle, out BackpackAvatarHandle*[] BodyHandleList);// 0x3d1d3d8
	bool GetDefaultAvatar4ReadyPak(enum SlotID, out ItemDefineID DefaultAvatar);// 0x3d1d2f8
	void GetCurAvatarIDList(out int[] IDList);// 0x3d1d264
	BackpackAvatarHandle* GetBattleItemFromResID(int resID);// 0x3d1d1d0
	<int,FString> GetAvatarHiddenSlotMap();// 0x3d1d108
	void ForceShowMeshSection(MeshComponent* InTargetMesh, const bool InIsShow, const int InLOD);// 0x3d1cffc
	void ForceShowAllMeshSection(const bool InIsShow, const int InLOD);// 0x3d1cf2c
	bool EnableEquipAvatarPendantFeature();// 0x3d1cef4
	void CorrectMeshSectionVisibility();// 0x3d1ced8
	void CopyRepData(out MeshSynData[] OutSynData, out enum[] CopySlots);// 0x3d1cd8c
	void CopyFromOthers(CharacterAvatarComponent* Other, SkeletalMeshComponent* UseOwnMasterComp, enum[] CopySlots);// 0x3d1cc30
	void CopyFromOtherAvatarComp(CharacterAvatarComponent* Other, enum[] ExcludeSlots);// 0x3d1cb18
	void ClearPendingDeleteEntity();// 0x3d1cb04
	void ClearMeshBySlot(int Slot, bool putDefault);// 0x3d1ca3c
	bool CheckShouldEquipDefaultItem(int Slot);// 0x3d1c9ac
	void CheckOverrideRigidBodyAsset();// 0x3d1c998
	bool CheckIsHiddenByOther(int itemResID);// 0x3d1c908
	bool CheckIfAvatarPakDownloaded(BattleItemHandleBase* ItemHandle);// 0x3d1c870
	bool CheckEntityDisabled(BackpackAvatarHandle* AvatarHandle);// 0x3d1c7e0
	void CheckAlreadyEquipped(BackpackAvatarHandle* AvatarHandle);// 0x3d1c764
	MaterialInstance* ApplySSSMaterial(MaterialInstance* NormalSkinMat, MeshComponent* MeshComp, FName SlotName);// 0x3d1c664
	void ApplyMaterialOnlySkinSlot(BattleItemHandleBase* ItemHandle, MeshComponent* MeshComp);// 0x3d1c5b0
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* MeshComp);// 0x3d1c4f4

--------------------------------
Class: AsyncLoadRenderResReq
	RenderResSet[] RenderResList;//[Offset: 0x0, Size: 16]
	BattleItemHandleBase*[] AvatarHandleList;//[Offset: 0x10, Size: 16]
	int IsAutonomousAvatar;//[Offset: 0x20, Size: 4]
	bool NeedReAsyncMeshList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: RenderResSet
	SoftObjectPath MeshRes;//[Offset: 0x0, Size: 24]
	SoftObjectPath[] MatRes;//[Offset: 0x18, Size: 16]
	SoftObjectPath[] ParticleRes;//[Offset: 0x28, Size: 16]

--------------------------------
Class: PendingDeleteEntity
	AvatarEntity* PendingDeleteEntity;//[Offset: 0x0, Size: 8]
	bool NeedPutDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int SlotID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ChildHandleList
	ChildHandleInfo[] ChildHandles;//[Offset: 0x0, Size: 16]

--------------------------------
Class: ChildHandleInfo
	BackpackAvatarHandle* ChildHandle;//[Offset: 0x0, Size: 8]
	int ParentSlot;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemSkillsConfig[] SkillsConfig;//[Offset: 0xf8, Size: 16]
	SkillCoverConfig[] SkillsCoverConfig;//[Offset: 0x108, Size: 16]
	bool EnableLobbyAvatarExtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	ExtraDamageReduceCfg ExtraDamageReduceCfg;//[Offset: 0x120, Size: 32]
	enum SlotID;//[Offset: 0x140, Size: 1]
	enum subSlot;//[Offset: 0x141, Size: 1]
	enum avatarVisiblityType;//[Offset: 0x142, Size: 1]
	bool bUseAvatarSwitchLODTickOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143, Size: 1]
	MeshPackage meshPack;//[Offset: 0x148, Size: 728]
	MeshPackage replacedMeshPack;//[Offset: 0x420, Size: 728]
	enum[] hiddenFlags;//[Offset: 0x6f8, Size: 16]
	enum[] femaleHiddenFlags;//[Offset: 0x708, Size: 16]
	enum[] replaceFlags;//[Offset: 0x718, Size: 16]
	enum[] femaleReplaceFlags;//[Offset: 0x728, Size: 16]
	enum[] ignoreFlags;//[Offset: 0x738, Size: 16]
	BackpackComponent* pBackpackComp;//[Offset: 0x748, Size: 8]
	int itemCapacity;//[Offset: 0x750, Size: 4]
	int Durability;//[Offset: 0x754, Size: 4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x760, Size: 56]
	enum hideBoneSlot;//[Offset: 0x798, Size: 1]
	FName hideBoneName;//[Offset: 0x7a0, Size: 8]
	enum hatMeshType;//[Offset: 0x7a8, Size: 1]
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0x7b0, Size: 16]
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0x7c0, Size: 80]
	int DefaultExtendPendantID;//[Offset: 0x810, Size: 4]
	byte PendantTargetGender;//[Offset: 0x814, Size: 1]
	int PendantConfigIndex;//[Offset: 0x818, Size: 4]
	enum PendantSlotForMale;//[Offset: 0x81c, Size: 1]
	FName PendantSocketForMale;//[Offset: 0x820, Size: 8]
	enum PendantSlotForFemale;//[Offset: 0x828, Size: 1]
	FName PendantSocketForFemale;//[Offset: 0x830, Size: 8]
	bool ForceIgnoreSlotSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 1]
	bool FemaleForceIgnoreSlotSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x839, Size: 1]
	AdditionalItem[] AdditionalItems;//[Offset: 0x840, Size: 16]
	NotifySoundModifiedItem[] NotifySoundModifiedItems;//[Offset: 0x850, Size: 16]
	AvatarAnimOverrideData[] CharacterAnimListOverrideList;//[Offset: 0x860, Size: 16]
	byte CharacterAnimOverrideType;//[Offset: 0x870, Size: 1]
	ComparePriority ComparePriority;//[Offset: 0x874, Size: 8]
	int Priority;//[Offset: 0x87c, Size: 4]
	SyncAdditionData[] AdditionalDataList;//[Offset: 0x880, Size: 16]
	MatCutExcludeItem[] MatCutExcludeList;//[Offset: 0x890, Size: 16]
	bool ConsiderPawnFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 1]
	SkinWeightProfileConfig SkinWeightProfileConfig;//[Offset: 0x8a8, Size: 40]
	SkinWeightProfileConfig SkinWeightProfileConfig_Male;//[Offset: 0x8d0, Size: 40]
	bool bAllowBakeMeshOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 1]
	bool bUseMasterLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f9, Size: 1]
	void RemoveSkillsAfterDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int KillingHitDamageTypeID, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x3c95774
	void RemoveSkills();// 0x3c95760
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x3c95628
	bool IsVirtualAvatarHandle();// 0x3c955e8
	bool IsNamedSlotMatCutExclude(out const FName InSlotName, const byte InCameraMode, STExtraBaseCharacter* Owner);// 0x3c954cc
	bool IsForceIgnoreSlotSocket(bool IsMaleGender);// 0x3c9542c
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x3c9533c
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x3c9509c
	bool HandleEnable(bool bEnable);// 0x3c94ffc
	bool HandleDrop(int InCount, enum Reason);// 0x3c94f28
	bool HandleDisuse(enum Reason);// 0x3c94e90
	int GetSubSlotID();// 0x3c94e54
	FString GetStaticMesh(bool IsMale);// 0x3c94d7c
	int GetSlotID();// 0x3c94d40
	ItemSkillsConfig[] GetSkillTemplates_Implementation();// 0x3c94c5c
	FString GetSkeletalMesh(bool IsAutonomous, bool IsMale);// 0x3c94b40
	enum[] GetReplaceFlags(bool IsMale);// 0x3c94a68
	BackpackComponent* GetBackpackComponent();// 0x3c94a34
	bool CompareCutPriority(BackpackAvatarHandle* AvatarHandle);// 0x3c949a4
	bool CheckCanPickUp(CharacterAvatarComponent* AvatarComp, int nowCapcity, enum Reason);// 0x3c9489c
	bool CanRemoveSkill();// 0x3c9485c
	bool CanAddSkill();// 0x3c9481c
	void BPOnRemoveSkillsSuccess();// 0xffffff8f20d162a8
	void BPOnAddSkillsSuccess();// 0xffffff8f20d162a8
	void AddSkills();// 0x3c94808
	void AddAdditionalEffect(bool AddEffect);// 0x3c94784

--------------------------------
Class: ItemSkillsConfig
	class UTSkill* SkillTemplateClass;//[Offset: 0x0, Size: 40]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bImmediatelyRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: SkillCoverConfig
	class UTSkill* SkillCoverClass;//[Offset: 0x0, Size: 40]
	class UTSkill* SkillCoveredClass;//[Offset: 0x28, Size: 40]

--------------------------------
Class: ExtraDamageReduceCfg
	FString AttachmentID;//[Offset: 0x0, Size: 16]
	ExtraDamageReduce[] ExtraDamageReduceArray;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ExtraDamageReduce
	enum AvatarPosition;//[Offset: 0x0, Size: 1]
	float DamageReduceScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MeshPackage
	FName SockectName;//[Offset: 0x0, Size: 8]
	StaticMesh* maleStMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* femaleStMesh;//[Offset: 0x30, Size: 40]
	SkeletalMesh* maleSkMesh;//[Offset: 0x58, Size: 40]
	SkeletalMesh* femaleSkMesh;//[Offset: 0x80, Size: 40]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xa8, Size: 40]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0xd0, Size: 40]
	MaterialInterface* maleMat;//[Offset: 0xf8, Size: 40]
	MaterialInterface* femaleMat;//[Offset: 0x120, Size: 40]
	int LodMatDeviceQualityLevel;//[Offset: 0x148, Size: 4]
	MaterialInterface* maleLODMat;//[Offset: 0x150, Size: 40]
	MaterialInterface* femaleLODMat;//[Offset: 0x178, Size: 40]
	MaterialSet[] replaceMaleMaterials;//[Offset: 0x1a0, Size: 16]
	MaterialSet[] replaceFemaleMaterials;//[Offset: 0x1b0, Size: 16]
	MaterialSet[] additionalMaleMats;//[Offset: 0x1c0, Size: 16]
	MaterialSet[] additionalFemaleMats;//[Offset: 0x1d0, Size: 16]
	MaterialInterface* baseMat;//[Offset: 0x1e0, Size: 8]
	MaterialInterface* AdvancedParentMat;//[Offset: 0x1e8, Size: 8]
	MaterialInterface* AdvancedParentMat_Male;//[Offset: 0x1f0, Size: 8]
	MaterialInterface* AdvancedParentMat_Female;//[Offset: 0x1f8, Size: 8]
	MaterialInterface* lobbyWingSuitMat;//[Offset: 0x200, Size: 40]
	AvatarAnimList[] AvatarAnimList;//[Offset: 0x228, Size: 16]
	LobbyAnimConfigData[] AnimConfigData;//[Offset: 0x238, Size: 16]
	FName MaleAvatarStyle;//[Offset: 0x248, Size: 8]
	FName FemaleAvatarStyle;//[Offset: 0x250, Size: 8]
	LobbyEntity[] CurEntity;//[Offset: 0x258, Size: 16]
	ParticleSet[] maleParticles;//[Offset: 0x268, Size: 16]
	ParticleSet[] femaleParticles;//[Offset: 0x278, Size: 16]
	class AnimInstance* animBPClass;//[Offset: 0x288, Size: 40]
	PhysicsAsset* OverridePhysicsAsset_Male;//[Offset: 0x2b0, Size: 8]
	PhysicsAsset* OverridePhysicsAsset_Female;//[Offset: 0x2b8, Size: 8]
	bool IsReplacedMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	FName OverrideMaleSocketName;//[Offset: 0x2c8, Size: 8]
	FName OverrideFeMaleSocketName;//[Offset: 0x2d0, Size: 8]

--------------------------------
Class: MaterialSet
	enum targetSlot;//[Offset: 0x0, Size: 1]
	FName targetMatSlotName;//[Offset: 0x8, Size: 8]
	MaterialInterface* targetMat;//[Offset: 0x10, Size: 40]
	Texture2D* FXLight_MaskTEX;//[Offset: 0x38, Size: 8]
	Texture2D* FXLight_TEX;//[Offset: 0x40, Size: 8]
	LinearColor FXLight_Color;//[Offset: 0x48, Size: 16]
	LinearColor FXLight_TEXPanner;//[Offset: 0x58, Size: 16]
	LinearColor FXLight_TEXUV;//[Offset: 0x68, Size: 16]
	float UseFXLight_Scalar;//[Offset: 0x78, Size: 4]
	float UV0or1;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: AvatarAnimList
	AnimSequence* AnimSeq;//[Offset: 0x0, Size: 40]
	float Alpha;//[Offset: 0x28, Size: 4]
	enum PoseType;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: LobbyAnimConfigData
	byte SceneType;//[Offset: 0x0, Size: 1]
	LobbyPosGenderAnim[] LobbyAnimData;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LobbyPosGenderAnim
	byte PoseIndexType;//[Offset: 0x0, Size: 1]
	LobbyGenderAnim[] GenderPoseAnimAsset;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LobbyGenderAnim
	byte GenderType;//[Offset: 0x0, Size: 1]
	LobbyPoseAnim[] PoseAnimAsset;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LobbyPoseAnim
	FName Pose;//[Offset: 0x0, Size: 8]
	AnimationAsset* AnimAsset;//[Offset: 0x8, Size: 40]

--------------------------------
Class: LobbyEntity
	FString RelatedAttrbute;//[Offset: 0x0, Size: 16]
	FName RelatedComTag;//[Offset: 0x10, Size: 8]
	FName Tag;//[Offset: 0x18, Size: 8]
	class LobbyBaseAction* LobbyAction;//[Offset: 0x20, Size: 8]

--------------------------------
Class: LobbyBaseAction.Object
	bool IsTickAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: ParticleSet
	ParticleSystem* Particle;//[Offset: 0x0, Size: 40]
	ParticleSystem* LobbyParticle;//[Offset: 0x28, Size: 40]
	FName SocketName;//[Offset: 0x50, Size: 8]
	Transform Transform;//[Offset: 0x60, Size: 48]

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 24]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0x18, Size: 16]
	FString BodyDurabilityIndexName;//[Offset: 0x28, Size: 16]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 16]
	enum Op;//[Offset: 0x10, Size: 1]
	float ModifyValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0, Size: 16]
	Transform SocketRelativeTransform;//[Offset: 0x10, Size: 48]
	Vector AngularLimitsMin;//[Offset: 0x40, Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: AvatarPendantConfig_SpecialParam
	FName SpecialUseExplanation;//[Offset: 0x0, Size: 8]
	Transform AdditionalTransform2SocketRelativeTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: AdditionalItem
	enum SlotID;//[Offset: 0x0, Size: 1]
	int ItemID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: NotifySoundModifiedItem
	FString NotifyName;//[Offset: 0x0, Size: 16]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x10, Size: 8]
	bool bIsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bIsSwitchGroupName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	FString DefaultState;//[Offset: 0x20, Size: 16]
	FString SwitchState;//[Offset: 0x30, Size: 16]

--------------------------------
Class: AvatarAnimOverrideData
	byte Layer;//[Offset: 0x0, Size: 1]
	class UAECharAnimListCompBase* AnimListCompClass;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	WeaponAnimTypeConfig WeaponAnimTypeConfig;//[Offset: 0x238, Size: 24]
	WeaponAnimTypeConfig[] WeaponAnimTypeConfigStack;//[Offset: 0x250, Size: 16]
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x260, Size: 16]

--------------------------------
Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 1]
	FString AnimsCatorgeryName;//[Offset: 0x8, Size: 16]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x18, Size: 96]

--------------------------------
Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 16]
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0x10, Size: 80]

--------------------------------
Class: ComparePriority
	enum SlotID;//[Offset: 0x0, Size: 1]
	int Priority;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MatCutExcludeItem
	byte ExcludeCameraMode;//[Offset: 0x0, Size: 1]
	FName[] ExcludeCutSlotNameList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: SkinWeightProfileConfig
	enum[] UseSkinWeightProfileStatus;//[Offset: 0x0, Size: 16]
	enum[] UseSWPStates;//[Offset: 0x10, Size: 16]
	bool LobbyIgnore_SkirtPose_Lobby_Paragliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool LobbyIgnore_Fashion_Show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: DefaultAvatarConfig
	ItemDefineID ItemID;//[Offset: 0x0, Size: 24]
	class BattleItemHandleBase* ItemHandle;//[Offset: 0x18, Size: 8]

--------------------------------
Class: CharacterAvatarEntity.AvatarEntity.Object
	bool PendingRenderFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	int EquipedPendantSlotID;//[Offset: 0x25c, Size: 4]
	int EquipedDefaultPendantSlotID;//[Offset: 0x260, Size: 4]
	FName[] NeedUnHideBone;//[Offset: 0x268, Size: 16]
	bool ForceHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	int[] ChildOf;//[Offset: 0x280, Size: 16]
	bool MarkMatOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	void UpdateVisibility();// 0x3d2723c
	void SetVisibilityProcess(bool Inner, bool Outer);// 0x3d2716c
	void SetSlotMeshByReplacedMark(bool ReplacedMark);// 0x3d270e8
	bool SetSlotHidden(int Slot, int DoHiddenSlot, bool ShouldHide);// 0x3d26fdc
	void SetParticleVisiblity(bool Visible);// 0x3d26f58
	void SetInnerVisibility(bool isShow);// 0x3d26ed4
	void ResetEntityBeforePushToPool(bool DisableCheck);// 0x3d26e48
	bool ReplaceTargetSlotMesh(int SourceSlot, int DestSlot, bool ReplaceMark);// 0x3d26d3c
	void ReplaceTargetMaterial(int SourceSlot, int DestSlot, bool IsReplace);// 0x3d26c44
	void RenderEntity(out SoftObjectPath SoftPath);// 0x3d26ba0
	void RefreshVisable();// 0x3d26b8c
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x3d26b00
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x3d26a68
	void PutOnDefaultEquipment(enum SlotType);// 0x3d269e4
	void ProcessSelfBoneVisbility();// 0x3d269d0
	void ProcessReplaceMaterial(bool NeedReplace);// 0x3d2694c
	void ProcessBoneVisibility(bool HideMark);// 0x3d268c8
	void ParseAdditionalItem(SyncAdditionDataArray SyncData);// 0x3d26704
	void OnMeshLODChanged(int PredictedLOD);// 0x3d26688
	void OnLoadParticles();// 0x3d2666c
	bool IsConsiderAnimHiddenByLOD();// 0x3d26634
	bool IsChildEntity();// 0x3d265fc
	bool IsAnimHiddenByLODEnable();// 0x3d265bc
	bool IsAnimHiddenByLOD();// 0x3d2657c
	void GetReplacingSlots(out int[] DoReplaceSlots);// 0x3d264e8
	enum GetMeshType(SkeletalMesh* SelfMesh);// 0x3d26454
	ItemDefineID GetDefineID();// 0x3d26400
	SyncAdditionDataArray GetAdditionalData();// 0x3d2631c
	void EnterRenderPipeline();// 0x3d26300
	void EnterLogicPipeline();// 0x3d262e4
	void DoPostLogic();// 0x3d262d0
	void DetectAvatarSickLOD();// 0x3d262bc
	void DealWithSelfReplaceMaterial();// 0x3d262a8
	void DealSlotHidden(bool ShouldHide);// 0x3d2621c
	void DealSelfReplaced();// 0x3d26208
	void DealSelfHide();// 0x3d261f4
	void DealHideBone();// 0x3d261e0
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x3d26128
	void CollectParticleResource(out <enum,ResourceList> CollectRes);// 0x3d26050
	void CollectMeshResource(out <enum,ResourceList> CollectRes);// 0x3d25f78
	void CollectMaterialResource(out <enum,ResourceList> CollectRes);// 0x3d25ea0
	void CollectDesiredResource(out <enum,ResourceList> CollectRes, bool DisableCheck);// 0x3d25d74
	void CollectAnimResource(out <enum,ResourceList> CollectRes);// 0x3d25c9c
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x3d25bd4
	void ClearEquipmentLogic(bool putDefault);// 0x3d25b48
	void ClearEntity(bool ForceClear);// 0x3d25abc
	void CheckPendantForEquipmentPutOn(BackpackAvatarHandle* InItemHandle);// 0x3d25a38
	void CheckPendantForEquipmentPutOff();// 0x3d25a1c
	void CheckDefaultPendantForEquipmentPutOn(BackpackAvatarHandle* InItemHandle);// 0x3d25998
	void CheckAvatarMeshError(const bool InShouldAlwaysShow);// 0x3d25914
	void CheckAvatarMeshCompatibleWithMaster();// 0x3d25900
	void ApplySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x3d2587c
	void ApplyOverrideMaterial();// 0x3d25860
	void ApplyMeshCompCollision();// 0x3d2584c
	void ApplyAnimation();// 0x3d25830

--------------------------------
Class: ResourceList
	SoftObjectPath[] ResourcesPath;//[Offset: 0x0, Size: 16]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x340, Size: 1]
	float FOVAngle;//[Offset: 0x344, Size: 4]
	float OrthoWidth;//[Offset: 0x348, Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x350, Size: 8]
	byte CaptureSource;//[Offset: 0x358, Size: 1]
	byte CompositeMode;//[Offset: 0x359, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x360, Size: 1376]
	float PostProcessBlendWeight;//[Offset: 0x8c0, Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x8d0, Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x914, Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x920, Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92c, Size: 1]
	void CaptureScene();// 0x67af6d8
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x67af600

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x2b9, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x2c0, Size: 16]
	Actor*[] HiddenActors;//[Offset: 0x2d0, Size: 16]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x2e0, Size: 16]
	Actor*[] ShowOnlyActors;//[Offset: 0x2f0, Size: 16]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 1]
	float LODDistanceFactor;//[Offset: 0x304, Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x308, Size: 4]
	int CaptureSortPriority;//[Offset: 0x30c, Size: 4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x310, Size: 16]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x67af078
	void ShowOnlyActorComponents(Actor* InActor);// 0x67aeffc
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x67aef80
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x67aef04
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x67aee88
	void HideComponent(PrimitiveComponent* InComponent);// 0x67aee0c
	void HideActorComponents(Actor* InActor);// 0x67aed90
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x67aed14
	void ClearHiddenComponents();// 0x67aed00

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 16]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: SocketMesh
	FName SocketName;//[Offset: 0x0, Size: 8]
	StaticMeshComponent* MeshComp;//[Offset: 0x8, Size: 8]
	SkeletalMeshComponent* SkMeshComp;//[Offset: 0x10, Size: 8]

--------------------------------
Class: WaterSwimActor.Actor.Object
	float WaterSufaceOffset;//[Offset: 0x3e8, Size: 4]
	float Damage;//[Offset: 0x3ec, Size: 4]
	float Interval;//[Offset: 0x3f0, Size: 4]
	class DamageType* DamageType;//[Offset: 0x3f8, Size: 8]
	class Pawn[] DamageFilters;//[Offset: 0x400, Size: 16]
	class WaterPoisonDamageManager* DamageManagerClass;//[Offset: 0x410, Size: 8]
	bool bIsWaterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	BoxComponent* WaterBoxComp;//[Offset: 0x420, Size: 8]
	BoxComponent*[] UnWaterBoxCompList;//[Offset: 0x428, Size: 16]
	enum WaterRangeType;//[Offset: 0x438, Size: 1]
	float CylinderRadius;//[Offset: 0x43c, Size: 4]
	SceneComponent* VolumeCenter;//[Offset: 0x440, Size: 8]
	FName VolumeActorTagName;//[Offset: 0x448, Size: 8]
	PhysicsVolume*[] VolumeActorList;//[Offset: 0x450, Size: 16]
	Vector[] WaterVolumeVertex;//[Offset: 0x460, Size: 16]
	uint32[] WaterVolumeTriangle;//[Offset: 0x470, Size: 16]
	StaticMesh* WaterVolumeMesh;//[Offset: 0x480, Size: 40]
	bool IsLocationInWater(out const Vector Location, const float ZAxisTolerance);// 0x41f0ff4
	void InitCustomData(bool ForceInit);// 0x41f0f70
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight, out const Vector TargetPos);// 0x41f0e24

--------------------------------
Class: WaterPoisonDamageManager.Info.Actor.Object
	WaterSwimActor*[] RegisteredWaterVolumes;//[Offset: 0x3e8, Size: 16]

--------------------------------
Class: AutoTestSystemComponent.ActorComponent.Object
	class ATTaskGraph[] ConfigGraphList;//[Offset: 0x120, Size: 16]
	ATTaskGraph*[] TaskGraphList;//[Offset: 0x130, Size: 16]
	bool StopExistGraph(int GraphIndex);// 0x3c711d8
	bool StartNewGraph(int GraphIndex, out TaskGraphInitParam Param);// 0x3c71100
	void RemoveTaskGraph(ATTaskGraph* Graph);// 0x3c71084
	void ProcessTaskGraph(ATTaskGraph* Graph);// 0x3c71008
	void AddTaskGraph(ATTaskGraph* Graph);// 0x3c70f8c

--------------------------------
Class: ATTaskGraph.Object
	Vector2D DrawHudOffsetScale;//[Offset: 0x28, Size: 8]
	float LineOffsetY;//[Offset: 0x30, Size: 4]
	enum GraphsState;//[Offset: 0x34, Size: 1]
	AutoTestSystemComponent* OwnerComp;//[Offset: 0x38, Size: 8]
	ATTaskNodeBase*[] TaskNodeList;//[Offset: 0x40, Size: 16]
	void Tick(float DeltaTime);// 0x3c6ca30
	void RemoveTaskNode(ATTaskNodeBase* Node);// 0x3c6c9b4
	void ReceiveTick(float DeltaTime);// 0x3c6c930
	void ReceiveEndGraph();// 0x3c6c914
	void ReceiveBeginGraph();// 0x3c6c8f8
	void ProcessTask(ATTaskNodeBase* Task);// 0x3c6c874
	void EndGraph();// 0x3c6c858
	void ChangeState(enum NewState);// 0x3c6c7dc
	void BeginGraph();// 0x3c6c7c0
	void AddTaskNode(ATTaskNodeBase* Node);// 0x3c6c744

--------------------------------
Class: ATTaskNodeBase.Object
	FString NodeDescription;//[Offset: 0x28, Size: 16]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	ATTaskGraph* OwnerGraph;//[Offset: 0x40, Size: 8]
	enum NodeState;//[Offset: 0x48, Size: 1]
	ATTaskNodeBase* NextNode;//[Offset: 0x50, Size: 8]
	enum ExcuteResult;//[Offset: 0x58, Size: 1]
	FString ExcuteResultMsg;//[Offset: 0x60, Size: 16]
	delegate OnNodeStateChangeDelegate;//[Offset: 0x70, Size: 16]
	delegate OnNodeExcuteResultDelegate;//[Offset: 0x80, Size: 16]
	void TickTask(float DeltaTime);// 0x3c6f72c
	void ReceiveTickTask(float DeltaTime);// 0x3c6f6a8
	void ReceiveEndTask();// 0x3c6f68c
	void ReceiveBeginTask();// 0x3c6f670
	void OnNodeStateChangeDelegate__DelegateSignature(ATTaskNodeBase* Node, enum OldState, enum NewState);// 0xffffff8f20d162a8
	void OnNodeExcuteResultDelegate__DelegateSignature(ATTaskNodeBase* Node, enum Result, FString ResultMsg);// 0xffffff8f20d162a8
	FString GetDescription();// 0x3c6f5e8
	void ForceEndTask();// 0x3c6f5d4
	void EndTask();// 0x3c6f5b8
	void ChangeState(enum NewState);// 0x3c6f53c
	void BeginTask();// 0x3c6f520

--------------------------------
Class: TaskGraphInitParam

--------------------------------
Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0, Size: 1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8, Size: 40]

--------------------------------
Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x3e8, Size: 8]

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x830, Size: 16]
	int InstancingRandomSeed;//[Offset: 0x840, Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x844, Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x848, Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x850, Size: 16]
	int[] RemovedInstances;//[Offset: 0x860, Size: 16]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x871, Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x908, Size: 8]
	<int,Matrix> StashInstanceTransform;//[Offset: 0x910, Size: 80]
	int NumPendingLightmaps;//[Offset: 0x968, Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x970, Size: 16]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x66cab20
	bool ShowInstance(out const int[] InstanceIndices);// 0x66caa70
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x66ca9bc
	bool RemoveInstance(int InstanceIndex);// 0x66ca924
	bool HideInstance(out const int[] InstanceIndices);// 0x66ca874
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x66ca738
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x66ca5c8
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x66ca46c
	int GetInstanceCount();// 0x66ca438
	void ClearInstances();// 0x66ca41c
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x66ca36c
	int AddInstance(out const Transform InstanceTransform);// 0x66ca2b4

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 64]

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: FootprintActorBlock
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0, Size: 80]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x50, Size: 8]

--------------------------------
Class: TrailMarkActorBlock
	TrailMarkActor*[] WorkingList;//[Offset: 0x0, Size: 16]
	TrailMarkActor*[] AssignableList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ClientSettingBaseOnGameMode
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x0, Size: 16]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x10, Size: 16]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x20, Size: 16]
	bool bDisableSimulateClientBulletImpactFXOnlyForMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x38, Size: 16]
	int[] HideBackpackWeaponDeviceQualityLevelConfigList;//[Offset: 0x48, Size: 16]

--------------------------------
Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte MinQualityLevel;//[Offset: 0x0, Size: 1]
	int MinDeviceLevel;//[Offset: 0x4, Size: 4]
	bool bApplyToLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	class Actor[] TargetClassConfigList;//[Offset: 0x10, Size: 16]
	class Object[] CachedClassList;//[Offset: 0x20, Size: 16]

--------------------------------
Class: TaskControllerComponent.UniversalTaskController.ActorComponent.Object

--------------------------------
Class: SeasonTaskListener.UniversalTaskController.ActorComponent.Object
	<int,TaskRecord> TaskRecords;//[Offset: 0x240, Size: 80]
	<int,TaskDetailInfo> TaskGlobalMap;//[Offset: 0x290, Size: 80]
	delegate OnReceiveWeakTaskData;//[Offset: 0x2e0, Size: 16]
	delegate OnReceiveTasksSimpleInfos;//[Offset: 0x2f0, Size: 16]
	float TaskReqFrequencyLimit;//[Offset: 0x300, Size: 4]
	<int,float> WeekDataReqTimeRecords;//[Offset: 0x308, Size: 80]
	TaskSimpleInfo[] SimpleInfoList;//[Offset: 0x358, Size: 16]
	TaskDetailInfo[] DetailInfoList;//[Offset: 0x368, Size: 16]
	TaskExtraInfo ReqExtraInfo;//[Offset: 0x378, Size: 4]
	bool bComputeNonRealTimeTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	bool bEnableOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37e, Size: 1]
	int EffectLimitNum;//[Offset: 0x380, Size: 4]
	int ActorLimitNum;//[Offset: 0x384, Size: 4]
	bool bEnableReactivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	bool bUseDiffTypeStat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	LimitActorDetail[] CounterLimitActorList;//[Offset: 0x390, Size: 16]
	LimitTypeActorUnion[] TypeCounterActorSet;//[Offset: 0x3a0, Size: 16]
	delegate OnActorOutLimitDelegate;//[Offset: 0x3b0, Size: 16]
	delegate OnActorLimitRegisterDelegate;//[Offset: 0x3c0, Size: 16]
	<FName,int> PersonalActorLimiteNum;//[Offset: 0x3d0, Size: 80]
	void UpdateRecord(int TaskID, int process, bool bIsModeFit, int TargetProcess, int WeekIndex);// 0x3f74d70
	void UnRegisterActorForCounter(Actor* TargetActor);// 0x3f74cf4
	void S2C_ResponseTasksPage(int WeekIndex, const TaskDetailInfo[] TaskDetailList);// 0x3f74bf8
	void S2C_ResponseTaskSimpleInfo(const TaskSimpleInfo[] TaskSimpleInfos);// 0x3f74b40
	void RequestTasksByWeekIndex(int WeekIndex);// 0x3f74ac4
	void RequestTasksByID(out const int[] TaskIdList);// 0x3f74a30
	bool RemoveValue(FName tempName);// 0x3f749a0
	void RegisterActorForCounter(Actor* TargetActor, FString ActorOwnerKey);// 0x3f74888
	void OnPlayerStartInitialized();// 0x3f74874
	bool IsRealTimeComputingTask(int TaskType);// 0x3f747e4
	void HandleInitTaskData(int TaskID, int process, FString ExtInfo);// 0x3f74688
	void HandleInitCollectionData(int TaskID, int CurrentCount, int TotalCount);// 0x3f74598
	bool GetModeFitResult(int TaskID);// 0x3f74508
	int GetCurNumByName(FName tempName);// 0x3f7447c
	static SeasonTaskListener* GetClientTaskController(const Object* WorldContextObject);// 0x3f74400
	void GenerateReqExtraInfo();// 0x3f743ec
	void EnableComputeNonRealTimeTask(bool IsEnable);// 0x3f74368
	void ComputeAllTasksOnce();// 0x3f74354
	void ChangeCurNumByName(FName tempName, int deltaNum);// 0x3f7429c
	void C2S_RequestTasksPage(int WeekIndex, const TaskExtraInfo ExtraInfo);// 0x3f741ac
	void C2S_RequestTaskSimpleInfo();// 0x3f7414c
	void C2S_RequestTasksDetail(const int[] TaskIdList, const TaskExtraInfo ExtraInfo);// 0x3f74050
	bool AddValue(FName tempName);// 0x3f73fc0

--------------------------------
Class: TaskRecord
	TaskDetailInfo[] TaskDetailList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: TaskDetailInfo
	int TaskID;//[Offset: 0x0, Size: 4]
	int CurrentProcess;//[Offset: 0x4, Size: 4]
	int TotalProcess;//[Offset: 0x8, Size: 4]
	byte WeekIndex;//[Offset: 0xc, Size: 1]

--------------------------------
Class: TaskSimpleInfo
	int WeekID;//[Offset: 0x0, Size: 4]
	int UnCompletedTaskNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TaskExtraInfo
	float TalkTime;//[Offset: 0x0, Size: 4]

--------------------------------
Class: LimitActorDetail
	Actor* TargetActor;//[Offset: 0x0, Size: 8]
	FString OwnerKey;//[Offset: 0x8, Size: 16]
	int Order;//[Offset: 0x18, Size: 4]
	int TimeStamp;//[Offset: 0x1c, Size: 4]
	bool bHasProcessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: LimitTypeActorUnion
	FString ActorClassName;//[Offset: 0x0, Size: 16]
	LimitActorDetail[] CounterActorList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: PlayerRevivalComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0x120, Size: 4]
	int GotoSpectatingTime;//[Offset: 0x124, Size: 4]
	FString RevivalGotoSpectatingTips;//[Offset: 0x128, Size: 16]
	int64 StartObserverTime;//[Offset: 0x138, Size: 8]
	int64 FinishRevivalTime;//[Offset: 0x140, Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0x148, Size: 8]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0x150, Size: 8]
	DateTime BePickupTime;//[Offset: 0x158, Size: 8]
	void TickRevival(float DeltaSeconds);// 0x3f0db14
	void SetRemainingRevivalTime(int InValue);// 0x3f0da98
	void SetCaptureIDCardStatus(bool InValue);// 0x3f0da14
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x3f0d998
	void OnPlayerQuitSpectating();// 0x3f0d984
	void OnPlayerGotoSpectating();// 0x3f0d970
	void OnPlayerExitGame();// 0x3f0d95c
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x3f0d8d8
	void LeaveRevivalState(uint32 SaviorKey);// 0x3f0d85c
	bool IsInWaittingRevivalState();// 0x3f0d824
	int GetRevivalCountDownTime();// 0x3f0d808
	int GetRemainingRevivalTime();// 0x3f0d7d4
	bool GetCaptureIDCardStatus();// 0x3f0d79c
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x3f0d710
	bool FindNearestPointPos(out const Vector InPos, out Vector OutPos);// 0x3f0d618
	void EnterRevivalState();// 0x3f0d604
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x3f0d55c
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x3f0d4b4

--------------------------------
Class: RevivalPointActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x3e8, Size: 8]
	float SmokeStartScaleDistance;//[Offset: 0x3f0, Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x3f4, Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x3f8, Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x3fc, Size: 4]
	bool UseRevivalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	float RevivalCDTime;//[Offset: 0x404, Size: 4]
	bool UseRevivalCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	int RevivalCount;//[Offset: 0x40c, Size: 4]
	int ID;//[Offset: 0x410, Size: 4]
	enum CurState;//[Offset: 0x414, Size: 1]
	enum preState;//[Offset: 0x415, Size: 1]
	int RevivalTime;//[Offset: 0x418, Size: 4]
	int CurRevivalTime;//[Offset: 0x41c, Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	int OperationalDistance;//[Offset: 0x424, Size: 4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x428, Size: 80]
	Transform PTowEleTransform;//[Offset: 0x480, Size: 48]
	<enum,ParticleSystem*> PTowEleMap;//[Offset: 0x4b0, Size: 80]
	FString ExParticleComponentTag;//[Offset: 0x500, Size: 16]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x510, Size: 80]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x560, Size: 8]
	int SmokingdisappearTime;//[Offset: 0x568, Size: 4]
	bool UseShowMiniMapIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	int IconID;//[Offset: 0x570, Size: 4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x578, Size: 16]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x588, Size: 8]
	float RevivalCDTimeCur;//[Offset: 0x590, Size: 4]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x5a8, Size: 8]
	void StartRevival();// 0x3f5b53c
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x3f5b4ac
	bool RecheckCurrentRevivingPlayers();// 0x3f5b474
	void OnRep_ShowSmoking();// 0x3f5b460
	void OnRep_RevivalPointState(enum LastPreState);// 0x3f5b3e4
	void OnRep_RevivalCDTimeCur();// 0x3f5b3d0
	void OnRep_CurrentRevivingPlayers();// 0x3f5b3bc
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x3f5b32c
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x3f5b29c
	float GetRevivalCDTimeCurPercent();// 0x3f5b268
	float GetRevivalCDTimeCur();// 0x3f5b234
	float GetRevivalCDTime();// 0x3f5b200
	int GetId();// 0x3f5b1cc
	void DistanceChangedEvent(float Scale);// 0xffffff8f20d162a8

--------------------------------
Class: RevivalCardItemPickData
	uint32 PickUpPlayerID;//[Offset: 0x0, Size: 4]
	uint32 DroperPlayerID;//[Offset: 0x4, Size: 4]
	int64 PickupTime;//[Offset: 0x8, Size: 8]
	int64 DroperTime;//[Offset: 0x10, Size: 8]
	FString PickUpName;//[Offset: 0x18, Size: 16]
	FString DroperPlayerName;//[Offset: 0x28, Size: 16]

--------------------------------
Class: DelaySendingMsgComponent.ActorComponent.Object
	STExtraPlayerController* MyPC;//[Offset: 0x120, Size: 8]
	<FName,EventCD> DelayEvent;//[Offset: 0x128, Size: 80]
	float CheckSendingAllowedDelta;//[Offset: 0x178, Size: 4]
	EventCD CoolDownCD;//[Offset: 0x180, Size: 40]
	delegate DelaySendingMsgDelegate;//[Offset: 0x1b8, Size: 16]
	bool bOpenDelayComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	void SetUIMsgByDelayEventName(FName EventName, FString UIMsg);// 0x3d753dc
	bool CanEventExecuteImmediately(FName EventName);// 0x3d7534c

--------------------------------
Class: EventCD
	FString UIMsg;//[Offset: 0x8, Size: 16]
	CoolDownType[] StateList;//[Offset: 0x18, Size: 16]

--------------------------------
Class: CoolDownType
	FName OtherStateType;//[Offset: 0x0, Size: 8]
	enum PStateType;//[Offset: 0x8, Size: 1]
	float CDTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: HitEffectComponent.ActorComponent.Object
	int AutonomousHitEffectCacheLimit;//[Offset: 0x120, Size: 4]
	int SimulatedHitEffectCacheLimit;//[Offset: 0x124, Size: 4]
	HitEffectDataAsset* DefaultHitEffect;//[Offset: 0x128, Size: 40]
	<FName,HitEffectDataAsset*> ExtraHitEffects;//[Offset: 0x150, Size: 80]
	HitEffectCachedData[] AutonomousHitEffectList;//[Offset: 0x1a0, Size: 16]
	HitEffectCachedData[] SimulatedHitEffectList;//[Offset: 0x1b0, Size: 16]
	<HitEffectDataAsset*,ParticleSystem*> CachedImpactFXMap;//[Offset: 0x1c0, Size: 80]
	Object*[] HitEffectCachedList;//[Offset: 0x220, Size: 16]
	HitEffectDataAsset* HitEffectDataAsset;//[Offset: 0x230, Size: 8]

--------------------------------
Class: HitEffectDataAsset.DataAsset.Object
	<Vector2D,HitEffectItemDataList> HitEffectDirectionOverrideDataMap;//[Offset: 0x30, Size: 80]
	ParticleSystem* DefaultFX;//[Offset: 0x80, Size: 8]
	ParticleSystem* ConcreteFX;//[Offset: 0x88, Size: 8]
	ParticleSystem* DirtFX;//[Offset: 0x90, Size: 8]
	ParticleSystem* WaterFX;//[Offset: 0x98, Size: 8]
	ParticleSystem* MetalFX;//[Offset: 0xa0, Size: 8]
	ParticleSystem* WoodFX;//[Offset: 0xa8, Size: 8]
	ParticleSystem* GlassFX;//[Offset: 0xb0, Size: 8]
	ParticleSystem* GrassFX;//[Offset: 0xb8, Size: 8]
	ParticleSystem* FleshFX;//[Offset: 0xc0, Size: 8]
	ParticleSystem* AutonomousFleshFX;//[Offset: 0xc8, Size: 8]
	ParticleSystem* SteelFX;//[Offset: 0xd0, Size: 8]
	ParticleSystem* SandbagFX;//[Offset: 0xd8, Size: 8]
	ParticleSystem* SandFX;//[Offset: 0xe0, Size: 8]
	ParticleSystem* ClothFX;//[Offset: 0xe8, Size: 8]
	ParticleSystem* PlasticFX;//[Offset: 0xf0, Size: 8]
	ParticleSystem* LeatherFX;//[Offset: 0xf8, Size: 8]
	ParticleSystem* CeramicsFX;//[Offset: 0x100, Size: 8]
	ParticleSystem* PaperFX;//[Offset: 0x108, Size: 8]
	ParticleSystem* StoneFX;//[Offset: 0x110, Size: 8]
	ParticleSystem* SnowFX;//[Offset: 0x118, Size: 8]
	ParticleSystem* PopCanFX;//[Offset: 0x120, Size: 8]
	ParticleSystem* PyreflyFX;//[Offset: 0x128, Size: 8]
	ParticleSystem* LeafFX;//[Offset: 0x130, Size: 8]
	ParticleSystem* CarFX;//[Offset: 0x138, Size: 8]
	ParticleSystem* AsphaltFX;//[Offset: 0x140, Size: 8]
	ParticleSystem* IceFX;//[Offset: 0x148, Size: 8]
	ParticleSystem* FoodFX;//[Offset: 0x150, Size: 8]
	ParticleSystem* MonsterFleshFX;//[Offset: 0x158, Size: 8]
	ParticleSystem* IceEngravingFX;//[Offset: 0x160, Size: 8]
	ParticleSystem* NewYearSculptureFX;//[Offset: 0x168, Size: 8]
	ParticleSystem* AirVehicleSteelFX;//[Offset: 0x170, Size: 8]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	<FString,ParticleSystem*> ExtendFleshFX;//[Offset: 0x180, Size: 80]
	AkAudioEvent* DefaultSound;//[Offset: 0x1d0, Size: 8]
	AkAudioEvent* ConcreteSound;//[Offset: 0x1d8, Size: 8]
	AkAudioEvent* DirtSound;//[Offset: 0x1e0, Size: 8]
	AkAudioEvent* WaterSound;//[Offset: 0x1e8, Size: 8]
	AkAudioEvent* MetalSound;//[Offset: 0x1f0, Size: 8]
	AkAudioEvent* WoodSound;//[Offset: 0x1f8, Size: 8]
	AkAudioEvent* GlassSound;//[Offset: 0x200, Size: 8]
	AkAudioEvent* GrassSound;//[Offset: 0x208, Size: 8]
	AkAudioEvent* FleshSound;//[Offset: 0x210, Size: 8]
	AkAudioEvent* SteelSound;//[Offset: 0x218, Size: 8]
	AkAudioEvent* SandbagSound;//[Offset: 0x220, Size: 8]
	AkAudioEvent* SandSound;//[Offset: 0x228, Size: 8]
	AkAudioEvent* ClothSound;//[Offset: 0x230, Size: 8]
	AkAudioEvent* PlasticSound;//[Offset: 0x238, Size: 8]
	AkAudioEvent* LeatherSound;//[Offset: 0x240, Size: 8]
	AkAudioEvent* CeramicsSound;//[Offset: 0x248, Size: 8]
	AkAudioEvent* PaperSound;//[Offset: 0x250, Size: 8]
	AkAudioEvent* StoneSound;//[Offset: 0x258, Size: 8]
	AkAudioEvent* SnowSound;//[Offset: 0x260, Size: 8]
	AkAudioEvent* PopCanSound;//[Offset: 0x268, Size: 8]
	AkAudioEvent* PyreflySound;//[Offset: 0x270, Size: 8]
	AkAudioEvent* LeafSound;//[Offset: 0x278, Size: 8]
	AkAudioEvent* CarSound;//[Offset: 0x280, Size: 8]
	AkAudioEvent* AsphaltSound;//[Offset: 0x288, Size: 8]
	AkAudioEvent* IceSound;//[Offset: 0x290, Size: 8]
	AkAudioEvent* FoodSound;//[Offset: 0x298, Size: 8]
	AkAudioEvent* MonsterFleshSound;//[Offset: 0x2a0, Size: 8]
	AkAudioEvent* IceEngravingSound;//[Offset: 0x2a8, Size: 8]
	AkAudioEvent* NewYearSculptureSound;//[Offset: 0x2b0, Size: 8]
	AkAudioEvent* AirVehicleSteelSound;//[Offset: 0x2b8, Size: 8]
	DecalData DefaultDecal;//[Offset: 0x2c0, Size: 32]
	DecalData ConcreteDecal;//[Offset: 0x2e0, Size: 32]
	DecalData DirtDecal;//[Offset: 0x300, Size: 32]
	DecalData WaterDecal;//[Offset: 0x320, Size: 32]
	DecalData MetalDecal;//[Offset: 0x340, Size: 32]
	DecalData WoodDecal;//[Offset: 0x360, Size: 32]
	DecalData GrassDecal;//[Offset: 0x380, Size: 32]
	DecalData GlassDecal;//[Offset: 0x3a0, Size: 32]
	DecalData FleshDecal;//[Offset: 0x3c0, Size: 32]
	DecalData FleshDecalAutomonous;//[Offset: 0x3e0, Size: 32]
	DecalData SteelDecal;//[Offset: 0x400, Size: 32]
	DecalData SandbagDecal;//[Offset: 0x420, Size: 32]
	DecalData SandDecal;//[Offset: 0x440, Size: 32]
	DecalData ClothDecal;//[Offset: 0x460, Size: 32]
	DecalData PlasticDecal;//[Offset: 0x480, Size: 32]
	DecalData LeatherDecal;//[Offset: 0x4a0, Size: 32]
	DecalData CeramicsDecal;//[Offset: 0x4c0, Size: 32]
	DecalData PaperDecal;//[Offset: 0x4e0, Size: 32]
	DecalData StoneDecal;//[Offset: 0x500, Size: 32]
	DecalData SnowDecal;//[Offset: 0x520, Size: 32]
	DecalData PopCanDecal;//[Offset: 0x540, Size: 32]
	DecalData PyreflyDecal;//[Offset: 0x560, Size: 32]
	DecalData LeafDecal;//[Offset: 0x580, Size: 32]
	DecalData CarDecal;//[Offset: 0x5a0, Size: 32]
	DecalData AsphaltDecal;//[Offset: 0x5c0, Size: 32]
	DecalData IceDecal;//[Offset: 0x5e0, Size: 32]
	DecalData FoodDecal;//[Offset: 0x600, Size: 32]
	DecalData IceEngravingDecal;//[Offset: 0x620, Size: 32]

--------------------------------
Class: HitEffectItemDataList
	<byte,ParticleSystem*> ItemDataListMapNew;//[Offset: 0x0, Size: 80]

--------------------------------
Class: HitEffectCachedData
	DecalComponent* HitDecalComp;//[Offset: 0x0, Size: 8]
	ParticleSystemComponent* HitParticleComp;//[Offset: 0x8, Size: 8]
	AkComponent* AKComp;//[Offset: 0x10, Size: 8]

--------------------------------
Class: TeamateStateChangedCompressData
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 12]
	uint32 View;//[Offset: 0xc, Size: 4]
	byte Roll;//[Offset: 0x10, Size: 1]
	float Health;//[Offset: 0x14, Size: 4]
	float HealthMax;//[Offset: 0x18, Size: 4]
	float Temperature;//[Offset: 0x1c, Size: 4]
	float SignalHP;//[Offset: 0x20, Size: 4]

--------------------------------
Class: TeamateStateUAVChangedCompressData
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 12]
	uint32 View;//[Offset: 0xc, Size: 4]
	byte Roll;//[Offset: 0x10, Size: 1]
	byte uavType;//[Offset: 0x11, Size: 1]

--------------------------------
Class: TrainingGroundWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	<FString,TrainingHeadWidgetInfo> PlayerHeadWidgetMap;//[Offset: 0x440, Size: 80]
	<FString,PlayerOBInfo> PlayerInfosMap;//[Offset: 0x4a0, Size: 80]
	CanvasPanel* HeadUIRoot;//[Offset: 0x4f0, Size: 8]
	void SendRequestPlayerInfo(FString inUIDStr);// 0x4134a0c
	void OnWidgetInitialized();// 0x41349f8
	void OnRefreshPlayersHeadWidget(out const ChooserActorInfo[] ChooseInfos);// 0x4134964
	void OnOpenPlayerInfoDetailUI(out const PlayerOBInfo CurPlayerInfo);// 0x4134864
	bool GetPlayerInfoByUID(FString inUIDStr, out PlayerOBInfo CurPlayerInfo);// 0x41346bc

--------------------------------
Class: TrainingHeadWidgetInfo
	OBModePositionWidget* WidgetPtr;//[Offset: 0x0, Size: 8]

--------------------------------
Class: OBModePositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* OBCanvasPanelSlot;//[Offset: 0x428, Size: 8]
	CanvasPanel* OBPanel;//[Offset: 0x430, Size: 8]
	STExtraBaseCharacter* CachedCharacter;//[Offset: 0x438, Size: 8]
	STExtraPlayerState* CachedPlayerState;//[Offset: 0x440, Size: 8]
	WeaponManagerComponent* CacheWeaponComponent;//[Offset: 0x448, Size: 8]
	PlayerInfoInOB CachedPlayerInfo;//[Offset: 0x450, Size: 224]
	Vector4 Limit;//[Offset: 0x530, Size: 16]
	int heightPlus;//[Offset: 0x540, Size: 4]
	int rightPlus;//[Offset: 0x544, Size: 4]
	Vector2D UIOffset;//[Offset: 0x548, Size: 8]
	Vector LocOffset;//[Offset: 0x550, Size: 12]
	float CachedHealth;//[Offset: 0x55c, Size: 4]
	float CachedBreathPercent;//[Offset: 0x560, Size: 4]
	int TargetDistance;//[Offset: 0x564, Size: 4]
	float MagnificationCoefficient;//[Offset: 0x568, Size: 4]
	float MaxDelayDisapearTime;//[Offset: 0x56c, Size: 4]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	bool bUseWeseeStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	enum RelationshipWithRecordTarget;//[Offset: 0x576, Size: 1]
	UserWidget* DeathBoxUI;//[Offset: 0x578, Size: 8]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x598, Size: 8]
	STExtraBaseCharacter* PendingKillCharacter;//[Offset: 0x5b0, Size: 8]
	int NativeWidgetID;//[Offset: 0x5c0, Size: 4]
	bool bForceRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 1]
	bool isUsingDynamicZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c5, Size: 1]
	void SetShowDeathMark(bool bShow);// 0x3ed9720
	void SetPlayerCharacter(STExtraPlayerController* Controller, int idx);// 0x3ed9668
	void RefreshWeaponIconStatusDetail(out const ItemDefineID DefineItem);// 0xffffff8f20d162a8
	void RefreshWeaponBulletStatus(bool bHasBullet);// 0xffffff8f20d162a8
	void RefreshTrainingWidget(PlayerInfoInOB PlayerInfo);// 0x3ed94d0
	void RefreshPlayerHealth(float hpRatio, float breathRatio, bool IsNearDeath);// 0x3ed93d0
	void RefreshOpenWeaponIconStatus(bool IsOpen);// 0xffffff8f20d162a8
	void RefreshDistance(int Distance, float fovDistance);// 0x3ed9310
	void ReceiveUseWeseeStyle(out const enum RelationshipWithTarget);// 0x3ed927c
	void OpenShowWeaponIcon();// 0x3ed9268
	void OnPlayerLiveStateChanged();// 0x3ed9254
	void OnItemClicked();// 0x3ed9240
	void OnCharacterSpawned(STExtraBaseCharacter* Character);// 0x3ed91c4
	void HandleWeaponChange();// 0x3ed91b0
	void HandleCheckCurWeaponBulletChange();// 0x3ed919c
	static int GetWidgetID();// 0x3ed9178
	void CloseShowWeaponIcon();// 0x3ed9164
	void CheckOwnWeaponStatus();// 0x3ed9150

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0x158, Size: 80]
	FName LeftLogicSocketName;//[Offset: 0x1a8, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x1b0, Size: 8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x1b8, Size: 80]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x208, Size: 80]
	<FName,class STExtraWeapon> SoftGrenadeLogicSocketToWeaponClassMap;//[Offset: 0x258, Size: 80]
	int[] BagLevel1IDList;//[Offset: 0x2a8, Size: 16]
	int[] BagLevel2IDList;//[Offset: 0x2b8, Size: 16]
	int[] BagLevel3IDList;//[Offset: 0x2c8, Size: 16]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x2d8, Size: 4]
	bool bIgnoreCheckLockTakeOutWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	int LockTakeOutWeaponMsgID;//[Offset: 0x2e0, Size: 4]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	FName CurUseWeaponLogicSocket;//[Offset: 0x2e8, Size: 8]
	STExtraWeapon* CachedCurUseWeapon;//[Offset: 0x2f0, Size: 8]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x2f8, Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	FName LastUseDiffSlotLogicSlot;//[Offset: 0x308, Size: 8]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x310, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x318, Size: 8]
	byte LastUseLogicSlotRep;//[Offset: 0x320, Size: 1]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 1]
	bool bLockTakeOutWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 1]
	byte[] LockTakeOutWeapon_WhitePropSlotList;//[Offset: 0x328, Size: 16]
	int[] LockTakeOutWeapon_WhitePropTypeSpecificIDList;//[Offset: 0x338, Size: 16]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x348, Size: 16]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x358, Size: 16]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x368, Size: 16]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x378, Size: 16]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x388, Size: 16]
	delegate OnClientHasFinishedCreateWeaponDelegate;//[Offset: 0x398, Size: 16]
	delegate SimulatedWeaponChangedDelegate;//[Offset: 0x3a8, Size: 16]
	float WeaponCreateSeqLastTime;//[Offset: 0x3c8, Size: 4]
	int WeaponCreateSeqStuckPickUpCount;//[Offset: 0x3cc, Size: 4]
	<FString,bool> TakeOutWeaponLockKeyMap;//[Offset: 0x3d0, Size: 80]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x428, Size: 80]
	<FName,ItemDefineID> GrenadeLogicSlotAndDefineIDData;//[Offset: 0x478, Size: 80]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x4c8, Size: 16]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x4f8, Size: 16]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x508, Size: 64]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x548, Size: 64]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x588, Size: 64]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x5c8, Size: 64]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x608, Size: 64]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientTempSpecialWeapon;//[Offset: 0x648, Size: 64]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientShiftGrenadeWeapon;//[Offset: 0x688, Size: 64]
	SimulateWeaponDataMgr SimulateWeaponDataMgr;//[Offset: 0x6c8, Size: 16]
	SimulateWeaponDataMgr LocalCachedSimulateWeaponDataMgr;//[Offset: 0x6d8, Size: 16]
	int8 BagLevel;//[Offset: 0x6e8, Size: 1]
	int8 LocalCachedBagLevel;//[Offset: 0x6e9, Size: 1]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x6f0, Size: 8]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x6f8, Size: 8]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x700, Size: 8]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x708, Size: 8]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x710, Size: 8]
	FName SwitchTargetLogicSocket;//[Offset: 0x718, Size: 8]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x750, Size: 8]
	<FName,STExtraWeapon*> OldInventoryData;//[Offset: 0x758, Size: 80]
	WeaponSystemDataOnSimulateClient DefWeaponSystemDataOnSimulateClient;//[Offset: 0x7d8, Size: 64]
	STExtraWeapon* LocalSimulateTakeOutWeapon;//[Offset: 0x828, Size: 8]
	void UpdateOwnerClientCreateWeapon();// 0x41fef24
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x41fee64
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x41fee50
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0xffffff8f20d162a8
	void SimulatedWeaponSightChangedDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x41fed90
	void SetAllWeaponVisable(bool isShow);// 0x41fed0c
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x41fec90
	void PushAutoTriggerWeaponEventTaskWhenEquipWeapon(out const AutoTriggerWeaponEventParam Param, bool bClearAllOldAutoTriggerWeaponTasks);// 0x41feb88
	void PreSwitchWeaponEnd();// 0x41feb6c
	void OnRep_WeaponSystemDataOnSimulateTempSpecialWeapon();// 0x41feb58
	void OnRep_WeaponSystemDataOnSimulateShiftGrenadeWeapon();// 0x41feb44
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x41feb30
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x41feb1c
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x41feb08
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x41feaf4
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x41feae0
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x41fea64
	void OnRep_SimulateWeaponDataMgr(SimulateWeaponDataMgr OldData);// 0x41fe95c
	void OnRep_LockTakeOutWeapon(bool bOldVal);// 0x41fe8d8
	void OnRep_CurrentWeaponReplicated();// 0x41fe8c4
	void OnRep_CurrentWeaponLogicSocket();// 0x41fe8b0
	void OnRep_CurrentShieldWeaponReplicated();// 0x41fe89c
	void OnRep_BagLevel();// 0x41fe880
	void OnReconnectOnServer();// 0x41fe864
	void OnReconnectOnClient();// 0x41fe848
	void OnClientHasFinishedCreateWeaponDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void LogInventoryDataInfo();// 0x41fe834
	void LocalSwapWeaponByPropSlotFinished(byte Slot1, byte Slot2);// 0x41fe774
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x41fe664
	void LocalStartSimulateTakeOut();// 0x41fe650
	void LocalSimulateTakeOutEnd();// 0x41fe63c
	void LocalForceFinishSwitchWeapon();// 0x41fe628
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x41fe614
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x41fe600
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0xffffff8f20d162a8
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x41fe5dc
	bool IsRecoveringWeaponOnServer();// 0x41fe5a4
	bool IsCreatingWeaponOnServer();// 0x41fe56c
	void HandleGetWeaponFinished(byte Slot);// 0x41fe4e8
	FString GetWeaponNameByWeaponID(int inWeaponID);// 0x41fe418
	STExtraWeapon*[] GetShootWeaponList();// 0x41fe398
	FName GetShieldWeaponSlot();// 0x41fe364
	STExtraWeapon* GetShieldWeapon();// 0x41fe330
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x41fe2a4
	FName GetLogicSocketBySlot(byte Slot);// 0x41fe218
	STExtraWeapon* GetLastUsedWeapon();// 0x41fe1e0
	STExtraWeapon* GetLastUsedNoneGrenadeWeapon();// 0x41fe1a8
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x41fe11c
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x41fe090
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x41fe004
	byte GetGrenadeTypeOfWeapon(STExtraWeapon* Weapon);// 0x41fdf78
	FString GetGrenadeTimerIconOfWeapon(STExtraWeapon* Weapon);// 0x41fdea8
	int GetGrenadeSkillById(ItemDefineID ID);// 0x41fde0c
	FString GetGrenadeIconOfWeapon(STExtraWeapon* Weapon);// 0x41fdd3c
	ItemDefineID GetGrenadeDefindIDBySlot(FName LogicSlot);// 0x41fdca0
	STExtraWeapon* GetCurrentUsingWeapon();// 0x41fdc6c
	byte GetCurrentUsingPropSlot();// 0x41fdc38
	FName GetCurrentUsingLogicSocketOnServer();// 0x41fdc04
	FName GetCurrentUsingLogicSocket();// 0x41fdbd0
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x41fdb9c
	int GetBagLevelBySpesificID(int ID);// 0x41fdb10
	int GetBagLevel();// 0x41fdad4
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x41fd9fc
	ItemDefineID[] GetAllInventoryWeaponIDList(bool bForceUseMapData);// 0x41fd924
	void ForceUpdateWeaponPoseByBagLevelOnServer();// 0x41fd908
	bool ForceStopWeaponCreateSeqAndRecoverByWeaponReconnectOnServer();// 0x41fd8c8
	void ForceBroadcastChangeInventoryDataEvent(byte Slot);// 0x41fd84c
	void ForceBroadcastChangeCurrentDataEvent();// 0x41fd838
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x41fd824
	void EnableAllBroadcast(bool bEnable);// 0x41fd7a4
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x41fd6e4
	void DeleteGrenadeSlotAndDefindID(FName LogicSlot);// 0x41fd668
	void DebugReconnectToClientOnServer();// 0x41fd654
	void DebugDisconnetToServerOnClient();// 0x41fd640
	void ClearAllInventoryData();// 0x41fd624
	void ClearAllAutoTriggerWeaponEventTasks();// 0x41fd594
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot);// 0xffffff8f20d162a8
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0xffffff8f20d162a8
	void ChangeCurrentUsingWeaponAfterWeaponsSpawnedOnServer(byte Slot);// 0x41fd518
	void AddOrSetGrenadeSlotAndDefindID(FName LogicSlot, ItemDefineID ID);// 0x41fd44c

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 8]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ClientResetBulletNum;//[Offset: 0x34, Size: 4]
	int OperationIndex;//[Offset: 0x38, Size: 4]
	Character* OwnerCharacter;//[Offset: 0x40, Size: 8]
	FString OwnerCharacterName;//[Offset: 0x48, Size: 16]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	uint32 OwnerNetGUID;//[Offset: 0x5c, Size: 4]
	FName SpesificLogicGrenadeSlot;//[Offset: 0x60, Size: 8]
	Actor* CustomEquipAttachActor;//[Offset: 0x68, Size: 8]

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 8]
	byte Slot;//[Offset: 0x10, Size: 1]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	int OperationIndex;//[Offset: 0x30, Size: 4]
	Actor* CustomEquipAttachActor;//[Offset: 0x38, Size: 8]

--------------------------------
Class: SimulateWeaponDataMgr
	WeaponSystemDataOnSimulateClient[] WeaponSystemDataList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AutoTriggerWeaponEventParam
	int TargetOwnerRole;//[Offset: 0x0, Size: 4]
	enum TargetEvent;//[Offset: 0x4, Size: 1]
	ItemDefineID TargetWeaponID;//[Offset: 0x8, Size: 24]
	bool bIgnoreItemIDInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	enum[] ForceExitPawnStateList;//[Offset: 0x28, Size: 16]
	float DelayTimeBeforeDoTask;//[Offset: 0x38, Size: 4]

--------------------------------
Class: FrameCaptureActor.Actor.Object
	GameGuardFrameCapture* FrameCapture;//[Offset: 0x3e8, Size: 8]
	delegate DownloadCompleteEvent;//[Offset: 0x3f0, Size: 16]
	FString LastUploadFileName;//[Offset: 0x400, Size: 16]
	STExtraWeapon*[] CacheWeapons;//[Offset: 0x410, Size: 16]
	STExtraPlayerController* MainRolePlayer;//[Offset: 0x420, Size: 8]
	STExtraBaseCharacter* MainRole;//[Offset: 0x428, Size: 8]
	float PastWeaponShootTime;//[Offset: 0x430, Size: 4]
	float OutOfCombatTime;//[Offset: 0x434, Size: 4]
	int KillNumThreshold;//[Offset: 0x438, Size: 4]
	int AlivePlayers;//[Offset: 0x43c, Size: 4]
	bool IsEnableCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	FString RealFilePath;//[Offset: 0x448, Size: 16]
	bool UploadCaptureFrames();// 0x3de7030
	void Tick(float DeltaSeconds);// 0x3de6fac
	void SetUploadPath();// 0x3de6f98
	void OnFrameSaved();// 0x3de6f84
	void OnDownloadCompleteEvent__DelegateSignature(bool bSucceeded, FString SourceUrl);// 0xffffff8f20d162a8
	void OnBulletHit(Actor* InHitActor, float ImpactPosDistanceToWeapon, Pawn* Player);// 0x3de6e90
	FString GetSubPath(FString FullName);// 0x3de6d6c
	FString GenerateFileFullPath();// 0x3de6cec
	bool DownloadCaptureFrames();// 0x3de6cb4
	void CreateCapture();// 0x3de6ca0
	void CaptureFrame();// 0xffffff8f20d162a8
	void C2S_OnFramesUploaded(int res, FString URL);// 0x3de6bd4

--------------------------------
Class: GameGuardFrameCapture.Object
	int FetchFrameDelay;//[Offset: 0x30, Size: 4]
	MovieSceneCaptureProtocolSettings* ProtocolSettings;//[Offset: 0x70, Size: 8]
	void Tick();// 0x3df38b0
	void StartCapture();// 0x3df389c
	void Initialize();// 0x3df3888
	void Close();// 0x3df3874

--------------------------------
Class: MovieSceneCaptureProtocolSettings.Object

--------------------------------
Class: WingSyncInfo
	int WingOilCount;//[Offset: 0x0, Size: 4]
	int CurrentWingManID;//[Offset: 0x4, Size: 4]
	bool bFuelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bHasFuelUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	float NextCallTimeAllowed;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WeatherConfigComponent.ActorComponent.Object
	bool UseShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	WeatherInfo WeatherLevelInfo;//[Offset: 0x130, Size: 24]
	FString LastLoadedWeatherLevelName;//[Offset: 0x148, Size: 16]
	FString DefaultWeatherLevelName;//[Offset: 0x158, Size: 16]
	bool bLoadWeatherLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	bool bDefaulLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 1]
	void UnloadStreamLevel(FString LevelName);// 0x4a03020
	void SyncWeatherLevelInfo();// 0x4a0300c
	void OnUnLoadStreamLevelCompleted();// 0x4a02ff8
	void OnRep_WeatherSyncCount();// 0x4a02fe4
	void OnLoadStreamLevelCompleted();// 0x4a02fd0
	void LoadWeatherLevel();// 0x4a02fbc
	void LoadStreamLevel(FString LevelName, int WeatherID);// 0x4a02ea8
	void LoadDefaultWeatherLevel();// 0x4a02e94
	void Init();// 0x4a02e78

--------------------------------
Class: TeamAssembleAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 16]
	int PlayerGender;//[Offset: 0x10, Size: 4]
	int SeasonPassCardBuyType;//[Offset: 0x14, Size: 4]
	int SeasonPassCardBuyLevel;//[Offset: 0x18, Size: 4]
	bool NeedShowEnjoyCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int PlatformGender;//[Offset: 0x20, Size: 4]
	int TopSegmentTimes;//[Offset: 0x24, Size: 4]
	int CharmLevel;//[Offset: 0x28, Size: 4]
	bool AllowViewCharmValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int[] WearAvatarList;//[Offset: 0x30, Size: 16]
	int[] WeaponAvatarList;//[Offset: 0x40, Size: 16]
	int[] VehicleAvatarList;//[Offset: 0x50, Size: 16]
	FString TeamLogoID;//[Offset: 0x60, Size: 16]
	int PlaneID;//[Offset: 0x70, Size: 4]
	FString PlaneName;//[Offset: 0x78, Size: 16]
	FString VehicleName;//[Offset: 0x88, Size: 16]
	bool bDisplayWingMan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool bIsTopCharmPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]

--------------------------------
Class: OccupationManagerComponent.ActorComponent.Object
	UAESkillManagerComponent* WeakSkillManagerPtr;//[Offset: 0x128, Size: 8]
	byte OccupationLevel;//[Offset: 0x130, Size: 1]
	byte OldOccupationLevel;//[Offset: 0x131, Size: 1]
	int OccupationID;//[Offset: 0x134, Size: 4]
	OccupationSkillConfig[] OccupationSkillsConfig;//[Offset: 0x138, Size: 16]
	int TipTimeInterval;//[Offset: 0x150, Size: 4]
	void RecordSavePersonAddHealthData();// 0x3ee35c4
	void RecordSavePersonAccelateData();// 0x3ee35b0
	void RecordReduceMedicalCastTime();// 0x3ee359c
	void OnSkillActive(int Index, bool bActive);// 0x3ee34dc
	void OnRep_WeakSkillManagerPtr();// 0x3ee34c8
	void OnRep_OccupationLevel(byte OldOccupationLevelValue);// 0x3ee344c
	void OnCharacterDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x3ee31e4
	void ModifyOccupationLevel(int DiffValue);// 0x3ee3168

--------------------------------
Class: UAESkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	SkillPreloadDataAsset* SkillPreloadDataAsset;//[Offset: 0x8c8, Size: 8]
	UTSkillEntryConfig[] SkillEntryConfigs;//[Offset: 0x8d0, Size: 16]
	byte TriggerSkillEventFromRole;//[Offset: 0x8e4, Size: 1]
	GSListenerBase* CurrentGSListener;//[Offset: 0x8e8, Size: 8]
	UAESkillStringEventEffectMapForEditor*[] TriggerSkillListenerByString;//[Offset: 0x8f0, Size: 16]
	UAESkillEventEffectMapForEditor*[] TriggerSkillListenerByUAEEume;//[Offset: 0x900, Size: 16]
	UTSkillEventEffectMapForEditor*[] TriggerSkillListenerByUTEume;//[Offset: 0x910, Size: 16]
	UAEGSLisenterEffectMapForEditor*[] TriggerSkillListenerByGS;//[Offset: 0x920, Size: 16]
	int CardChangeProtectTime;//[Offset: 0x948, Size: 4]
	void TriggerStringEvent(int SkillID, FString EventTypeStr);// 0x41936dc
	void TriggerSkillEvent_RPC_UTSkillEventType(byte InEventEume, int SkillUID, byte fromRole);// 0x41935e0
	void TriggerSkillEvent_RPC_String(FString InEventName, int SkillUID, byte fromRole);// 0x41934d8
	void TriggerSkillEvent_RPC_EUAESkillEvent(byte InEventEume, int SkillUID, byte fromRole);// 0x41933dc
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x419331c
	void ServerTriggerStringEvent(int SkillUID, FString EventTypeStr);// 0x4193220
	void ServerTriggerSkillEvent(ItemDefineID ItemDefineID, byte EventType);// 0x4193114
	void ServerTriggerCurSkillEvent(byte UAEEvent, int SkillUID);// 0x4193024
	void OnGsListenerTrigger(GSListenerBase* Listener);// 0x4192fa8
	void OnEventPlayerAction(out const FName InAction, Actor* InEventActor);// 0x4192ed4
	bool IsCastingSkillIndex(int SkillIndex);// 0x4192e44
	bool InitOneSkill(class UTSkill skillTemplate, int SkillIndex, bool bActive);// 0x4192d2c
	UTSkill* GetSkillByEntry(enum entry);// 0x4192c98
	float GetRestCoolDownTime(int SkillID);// 0x4192c04
	byte GetRealOwnerRoleSafety();// 0x4192bc8

--------------------------------
Class: SkillPreloadDataAsset.DataAsset.Object
	<FString,SkillPreloadInfo> SkillPreloadMap;//[Offset: 0x30, Size: 80]

--------------------------------
Class: SkillPreloadInfo
	class UTSkill[] PreloadSkillArray;//[Offset: 0x0, Size: 16]
	bool bIsOnlyHighLevelDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FString Remarks;//[Offset: 0x18, Size: 16]

--------------------------------
Class: UTSkillEntryConfig
	enum entry;//[Offset: 0x0, Size: 1]
	int SkillIndex;//[Offset: 0x4, Size: 4]
	FString Interrupts;//[Offset: 0x8, Size: 16]

--------------------------------
Class: UAESkillStringEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	FString EventString;//[Offset: 0x1b8, Size: 16]

--------------------------------
Class: UAESkillEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte UAESkillEventType;//[Offset: 0x1b8, Size: 1]

--------------------------------
Class: UAEGSLisenterEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	SkillGSLisenterWarpper GSLisenter;//[Offset: 0x1b8, Size: 8]
	bool bIsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]

--------------------------------
Class: SkillGSLisenterWarpper
	GSListenerBase* ListenerBase;//[Offset: 0x0, Size: 8]

--------------------------------
Class: OccupationSkillConfig
	class UTSkill* SkillClass;//[Offset: 0x0, Size: 40]
	int SkillUIHandle;//[Offset: 0x28, Size: 4]
	byte SkillActiveLevel;//[Offset: 0x2c, Size: 1]
	int SkillGroupIndex;//[Offset: 0x30, Size: 4]

--------------------------------
Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	int CircleIndex;//[Offset: 0x540, Size: 4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x544, Size: 28]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x560, Size: 28]
	bool UseSwitchWeaterByIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	BlendWeatherCfg[] BlendWeatherList;//[Offset: 0x580, Size: 16]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x590, Size: 40]
	float TickOBPlayerCD;//[Offset: 0x5b8, Size: 4]
	float TickWeatherFogCD;//[Offset: 0x5bc, Size: 4]
	float TickLocalWeatherIndexCD;//[Offset: 0x5c0, Size: 4]
	bool UseWeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 1]
	DynamicWeatherController* SrcController;//[Offset: 0x5c8, Size: 8]
	DynamicWeatherController* DstController;//[Offset: 0x5d0, Size: 8]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x5d8, Size: 8]
	STExtraPlayerController* LocalPlayerController;//[Offset: 0x5e0, Size: 8]
	bool UseLocalWeatherChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 1]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e9, Size: 1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x5f0, Size: 248]
	int CurrentWeatherIndex;//[Offset: 0x6ec, Size: 4]
	int LastWeatherIndex;//[Offset: 0x6f0, Size: 4]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x6f8, Size: 16]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x708, Size: 16]
	void LocalGotoNextWeather();// 0x3d85980
	void BlendWeatherByIndex(int Index);// 0x3d85904
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x3d85880

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x3e8, Size: 80]
	int CurUseFixWeatherIndex;//[Offset: 0x438, Size: 4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x43c, Size: 28]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x458, Size: 80]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x4a8, Size: 28]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x4c4, Size: 28]
	float ServerElapsedTime;//[Offset: 0x4e0, Size: 4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	enum NextWeatherStatus;//[Offset: 0x4e9, Size: 1]
	float NextWeatherCountDownTime;//[Offset: 0x4ec, Size: 4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x4f8, Size: 16]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	STExtraGameStateBase* GameState;//[Offset: 0x520, Size: 8]
	enum UICountDownType;//[Offset: 0x53a, Size: 1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53b, Size: 1]
	void StartTransition();// 0x3d86864
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x3d867e8
	void RPCRequireControl();// 0x3d867d4
	void RPCRequire();// 0x3d867c0
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x3d8673c
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x3d86720
	void ReinitInDemoReplay();// 0x3d8670c
	void RefreshWeatherPredictionUI();// 0x3d866f8
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x3d86668
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x3d865d8
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x3d86548
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x3d864b8
	void OnRep_NextWeatherCountDownTime();// 0x3d864a4
	void OnRep_ControllerDataForReplay();// 0x3d86490
	void OnRep_ControllerData();// 0x3d8647c
	void OnRep_bEnableWeatherPredictionUI();// 0x3d86468
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0xffffff8f20d162a8
	void HandleClientHasReactivated();// 0x3d86454
	void GotoSpecificWeather(int WeatherIndex);// 0x3d863d8
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x3d862f8
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x3d86258
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x3d861cc
	float GetInProgressElapsedTimeSecWithWeather();// 0x3d86198
	float GetGlobalWeatherSystemTimeOnServer();// 0x3d86164
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x3d8612c
	void ForceStopDynamicWeatherChangeOnServer();// 0x3d86118
	void ForceStartNextWeatherChangeOnServer();// 0x3d86104
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x3d8605c

--------------------------------
Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0, Size: 1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float ElapsedTime;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float SaturateTime;//[Offset: 0x10, Size: 4]
	float TimeMultiplier;//[Offset: 0x14, Size: 4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]

--------------------------------
Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0, Size: 4]
	float StartTimeMax;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float DurationTimeMin;//[Offset: 0x10, Size: 4]
	float DurationTimeMax;//[Offset: 0x14, Size: 4]
	enum LastWeatherStatus;//[Offset: 0x18, Size: 1]
	float LastWeatherAppearTime;//[Offset: 0x1c, Size: 4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x28, Size: 16]
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x38, Size: 16]
	float TimeMultiplier;//[Offset: 0x48, Size: 4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	bool bUseRealDateTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 1]

--------------------------------
Class: WeatherChangeWeight
	enum NewWeatherStatus;//[Offset: 0x0, Size: 1]
	float weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeatherChangeSequenceItem
	enum WeatherStatus;//[Offset: 0x0, Size: 1]
	float StartTime;//[Offset: 0x4, Size: 4]
	float TotalDurationTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float WeatherChangeStartTime;//[Offset: 0x4, Size: 4]
	float ElapsedTime;//[Offset: 0x8, Size: 4]
	enum NextWeather;//[Offset: 0xc, Size: 1]
	float NextDuration;//[Offset: 0x10, Size: 4]
	float WeatherTotalWeight;//[Offset: 0x14, Size: 4]
	float TimelineOffset;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BlendWeatherCfg
	enum WeatherType;//[Offset: 0x0, Size: 1]
	float Duration;//[Offset: 0x4, Size: 4]
	float BlendTime;//[Offset: 0x8, Size: 4]
	bool ModifySkySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool ModifySkySwitchColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool ModifyFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool ModifyMainLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool ModifySkyLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool UseChangeRenderSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool UseChangeFogActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool UseChangeSkySwitchActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool UseChangeSkySphereActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: ScreenAppearanceCfg
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString ScreenAppearanceName;//[Offset: 0x8, Size: 16]
	byte ParticleType;//[Offset: 0x18, Size: 1]
	float ScreenAppearanceConcentration;//[Offset: 0x1c, Size: 4]
	FName ShaderName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: DynamicWeatherController.ActorComponent.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0x120, Size: 16]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0x130, Size: 16]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0x140, Size: 16]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0x150, Size: 16]
	delegate WeatherRecover;//[Offset: 0x160, Size: 16]
	delegate DelegateOnWeatherTickLerp;//[Offset: 0x170, Size: 16]
	enum DynamicWeatherType;//[Offset: 0x180, Size: 1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0x188, Size: 8]
	CurveFloat* LightCurve;//[Offset: 0x190, Size: 8]
	float TargetLightValue;//[Offset: 0x198, Size: 4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	LinearColor FinalAdditionalColor;//[Offset: 0x1a0, Size: 16]
	bool bUseFinalAdditionalColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x1b8, Size: 8]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x1c0, Size: 8]
	bool ForbidTickLerp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	bool ForbidTickLerpSkySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 1]
	bool ForbidTickLerpSkySwitchColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 1]
	bool ForbidLerpFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb, Size: 1]
	bool ForbidLerpFogStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	bool ForbidLerpMainLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	bool ForbidLerpSkyLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 1]
	bool UseLerpSkySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf, Size: 1]
	bool UseLerpSkySwitchColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool UseLerpFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	bool UseMainLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 1]
	bool UseSkyLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d3, Size: 1]
	bool UseSetFogActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	bool UseSetSkySwitchActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5, Size: 1]
	bool UseSetSkySphereActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d6, Size: 1]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x1d8, Size: 8]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x1e0, Size: 8]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x1e8, Size: 8]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x1f0, Size: 8]
	float UINotifyTimeBeforeStart;//[Offset: 0x1f8, Size: 4]
	FString UINotifyModuleName;//[Offset: 0x200, Size: 16]
	int UINotifyIDBeforeStart;//[Offset: 0x210, Size: 4]
	int ChangeStartUINotifyID;//[Offset: 0x214, Size: 4]
	int ChangeQuitUINotifyID;//[Offset: 0x218, Size: 4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x21c, Size: 4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x220, Size: 8]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x228, Size: 8]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x230, Size: 8]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x23c, Size: 28]
	float RuningDirection;//[Offset: 0x258, Size: 4]
	float RuningTime;//[Offset: 0x25c, Size: 4]
	float LerpTotalTime;//[Offset: 0x260, Size: 4]
	FString WeatherName;//[Offset: 0x268, Size: 16]
	DirectionalLight* MainLight;//[Offset: 0x278, Size: 8]
	SkyLight* SkyLight;//[Offset: 0x280, Size: 8]
	ExponentialHeightFog* Fog;//[Offset: 0x288, Size: 8]
	Actor* SkySphere;//[Offset: 0x290, Size: 8]
	WeatherObject ObjectValues;//[Offset: 0x298, Size: 104]
	WeatherObject WeatherObjectSrc;//[Offset: 0x300, Size: 104]
	float SrcLightValue;//[Offset: 0x368, Size: 4]
	WeatherObject WeatherObjectLerp;//[Offset: 0x36c, Size: 104]
	LinearColor SrcFinalAdditionalColor;//[Offset: 0x3d4, Size: 16]
	float SrcDefaultLightValue;//[Offset: 0x3e4, Size: 4]
	LinearColor SrcDefaultFinalAdditionalColor;//[Offset: 0x3e8, Size: 16]
	float SrcCurrentLightValue;//[Offset: 0x3f8, Size: 4]
	LinearColor SrcCurrentFinalAdditionalColor;//[Offset: 0x3fc, Size: 16]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x40c, Size: 12]
	Vector FogActorDefaultLoc;//[Offset: 0x41c, Size: 12]
	Vector FogActorRelativeLoc;//[Offset: 0x428, Size: 12]
	Vector MainLightActorDefaultLoc;//[Offset: 0x434, Size: 12]
	Vector MainLightActorRelativeLoc;//[Offset: 0x440, Size: 12]
	Vector SkyLightActorDefaultLoc;//[Offset: 0x44c, Size: 12]
	Vector SkyLightActorRelativeLoc;//[Offset: 0x458, Size: 12]
	Vector SkySphereActorDefaultLoc;//[Offset: 0x464, Size: 12]
	Vector SkySphereActorRelativeLoc;//[Offset: 0x470, Size: 12]
	void UINotifyCallbackOnServer();// 0x3d833ac
	void SetSkySwitchActorLocation();// 0x3d83390
	void SetSkySphereActorLocation();// 0x3d83374
	void SetFogActorLocation();// 0x3d83358
	void SetCurrentBlendValue();// 0x3d83344
	void RestoreSkySwitchActorLocation();// 0x3d83328
	void RestoreSkySphereActorLocation();// 0x3d8330c
	void RestoreFogActorLocation();// 0x3d832f0
	void OnUserQualitySettingChanged(int renderlevel);// 0x3d8326c
	void HandleLerp(float LerpVal);// 0x3d831e8

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x3e8, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	void OnRep_bEnabled();// 0x66a42b0

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x2bc, Size: 4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x2c0, Size: 16]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	float CustomFogLow_Height;//[Offset: 0x2d4, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x2d8, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x2dc, Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x2ec, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x2f0, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x2f4, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x304, Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x318, Size: 8]
	float InscatteringColorCubemapAngle;//[Offset: 0x320, Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x324, Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x334, Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x338, Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x33c, Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x340, Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x344, Size: 16]
	float FogHeightFalloff;//[Offset: 0x354, Size: 4]
	float FogMaxOpacity;//[Offset: 0x358, Size: 4]
	float StartDistance;//[Offset: 0x35c, Size: 4]
	float FogCutoffDistance;//[Offset: 0x360, Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x368, Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x36c, Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x370, Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x380, Size: 4]
	float VolumetricFogDistance;//[Offset: 0x384, Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x388, Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	float VolumetricFogStartDistance;//[Offset: 0x390, Size: 4]
	Texture2D* VolumetricFogNoiseTexture;//[Offset: 0x398, Size: 8]
	Transform VolumetricFogNoiseTransform;//[Offset: 0x3a0, Size: 48]
	void SetVolumetricFogStartDistance(float NewValue);// 0x66a53dc
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x66a5360
	void SetVolumetricFogNoiseTransform(Transform Transform);// 0x66a52bc
	void SetVolumetricFogNoiseTexture(Texture2D* NewValue);// 0x66a5240
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x66a51c4
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x66a5148
	void SetVolumetricFogDistance(float NewValue);// 0x66a50cc
	void SetVolumetricFogAlbedo(Color NewValue);// 0x66a5054
	void SetVolumetricFog(bool bNewValue);// 0x66a4fd0
	void SetStartDistance(float Value);// 0x66a4f54
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x66a4ed8
	void SetInscatteringTextureTint(LinearColor Value);// 0x66a4e5c
	void SetInscatteringColorCubemapAngle(float Value);// 0x66a4de0
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x66a4d64
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x66a4ce8
	void SetFogMaxOpacity(float Value);// 0x66a4c6c
	void SetFogInscatteringColor(LinearColor Value);// 0x66a4bf0
	void SetFogHeightFalloff(float Value);// 0x66a4b74
	void SetFogDensity(float Value);// 0x66a4af8
	void SetFogCutoffDistance(float Value);// 0x66a4a7c
	void SetDirectionalInscatteringStartDistance(float Value);// 0x66a4a00
	void SetDirectionalInscatteringExponent(float Value);// 0x66a4984
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x66a4908
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x66a4850
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x66a4798

--------------------------------
Class: CustomHeightFog
	float Height;//[Offset: 0x0, Size: 4]
	float DensityCoefficient;//[Offset: 0x4, Size: 4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8, Size: 16]

--------------------------------
Class: WeatherObject
	float MainLight_Density;//[Offset: 0x0, Size: 4]
	LinearColor MainLight_Color;//[Offset: 0x4, Size: 16]
	float MainLight_Temperature;//[Offset: 0x14, Size: 4]
	Rotator MainLight_Rotation;//[Offset: 0x18, Size: 12]
	float SkyLight_Density;//[Offset: 0x24, Size: 4]
	LinearColor SkyLight_Color;//[Offset: 0x28, Size: 16]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x3c, Size: 16]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x50, Size: 16]
	float HeightFallOff;//[Offset: 0x60, Size: 4]
	float StartDistance;//[Offset: 0x64, Size: 4]

--------------------------------
Class: WeatherDetailStatus
	enum CurrentWeather;//[Offset: 0x0, Size: 1]
	float CurrentElapsedTime;//[Offset: 0x4, Size: 4]
	float TotalTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherFogCfg
	enum[] WeatherTypeList;//[Offset: 0x0, Size: 16]
	ExponentialHeightFog* Fog;//[Offset: 0x10, Size: 8]
	DynamicFogCustomParam DstWeatherFog;//[Offset: 0x18, Size: 88]
	DynamicFogCustomParam SrcWeatherFog;//[Offset: 0x70, Size: 88]
	float BlendTime;//[Offset: 0xc8, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0xd0, Size: 8]
	bool BlendFogDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool BlendCustomFogLow_DensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool BlendCustomFogHigh_DensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool BlendCustomFogLow_Color;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	bool BlendCustomFogHigh_Color;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool BlendFogInscatteringColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool BlendFogHeightFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool BlendFogMaxOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	bool BlendStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool BlendFogCutoffDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0xe8, Size: 16]

--------------------------------
Class: DynamicFogCustomParam
	float FogDensity;//[Offset: 0x0, Size: 4]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float CustomFogLow_Height;//[Offset: 0x8, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x10, Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x20, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x24, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x28, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x38, Size: 16]
	float FogHeightFalloff;//[Offset: 0x48, Size: 4]
	float FogMaxOpacity;//[Offset: 0x4c, Size: 4]
	float StartDistance;//[Offset: 0x50, Size: 4]
	float FogCutoffDistance;//[Offset: 0x54, Size: 4]

--------------------------------
Class: PlayerKeyDstWeather
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 8]
	float CurWeatherDuration;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	Vector AirplaneStartLoc;//[Offset: 0x5ac, Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0x5b8, Size: 12]
	AirDropPathData3D AirDropPathData;//[Offset: 0x5c8, Size: 72]
	Vector AirplaneCanJumpLoc;//[Offset: 0x610, Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0x61c, Size: 12]
	Vector AirplaneCanJumpLocForCamp;//[Offset: 0x628, Size: 12]
	Vector AirplaneForceJumpLocForCamp;//[Offset: 0x634, Size: 12]
	delegate PlayerEnterPlane;//[Offset: 0x640, Size: 16]
	delegate PlayerLeavePlane;//[Offset: 0x650, Size: 16]
	int CurrentBuildCount;//[Offset: 0x660, Size: 4]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0x668, Size: 8]
	AssetPreLoadingComponent* AssetPreLoadingComponent;//[Offset: 0x670, Size: 8]
	float UniformResolutionSizeX;//[Offset: 0x680, Size: 4]
	bool TestSkipMaxKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 1]
	int BaseShowMaxKillerNum;//[Offset: 0x688, Size: 4]
	GameStateConfigParam GameStateConfigParam;//[Offset: 0x68c, Size: 1]
	bool bPreloadBulletHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 1]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68e, Size: 1]
	CircleInfo CurCircleInfo;//[Offset: 0x690, Size: 52]
	int CircleInvertIndex;//[Offset: 0x6d0, Size: 4]
	delegate OnCircleInvertIndexChange;//[Offset: 0x6d8, Size: 16]
	bool bUseOptimizedGISTicks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	TickControlComponent* GISTickManager;//[Offset: 0x6f0, Size: 8]
	GISActorManager* pGISManager;//[Offset: 0x6f8, Size: 8]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x704, Size: 4]
	float ExtraRadius;//[Offset: 0x708, Size: 4]
	uint32 MaxKillerPlayerKey;//[Offset: 0x70c, Size: 4]
	AirAttackOrder AirAttackOrder;//[Offset: 0x718, Size: 64]
	Vector AirAttackArea;//[Offset: 0x758, Size: 12]
	<int,CallBlackAirAttackOrder> CallBlackAirAttackInfoMap;//[Offset: 0x768, Size: 80]
	delegate OnSafeZoneTips;//[Offset: 0x7b8, Size: 16]
	delegate OnBlueCirclePreWarning;//[Offset: 0x7c8, Size: 16]
	delegate OnBlueCircleRun;//[Offset: 0x7d8, Size: 16]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x7e8, Size: 16]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x7f8, Size: 16]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x808, Size: 16]
	delegate VehicleDestroyedDelegate;//[Offset: 0x818, Size: 16]
	delegate STExtraCharacterPostInitComponentDelegate;//[Offset: 0x828, Size: 16]
	delegate STExtraCharacterDestroyed;//[Offset: 0x838, Size: 16]
	delegate OnGameStateEndPlay;//[Offset: 0x848, Size: 16]
	delegate OnRepGameClass;//[Offset: 0x858, Size: 16]
	delegate OnOverrideClickBackToLobby;//[Offset: 0x868, Size: 16]
	delegate OnGameStateBaseStateChange;//[Offset: 0x878, Size: 16]
	int PlayerNum;//[Offset: 0x898, Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89c, Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x8a0, Size: 16]
	delegate OnBeKilledNumChange;//[Offset: 0x8b0, Size: 16]
	delegate OnGameEnd;//[Offset: 0x8c0, Size: 16]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	bool bNeedInitKillInfoPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d1, Size: 1]
	int GameType;//[Offset: 0x8d4, Size: 4]
	int SubGameType;//[Offset: 0x8d8, Size: 4]
	bool bHasSignalBarReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 1]
	CakeInfo CakeInfo;//[Offset: 0x8e0, Size: 32]
	GameSwitchControll[] GameSwitchList;//[Offset: 0x900, Size: 16]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x912, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x913, Size: 1]
	bool bForbidAirAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x914, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x915, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x916, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x917, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 1]
	bool bLimitedCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x919, Size: 1]
	bool BattleVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91a, Size: 1]
	int[] forbitPickItemTypeList;//[Offset: 0x920, Size: 16]
	int[] limitedClothItemTypeList;//[Offset: 0x930, Size: 16]
	int appleGrenadeID;//[Offset: 0x940, Size: 4]
	int appleGrenadeCount;//[Offset: 0x944, Size: 4]
	int TrainingCountdownTimer;//[Offset: 0x948, Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94c, Size: 1]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94d, Size: 1]
	bool bIsHasInfiniteBulletsMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94e, Size: 1]
	bool bWeaponIgnoreTeammatesCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94f, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x951, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x954, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x958, Size: 4]
	bool bDisableShowTombBoxPickData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 1]
	bool bDisablePawnBulletImpactFxByNoDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95d, Size: 1]
	class WeaponSlotManager* WeaponSlotManagerTemplateHardRef;//[Offset: 0x960, Size: 8]
	class WeaponSlotManager* WeaponSlotManagerTemplate;//[Offset: 0x968, Size: 40]
	WeaponSlotManager* WeaponSlotManagerInstance;//[Offset: 0x990, Size: 8]
	delegate OnAirAttack;//[Offset: 0x998, Size: 16]
	delegate OnBlackAirAttack;//[Offset: 0x9a8, Size: 16]
	delegate OnBlackAirAttackUIMapScaleChanged;//[Offset: 0x9b8, Size: 16]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c8, Size: 1]
	bool IsCanPlaceBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c9, Size: 1]
	bool IsCanBecomeZombie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ca, Size: 1]
	<Vector,int> BossLocationToID;//[Offset: 0x9d0, Size: 80]
	<int,int> ZombieAirDropIconID;//[Offset: 0xa20, Size: 80]
	bool bEnableMapTeammateMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70, Size: 1]
	<int,Actor*> ZombieAirDropWarningActors;//[Offset: 0xa78, Size: 80]
	bool bEnableSignalSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac8, Size: 1]
	FString EnableSignalSystemConfigKey;//[Offset: 0xad0, Size: 16]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 1]
	bool IsShowDeadBoxGreenLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae1, Size: 1]
	bool IsShowDeadBoxGreenSmoke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae2, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae3, Size: 1]
	bool bModifyShelterUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae4, Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0xae8, Size: 48]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0xb18, Size: 8]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 1]
	int ReadyStateTime;//[Offset: 0xb30, Size: 4]
	int LeftEscapeTime;//[Offset: 0xb34, Size: 4]
	int TotalEscapeTime;//[Offset: 0xb38, Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0xb40, Size: 16]
	float ReplicatedWorldRealTimeSeconds;//[Offset: 0xb50, Size: 4]
	float ServerWorldRealTimeSecondsDelta;//[Offset: 0xb54, Size: 4]
	delegate OnRepServerTimeSeconds;//[Offset: 0xb58, Size: 16]
	FString GameModeDisplayName;//[Offset: 0xb70, Size: 16]
	GameModeNameDecorator[] GameModeNameDecorator;//[Offset: 0xb80, Size: 16]
	float EnterReadyRealTime;//[Offset: 0xb90, Size: 4]
	float EnterFightingRealTime;//[Offset: 0xb94, Size: 4]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0xb98, Size: 8]
	FName GameModeState;//[Offset: 0xba0, Size: 8]
	byte CurAirAttackType;//[Offset: 0xbb0, Size: 1]
	int CurAirAttackWave;//[Offset: 0xbb4, Size: 4]
	enum CurAirAttackMode;//[Offset: 0xbb8, Size: 1]
	int AlivePlayerNum;//[Offset: 0xbbc, Size: 4]
	int AliveRealPlayerNum;//[Offset: 0xbc0, Size: 4]
	int AliveTeamNum;//[Offset: 0xbc4, Size: 4]
	int PlayerNumOnPlane;//[Offset: 0xbc8, Size: 4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0xbd0, Size: 16]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0xbe0, Size: 16]
	enum GameModeType;//[Offset: 0xbf0, Size: 1]
	int SeasonIdx;//[Offset: 0xbf4, Size: 4]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0xbf8, Size: 8]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc00, Size: 1]
	bool bIsAllowCloseShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc01, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc02, Size: 1]
	bool bShowVehicleSetting_Helicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc03, Size: 1]
	bool bShowVehicleSetting_UAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc04, Size: 1]
	int PlayerNumPerTeam;//[Offset: 0xc08, Size: 4]
	FString[] OpenTagCullingMaps;//[Offset: 0xc10, Size: 16]
	int[] ExcellentOperationClientModeIDArray;//[Offset: 0xc20, Size: 16]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30, Size: 1]
	<FString,float> BeInvitedPlayers;//[Offset: 0xc78, Size: 80]
	float InviteCountDownTime;//[Offset: 0xcc8, Size: 4]
	CircleDataMining[] CircleDataMining;//[Offset: 0xcd0, Size: 16]
	GameDataMining GameDataMining;//[Offset: 0xce0, Size: 88]
	FString GameModeID;//[Offset: 0xd38, Size: 16]
	int MapId;//[Offset: 0xd48, Size: 4]
	delegate OnGameModeIDReceive;//[Offset: 0xd50, Size: 16]
	int SubModeGroup;//[Offset: 0xd60, Size: 4]
	FString EscapeHelicopterClassTag;//[Offset: 0xd70, Size: 16]
	int[] FinalWinTeams;//[Offset: 0xd80, Size: 16]
	uint32 GameTerminatorPlayerKey;//[Offset: 0xd90, Size: 4]
	LevelEventCenter* LevelEventCenter;//[Offset: 0xd98, Size: 8]
	ImmediateUIManager* ImmediateUIManager;//[Offset: 0xda0, Size: 8]
	UAEBlackboard* BlackBoard;//[Offset: 0xda8, Size: 8]
	bool IsFireworksActOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 1]
	Actor* StartedPlane;//[Offset: 0xdb8, Size: 8]
	delegate GameStateSetPlane;//[Offset: 0xdc0, Size: 16]
	Character* CurCastActorMsgOwner;//[Offset: 0xde0, Size: 8]
	float StartFlyTime;//[Offset: 0xde8, Size: 4]
	int EnableNewStateMachine;//[Offset: 0xe00, Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0xe08, Size: 4]
	int EscapedPlayerNum;//[Offset: 0xe0c, Size: 4]
	FString ModeRelatedBusinessProxyObjectPath;//[Offset: 0xe30, Size: 16]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe40, Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe41, Size: 1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0xe48, Size: 16]
	int[] ImprisonmentTeammateGameType;//[Offset: 0xe58, Size: 16]
	int[] OpenUseNewDuplicateCompGameType;//[Offset: 0xe68, Size: 16]
	RTPCParamInfo[] CustomShootSoundRTPCParamList;//[Offset: 0xe78, Size: 16]
	RTPCParamInfo[] CustomFootstepSoundRTPCParamList;//[Offset: 0xe88, Size: 16]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe98, Size: 1]
	int HitEffectValue;//[Offset: 0xe9c, Size: 4]
	float HitEffectDelayTime;//[Offset: 0xea0, Size: 4]
	Vector HitEffectColor;//[Offset: 0xea4, Size: 12]
	float HitEffectTransparency;//[Offset: 0xeb0, Size: 4]
	int HitFontValue;//[Offset: 0xeb4, Size: 4]
	int HitFontSize_Head;//[Offset: 0xeb8, Size: 4]
	int HitFontOutlineSize_Head;//[Offset: 0xebc, Size: 4]
	Vector HitFontColor_Head;//[Offset: 0xec0, Size: 12]
	Vector HitFontOutlineColor_Head;//[Offset: 0xecc, Size: 12]
	int HitFontSize_Body;//[Offset: 0xed8, Size: 4]
	int HitFontOutlineSize_Body;//[Offset: 0xedc, Size: 4]
	Vector HitFontColor_Body;//[Offset: 0xee0, Size: 12]
	Vector HitFontOutlineColor_Body;//[Offset: 0xeec, Size: 12]
	int HitFleshValue;//[Offset: 0xef8, Size: 4]
	bool bIsShowHitValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefc, Size: 1]
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefd, Size: 1]
	STExtraPlayerController* LocalPC;//[Offset: 0xf00, Size: 8]
	int WrapperLightBeamEnabled;//[Offset: 0xf08, Size: 4]
	FString LightBeamTableName;//[Offset: 0xf10, Size: 16]
	FString LightBeamCfgName;//[Offset: 0xf20, Size: 16]
	FString ModeUICfgName;//[Offset: 0xf30, Size: 16]
	int EnableDebugLightBeam;//[Offset: 0xf40, Size: 4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xf48, Size: 16]
	MarkSyncData[] PopKartMarkDispatchData;//[Offset: 0xf58, Size: 16]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xf68, Size: 16]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xf78, Size: 16]
	MarkSyncData[] PrevLocalMarkDispatchData;//[Offset: 0xf88, Size: 16]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0xf98, Size: 8]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0xfa0, Size: 8]
	SceneRenderActorManager* SceneRenderActorManager;//[Offset: 0xfa8, Size: 8]
	int CountDownTimeThreshold;//[Offset: 0xfb0, Size: 4]
	int RefreshCharmPlayerTimeThreshold;//[Offset: 0xfb4, Size: 4]
	int StopRefreshCharmPlayerTimeThreshold;//[Offset: 0xfb8, Size: 4]
	int RefreshCharmPlayerTimeTolerance;//[Offset: 0xfbc, Size: 4]
	int ShowCharmPlayerCount;//[Offset: 0xfc0, Size: 4]
	int TopCharmPlayerNumber;//[Offset: 0xfc4, Size: 4]
	int TotalCharmPlayerNumber;//[Offset: 0xfc8, Size: 4]
	bool bStartRefreshCharmPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 1]
	bool bEnableRefreshCharmPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd1, Size: 1]
	int LuckyCharmPlayerNumber;//[Offset: 0xfd4, Size: 4]
	float LuckyCharmPlayerProbability;//[Offset: 0xfd8, Size: 4]
	bool bEnableHotStageShowWingMan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfdc, Size: 1]
	int MaxWingManPlayerNumber;//[Offset: 0xfe0, Size: 4]
	bool HasInspector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe4, Size: 1]
	PlayerDetailInfo[] WingManPlayerDetailList;//[Offset: 0xfe8, Size: 16]
	PlayerDetailInfo[] LuckyCharmPlayerDetailList;//[Offset: 0xff8, Size: 16]
	PlayerDetailInfo[] TopCharmPlayerDetailList;//[Offset: 0x1008, Size: 16]
	<uint32,bool> AllowViewCharmInfoMap;//[Offset: 0x1018, Size: 80]
	<uint32,byte> AlreadyInRankPlayers;//[Offset: 0x1068, Size: 80]
	int LastReadyStateTime;//[Offset: 0x10b8, Size: 4]
	GameModePlayerParams[] BornLandVehicleList;//[Offset: 0x10c0, Size: 16]
	DynamicVibrateSystemManager* DynamicVibrateSystemManager;//[Offset: 0x10d0, Size: 8]
	int DamageMagnifierPlan;//[Offset: 0x10d8, Size: 4]
	bool UseTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10dd, Size: 1]
	bool UseFireTssAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10de, Size: 1]
	bool UseHeartbeatOBTssAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10df, Size: 1]
	bool UseHeartbeatTssAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e0, Size: 1]
	TslSimpleCollisionManager* SimpleCollisionManager;//[Offset: 0x10e8, Size: 8]
	DestructibleSurfaceManager* DestructibleSurfaceManager;//[Offset: 0x10f0, Size: 8]
	delegate OnGameModeStateTimeChanged;//[Offset: 0x10f8, Size: 16]
	bool bUseNewGrenadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1108, Size: 1]
	bool bShowWingman;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1109, Size: 1]
	class FrameCaptureActor* FrameCaptureClass;//[Offset: 0x1110, Size: 8]
	bool bSecurityScreenShotEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1118, Size: 1]
	bool bImpoliteVoiceReportEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1119, Size: 1]
	FrameCaptureActor* FrameCapturePtr;//[Offset: 0x1120, Size: 8]
	ObjectPosReplayNetGUIDMap[] SyncObjectPosReplayNetGUIDList;//[Offset: 0x1130, Size: 16]
	ObjectPosUIData[] SyncObjectPosUIData;//[Offset: 0x1140, Size: 16]
	WeaponModuleManager* WeaponModuleSystemRef;//[Offset: 0x1160, Size: 8]
	class WeaponSlotManager* WeaponModuleManagerTemplate;//[Offset: 0x1168, Size: 8]
	bool bFixLevelExtraTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1180, Size: 1]
	float ServerFixLevelCheckDiff;//[Offset: 0x1184, Size: 4]
	bool NeedCreatePlayerIconToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1188, Size: 1]
	bool bPlayOnBoardSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1189, Size: 1]
	int YearBeastCount;//[Offset: 0x118c, Size: 4]
	bool bEnableSpawnYearBeast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1190, Size: 1]
	Vector[] YearBeastCirclePoint;//[Offset: 0x1198, Size: 16]
	float YearBeastCircleRadius;//[Offset: 0x11a8, Size: 4]
	int[] HasYearBeastTeamID;//[Offset: 0x11b0, Size: 16]
	bool bNeedUpdateParachuteFollowUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c0, Size: 1]
	bool bNeedCheckDupKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c1, Size: 1]
	int TlogDupKillMax;//[Offset: 0x11c4, Size: 4]
	float fDSFixedDateTime;//[Offset: 0x11c8, Size: 4]
	bool bIgnoreCheckTeamPlayerStateReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11cc, Size: 1]
	bool bUseSpecificAvatarHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11cd, Size: 1]
	<enum,int> GSAvatarDefineID;//[Offset: 0x11d0, Size: 80]
	class BattleItemHandleBase[] GSAvatarHandles;//[Offset: 0x1220, Size: 16]
	<uint32,EmotePlayer> LocalEmotePlayerList;//[Offset: 0x1230, Size: 80]
	FString DamageTypeTablePath;//[Offset: 0x1280, Size: 16]
	UAEDataTable* DamageTypeConfigTable;//[Offset: 0x1290, Size: 8]
	bool bEnableRevivalToExPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1298, Size: 1]
	RouteSegment[] RouteSegmentList;//[Offset: 0x12a0, Size: 16]
	byte TimeBeforeRouteSelect;//[Offset: 0x12b0, Size: 1]
	int RouteSelectStartCountDown;//[Offset: 0x12b4, Size: 4]
	int CountDownTipID;//[Offset: 0x12b8, Size: 4]
	int ReadyStateTimeWithoutCountdown;//[Offset: 0x12bc, Size: 4]
	delegate OnReadyStateTimeWithoutCountdownChanged;//[Offset: 0x12c0, Size: 16]
	PlayerClubTeamInfo[] ClubTeamList;//[Offset: 0x12d0, Size: 16]
	int SegmentChooseTime;//[Offset: 0x12e0, Size: 4]
	TeamSegmentInfo[] TeamSegmentsInfo;//[Offset: 0x12e8, Size: 16]
	int CurrentTeamIdx;//[Offset: 0x12f8, Size: 4]
	int DiscussDuration;//[Offset: 0x1300, Size: 4]
	byte[] SelectionPhaseTime;//[Offset: 0x1308, Size: 16]
	<int,byte> SegmentSelectSituation;//[Offset: 0x1318, Size: 80]
	bool CreationConfig_ShowEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1368, Size: 1]
	class UTSkill[] UGCSkillPaths;//[Offset: 0x1370, Size: 16]
	int UGCSkillUIDBase;//[Offset: 0x1380, Size: 4]
	NetAlienationDataComponent* NetAlienationData;//[Offset: 0x1388, Size: 8]
	void WaitAllPlayerLogin(int StateReadyTime);// 0x405a34c
	void UpdateSegmentSituation(int ID);// 0x405a2d0
	void UpdateBornLandVehicles();// 0x405a2b4
	void TryFillObjectPool();// 0x405a2a0
	void TriggerSpawnYearBeast(uint32 PlayerKey, bool bIsAI);// 0x405a1e0
	void SyncAirplaneRouteForCamp(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x405a080
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x4059f20
	void SyncAirplaneAndAirDrops(out AirDropPathData3D InAirDropPathData);// 0x4059e70
	int SwitchBossLocationToID(Vector loation);// 0x4059de0
	void SimulateAirAttackOver();// 0x4059d80
	void SetupOptimizedGISTick();// 0x4059d64
	void SetTagCulling(bool IsUse);// 0x4059ce0
	void SetReConnectGameStateInfo(ReConnectGameStateInfo ReConnectInfo);// 0x4059c18
	void SetReadyStateTimeWithoutCountdown(int ReadyTime);// 0x4059b9c
	void SetPlayerNum(int InPlayerNum);// 0x4059b24
	void SetIsFireworksActOpen(bool Val);// 0x4059aa0
	void SetHZB(int Enable);// 0x4059a24
	void SetGameModeState(FName NewState);// 0x40599a8
	void SetCurAirAttackWave(int AirAttackWave);// 0x405992c
	void SetCurAirAttackType(byte airattacktype);// 0x40598b0
	void SetCurAirAttackMode(enum AirAttackMode);// 0x4059834
	void SetCircleInvertIndex(int Index);// 0x40597b8
	void SetCharmSystemParameters(int CountDownTime, int RefreshCharmPlayerTime, int StopRefreshCharmPlayerTime);// 0x40596c8
	void SetAllowViewCharmInfoByPlayerKey(uint32 PlayerKey, bool AllowView);// 0x4059608
	void SetAliveRealPlayerNum(int InAliveRealPlayerNum);// 0x405958c
	void SetAlivePlayerNum(int InAlivePlayerNum);// 0x4059510
	void SetAirplaneStopLoc(Vector StopLoc);// 0x405948c
	void SetAirplaneStartLoc(Vector StarLoc);// 0x4059408
	void SetAirplaneForceJumpLocForCamp(Vector ForceJumpLoc);// 0x4059384
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x4059300
	void SetAirplaneCanJumpLocForCamp(Vector CanJumpLoc);// 0x405927c
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x40591f8
	void RPC_ExcellentOPForReplay(FString ReceivedPlayerUID, byte inExOpResultType);// 0x405912c
	void RemoveCharacterMoveInputStateEx();// 0x4059118
	int RandomChooseSegment();// 0x40590e4
	void PlayerPlaneDelegate__DelegateSignature(STExtraPlayerController* PlayerController);// 0xffffff8f20d162a8
	void OnSceneRenderActorManagerChanged();// 0x40590d0
	void OnRep_WingManCharmPlayerDetailList();// 0x40590bc
	void OnRep_VisualFieldFeatureParam();// 0x40590a8
	void OnRep_UseTssSdkAntiData();// 0x4059094
	void OnRep_UseHeartbeatTssAntiData();// 0x4059080
	void OnRep_UseHeartbeatOBTssAntiData();// 0x405906c
	void OnRep_UseFireTssAntiData();// 0x4059058
	void OnRep_TopCharmPlayerAvatarInfoList();// 0x4059044
	void OnRep_TeamSegmentsInfo();// 0x4059030
	void OnRep_SyncObjectPosReplayNetGUIDList();// 0x405901c
	void OnRep_SubModeGroup();// 0x4059008
	void OnRep_StartedPlane();// 0x4058ff4
	void OnRep_ShowCharmPlayerCount();// 0x4058fe0
	void OnRep_SegmentChooseTime();// 0x4058fcc
	void OnRep_SecurityScreenShotEnabled();// 0x4058fb8
	void OnRep_SeasonIdx();// 0x4058fa4
	void OnRep_RouteSelectStartCountDown();// 0x4058f90
	void OnRep_RouteSegmentList();// 0x4058f7c
	void OnRep_ReplicatedWorldRealTimeSeconds();// 0x4058f68
	void OnRep_ReadyStateTime();// 0x4058f54
	void OnRep_ReadyStateCountingDown();// 0x4058f40
	void OnRep_PlayerNumOnPlane();// 0x4058f2c
	void OnRep_PlayerNumChange();// 0x4058f18
	void OnRep_ObjectPosUIData();// 0x4058f04
	void OnRep_MaxKillerChange();// 0x4058ef0
	void OnRep_MarkSyncData();// 0x4058edc
	void OnRep_LuckyCharmPlayerDetailList();// 0x4058ec8
	void OnRep_LobbyGameType();// 0x4058eb4
	void OnRep_IsWeaponFPPOffsetInTDMode();// 0x4058ea0
	void OnRep_IsTrainingMode();// 0x4058e8c
	void OnRep_IsShowDeadBoxGreenSmoke();// 0x4058e78
	void OnRep_IsShowDeadBoxGreenLight();// 0x4058e64
	void OnRep_IsShowDeadBox();// 0x4058e50
	void OnRep_IsFPPMode();// 0x4058e3c
	void OnRep_IsFireworksActOpen();// 0x4058e28
	void OnRep_IsDark();// 0x4058e14
	void OnRep_IsCanPlaceBuilding();// 0x4058e00
	void OnRep_IsCanBecomeZombie();// 0x4058dec
	void OnRep_ImpoliteVoiceReportEnabled();// 0x4058dd8
	void OnRep_HasSignalBarReplay();// 0x4058dc4
	void OnRep_GameTerminatorPlayerKey();// 0x4058db0
	void OnRep_GameStateConfigParam();// 0x4058d9c
	void OnRep_GameModeType();// 0x4058d88
	void OnRep_GameModeState();// 0x4058d6c
	void OnRep_GameModeID();// 0x4058d58
	void OnRep_GameModeFeatureSet();// 0x4058d44
	void OnRep_FinalWinTeams();// 0x4058d30
	void OnRep_EscapeHelicopterClassTag();// 0x4058d1c
	void OnRep_EscapedPlayerNum();// 0x4058d08
	void OnRep_EnableSignalSystem();// 0x4058cf4
	void OnRep_DSFixedDateTime();// 0x4058ce0
	void OnRep_DamageMagnifierPlan();// 0x4058ccc
	void OnRep_CurrentTeamIndex();// 0x4058cb8
	void OnRep_ClubTeamList();// 0x4058ca4
	void OnRep_CircleInfo();// 0x4058c90
	void OnRep_CircleIndexChange();// 0x4058c7c
	void OnRep_bShowWingman();// 0x4058c68
	void OnRep_bModifyShelterUI();// 0x4058c54
	void OnRep_AliveTeamNum();// 0x4058c40
	void OnRep_AliveRealPlayerNum();// 0x4058c2c
	void OnRep_AlivePlayerNum();// 0x4058c18
	void OnRep_AirplaneStopLoc();// 0x4058c04
	void OnRep_AirplaneStartLoc();// 0x4058bf0
	void OnRep_AirplaneForceJumpLocForCamp();// 0x4058bdc
	void OnRep_AirplaneForceJumpLoc();// 0x4058bc8
	void OnRep_AirplaneCanJumpLocForCamp();// 0x4058bb4
	void OnRep_AirplaneCanJumpLoc();// 0x4058ba0
	void OnRep_AirDropPathData();// 0x4058b8c
	void OnGISComponentCreated(GISActorComponentBase* InComponemt);// 0x4058b10
	void OnGameModeDisplayNameChange();// 0x4058afc
	void OnClearCharmSystemInfo();// 0x4058ae8
	void OnBeginReplayStream();// 0x4058ad4
	void NotifySegmentInfo(int TeamID, int SegmentID);// 0x4058a20
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x4058968
	void NotifyClientCharmPlayerChanged(bool IsTopCharmPlayer, bool IsLuckyPlayer, bool IsWingManPlayer);// 0x4058854
	void ModifyEnableSignalSystemOnServer(bool bEnable);// 0x40587d0
	bool IsUnsafeExit();// 0x4058798
	bool IsPlayerInCharmRank(uint32 PlayerKey);// 0x4058708
	bool IsPlaneValid();// 0x40586e4
	bool IsInBlueCircle(out const Vector Pos);// 0x4058644
	bool IsGameModeSupportPlayerRevival();// 0x405860c
	bool IsFeatureSupported(enum SubSystemType);// 0x405857c
	bool IsCharmSystemEnabled();// 0x4058544
	Vector GetWhiteCircle();// 0x405850c
	int GetTeamSelectTime(int StateReadyTime);// 0x4058480
	TslSimpleCollisionManager* GetSimpleCollisionManager();// 0x405844c
	float GetServerReplicatedRealTime();// 0x4058418
	SegmentChoosableSituation[] GetSelectableRoute();// 0x4058398
	RouteSegment GetRouteMentByRouteID(int RouteID);// 0x40582b0
	float GetReplicatedWorldTimeSeconds();// 0x4058294
	bool GetRecordControllerReplay();// 0x405825c
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x4058208
	Actor* GetPlane();// 0x40581d4
	FString GetMaxKillerPlayerKey();// 0x4058154
	bool GetIsFireworksActOpen();// 0x405811c
	int GetHZB();// 0x40580e8
	FName GetGameModeState();// 0x40580b4
	FString GetGameModeDisplayName();// 0x4058034
	Vector GetForceJumpLocForCamp();// 0x405800c
	Vector GetForceJumpLoc();// 0x4057fe4
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x4057fb0
	DestructibleSurfaceManager* GetDestructibleSurfaceManager();// 0x4057f7c
	enum GetCurCircleStatus();// 0x4057f48
	int GetCurCircleIndex();// 0x4057f14
	enum GetCurAirAttackMode();// 0x4057ee0
	PlayerClubTeamInfo GetClubTeamInfoByTeamID(int TeamID);// 0x4057dd4
	float GetCircleStatusTimespan();// 0x4057da0
	float GetCircleStatusLeftTime();// 0x4057d6c
	int GetCircleInvertIndex();// 0x4057d50
	Vector GetCanJumpLocForCamp();// 0x4057d28
	Vector GetCanJumpLoc();// 0x4057d00
	Vector GetBlueCircle();// 0x4057cc8
	UAEBlackboard* GetBlackBoard();// 0x4057c94
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x4057b40
	int GetAliveRealPlayerNum();// 0x4057b0c
	int GetAlivePlayerNum();// 0x4057ad8
	Vector GetAirplaneStopLoc();// 0x4057ab0
	Vector GetAirplaneStartLoc();// 0x4057a88
	AirDropPathData3D GetAirDropPathData();// 0x4057950
	void FindMaxVehiclePlayers(out GameModePlayerParams Player, out uint32[] VehiclePlayers);// 0x4057630
	void FindAllVisibleVehicleInsidePlayers(out uint32[] VisibleVehicles, out uint32[] VisibleInsider);// 0x4057534
	BattleItemData[] FilterEmoteItem(out const BattleItemData[] ItemList);// 0x4057474
	bool DoNotAutoViewTeammateOnInitWatchUI();// 0x4057434
	void DispatchToClientRemoveObjectPosUIData(int InInstanceID);// 0x40573b0
	void DispatchToClientAddObjectPosUIData(const ObjectPosUIData InData);// 0x40572f8
	void CreateLevelEventCenter_BP();// 0x40572dc
	void CompetitionModeRouteSelectPhase(int StateReadyTime);// 0x4057260
	void CheckUpdateCharmOrLuckyPlayers();// 0x405724c
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x40571d0
	bool CalledOverrideClickBackToLobby();// 0x4057198
	void BroadcastSignalGunInfo(int LastTime);// 0x4057114
	void BroadcastRoute(Vector StartLoc, Vector StopLoc);// 0x4057044
	void BroadcastGameEnterFinished();// 0x4057028
	void BroadcastGameEnterFighting();// 0x405700c
	void BroadcastFatalDamageInfoSimple(UAECharacter* causer, UAECharacter* Victim, ClientFatalDamageRecordDataSimple SimpleData);// 0x4056d8c
	void BroadcastFatalDamageInfo(UAECharacter* causer, UAECharacter* Victim, ClientFatalDamageRecordData Data);// 0x4056bf4
	void BroadcastCircleWaveOver(int Index, int WaveNum);// 0x4056b0c
	void BroadcastCircleWarning(float Time);// 0x4056a88
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index);// 0x4056940
	void BroadcastCircleInfo(enum CircleInfo, float Time, int CircleInvertedIndex);// 0x4056810
	void BroadcastCampAirLineRoute(Vector StartLoc, Vector StopLoc);// 0x4056740
	void BroadcastCallBlackAirAttackWarning(const Vector airAttackAreaSrc, int waveindex, enum AirAttackMode);// 0x4056640
	void BroadcastCallBlackAirAttackOver(int waveindex, enum AirAttackMode);// 0x4056580
	void BroadcastCallBlackAirAttackOrder(const CallBlackAirAttackOrder airAttackOrderSrc, int waveindex, enum AirAttackMode);// 0x405644c
	void BroadcastAirAttackWarning(const Vector airAttackAreaSrc, int waveindex, enum AirAttackMode);// 0x405634c
	void BroadcastAirAttackOrderCompact(const CompactAirAttackOrder airAttackOrderSrc, int waveindex);// 0x405626c
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, int waveindex, enum AirAttackMode);// 0x4056140
	void AddCharmPlayerInfoInternal(out PlayerDetailInfo[] DetailInfoList, out GameModePlayerParams PlayerParam, int ItemIndex, bool bVisible, bool bIsWingManPlayerSlot);// 0x4055d08
	int AddBossLocationToID(Vector loation);// 0x4055c78
	void AddAlreadyInRankPlayerInternal(uint32 PlayerKey, byte RankIndex);// 0x4055bc0

--------------------------------
Class: AirDropPathData3D
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector StartLoc3D;//[Offset: 0x4, Size: 12]
	Vector TargetLoc3D;//[Offset: 0x10, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x20, Size: 16]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	Vector MapCenter;//[Offset: 0x34, Size: 12]
	float Radius;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	int CurrentInstanceCount;//[Offset: 0x120, Size: 4]
	int CurrentLocalInstanceCount;//[Offset: 0x124, Size: 4]
	MarkDispatchAction[] ActionQueue;//[Offset: 0x128, Size: 16]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0x138, Size: 16]
	int MarkCountProcessed;//[Offset: 0x148, Size: 4]
	MarkSyncData[] StaticMarkList;//[Offset: 0x150, Size: 16]
	bool LocalActionNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	static void UpdateMapMarkData(Object* WorldContextObject, int MarkInstanceID, Vector NewLocation, Rotator NewRotation);// 0x3e94344
	void LocalActionUpdate();// 0x3e94330
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x3e942b4
	int GenerateNewLocalInstanceID();// 0x3e94290
	int GenerateNewInstanceID();// 0x3e9426c
	void DispatchMarkDataSimple(MarkSyncData Data);// 0x3e94048
	void DispatchMarkDataOwnerOnly(MarkSyncData Data, STExtraPlayerState* PS);// 0x3e93de4
	void DispatchMarkDataArray(MarkDispatchAction[] DataArray);// 0x3e93c34
	void DispatchMarkData(MarkDispatchAction Data);// 0x3e939dc
	static int DispatchMapMarkData(Object* WorldContextObject, MarkSyncData MarkData, enum ActionType, enum ActionRange);// 0x3e936f4

--------------------------------
Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0, Size: 1]
	enum RangeType;//[Offset: 0x1, Size: 1]
	MarkSyncData SyncData;//[Offset: 0x8, Size: 112]
	float DispatchDelayTime;//[Offset: 0x78, Size: 4]
	float RangeRad;//[Offset: 0x7c, Size: 4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x80, Size: 8]
	STExtraPlayerState* luaPlayerState;//[Offset: 0x88, Size: 8]
	bool LocalUseQueue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	float DispatchTime;//[Offset: 0x94, Size: 4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	delegate OnMapAlertSet;//[Offset: 0xa0, Size: 16]

--------------------------------
Class: AssetPreLoadingComponent.ActorComponent.Object
	PreLoadAssetConfigItem[] PreLoadAssetConfigList;//[Offset: 0x120, Size: 16]
	void StartLoad(STExtraPlayerController* PC);// 0x3c670ec
	void LoadAssetItemFinished(SoftObjectPath Path, STExtraPlayerController* PC);// 0x3c66fd0
	void LoadAssetItem(out const PreLoadAssetConfigItem Item, STExtraPlayerController* PC);// 0x3c66ec4

--------------------------------
Class: PreLoadAssetConfigItem
	Object* TargetAssetPtr;//[Offset: 0x0, Size: 40]
	bool bIsClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int MinDeviceMemoryLevel;//[Offset: 0x2c, Size: 4]
	bool bSupportClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bSupportDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]

--------------------------------
Class: GameStateConfigParam

--------------------------------
Class: CircleInfo
	int CurCircleIndex;//[Offset: 0x0, Size: 4]
	enum CircleStatus;//[Offset: 0x4, Size: 1]
	Vector OriginBlueCircle;//[Offset: 0x8, Size: 12]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector WhiteCircle;//[Offset: 0x20, Size: 12]
	float CircleStatusStartServerTime;//[Offset: 0x2c, Size: 4]
	float CircleStatusTimespan;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GISActorManager.Object
	delegate OnComponentLoggedIn;//[Offset: 0x28, Size: 16]
	static void SetGISFailLogEnabled(bool bEnableFailLog);// 0x76d676c
	static void LoginNewGISActorComponent(int InInstanceID, GISActorComponentBase* InComponent);// 0x76d66bc
	static GISActorManager* GetInstance(Object* WorldContextObject);// 0x76d6640
	static bool GetCanTriggerGISByClass(Object* WorldContextObject, class Object InClass, int ConfigIdx, PlayerController* pController);// 0x76d6510
	static Actor* GetActorByTypeIDAndControllerChecked(Object* WorldContextObject, int InTypeID, PlayerController* InController);// 0x76d641c
	static Actor* GetActorByTypeID(Object* WorldContextObject, int InTypeID);// 0x76d6364
	static Actor* GetActorByInstanceAndWorld(Object* WorldContextObject, int InInstanceID);// 0x76d62ac
	static Actor* GetActorByInstance(Object* WorldContextObject, int InInstanceID);// 0x76d61f4
	static Actor*[] GetActorByClassAndWorld(Object* WorldContextObject, class Object InClass);// 0x76d60fc
	static int GenerateInstanceID(Object* WorldContextObject);// 0x76d6080

--------------------------------
Class: GISActorComponentBase.ActorComponent.Object
	GISObjectBaseAction*[] Actions;//[Offset: 0x128, Size: 16]
	UAEBlackboardParameter[] SharedParams;//[Offset: 0x138, Size: 16]
	Object*[] PinnedObjects;//[Offset: 0x148, Size: 16]
	FString OverlapComponentName;//[Offset: 0x158, Size: 16]
	float OverlapDistanceSecurtyCheck;//[Offset: 0x168, Size: 4]
	bool bFastOverlapCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	DataTable* ConfigPath;//[Offset: 0x170, Size: 40]
	bool bGISDisableTickOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	GISActivitySelector[] TypeIDArray;//[Offset: 0x1a0, Size: 16]
	bool bCantriggerSkipsBoundCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	bool bDisableClientOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 1]
	PrimitiveComponent* OverlapComponentCache;//[Offset: 0x1b8, Size: 8]
	<byte,GISComponentConfigGroupArratWrapper> RangeActionMap;//[Offset: 0x1c0, Size: 80]
	<int,GISActorConfigData> GISActorConfigData;//[Offset: 0x210, Size: 80]
	<int,GISWeakPlayerControllerArrayWrapper> PlayerCDTable;//[Offset: 0x260, Size: 80]
	delegate OnGISServerTriggered;//[Offset: 0x2b0, Size: 16]
	delegate OnGISServeActorEntered;//[Offset: 0x2c0, Size: 16]
	delegate CustomTriggerEvent;//[Offset: 0x2d0, Size: 16]
	delegate OnGISClientTriggered;//[Offset: 0x2e0, Size: 16]
	UAEBlackboardKeySelector InstanceIDParameterName;//[Offset: 0x2f0, Size: 8]
	UAEBlackboardKeySelector TypeIDParameterName;//[Offset: 0x2f8, Size: 8]
	int[] IsInMasterCD;//[Offset: 0x300, Size: 16]
	int InstanceID;//[Offset: 0x360, Size: 4]
	FinishedGISActions FinishedGISActions;//[Offset: 0x368, Size: 16]
	GISObjectBaseAction*[] TickQueue;//[Offset: 0x378, Size: 16]
	Actor*[] PreviousInBoundActors;//[Offset: 0x3d8, Size: 16]
	GISActorManager* InstanceManager;//[Offset: 0x3e8, Size: 8]
	UAEBlackboard* BlackBoard;//[Offset: 0x3f0, Size: 8]
	<Actor*,GISPlayerComponentBase*> GISPlayerComponentCache;//[Offset: 0x3f8, Size: 80]
	<Actor*,PlayerController*> ControllerCacheMap;//[Offset: 0x448, Size: 80]
	<PlayerController*,PlayerDoneData> PlayerDoneMap;//[Offset: 0x498, Size: 80]
	Actor*[] HasBroadcastedActors;//[Offset: 0x538, Size: 16]
	<PlayerController*> SuspendedPlayers;//[Offset: 0x548, Size: 80]
	void SuspendForController(PlayerController* PlayerController, bool bIsResume);// 0x76d55cc
	void Suspend(bool bIsResume);// 0x76d5548
	void SetCDFlagByPC(PlayerController* PlayerController, int InTypeID);// 0x76d5490
	void RPC_ClientRunTypeAction(byte ActType, int InTypeID, PlayerController* InstigatingPlayerController);// 0x76d5394
	void ResetPCByTime(PlayerController* PlayerController, int TypeID);// 0x76d52dc
	void RequestCustomTrigger(out const UAEBlackboardParameter[] Params);// 0x76d5208
	void OnRep_InstanceID();// 0x76d51f4
	void OnRep_FinishedGISActions();// 0x76d51e0
	void OnPCCDCleared(PlayerController* PlayerController, int TypeID);// 0xffffff8f20d162a8
	void OnClientTrigger(PlayerController* PlayerController);// 0x76d515c
	void OnActorDestrtoyed(Actor* InActor);// 0x76d50e0
	bool IsValidForController(PlayerController* InController, int InTypeID);// 0x76d500c
	bool GetIsPCInCD(PlayerController* PlayerController, int InTypeID);// 0x76d4f40
	static Actor* GetGISActorByInstanceID(int InInstanceID, Object* WorldContextObject);// 0x76d4e88
	UAEBlackboard* GetBlackBoard();// 0x76d4e54
	void FlushConditions();// 0x76d4e40
	void DoTrigger(PlayerController* InController, int InTypeID);// 0x76d4d80
	static void ClearActorInstanceMap(Object* WorldContextObject);// 0x76d4d0c
	bool CanTrigger(PlayerController* InController, int InTypeID, bool CheckForWaitingQueue);// 0x76d4bf4

--------------------------------
Class: GISObjectBaseAction.GISObjectBase.Object
	GISObjectBaseAction*[] ChildActions;//[Offset: 0xd8, Size: 16]
	float ActionDuration;//[Offset: 0xe8, Size: 4]
	void UnPinAction();// 0x76d8e58
	void TickAction(float dt);// 0x76d8dd4
	void PinAction();// 0x76d8dc0
	void OnActionTick(float dt);// 0xffffff8f20d162a8
	void OnActionStartedBP();// 0xffffff8f20d162a8
	void OnActionStarted();// 0x76d8da4
	void OnActionResetsBP();// 0xffffff8f20d162a8
	void OnActionResets();// 0x76d8d88
	void OnActionFinishedBP(byte NewStatus);// 0xffffff8f20d162a8
	void OnActionFinished();// 0x76d8d6c
	byte Execute(ActorComponent* InComponentBase, Actor* InInteractingActor, int InMasterIndex, UAEBlackboardParameter[] Params, bool bInSoloMode, bool bIsTest, bool bRebuildCache);// 0x76d8a78

--------------------------------
Class: GISObjectBase.Object
	bool bReplicatesAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int ActionInstanceID;//[Offset: 0x2c, Size: 4]
	GISObjectBase* FromTemplate;//[Offset: 0x30, Size: 8]
	bool bIsRootAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	int MasterIndex;//[Offset: 0x3c, Size: 4]
	UAEBlackboardParameter[] ParamList;//[Offset: 0x40, Size: 16]
	UAEBlackboardParameter[] NodeParamList;//[Offset: 0x50, Size: 16]
	UAEBlackboard* BlackBoard;//[Offset: 0x60, Size: 8]
	Actor* InteractingActor;//[Offset: 0x68, Size: 8]
	ActorComponent* ComponentBase;//[Offset: 0x70, Size: 8]
	Object* pOwner;//[Offset: 0x78, Size: 8]
	GISObjectBase* RootAction;//[Offset: 0x80, Size: 8]
	<int,GISObjectBase*> InstanceMap;//[Offset: 0x88, Size: 80]
	bool IsDedicatedServer();// 0x76d8528
	Object* GetGISOwnerComponent();// 0x76d850c
	Actor* GetGISOwnerActor();// 0x76d84d8
	Actor* GetGISInteractingActor();// 0x76d84a0
	ActorComponent* GetComponentBase();// 0x76d8464
	UAEBlackboard* GetBlackBoard();// 0x76d8430

--------------------------------
Class: GISActivitySelector
	GISConfigGroup* ConfigGroup;//[Offset: 0x0, Size: 8]
	FName ActivityName;//[Offset: 0x8, Size: 8]
	FName ActivityDesc;//[Offset: 0x10, Size: 8]
	FName TypeID;//[Offset: 0x18, Size: 8]

--------------------------------
Class: GISConfigGroup.DataAsset.Object
	GISActorConfigData ConfigData;//[Offset: 0x30, Size: 288]

--------------------------------
Class: GISActorConfigData
	GISActorActionData ActionData;//[Offset: 0x0, Size: 176]
	float CDResetTimePerType;//[Offset: 0xb0, Size: 4]
	float MasterCDTime;//[Offset: 0xb4, Size: 4]
	int MaxTotalTriggerTimes;//[Offset: 0xb8, Size: 4]
	int MaxTriggerTimesPerPlayer;//[Offset: 0xbc, Size: 4]
	int ActivityCatagory;//[Offset: 0xc0, Size: 4]
	bool bSkipInvalidAfterTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	<byte,byte> RunSide;//[Offset: 0xc8, Size: 80]
	int OriginalIndexInArray;//[Offset: 0x118, Size: 4]

--------------------------------
Class: GISActorActionData
	<byte,GISActorActionArrayWrapper> GISActorActionMap;//[Offset: 0x0, Size: 80]
	<byte,GISActorActionParameterArrayWrapper> GISActorActionParams;//[Offset: 0x50, Size: 80]
	GISObjectCondition*[] CanTriggerConditions;//[Offset: 0xa0, Size: 16]

--------------------------------
Class: GISActorActionArrayWrapper
	GISObjectBaseAction*[] ActionFlowList;//[Offset: 0x0, Size: 16]
	GISObjectBaseAction*[] ActionNodeList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: GISActorActionParameterArrayWrapper
	UAEBlackboardParameter[] Params;//[Offset: 0x0, Size: 16]

--------------------------------
Class: GISObjectCondition.GISObjectBase.Object
	bool Pass(UAEBlackboardParameter[] Params, ActorComponent* InComponentBase, Actor* InInteractingActor);// 0x76d9424
	bool CheckCondition(Actor* CurrentInteractingActor, Actor* OwnerActor);// 0x76d9354

--------------------------------
Class: GISComponentConfigGroupArratWrapper
	GISComponentConfigGroupWrapper[] Array;//[Offset: 0x0, Size: 16]

--------------------------------
Class: GISComponentConfigGroupWrapper
	GISComponentConfigGroup* ComponentConfigGroup;//[Offset: 0x0, Size: 8]

--------------------------------
Class: GISComponentConfigGroup.DataAsset.Object
	GISActorRangeData ActionData;//[Offset: 0x30, Size: 72]

--------------------------------
Class: GISActorRangeData
	GISObjectBaseAction*[] ActionFlowList;//[Offset: 0x0, Size: 16]
	GISObjectBaseAction*[] ActionNodeList;//[Offset: 0x10, Size: 16]
	UAEBlackboardParameter[] Params;//[Offset: 0x20, Size: 16]
	GISObjectCondition*[] CanTriggerConditions;//[Offset: 0x30, Size: 16]
	byte RunSide;//[Offset: 0x40, Size: 1]

--------------------------------
Class: GISWeakPlayerControllerArrayWrapper
	PlayerController*[] PCArray;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FinishedGISActions
	CurrentRunningGISActionSyncData[] FinishedActions;//[Offset: 0x0, Size: 16]

--------------------------------
Class: CurrentRunningGISActionSyncData
	int8 EntryIndex;//[Offset: 0x0, Size: 1]
	int ActionInstanceID;//[Offset: 0x4, Size: 4]
	int TypeID;//[Offset: 0x8, Size: 4]
	byte ActorActionType;//[Offset: 0xc, Size: 1]
	bool bClientDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: GISPlayerComponentBase.ActorComponent.Object
	GISObjectBaseAction*[] TickQueue;//[Offset: 0x128, Size: 16]
	GISPlayerSyncData[] PlayerSyncData;//[Offset: 0x138, Size: 16]
	int[] PlayerRangeData;//[Offset: 0x148, Size: 16]
	bool bEnableOnrepFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	<int,GISClientActionMapWrapper> ClientActionMap;//[Offset: 0x1e0, Size: 80]
	<int,GISClientActionMapWrapper> PrevClientActionMap;//[Offset: 0x230, Size: 80]
	UAEBlackboardKeySelector InstanceIDParameterName;//[Offset: 0x280, Size: 8]
	UAEBlackboardKeySelector TypeIDParameterName;//[Offset: 0x288, Size: 8]
	<int,GISPlayerSyncData> PreviousPlayerSyncData;//[Offset: 0x290, Size: 80]
	<int,GISPlayerSyncData> CurrentPlayerSyncData;//[Offset: 0x2e0, Size: 80]
	<int,SignalWaitingData> WaitingSignalQueue;//[Offset: 0x330, Size: 80]
	<int,GISChangedTypeID> ChangedTypeIDMap;//[Offset: 0x380, Size: 80]
	UAEBlackboard* BlackBoard;//[Offset: 0x420, Size: 8]
	void TriggerServerLogicByTypeID_Multicast(int InTypeID);// 0x76daa60
	void TriggerServerLogic_Multicast(const GISPlayerRequestData InSyncData);// 0x76da9ac
	void SendSignalToWaitingQueue(int InInstanceID, int InTypeID);// 0x76da8f8
	void ResuqetCustomTrigger(const UAEBlackboardParameter[] Params, int InInstanceID);// 0x76da7bc
	void OnSyncdataChanged(out const GISPlayerSyncData[] InSyncData);// 0xffffff8f20d162a8
	void OnRep_PlayerSyncData();// 0x76da7a8
	void OnRep_PlayerRangeData();// 0x76da794
	bool GetClientCanTrigger(int InInstanceID, int InTypeID);// 0x76da6cc
	UAEBlackboard* GetBlackBoard();// 0x76da698
	void ExecuteMainAction();// 0x76da67c
	bool CanTriggerAction(int InTypeID);// 0x76da5ec
	void C2S_CustomData(const UAEBlackboardParameter[] Param);// 0x76da4f4

--------------------------------
Class: GISPlayerSyncData
	PlayerDoneDataArrayWrapper[] TriggeredTime;//[Offset: 0x0, Size: 16]
	int GISActorInstanceID;//[Offset: 0x10, Size: 4]
	int[] TypeID;//[Offset: 0x18, Size: 16]

--------------------------------
Class: PlayerDoneDataArrayWrapper
	int DoneCount;//[Offset: 0x0, Size: 4]
	int TypeID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GISClientActionMapWrapper
	<int,GISActorConfigData> Map;//[Offset: 0x0, Size: 80]

--------------------------------
Class: SignalWaitingData
	PlayerController* Controller;//[Offset: 0x0, Size: 8]

--------------------------------
Class: GISChangedTypeID

--------------------------------
Class: GISPlayerRequestData
	int GISActorInstanceID;//[Offset: 0x0, Size: 4]
	int TypeID;//[Offset: 0x4, Size: 4]
	bool ShouldWaitForSignal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: PlayerDoneData
	<int,int> DoneCount;//[Offset: 0x0, Size: 80]

--------------------------------
Class: AirAttackOrder
	int waveindex;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize[] bombsPosition;//[Offset: 0x8, Size: 16]
	float[] bombsInterval;//[Offset: 0x18, Size: 16]
	float HeightOffset;//[Offset: 0x28, Size: 4]
	float DelayTime;//[Offset: 0x2c, Size: 4]
	Actor*[] TargetArr;//[Offset: 0x30, Size: 16]

--------------------------------
Class: CallBlackAirAttackOrder
	int waveindex;//[Offset: 0x0, Size: 4]
	Vector[] bombsPosition;//[Offset: 0x8, Size: 16]
	float[] bombsInterval;//[Offset: 0x18, Size: 16]
	float HeightOffset;//[Offset: 0x28, Size: 4]
	float DelayTime;//[Offset: 0x2c, Size: 4]
	Actor*[] TargetArr;//[Offset: 0x30, Size: 16]
	int InstanceID;//[Offset: 0x40, Size: 4]
	int Count;//[Offset: 0x44, Size: 4]
	Vector AirAttackArea;//[Offset: 0x48, Size: 12]
	Actor* Caller;//[Offset: 0x58, Size: 8]

--------------------------------
Class: GameSwitchControll
	int ID;//[Offset: 0x0, Size: 4]
	int SwitchValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponSlotManager.Object
	<byte,class WeaponSlotBase> WeaponSlotsClassConfig;//[Offset: 0x28, Size: 80]
	<byte,WeaponSlotBase*> WeaponSlotsDataMap;//[Offset: 0x78, Size: 80]
	WeaponManagerComponent* OwnerMgr;//[Offset: 0xc8, Size: 8]
	int GetWeaponSlotUIType(byte Slot, STExtraWeapon* Weapon);// 0x420cc44
	static WeaponSlotManager* GetWeaponSlotManager(Object* ContextObject);// 0x420cbc8
	WeaponSlotBase* GetWeaponSlotBySlotTypeCommon(byte SlotType);// 0x420cb3c
	class Object GetDefaultWeaponSlotClass(byte SlotType);// 0x420cab0

--------------------------------
Class: WeaponSlotBase.Object
	int SlotUIType;//[Offset: 0x28, Size: 4]
	bool bCanDisuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bUpdateLastUseDiffSlotWeaponSlotWhenSwitchToThisSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bUpdateLastUseNoneGrenadeWeaponSlotWhenSwitchToThisSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	bool bNeedCreateWhenCanNotEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f, Size: 1]
	bool bNeedSwitchWhenCreateAndUseSameSlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bHideWeaponAfterDisuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bResetIsPressingFireBtnWhenSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	bool bForceSwitchWhenUseAfterSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 1]
	int SwitchAnimType;//[Offset: 0x34, Size: 4]
	byte GetWeaponAnimTypeBySlot(enum StateType, byte Slot);// 0x420c664

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0, Size: 4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4, Size: 4]
	FName[] VisualCheckBoneList;//[Offset: 0x8, Size: 16]
	float DefaultFOVAngle;//[Offset: 0x18, Size: 4]
	byte[] VisualCheckChanelList;//[Offset: 0x20, Size: 16]

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x58, Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x60, Size: 80]
	<int,float> VisualAngleLimitMap;//[Offset: 0xb0, Size: 80]
	void UpdateVisualFieldMeta();// 0x41e0128

--------------------------------
Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0, Size: 80]

--------------------------------
Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0, Size: 16]
	Actor* VisibleActor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeNameDecorator
	FString DecorateCondition;//[Offset: 0x0, Size: 16]
	FText Prefix;//[Offset: 0x10, Size: 24]
	FText Suffix;//[Offset: 0x28, Size: 24]
	FText Separator;//[Offset: 0x40, Size: 24]

--------------------------------
Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0, Size: 4]
	uint32 GameModeFeatureSet_B;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0, Size: 12]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int LeftPlayerNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GameDataMining
	FString BattleID;//[Offset: 0x0, Size: 16]
	Vector PlaneStartPoint;//[Offset: 0x10, Size: 12]
	Vector PlaneEndPoint;//[Offset: 0x1c, Size: 12]
	CircleDataMining[] CircleDataMining;//[Offset: 0x28, Size: 16]
	int GamePlayingTime;//[Offset: 0x38, Size: 4]
	GameWatchReport[] WatchReport;//[Offset: 0x40, Size: 16]
	int TotalGeneratedPickup;//[Offset: 0x50, Size: 4]

--------------------------------
Class: GameWatchReport
	uint64 player_uid;//[Offset: 0x0, Size: 8]
	float total_time;//[Offset: 0x8, Size: 4]
	WatchFlow[] watch_flow;//[Offset: 0x10, Size: 16]

--------------------------------
Class: WatchFlow
	uint64 UID;//[Offset: 0x0, Size: 8]
	uint32 sec;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LevelEventCenter.Object
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x28, Size: 80]
	<FString,LevelEventListenerList> EventListeners;//[Offset: 0x78, Size: 80]

--------------------------------
Class: LevelEventListenerList
	<LevelEventListener*> Listeners;//[Offset: 0x0, Size: 80]

--------------------------------
Class: LevelEventListener.Object
	FString EventName;//[Offset: 0x28, Size: 16]
	Object* ListenerEntity;//[Offset: 0x88, Size: 8]
	Property*[] Params;//[Offset: 0x90, Size: 16]

--------------------------------
Class: ImmediateUIManager.Object
	ImmediateUI[] AllStyleInstance;//[Offset: 0x28, Size: 16]

--------------------------------
Class: ImmediateUI
	int UID;//[Offset: 0x0, Size: 4]
	Widget*[] UIWidget;//[Offset: 0x8, Size: 16]

--------------------------------
Class: RTPCParamInfo
	FString RTPCKey;//[Offset: 0x0, Size: 16]
	float Value;//[Offset: 0x10, Size: 4]
	int InterpolationTimeMs;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x28, Size: 16]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x38, Size: 16]
	void Unregister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x3dd2c40
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x3dd2bbc
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x3dd2b20
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x3dd2aa4
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0xffffff8f20d162a8
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0xffffff8f20d162a8

--------------------------------
Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0x158, Size: 16]
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0x168, Size: 4]
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0x16c, Size: 4]
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	delegate IsCheckingFieldOfViewEnabledDelegate;//[Offset: 0x178, Size: 16]
	interface class * SelfActorLocationGetter;//[Offset: 0x188, Size: 16]
	enum FieldOfViewNotificationStatus;//[Offset: 0x198, Size: 1]
	float ElapsedSeconds;//[Offset: 0x19c, Size: 4]
	TimerHandle RecursivelyRegisterSelfTimeerHandle;//[Offset: 0x1a0, Size: 8]
	float CheckFrequencyInSeconds;//[Offset: 0x1a8, Size: 4]
	bool IsNotificationWorking();// 0x3dd2624
	static int IsGlobalDebugLineTraceDrawn();// 0x3dd25ec
	bool IsCheckingFieldOfViewEnabledDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender);// 0xffffff8f20d162a8
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0xffffff8f20d162a8
	enum GetFieldOfViewNotificationStatus();// 0x3dd25b8

--------------------------------
Class: SceneRenderActorManager.ActorComponent.Object
	<enum,RenderActorDetail> RenderActorMap;//[Offset: 0x120, Size: 80]
	SceneDisplayDirectorBase*[] SceneDisplayDirectorList;//[Offset: 0x170, Size: 16]
	void UnRegisterSceneDisplayDirector(SceneDisplayDirectorBase* SceneDisplayDirector);// 0x3f6ba14
	void RegisterSceneDisplayDirector(SceneDisplayDirectorBase* SceneDisplayDirector);// 0x3f6b998
	void RegisterRenderActorInternal(out SceneRenderActorBase*[] RenderActorList, SceneRenderActorBase* RenderActor, int Order);// 0x3f6b87c
	void RegisterRenderActor(enum ActorType, SceneRenderActorBase* RenderActor, int Order);// 0x3f6b788
	void OnResetDisplayAvatarByTag(FString Tag);// 0x3f6b6b0
	void OnRefreshTeamAssembleDisplayInfoByTag(FString Tag, int ActorIndex, out const TeamAssembleAvatarDisplayInfo DetailInfo);// 0x3f6b4b0
	void OnRefreshSceneDisplayCountDownValue(FString Tag, int CountDown, int TotalCountDown);// 0x3f6b364
	void OnRefreshSceneDisplayAvatarByTag(FString Tag, int ActorIndex, out const PlayerDetailInfo DetailInfo);// 0x3f6b1b0
	void OnRefreshDisplayActorNumberByTag(FString Tag, int ActorNumber);// 0x3f6b09c
	void OnRefreshCountDownValue(enum ActorType, int CountDown, int TotalCountDown);// 0x3f6afac
	int GetTotalDisplayActorNumberByTag(FString Tag);// 0x3f6aecc
	int GetRenderActorNumberByType(enum ActorType);// 0x3f6ae40
	static SceneRenderActorManager* GetInstance(Object* InWorldContextObject);// 0x3f6adc4
	SceneDisplayDirectorBase* GetDisplayActorByTag(FString Tag, int Index);// 0x3f6aca8
	void DestroySceneDisplayActorByTag(FString Tag);// 0x3f6abd0
	void DestroyRenderActorByType(enum ActorType);// 0x3f6ab54
	void DestroyRenderActorByTag(enum ActorType, FString ActorTag);// 0x3f6aa3c

--------------------------------
Class: RenderActorDetail
	SceneRenderActorBase*[] RenderPawnList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: SceneRenderActorBase.Actor.Object
	STExtraLobbyCharacter* CurrentRenderCharacter;//[Offset: 0x3e8, Size: 8]
	enum ActorType;//[Offset: 0x3f0, Size: 1]
	FString ActorTag;//[Offset: 0x3f8, Size: 16]
	int Order;//[Offset: 0x408, Size: 4]
	Object* RTMaterialInstance;//[Offset: 0x410, Size: 8]
	AvatarComponent* CurrentCharacterAvatarComponent;//[Offset: 0x418, Size: 8]
	SceneCaptureComponent2D* CurrentCharacterCaptureComponent;//[Offset: 0x420, Size: 8]
	WidgetComponent* CharacterInfoWidgetCompoent;//[Offset: 0x428, Size: 8]
	void OnRefreshCountDownValue(int CountDown, int TotalCountDown);// 0x3f6a4e0
	void OnRefreshAvatarInfoBlueprint(int Gender, out const int[] ItemList);// 0xffffff8f20d162a8
	void OnDestroyRenderActor();// 0x3f6a4cc
	SceneCaptureComponent2D* GetCurrentCharacterCaptureComponent();// 0x3f6a498
	AvatarComponent* GetCurrentCharacterAvatarComponent();// 0x3f6a464
	WidgetComponent* GetCharacterInfoWidgetComponent();// 0x3f6a430

--------------------------------
Class: STExtraLobbyCharacter.Character.Pawn.Actor.Object
	delegate lobbyCharacterSceneTypeChangeEvent;//[Offset: 0x838, Size: 16]
	bool bEnableAvatarStylePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	bool bCurAvatarHasPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x849, Size: 1]
	FName curAvatarStyle;//[Offset: 0x850, Size: 8]
	byte charSceneType;//[Offset: 0x858, Size: 1]
	byte lobbyPosIdx;//[Offset: 0x859, Size: 1]
	int localLobbyPos;//[Offset: 0x85c, Size: 4]
	delegate lobbyCharGenderChangeDelegate;//[Offset: 0x860, Size: 16]
	UAEDataTable* SpecialAnimaionWeapons;//[Offset: 0x878, Size: 8]
	STExtraWeapon* curEquipWeapon;//[Offset: 0x880, Size: 8]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x888, Size: 8]
	LobbyAnimPoseTagSwitcher[] AnimPoseSwitchers;//[Offset: 0x890, Size: 16]
	LobbyGenderAnim[] LobbyAvatarStyleAnims;//[Offset: 0x8a0, Size: 16]
	FString[] ForceOpenAvatarExclusivePoseSystems;//[Offset: 0x8b0, Size: 16]
	FString[] ForceOpenAvatarStylePoseSystems;//[Offset: 0x8c0, Size: 16]
	LobbyAnimConfigData[] LobbyPoseAnims;//[Offset: 0x8d0, Size: 16]
	LobbyAnimConfigData[] DefaultLobbyPoseAnims;//[Offset: 0x8e0, Size: 16]
	delegate lobbyAnimMontagePlayDelegate;//[Offset: 0x8f0, Size: 16]
	delegate lobbyAnimWeaponChangeDelegate;//[Offset: 0x900, Size: 16]
	delegate lobbyCharPosChangeDelegate;//[Offset: 0x910, Size: 16]
	FString[] AvatarParticleIgnoreNotifies;//[Offset: 0x920, Size: 16]
	delegate EmoteMontageStartEvent;//[Offset: 0x930, Size: 16]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x940, Size: 16]
	delegate LobbyResetEvent;//[Offset: 0x950, Size: 16]
	delegate RotateEndEvent;//[Offset: 0x960, Size: 16]
	delegate LobbyCharacterPlayEmoteEvent;//[Offset: 0x970, Size: 16]
	delegate LobbyCharacterStopEmoteEvent;//[Offset: 0x980, Size: 16]
	bool bIsMainCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x991, Size: 1]
	int ProfileRenderTargetSize;//[Offset: 0x994, Size: 4]
	SceneCaptureComponent2D* ProfileCaptureComponent;//[Offset: 0x998, Size: 8]
	bool bAutoSetupRenderTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a0, Size: 1]
	float ProfileCaptureDelayTime;//[Offset: 0x9a4, Size: 4]
	TextureRenderTarget2D* ProfileRenderTarget;//[Offset: 0x9a8, Size: 8]
	enum SkirtPoseType;//[Offset: 0x9b8, Size: 1]
	float CurMainSkelHairAlpha;//[Offset: 0x9bc, Size: 4]
	void UnEquipWeaponComponent(int compId);// 0x4063f1c
	void UnequipWeapon(STExtraWeapon* Weapon);// 0x4063ea0
	void StopPlayEmoteInterruptBlend();// 0x4063e8c
	void StopPlayEmote();// 0x4063e78
	void ShutdownRenderTarget();// 0x4063e64
	bool SetupRenderTarget();// 0x4063e2c
	void SetNeedSyncAnim(bool bIsNeed);// 0x4063dac
	void SetLobbyPosIndexInAvatarScene(int Pos);// 0x4063d30
	void SetLobbyPosIndex(byte Pos);// 0x4063cac
	void SetLobbyCharacterProperty(byte SceneType, byte Pos, byte Gender);// 0x4063ba0
	void SetLobbyAnimGender(byte Gender);// 0x4063b14
	void SetIsMainCharacter(bool bIsMain);// 0x4063a94
	void SetEnableAvatarStylePose(bool bEnable);// 0x4063a10
	void SetCharSceneType(byte SceneType);// 0x406398c
	void SetCanTouchRollPawn(bool bIsCan);// 0xffffff8f20d162a8
	void SetAnimPoseTagSwitcher(FName PoseTag, bool bIsOpen);// 0x40638cc
	void ResetLobbyPoseAnimByPosTag(FName PoseTag, bool bIsPlay);// 0x406380c
	void ResetCharacterPhysics();// 0x40637f8
	void ResetAllAvatarPhysics();// 0x40637e4
	void RefreshGripAnim();// 0x40637d0
	void ProfileShot();// 0x40637b4
	void PreProfileShot();// 0xffffff8f20d162a8
	FString PostProfileShot(FString TargetFileName);// 0xffffff8f20d162a8
	void OnRotateStoppedEventTrigger();// 0x40637a0
	bool OnPlayEmote(int EmoteId, bool needIgnoreNotify, bool bNeedLoop);// 0x4063688
	void OnLobbyResetEventTrigger();// 0x4063674
	void OnAvatarEquiped(int SlotType, bool IsEquipped);// 0x40635b4
	void JumpToEmoteSection(FName SectionName);// 0x4063538
	bool IsForceOpenAvatarStylePose(FString InSystemTag);// 0x4063454
	bool IsForceOpenAvatarExclusivePose(FString InSystemTag);// 0x4063370
	void HandleOnCharAnimLoadingFinished();// 0x406335c
	AELobbyCharAnimListComp* GetWeaponAnimComponent();// 0x4063328
	AnimationAsset* GetWeaponAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x4063224
	byte GetLobbyPosIndex();// 0x40631f0
	byte GetLobbyAnimGender();// 0x40631bc
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0xffffff8f20d162a8
	STExtraWeapon* GetCurrentWeapon();// 0x4063188
	int GetCurrentEmoteId();// 0x4063154
	<int,AnimInstance*> GetClothAnimInstance();// 0xffffff8f20d162a8
	byte GetCharSceneType();// 0x4063120
	AnimationAsset* GetCharacterAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x406301c
	AnimationAsset* GetAvatarStyleAnimAssetByGender(byte GenderType, FName StyleName);// 0x4062f20
	void ForceAnimationUpdateAtOnce();// 0x4062f0c
	void EquipWeaponComponent(int compId);// 0x4062e90
	void EquipWeapon(STExtraWeapon* Weapon);// 0x4062e14
	void CheckCurHoldSpecialWeapon();// 0x4062e00
	void CaptureProfile(bool bDeferred);// 0x4062d7c

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x38, Size: 8]
	Pawn* OwnerPawn;//[Offset: 0x40, Size: 8]
	Controller* OwnerController;//[Offset: 0x48, Size: 8]
	STExtraWeapon* BindedWeapon;//[Offset: 0x50, Size: 8]
	void OnWeaponStopFireDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x4208274
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x42081bc
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x4208188
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x4208154
	PlayerController* GetOwnerPlayerController();// 0x4208120
	Pawn* GetOwnerPawn();// 0x42080ec
	Controller* GetOwnerController();// 0x42080b8
	Actor* GetOwnerActor();// 0x420809c

--------------------------------
Class: LobbyAnimPoseTagSwitcher
	FName TagName;//[Offset: 0x0, Size: 8]
	bool IsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	LobbyCharacterWeaponAnimData[] CharacterWeaponAnimEditList;//[Offset: 0x270, Size: 16]
	LobbyCharacterWeaponAnimData[] AvatarSceneCharacterWeaponAnimEditList;//[Offset: 0x280, Size: 16]
	LobbyCharacterWeaponAnimData[] LobbyWithCarCharacterWeaponAnimEditList;//[Offset: 0x290, Size: 16]
	LobbyCharacterWeaponAnimData[] LobbySystemCharacterWeaponAnimEditList;//[Offset: 0x2a0, Size: 16]
	void OnAsyncLoadingFinished(LobbyAsyncLoadCharAnimParams LoadingParam);// 0x49ea2cc
	void InitPendingList(out LobbyCharacterWeaponAnimData[] animEditList, out SoftObjectPath[] PendingList);// 0x49ea1ac
	AnimationAsset* GetCharacterAnim(byte PosIdx, byte GenderType, int WeaponAnimType, byte SceneType);// 0x49ea06c
	void BuildAnimMap(out LobbyCharacterWeaponAnimData[] animList, byte SceneType);// 0x49e9f90

--------------------------------
Class: LobbyCharacterWeaponAnimData
	byte PosIndex;//[Offset: 0x0, Size: 1]
	FString CharPosName;//[Offset: 0x8, Size: 16]
	LobbyCharacterGenderWeaponAnimData[] GenderWeaponAnimList;//[Offset: 0x18, Size: 16]

--------------------------------
Class: LobbyCharacterGenderWeaponAnimData
	byte GenderType;//[Offset: 0x0, Size: 1]
	FString GenderTypeName;//[Offset: 0x8, Size: 16]
	AnimationAsset* WeaponAnimSoftPtr;//[Offset: 0x18, Size: 40]
	AnimationAsset* WeaponAddAnimSoftPtr;//[Offset: 0x40, Size: 40]

--------------------------------
Class: LobbyAsyncLoadCharAnimParams

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0xe0, Size: 40]
	AnimationAsset* AnimIgnoreEffectAsset;//[Offset: 0x108, Size: 40]
	ParticleSystem* BubbleAsset;//[Offset: 0x130, Size: 40]
	Vector BubbleScale;//[Offset: 0x158, Size: 12]
	float BubbleShowTime;//[Offset: 0x164, Size: 4]
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	bool StopInLastFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 1]
	bool isHaveContinuousEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 1]
	bool bIsScaleActorAtStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 1]
	float ScaleActorTimeAtStart;//[Offset: 0x16c, Size: 4]
	bool bSetSlotAnimInvisibleAtStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	float SlotAnimInvisibleTimeAtStart;//[Offset: 0x174, Size: 4]
	bool bNeedResolveDragArtifact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	float ResolveDragArtifactTime;//[Offset: 0x17c, Size: 4]
	bool bOpenLobbyReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	float BoundScale;//[Offset: 0x184, Size: 4]
	bool bAvoidParticleEffectRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	bool bIsResetTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 1]
	bool bOnLobbyRest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18a, Size: 1]
	EmoteAnimConfig[] AnimAssetByTags;//[Offset: 0x190, Size: 16]
	float BlendTime;//[Offset: 0x1a0, Size: 4]
	<enum,int> AvatarIDMap;//[Offset: 0x1a8, Size: 80]
	float DelayUpdateAvatarAlphaTime;//[Offset: 0x1f8, Size: 4]
	EmoteSeqConfig[] SeqConfig;//[Offset: 0x200, Size: 16]
	LobbyGenderAnimData[] LobbyEnterEmoteAnimAssetList;//[Offset: 0x210, Size: 16]
	LobbyGenderAnimData[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0x220, Size: 16]
	MultiAnimData[] MultiAnimDatas;//[Offset: 0x230, Size: 16]
	GenderMultiAnimData[] GenderMultiAnimDatas;//[Offset: 0x240, Size: 16]
	EmoteSlotAnimConfig[] SlotAnimDatas;//[Offset: 0x250, Size: 16]
	bool HideAllSceneLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0x268, Size: 8]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0x270, Size: 8]
	MVPAvatarDisplayParam MVPAvatarDisplayParam;//[Offset: 0x278, Size: 72]
	Vector EmoteColBox;//[Offset: 0x2c0, Size: 12]
	Vector EmoteColOffset;//[Offset: 0x2cc, Size: 12]
	bool PlayEmoteParticle();// 0x3c9b7d0
	bool NotifyPlayEmoteCancel();// 0xffffff8f20d162a8
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x3c9b6e0
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x3c9b440
	bool HandleDrop(int InCount, enum Reason);// 0x3c9b36c
	bool HandleDisuse(enum Reason);// 0x3c9b2d4
	BackpackComponent* GetBackpackComponent();// 0x3c9b2a0
	bool CheckCanPickUp(CharacterAvatarComponent* AvatarComp, int nowCapcity);// 0x3c9b1d4

--------------------------------
Class: EmoteAnimConfig
	FName NameTag;//[Offset: 0x0, Size: 8]
	AnimationAsset* AnimAsset;//[Offset: 0x8, Size: 40]
	CameraAnim* EmoteCameraAnimation;//[Offset: 0x30, Size: 40]
	CameraAnim* EmoteCameraAnimationLongScreen;//[Offset: 0x58, Size: 40]

--------------------------------
Class: EmoteSeqConfig
	FName NameTag;//[Offset: 0x0, Size: 8]
	LevelSequence* Seq;//[Offset: 0x8, Size: 40]
	LevelSequence* LowLevelSeq;//[Offset: 0x30, Size: 40]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x2e0, Size: 8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x2e8, Size: 80]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x338, Size: 80]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x388, Size: 80]

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 80]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 16]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 16]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 24]
	FString ObjectPath;//[Offset: 0x28, Size: 16]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 28]
	FString ComponentName;//[Offset: 0x20, Size: 16]
	Object* CachedComponent;//[Offset: 0x30, Size: 8]

--------------------------------
Class: LobbyGenderAnimData
	AnimationAsset* BoyAnim;//[Offset: 0x0, Size: 40]
	AnimationAsset* GirlAnim;//[Offset: 0x28, Size: 40]

--------------------------------
Class: MultiAnimData
	class Character* Character;//[Offset: 0x0, Size: 8]
	AnimationAsset* Anim;//[Offset: 0x8, Size: 40]
	bool bCanControlOnAnimEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: GenderMultiAnimData
	FName TypeTag;//[Offset: 0x0, Size: 8]
	class Character* Character;//[Offset: 0x8, Size: 8]
	AnimationAsset* Anim;//[Offset: 0x10, Size: 40]
	bool bCanControlOnAnimEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: EmoteSlotAnimConfig
	enum targetSlot;//[Offset: 0x0, Size: 1]
	LobbyGenderAnimData AnimAsset;//[Offset: 0x8, Size: 80]
	int AvatarID;//[Offset: 0x58, Size: 4]

--------------------------------
Class: MVPAvatarDisplayParam
	FString AnimPlaySubLevel;//[Offset: 0x0, Size: 16]
	CameraAnimParam SpecifyCameraAnim;//[Offset: 0x10, Size: 56]

--------------------------------
Class: CameraAnimParam
	bool bStopOtherAnimWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bStopOtherAnimImmediately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bKeepLocAndRotWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bIgnoreAnimTrackStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	float KeepLocAndRotReverseToFinishTime;//[Offset: 0x4, Size: 4]
	CameraAnim* Anim;//[Offset: 0x8, Size: 8]
	float Rate;//[Offset: 0x10, Size: 4]
	float Scale;//[Offset: 0x14, Size: 4]
	float BlendInTime;//[Offset: 0x18, Size: 4]
	float BlendOutTime;//[Offset: 0x1c, Size: 4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	float Duration;//[Offset: 0x24, Size: 4]
	byte PlaySpace;//[Offset: 0x28, Size: 1]
	Rotator UserPlaySpaceRot;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: SceneDisplayDirectorBase.Actor.Object
	FString DirectorTag;//[Offset: 0x3e8, Size: 16]
	int TipMsgID;//[Offset: 0x3f8, Size: 4]
	bool IsUseLodControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	int CountDownTimeThreshold;//[Offset: 0x400, Size: 4]
	int RefreshCharmPlayerTimeThreshold;//[Offset: 0x404, Size: 4]
	int StopRefreshCharmPlayerTimeThreshold;//[Offset: 0x408, Size: 4]
	FString TemplateWidgetPath;//[Offset: 0x410, Size: 16]
	FString[] CountDownWidgetTemplates;//[Offset: 0x420, Size: 16]
	int[] FilterItemIdList;//[Offset: 0x430, Size: 16]
	int[] FilterItemTypeIdList;//[Offset: 0x440, Size: 16]
	enum[] FilterSlotList;//[Offset: 0x450, Size: 16]
	CameraAnimParam CameraAnimParam;//[Offset: 0x460, Size: 56]
	AvatarDisplayPoseComponent*[] AvatarDisplayPoseList;//[Offset: 0x498, Size: 16]
	WidgetComponent*[] WidgetCompoentList;//[Offset: 0x4a8, Size: 16]
	CustomActorIndicatorWidget*[] ActorIndicatorWidgetList;//[Offset: 0x4b8, Size: 16]
	VehicleAvatarDisplayPoseComponent*[] VehicleAvatarDisplayPostList;//[Offset: 0x4c8, Size: 16]
	RenderWidgetBase*[] CountDownWidgetList;//[Offset: 0x4d8, Size: 16]
	bool HasCameraAnimStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	<uint32,DisplayAvatarDetail> DisplayAvatarDetailCache;//[Offset: 0x4f0, Size: 80]
	int LastSeasonId;//[Offset: 0x540, Size: 4]
	TimerHandle KeepCameraLocAndRotByFrameTimer;//[Offset: 0x548, Size: 8]
	CameraAnim* InPlayingCameraAnim;//[Offset: 0x550, Size: 8]
	bool HasSwithToTeamAssembleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	void SwitchToTeamAssembleViewBlueprint(bool bIsEnable);// 0xffffff8f20d162a8
	void SwitchToTeamAssembleView(bool bIsEnable);// 0x3f62c68
	void SetPrimitiveLightChannel(PrimitiveComponent* Component, int LightChannel);// 0x3f62bb0
	void PlayCameraAnimation();// 0x3f62b9c
	void OnUpdateDisplayActorNumber(int TotolNumber);// 0xffffff8f20d162a8
	void OnSwitchToTeamAssembleView();// 0xffffff8f20d162a8
	void OnResetDisplayAvatarBlueprint();// 0xffffff8f20d162a8
	void OnResetDisplayAvatar();// 0x3f62b88
	void OnRefreshTeammateAssembleInfoBlueprint(int ActorIndex, out const TeamAssembleAvatarDisplayInfo DetailInfo, out const int[] OnlyWearList);// 0xffffff8f20d162a8
	void OnRefreshTeammateAssembleDisplayInfo(int ActorIndex, out const TeamAssembleAvatarDisplayInfo AvatarDisplayInfo);// 0x3f62a2c
	void OnRefreshCountDownValue(int CountDown, int TotalCountDown);// 0x3f62978
	void OnRefreshAvatarInfoBlueprint(AvatarDisplayPoseComponent* DisplayComp, WidgetComponent* WidgetComp, out const PlayerDetailInfo DetailInfo, out const int[] OnlyWearList);// 0xffffff8f20d162a8
	void OnPreRefreshTeammateAssembleInfoBlueprint(int ActorIndex);// 0xffffff8f20d162a8
	void OnPreRefreshAvatarInfoBlueprint(int ActorIndex, bool isSelf, bool IsTeammate, out const PlayerDetailInfo DetailInfo, AvatarDisplayPoseComponent* DisplayComp, WidgetComponent* WidgetComp, bool IsAlreadyDisplaying);// 0xffffff8f20d162a8
	void OnPostRefreshAvatarInfoBlueprint(AvatarDisplayPoseComponent* DisplayComp, WidgetComponent* WidgetComp, out const PlayerDetailInfo DetailInfo);// 0xffffff8f20d162a8
	void OnKeepCameraLocAndRot();// 0x3f62964
	void OnDestroyDisplayActorBlueprint();// 0xffffff8f20d162a8
	void OnDestroyDisplayActor();// 0x3f62950
	void OnCountDownChanged(int CountDown, int TotalCountDown);// 0xffffff8f20d162a8
	void OnCameraAnimationFinished();// 0xffffff8f20d162a8
	bool NeedEnableDisplayActor();// 0xffffff8f20d162a8
	bool IsEnableCharmPlayerShowTest();// 0x3f62918
	bool IsAvatarItemFiltered(int ItemID);// 0x3f62880
	bool HasPlayerWearChanged(uint32 PlayerKey, int ActorIndex, out const PlayerDetailInfo DetailInfo);// 0x3f6271c
	Vector GetPlayerInfoWidgetLocation(int ActorIndex);// 0x3f62684
	CustomActorIndicatorWidget* CreateIndicatorWidgetInstance(FString TemplatePath);// 0x3f625a4

--------------------------------
Class: AvatarDisplayPoseComponent.SceneComponent.ActorComponent.Object
	AnimMontage* AnimMontage;//[Offset: 0x2c0, Size: 8]
	FString PlayerName;//[Offset: 0x2c8, Size: 16]
	int Gender;//[Offset: 0x2d8, Size: 4]
	int[] InitialAvatarItem;//[Offset: 0x2e0, Size: 16]
	int[] InitialWeaponItem;//[Offset: 0x2f0, Size: 16]
	int[] InitialWeaponAttachments;//[Offset: 0x300, Size: 16]
	STExtraLobbyCharacter* LobbyPawn;//[Offset: 0x310, Size: 8]
	CharacterAvatarComponent* PlayerAvatar;//[Offset: 0x318, Size: 8]
	int TeamID;//[Offset: 0x320, Size: 4]
	int PoseID;//[Offset: 0x324, Size: 4]
	int HeadID;//[Offset: 0x328, Size: 4]
	void SpawnAvatar(bool IsUseLod);// 0x3c7d454
	void SetLightChannel(int LightChannel);// 0x3c7d3d8
	void PlayAnimMontage();// 0x3c7d3c4
	int GetUpgradeWeaponPendantID();// 0x3c7d390
	void CreateWeaponAttachmentsSkin();// 0x3c7d37c
	void CreateUpgradeWeaponPendant();// 0x3c7d368
	void CreateAvatarEquipment(int AvatarResID);// 0x3c7d2ec

--------------------------------
Class: CustomActorIndicatorWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool IsFixLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool IsUseCameraLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	bool IsEnableDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 1]
	CanvasPanelSlot* MyCanvasPanelSlot;//[Offset: 0x430, Size: 8]
	CanvasPanel* MyCanvasPanel;//[Offset: 0x438, Size: 8]
	Vector4 Limit;//[Offset: 0x440, Size: 16]
	Vector2D UIOffset;//[Offset: 0x450, Size: 8]
	Vector LocOffset;//[Offset: 0x458, Size: 12]
	CanvasPanelSlot* MarkCanvasPanelSlot;//[Offset: 0x468, Size: 8]
	Vector2D MarkUIOffset;//[Offset: 0x470, Size: 8]
	Vector MarkLocOffset;//[Offset: 0x478, Size: 12]
	float ScaleBegin;//[Offset: 0x484, Size: 4]
	float ScaleEnd;//[Offset: 0x488, Size: 4]
	float ScaleStep;//[Offset: 0x48c, Size: 4]
	float ScaleBeginDistance;//[Offset: 0x490, Size: 4]
	float ScaleEndDistance;//[Offset: 0x494, Size: 4]
	float MaxShowDistance;//[Offset: 0x498, Size: 4]
	float UpdateDistanceTolerance;//[Offset: 0x49c, Size: 4]
	int TargetDistance;//[Offset: 0x4a0, Size: 4]
	Vector LastPlayerLocation;//[Offset: 0x4a4, Size: 12]
	Rotator LastPlayerRotation;//[Offset: 0x4b0, Size: 12]
	Vector LastActorLocation;//[Offset: 0x4bc, Size: 12]
	Vector2D LastWidgetPosition;//[Offset: 0x4c8, Size: 8]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x4dc, Size: 8]
	void UpdateTargetActorLocation(Vector Loc);// 0x3d59e28
	void UpdateAll();// 0x3d59e14
	void OnWidgetDestroyed();// 0xffffff8f20d162a8
	void OnWidgetCreated();// 0xffffff8f20d162a8
	void OnSwitchWidgetVisibility(bool IsVisible);// 0xffffff8f20d162a8
	void OnRefreshTeamAssemblePlayerInfo(out const TeamAssembleAvatarDisplayInfo PlayerInfo, int ItemIndex);// 0xffffff8f20d162a8
	void OnRefreshCharmPlayerInfo(out const PlayerDetailInfo PlayerInfo, int ItemIndex);// 0xffffff8f20d162a8
	void EnableUpdateLocation(bool bEnable);// 0x3d59d90

--------------------------------
Class: PlayerDetailInfo
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	FString PlayerName;//[Offset: 0x8, Size: 16]
	int CharmLevel;//[Offset: 0x18, Size: 4]
	int CharmValue;//[Offset: 0x1c, Size: 4]
	int Gender;//[Offset: 0x20, Size: 4]
	int Sex;//[Offset: 0x24, Size: 4]
	int SeasonId;//[Offset: 0x28, Size: 4]
	bool AllowViewCharmValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int[] AvatarItemList;//[Offset: 0x30, Size: 16]
	bool IsDataChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	int WingManID;//[Offset: 0x44, Size: 4]
	bool bIsWingManPlayerSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	FString WingManName;//[Offset: 0x50, Size: 16]

--------------------------------
Class: VehicleAvatarDisplayPoseComponent.AvatarDisplayPoseComponent.SceneComponent.ActorComponent.Object
	STExtraDisplayVehicle* VehicleActor;//[Offset: 0x330, Size: 8]
	DisplayVehicleAvatarComponent* VehicleAvatar;//[Offset: 0x338, Size: 8]
	void SpawnVehicleAvatarByResId(int resID);// 0x41bf514

--------------------------------
Class: STExtraDisplayVehicle.Actor.Object
	DisplayVehicleAvatarComponent* VehicleAvatarComponent;//[Offset: 0x3e8, Size: 8]
	SkeletalMeshComponent* Mesh;//[Offset: 0x3f0, Size: 8]
	void SwitchLightChannel(int Channel);// 0x403f308
	DisplayVehicleAvatarComponent* GetVehicleAvatarComponent();// 0x403f2d4

--------------------------------
Class: DisplayVehicleAvatarComponent.VehicleAvatarComponent.AvatarComponent.SceneComponent.ActorComponent.Object
	void InitVehicleAvatarByResId(int resID);// 0x3d767f0
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, BattleItemHandleBase* Handle);// 0x3d766e4
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* MeshComp);// 0x3d76628

--------------------------------
Class: VehicleAvatarComponent.AvatarComponent.SceneComponent.ActorComponent.Object
	<int,int> DefaultAttachmentMeshID;//[Offset: 0x890, Size: 80]
	bool PutOffMeshIfLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 1]
	bool PutOffAttachIfLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e1, Size: 1]
	<enum,FName> VehicleSlotNameMap;//[Offset: 0x8e8, Size: 80]
	enum VehicleMeshMode;//[Offset: 0x938, Size: 1]
	DefaultAvatarRes DefultAvatarRes;//[Offset: 0x940, Size: 32]
	ItemDefineID DefaultAvatarID;//[Offset: 0x960, Size: 24]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x978, Size: 8]
	Actor* VehicleSkinTrigger;//[Offset: 0x980, Size: 8]
	MeshSynDataFlag[] SynData;//[Offset: 0x988, Size: 16]
	int[] SynDataID;//[Offset: 0x998, Size: 16]
	void ResetAttachmentParent();// 0x41be8f4
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* BaseHandle);// 0x41be868
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh);// 0x41be798
	bool PutOnEquipmentByResID(int resID);// 0x41be700
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x41be5f4
	bool PutOffEquimentByResID(int resID);// 0x41be55c
	void PushHandlesToPipeline(BattleItemHandleBase*[] handleList);// 0x41be484
	void PrepareRenderAssets(out VehicleMeshCfg meshPack, out SoftObjectPath[] MaterialAssets);// 0x41be360
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynDataFlag SyncData);// 0x41be24c
	void OnRep_AvatarMeshChanged();// 0x41be238
	void OnItemHandleListLoaded(BattleItemHandleBase*[] ItemHandles, int AsyncLoadID);// 0x41be124
	void OnDetailMeshLoaded(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x41bdf74
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x41bddb4
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x41bdcb8
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x41bdbbc
	bool IsUseDefaultAvatar();// 0x41bdb84
	bool IsTPPMode();// 0x41bdb60
	SkeletalMesh* GetSkeletalMesh(out VehicleMeshCfg meshPack);// 0x41bdab8
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef);// 0x41bd9c4
	MeshComponent* GetMeshComponentBySlotID(int SlotID);// 0x41bd938
	void GetMaterial(out VehicleMeshCfg meshPack, out MaterialInstanceSet[] matList);// 0x41bd83c
	AvatarEntityFactory* GetEntityFactory();// 0x41bd800
	MaterialInstance* GetAdvancedMaterial(out VehicleMeshCfg meshPack);// 0x41bd758
	SyncAdditionDataArray GetAdditionalDataBySlot(const int InSlotID);// 0x41bd57c
	void ExitFPPMode();// 0x41bd568
	void EnterFPPMode();// 0x41bd554
	void ClearMeshBySlot(int Slot, bool putDefault);// 0x41bd48c
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x41bd408
	bool CheckSlotIsEquipped(int SlotID);// 0x41bd378
	bool CheckIsAlreadyEquipped(ItemDefineID DefineID);// 0x41bd2d8
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, BattleItemHandleBase* Handle);// 0x41bd1cc
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* MeshComp);// 0x41bd110
	void ApplyBrokenEffect();// 0x41bd0fc

--------------------------------
Class: DefaultAvatarRes
	SkeletalMesh* FPPMesh;//[Offset: 0x0, Size: 8]
	SkeletalMesh* TPPMesh;//[Offset: 0x8, Size: 8]
	MaterialInstance* FPPMat;//[Offset: 0x10, Size: 8]
	MaterialInstance* TPPMat;//[Offset: 0x18, Size: 8]

--------------------------------
Class: MeshSynDataFlag
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum OperationType;//[Offset: 0x18, Size: 1]
	int SyncID;//[Offset: 0x1c, Size: 4]
	SyncAdditionDataArray SynAdditionalData;//[Offset: 0x20, Size: 16]

--------------------------------
Class: VehicleMeshCfg
	SkeletalMesh* FPPMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0x28, Size: 40]
	SkeletalMesh* LobbyMesh;//[Offset: 0x50, Size: 40]
	MaterialAssetSet[] LobbyMeshMat;//[Offset: 0x78, Size: 16]
	MaterialAssetSet[] MaterialList;//[Offset: 0x88, Size: 16]
	class AnimInstance* animBPClass;//[Offset: 0x98, Size: 40]
	StaticMesh* BrokenStaticMesh;//[Offset: 0xc0, Size: 40]
	SkeletalMesh* BrokenSkeletalMesh;//[Offset: 0xe8, Size: 40]
	MaterialAssetSet[] BrokenMeshMaterialList;//[Offset: 0x110, Size: 16]
	MaterialInstanceSet[] BrokenMatList;//[Offset: 0x120, Size: 16]
	VehilePawnAnimList[] VehicleSeatsAnimOverride;//[Offset: 0x130, Size: 16]
	WheelSetup[] WheelSetups;//[Offset: 0x140, Size: 16]
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x150, Size: 16]
	VehicleTransmissionData GearSetup;//[Offset: 0x160, Size: 48]
	Vector CenterOfMassOffset;//[Offset: 0x190, Size: 12]
	enum AdvancedConditionType;//[Offset: 0x19c, Size: 1]
	FName AdvancedSlotName;//[Offset: 0x1a0, Size: 8]
	MaterialInterface* AdvancedMaterial;//[Offset: 0x1a8, Size: 40]

--------------------------------
Class: MaterialAssetSet
	MaterialInterface* Material;//[Offset: 0x0, Size: 40]
	FName MatSlot;//[Offset: 0x28, Size: 8]

--------------------------------
Class: MaterialInstanceSet
	MaterialInstance* MaterialInstance;//[Offset: 0x0, Size: 8]
	FName MatSlot;//[Offset: 0x8, Size: 8]

--------------------------------
Class: VehilePawnAnimList
	FString VehicleSeat;//[Offset: 0x0, Size: 16]
	VehilePawnAnimData[] AnimDataList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: VehilePawnAnimData
	byte VehAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: RenderWidgetBase.UAEUserWidget.UserWidget.Widget.Visual.Object
	void OnWidgetDestroyed();// 0xffffff8f20d162a8
	void OnWidgetCreated();// 0xffffff8f20d162a8
	void OnSwitchWidgetVisibility(bool IsVisible);// 0xffffff8f20d162a8
	void OnRefreshSeasonId(int SeasonId);// 0xffffff8f20d162a8
	void OnRefreshRtImageResource(Object* NewResource);// 0xffffff8f20d162a8
	void OnRefreshCountDownValue(int CountDownValue, int TotalCountDownValue);// 0xffffff8f20d162a8
	void OnRefreshCharmPlayerInfo(out const PlayerDetailInfo PlayerInfo);// 0xffffff8f20d162a8

--------------------------------
Class: DisplayAvatarDetail
	int ActorIndex;//[Offset: 0x0, Size: 4]
	int[] WearList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: DynamicVibrateSystemManager.Object
	FString ClassPath;//[Offset: 0x28, Size: 16]
	FString VibrateAssetTablePath;//[Offset: 0x38, Size: 16]
	int MaxAmplitude;//[Offset: 0x48, Size: 4]
	int GroundSpesificMatVibrationMinGrear;//[Offset: 0x4c, Size: 4]
	float VehicleBreakingMinSpeedThreshold;//[Offset: 0x50, Size: 4]
	float VehicleGearMinSpeedThreshold;//[Offset: 0x54, Size: 4]
	int[] TriggerVehicleVibrateGroundPhysicMatList;//[Offset: 0x58, Size: 16]
	float TriggerVehicleVibrateMinSlip;//[Offset: 0x68, Size: 4]
	float TriggerVehicleVibrateMinSuspensionRaisePercent;//[Offset: 0x6c, Size: 4]
	float VehicleRaiseSuspensionVibrateInerval;//[Offset: 0x70, Size: 4]
	int InitAssetProccessNumFrames;//[Offset: 0x74, Size: 4]
	<int,enum> LoadedVibrateAssetIDAndEventTypeMap;//[Offset: 0xc8, Size: 80]
	<enum,float> VibrateStrengthLevelModifireMap;//[Offset: 0x118, Size: 80]
	<enum,float> VibrateEventMinIntervalMap;//[Offset: 0x168, Size: 80]
	enum[] CharacterVibrateEventList;//[Offset: 0x1b8, Size: 16]
	enum[] WeaponVibrateEventList;//[Offset: 0x1c8, Size: 16]
	enum[] VehicleVibrateEventList;//[Offset: 0x1d8, Size: 16]
	enum[] SoundUIVibrateEventList;//[Offset: 0x1e8, Size: 16]
	enum[] CharacterBeHitVibrateEventList;//[Offset: 0x1f8, Size: 16]
	enum[] VehicleEngineVibrateEventList;//[Offset: 0x208, Size: 16]
	enum[] VehicleBeHitVibrateEventList;//[Offset: 0x218, Size: 16]
	int CharacterVibrationLevel;//[Offset: 0x228, Size: 4]
	int WeaponVibrationLevel;//[Offset: 0x22c, Size: 4]
	int VehicleVibrationLevel;//[Offset: 0x230, Size: 4]
	int SoundUIVibrationLevel;//[Offset: 0x234, Size: 4]
	int EntireVibrationLevel;//[Offset: 0x238, Size: 4]
	bool bCharacterVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	bool bWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	bool bVehicleVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e, Size: 1]
	bool bSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23f, Size: 1]
	bool bCharacterBeHitVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	bool bCharacterClimbVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 1]
	bool bCharacterFallVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x242, Size: 1]
	bool bCharacterSwimVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x243, Size: 1]
	bool bAutoWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	bool bSemiAutoWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 1]
	bool bBoltWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246, Size: 1]
	bool bOtherWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x247, Size: 1]
	bool bVehicleEngineVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bVehicleBeHitVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	bool bVehicleCrashVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24a, Size: 1]
	bool bFootstepSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b, Size: 1]
	bool bFireShotSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	bool bGlassBrokenSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 1]
	bool bVehicleSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 1]
	TimerHandle StopVibrateHandle;//[Offset: 0x250, Size: 8]
	int CurPlayingVibrateAssetIndex;//[Offset: 0x258, Size: 4]
	int CurLoopPlayingVibrateAssetIndex;//[Offset: 0x25c, Size: 4]
	int DeviceSupportVibrateType;//[Offset: 0x260, Size: 4]
	bool bHasEndplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	bool bIsHandBreaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	bool bHasLastVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	int LastVehicleGear;//[Offset: 0x2bc, Size: 4]
	bool bIsLastVehicleBreaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bIsLastVehicleSlipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]
	int LastVehicleGroundContactMaterialSurfaceType;//[Offset: 0x2c4, Size: 4]
	<int,bool> LastVehicleGearVibrateCache;//[Offset: 0x2c8, Size: 80]
	<enum,float> LastVibrateEventTimeMap;//[Offset: 0x318, Size: 80]
	float CurVehicleRaiseSuspensionVibrateCD;//[Offset: 0x368, Size: 4]
	VibrateEntity[] CacheVibrateEntityList;//[Offset: 0x3e8, Size: 16]
	void StopVibrate();// 0x3d815d4
	void PostVibrateTriggerActionDirectly(int SpesifyID, int Amplitude);// 0x3d81518
	void PostVibrateTriggerAction(out const VibrateTriggerAction Action, bool bCheckGate, bool bCheckInterval, int SpesifyID);// 0x3d81358
	void PlayVibrateEntity(out const VibrateEntity entity);// 0x3d81294
	void ModifyVehicleVibrationLevel(int Val);// 0x3d81210
	void ModifyVehicleEngineVibrationSetting(bool Val);// 0x3d81184
	void ModifyEntireVibrationLevel(int Val);// 0x3d81108
	void LoadUserSettingData(int inCharacterVibrationLevel, int inWeaponVibrationLevel, int inVehicleVibrationLevel, int inSoundUIVibrationLevel, bool binCharacterBeHitVibrate, bool binCharacterClimbVibrate, bool binCharacterFallVibrate, bool binCharacterSwimVibrate, bool binVehicleEngineVibrate, bool binVehicleBeHitVibrate, bool binVehicleCrashVibrate, bool binFootstepSoundUIVibrate, bool binFireShotSoundUIVibrate, bool binGlassBrokenSoundUIVibrate, bool binVehicleSoundUIVibrate, int inEntireVibrationLevel, bool binAutoWeaponVibrate, bool binSemiAutoWeaponVibrate, bool binBoltWeaponVibrate, bool binOtherWeaponVibrate);// 0x3d80b24
	void InvalidateVibrateEntityByEventType(enum EventType);// 0x3d80aa8
	void InitUserSetting();// 0x3d80a8c
	void InitSystem();// 0x3d80a70
	void HandleApplicationWillTerminate();// 0x3d80a54
	void HandleApplicationWillEnterBackground();// 0x3d80a38
	void HandleApplicationWillDeactivate();// 0x3d80a1c
	void HandleApplicationHasReactivated();// 0x3d80a00
	void HandleApplicationHasEnteredForeground();// 0x3d809e4
	static DynamicVibrateSystemManager* GetInstance(const Object* WorldContext, bool bAutoCreate);// 0x3d80924
	int GetAmplitudeByAlpha(float Alpha);// 0x3d80890
	void ClearAllVibration();// 0x3d80874
	static void CheckAndCopyFilesToSavedDir(DynamicVibrateSystemManager* Mgr);// 0x3d80800

--------------------------------
Class: VibrateEntity
	int AssetID;//[Offset: 0x0, Size: 4]
	FString AssetAbsPath;//[Offset: 0x8, Size: 16]
	int PlayAmplitude;//[Offset: 0x18, Size: 4]
	FString PlayKeyParam;//[Offset: 0x20, Size: 16]
	int PlayPriority;//[Offset: 0x30, Size: 4]
	float PlayDuration;//[Offset: 0x34, Size: 4]
	bool bIsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	float PushTime;//[Offset: 0x3c, Size: 4]
	enum EventType;//[Offset: 0x40, Size: 1]

--------------------------------
Class: VibrateTriggerAction
	int VibrateAmplitude;//[Offset: 0x0, Size: 4]
	VibrateTriggerMainItem TriggerMainItem;//[Offset: 0x8, Size: 24]
	VibrateTriggerSubItem[] TriggerSubItemList;//[Offset: 0x20, Size: 16]
	enum TriggerEventType;//[Offset: 0x30, Size: 1]
	enum TriggerActionType;//[Offset: 0x31, Size: 1]

--------------------------------
Class: VibrateTriggerMainItem
	enum MainItemType;//[Offset: 0x0, Size: 1]
	FString Data;//[Offset: 0x8, Size: 16]

--------------------------------
Class: VibrateTriggerSubItem
	enum SubItemTyp;//[Offset: 0x0, Size: 1]
	FString Data;//[Offset: 0x8, Size: 16]

--------------------------------
Class: TslSimpleCollisionManager.Actor.Object
	SimpleSpherePersistentChecker[] PersistentExplosiveItemFields;//[Offset: 0x408, Size: 16]
	float DamageFieldUpdatePeriod;//[Offset: 0x490, Size: 4]
	float DamageFieldPassedTime;//[Offset: 0x494, Size: 4]
	void RegisterPersistentReceiver(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, int ID);// 0x415795c
	void RegisterBoundingSphere(out const Vector Origin, float Radius, TslSimpleCollisionReceiver* OwnerTracer);// 0x4157848
	void AddRandomPersistentCapsules(int Num, float RngRadius);// 0x4157790
	int AddCheckerToBoundingSphere(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, TslSimpleCollisionReceiver* receiver, bool RebuildSphere);// 0x4157614

--------------------------------
Class: SimpleSpherePersistentChecker
	PrimitiveComponent* TargetComponent;//[Offset: 0x0, Size: 8]
	SimpleCollisionSphere Sphere;//[Offset: 0x8, Size: 16]
	float PassedTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SimpleCollisionSphere
	Vector Origin;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SimpleCollisionCapsule
	Vector Start;//[Offset: 0x0, Size: 12]
	Vector End;//[Offset: 0xc, Size: 12]
	float Radius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TslSimpleCollisionReceiver.SceneComponent.ActorComponent.Object

--------------------------------
Class: DestructibleSurfaceManager.Info.Actor.Object

--------------------------------
Class: ObjectPosReplayNetGUIDMap
	uint32 InstanceID;//[Offset: 0x0, Size: 4]
	uint32 ActorNetGUID;//[Offset: 0x4, Size: 4]
	uint32 ActorDemoNetGUID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ObjectPosUIData
	bool IsClientUseActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsVisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	uint32 ActorNetGUID;//[Offset: 0x4, Size: 4]
	uint32 ActorDemoNetGUID;//[Offset: 0x8, Size: 4]
	int InstanceID;//[Offset: 0xc, Size: 4]
	int TeamID;//[Offset: 0x10, Size: 4]
	int TemplateID;//[Offset: 0x14, Size: 4]
	int ExParam;//[Offset: 0x18, Size: 4]
	Vector TargetPos;//[Offset: 0x1c, Size: 12]
	Actor* TargetActor;//[Offset: 0x28, Size: 8]

--------------------------------
Class: WeaponModuleManager.Object
	FString MgrClassPath;//[Offset: 0x28, Size: 16]
	FString WeaponMuduleConfigTablePath;//[Offset: 0x38, Size: 16]
	FString WeaponAttrConfigTablePath;//[Offset: 0x48, Size: 16]
	GameModeWeaponModuleSchemeConfig[] GameModeWeaponModuleSchemeConfigList;//[Offset: 0x58, Size: 16]
	UAEDataTable* WeaponMuduleConfigTable;//[Offset: 0x68, Size: 8]
	UAEDataTable* WeaponAttrConfigTable;//[Offset: 0x70, Size: 8]
	<int,ShootWeaponModifierConfig> ShootWeaponADSTimeConfig;//[Offset: 0xc8, Size: 80]
	<int,ShootWeaponModifierConfig> ShootWeaponADSFireAnimAlphaRateConfig;//[Offset: 0x118, Size: 80]
	int ShootWeaponNOTADSFireAnimAlphaRateID;//[Offset: 0x168, Size: 4]
	void SwitchModificationScheme(STExtraBaseCharacter* Player, enum Type);// 0x4201944
	void RemoveWeaponAllModifies(STExtraWeapon* Weapon, bool OnDestroy);// 0x4201884
	void InitWeaponModuleSystemOnServer(STExtraWeapon* Weapon);// 0x4201808
	static WeaponModuleManager* Get(Object* Context);// 0x420178c
	int GenerateAttrModifyItemIDByWeaponModuleAttrItemID(STExtraWeapon* Weapon, int ModuleAttrItemID, int MulVal);// 0x420168c
	void EnableWeaponModuleModificationSystemOnServerAsWeaponExist(STExtraWeapon* Weapon, bool bEnable);// 0x42015cc
	void EnableWeaponModuleModificationSystemOnServer(STExtraWeapon* Weapon, bool bEnable);// 0x420150c
	void DynamicEnablePlayerWeaponModuleSystemOnServer(STExtraBaseCharacter* Player, bool bEnable);// 0x420144c
	void CalcShootWeaponFireAnimAlphaRate(STExtraWeapon* ShootWeapon, int ScopeID);// 0x4201394
	void CalcShootWeaponADSTime(STExtraWeapon* ShootWeapon, int ScopeID);// 0x42012dc

--------------------------------
Class: GameModeWeaponModuleSchemeConfig
	FString[] GameModeNameList;//[Offset: 0x0, Size: 16]
	<enum,FString> SchemeTypeAndNameMap;//[Offset: 0x10, Size: 80]
	enum DefaultSchemeType;//[Offset: 0x60, Size: 1]

--------------------------------
Class: ShootWeaponModifierConfig
	int[] Ids;//[Offset: 0x0, Size: 16]

--------------------------------
Class: EmotePlayer
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	uint32 FollowPlayer;//[Offset: 0x4, Size: 4]
	int EmoteId;//[Offset: 0x8, Size: 4]
	bool bCanCostSpecMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector Pos;//[Offset: 0x10, Size: 12]

--------------------------------
Class: TeamSegmentInfo
	int TeamID;//[Offset: 0x0, Size: 4]
	int SegmentID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: NetAlienationDataComponent.ActorComponent.Object
	delegate OnAlienationDataChange;//[Offset: 0x120, Size: 16]
	NetAlienationData*[] NetAlienationDataArray;//[Offset: 0x130, Size: 16]
	<int,NetAlienationData*> AlienationDataMap;//[Offset: 0x140, Size: 80]
	int InstanceIDCount;//[Offset: 0x190, Size: 4]
	void RemoveAlienationDataByInstanceID(int InstanceID);// 0x3ebcf9c
	void RemoveAlienationDataByClass(NetAlienationData* Data);// 0x3ebcf20
	void PostPlayerControllerInitialized(STExtraPlayerController* InPlayerController);// 0x3ebcea4
	void OnRep_AlienationData();// 0x3ebce90
	NetAlienationData* GetAlienationDataByInstanceID(int InstanceID);// 0x3ebce04
	NetAlienationData*[] GetAlienationDataByClass(class NetAlienationData Class);// 0x3ebcd34
	int GenerateNewInstanceID();// 0x3ebcd00
	NetAlienationData* CreateAlienationDataByClassWithPC(class NetAlienationData Class, PlayerController* PC, out int InstanceID);// 0x3ebcbf0
	NetAlienationData* CreateAlienationDataByClass(class NetAlienationData Class, out int InstanceID);// 0x3ebcb18

--------------------------------
Class: NetAlienationData.Object
	byte OwnerRole;//[Offset: 0x28, Size: 1]
	int InstanceID;//[Offset: 0x2c, Size: 4]
	NetAlienationDataComponent* Owner;//[Offset: 0x30, Size: 8]
	PlayerController* RelativePlayerController;//[Offset: 0x38, Size: 8]
	void SetRelativePlayerController(PlayerController* PC);// 0x3ebd8f8
	void ReciveInit(NetAlienationDataComponent* InOwner);// 0xffffff8f20d162a8
	void OnRep_InstanceID();// 0x3ebd8e4
	void OnReceiveInitPlayerController(STExtraPlayerController* PC);// 0xffffff8f20d162a8
	bool HasAuthority();// 0x3ebd8ac
	PlayerController* GetRelativePlayerController();// 0x3ebd878
	static PlayerController* GetPlayerController(NetAlienationData* NetData, int PlayerIndex);// 0x3ebd7c0
	Actor* GetOwnerActor();// 0x3ebd78c
	int GetInstanceId();// 0x3ebd758
	void EventOnRep_InstanceID(int IIstanceID);// 0x3ebd6d4

--------------------------------
Class: ReConnectGameStateInfo
	byte AirAttackStatus;//[Offset: 0x0, Size: 1]
	Vector AirAttackArea;//[Offset: 0x4, Size: 12]
	int AirAttackWave;//[Offset: 0x10, Size: 4]
	int PlayerNumOnPlane;//[Offset: 0x14, Size: 4]
	enum AirAttackMode;//[Offset: 0x18, Size: 1]

--------------------------------
Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0, Size: 1]
	enum WeaterChangeEvent;//[Offset: 0x1, Size: 1]

--------------------------------
Class: ClientFatalDamageRecordDataSimple
	byte ClientFatalItemType;//[Offset: 0x0, Size: 1]
	uint32 CauserKey;//[Offset: 0x4, Size: 4]
	int CauserTeamId;//[Offset: 0x8, Size: 4]
	uint32 VictimKey;//[Offset: 0xc, Size: 4]
	uint32 RealKillerKey;//[Offset: 0x10, Size: 4]
	int DamageType;//[Offset: 0x14, Size: 4]
	int AdditionalParam;//[Offset: 0x18, Size: 4]
	int[] KillFXItemID;//[Offset: 0x20, Size: 16]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bIsVictimMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	int ResultHealthStatus;//[Offset: 0x34, Size: 4]
	byte RecordRelationShip;//[Offset: 0x38, Size: 1]
	int PreviousHealthStatus;//[Offset: 0x3c, Size: 4]
	bool IsKilledByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	int RealKillNum;//[Offset: 0x44, Size: 4]
	int AliveTeamNum;//[Offset: 0x48, Size: 4]
	int LocalPlayerAssistNum;//[Offset: 0x4c, Size: 4]
	int KillDistance;//[Offset: 0x50, Size: 4]
	byte MaxKillerStatus;//[Offset: 0x54, Size: 1]
	ExcellentOperationRecordData[] ExcellentOperationInfos;//[Offset: 0x58, Size: 16]
	bool AllTeammateDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	bool AllTeammateKillBySameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 1]
	class DamageType* DamageTypeClass;//[Offset: 0x70, Size: 8]

--------------------------------
Class: CompactAirAttackOrder
	int waveindex;//[Offset: 0x0, Size: 4]
	int bombsCount;//[Offset: 0x4, Size: 4]
	Vector attackCenter;//[Offset: 0x8, Size: 12]
	float attackRadius;//[Offset: 0x14, Size: 4]
	float bombsRadius;//[Offset: 0x18, Size: 4]
	float attackAngleBase;//[Offset: 0x1c, Size: 4]
	float attackAngleRandInterval;//[Offset: 0x20, Size: 4]
	float attackRadiusBase;//[Offset: 0x24, Size: 4]
	float attackRadiusRandInterval;//[Offset: 0x28, Size: 4]
	float[] attackPosZ;//[Offset: 0x30, Size: 16]
	float attackDuringTime;//[Offset: 0x40, Size: 4]
	float bombsIntervalRand;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ObserverHostComponent.TimerRegistComponent.GameModeBaseComponent.ActorComponent.Object
	delegate EventCDChangeDelegate;//[Offset: 0x1a0, Size: 16]
	delegate OnRepAdditionalDataDelegate;//[Offset: 0x1b0, Size: 16]
	delegate OnUpdateDynamicEventCDDelegate;//[Offset: 0x1c0, Size: 16]
	ObserverHostDynamicEventCfg[] DynamicEventCfg;//[Offset: 0x1d0, Size: 16]
	int[] MultipleTriggerEventIDList;//[Offset: 0x1e0, Size: 16]
	ObserverHostDynamicEventCDInfo[] CurDynamicEvents;//[Offset: 0x1f0, Size: 16]
	ObserverHostEventCDInfo[] EventCDInfo;//[Offset: 0x200, Size: 16]
	ObserverHostAdditionalData[] AdditionalData;//[Offset: 0x210, Size: 16]
	ObserverHostEventCDInfo[] EventCDServerInfo;//[Offset: 0x220, Size: 16]
	void SetAdditionalData(ObserverHostAdditionalData Data);// 0x3edc018
	void ServerTriggerEventWithPlayerKey(FName EventName, FString PlayerKey);// 0x3edbf1c
	void ServerTriggerEvent(FName EventName);// 0x3edbe6c
	void ServerSetNextCircle(Vector CirclePos);// 0x3edbdb4
	void ServerSelectDynamicEvent(int waveindex, FName EventName);// 0x3edbcc4
	void OnRepAdditionalDataDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OnRep_EventCDInfo();// 0x3edbcb0
	void OnRep_DynamicEventCDInfo();// 0x3edbc9c
	void OnRep_AdditionalData();// 0x3edbc88
	void OnMakeCircle(int Index);// 0x3edbc0c
	void OnEventCDChangeDelegate__DelegateSignature();// 0xffffff8f20d162a8
	ObserverHostEventCDInfo GetEventCDInfo(FString EventName);// 0x3edbac8
	ObserverHostAdditionalData GetAdditionalData(FString Name);// 0x3edb950

--------------------------------
Class: TimerRegistComponent.GameModeBaseComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	RegisterTimer[] TimerRegister;//[Offset: 0x150, Size: 16]
	FString TimerName;//[Offset: 0x160, Size: 16]
	bool bEndTimerWhenGameFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	void StartTimer();// 0x412e564
	void SetEndTimerWhenGameFinish(bool bEndTimer);// 0x412e4e4
	void OnGameEnterFinish();// 0x412e4c8
	void OnGameEnterFight();// 0x412e4ac
	void EndTimer();// 0x412e490

--------------------------------
Class: GameModeBaseComponent.ActorComponent.Object
	UAEGameMode* OwnerGameMode;//[Offset: 0x120, Size: 8]
	World* OwnerWorld;//[Offset: 0x128, Size: 8]
	bool bHasInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	enum[] AssociatedDatas;//[Offset: 0x138, Size: 16]
	void Update(float DeltaTime);// 0x499df14
	void UnInit();// 0x499def8
	bool IsAssociatedDatasValid();// 0x499deb8
	void Init();// 0x499de9c
	void FinishCreateAssociatedDatas(enum InSubSystemType);// 0x499de18

--------------------------------
Class: RegisterTimer
	int waveindex;//[Offset: 0x0, Size: 4]
	float[] times;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ObserverHostDynamicEventCfg
	int EventType;//[Offset: 0x0, Size: 4]
	float StartTime;//[Offset: 0x4, Size: 4]
	float LastTime;//[Offset: 0x8, Size: 4]
	bool BExcuteImmediately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool BIgnorSelectedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: ObserverHostDynamicEventCDInfo
	int waveindex;//[Offset: 0x0, Size: 4]
	int EventType;//[Offset: 0x4, Size: 4]
	int CD;//[Offset: 0x8, Size: 4]
	FName CurSelect;//[Offset: 0x10, Size: 8]

--------------------------------
Class: ObserverHostEventCDInfo
	FString EventName;//[Offset: 0x0, Size: 16]
	float CD;//[Offset: 0x10, Size: 4]
	float CurCD;//[Offset: 0x14, Size: 4]
	float EndTime;//[Offset: 0x18, Size: 4]
	float CurTime;//[Offset: 0x1c, Size: 4]
	int TriggerTimes;//[Offset: 0x20, Size: 4]
	int MaxTriggerTimes;//[Offset: 0x24, Size: 4]
	int TriggerTimesGroup;//[Offset: 0x28, Size: 4]
	bool IsMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: ObserverHostAdditionalData
	FString Name;//[Offset: 0x0, Size: 16]
	float FloatData;//[Offset: 0x10, Size: 4]
	FString StringData;//[Offset: 0x18, Size: 16]
	int IntData;//[Offset: 0x28, Size: 4]

--------------------------------
Class: OBTypeUISource.Object
	STExtraGameStateBase* CurGameState;//[Offset: 0x38, Size: 8]
	int CurrentMaxTeamID;//[Offset: 0x4c, Size: 4]
	<int,TeamLogoInfoInOB> TeamLogoInfoMap;//[Offset: 0x50, Size: 80]
	bool bBuildForWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	int ShootLineFilterRadius;//[Offset: 0xa8, Size: 4]
	float ShootLineUpdateTimeRate;//[Offset: 0xac, Size: 4]
	MapShootLineInfo[] MapShootLines;//[Offset: 0xb0, Size: 16]
	FString[] MapBeHitPlayerNames;//[Offset: 0xc0, Size: 16]
	<int,AreaParam> AreaParamCache;//[Offset: 0xd8, Size: 80]
	int LastAreaID;//[Offset: 0x128, Size: 4]
	delegate RefreshMCPlayerListDelegate;//[Offset: 0x130, Size: 16]
	delegate RefreshTeamDistanceWarningDelegate;//[Offset: 0x140, Size: 16]
	int[] TeamOrder;//[Offset: 0x150, Size: 16]
	TeamDistanceWarningInOB[] MapDistanceWarningTeams;//[Offset: 0x160, Size: 16]
	void UpdateMapShootLine(float InDeltaTime);// 0x3edea14
	void UpdateEntireMapTeamLogos();// 0x3edea00
	void SetFreeViewUpRate(float Rate);// 0x3ede984
	void SetCurAirDropID(int inDropID);// 0x3ede908
	void SetAvatarCaptureInfo(AvatarCapture* Info);// 0x3ede88c
	void OnSyncOBDataActorReady();// 0x3ede878
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName, int BattleTextID, int AreaID);// 0x3ede5a0
	bool IsEnableSignalBar();// 0x3ede568
	bool IsCurrentSpectatorFreeView();// 0x3ede530
	int GetWhiteCircleDistance();// 0x3ede4fc
	Pawn* GetViewerPawn();// 0x3ede4c8
	STExtraPlayerController* GetViewerController();// 0x3ede494
	PlayerInfoInOB[] GetTotalPlayerList_SortedByTeamID();// 0x3ede3c0
	PlayerInfoInOB[] GetTotalPlayerList();// 0x3ede2ec
	<int,TeamInfoInOB> GetTeamInfoInOBMap();// 0x3ede22c
	PlayerInfoInOB[] GetSameTeamPlayerList();// 0x3ede158
	<int,RouteSegment> GetRouteSegmentList();// 0x3ede098
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x3eddf50
	PlayerInfoInOB[] GetNearPlayerList();// 0x3edde7c
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x3eddd88
	PlayerInfoInOB GetKillerPlayerInfoInOBByName(FString InPlayerName);// 0x3eddc40
	bool GetIsFreeViewCamera();// 0x3eddc08
	float GetFreeViewUpRate();// 0x3eddbd4
	ObservedData GetCurViewerOBData();// 0x3edda7c
	AvatarCapture* GetAvatarCaptureInfo();// 0x3edda48
	int GetAliveTeamNum();// 0x3edda14
	AirDropBoxInOb[] GetAirDropBoxList();// 0x3edd994
	int FetchSpecifiedAreaIDByCache(Vector PlayerLocation, out int BattleTextID);// 0x3edd8b4
	void ChangeViewerTeam(int TeamID);// 0x3edd838
	void ChangeViewerCharacter(FString InPlayerName);// 0x3edd760
	void ChangeFreeViewCamera();// 0x3edd74c

--------------------------------
Class: TeamLogoInfoInOB
	int AlivePlayerCount;//[Offset: 0x0, Size: 4]
	FString LastPlayerUID;//[Offset: 0x8, Size: 16]
	FString LogoPicUrl;//[Offset: 0x18, Size: 16]
	Vector LogoPosWorld3D;//[Offset: 0x28, Size: 12]

--------------------------------
Class: MapShootLineInfo
	float LineDistance3D;//[Offset: 0x0, Size: 4]
	float LineAngle;//[Offset: 0x4, Size: 4]
	Vector BeginLocation;//[Offset: 0x8, Size: 12]
	Vector EndLocation;//[Offset: 0x14, Size: 12]

--------------------------------
Class: TeamDistanceWarningInOB
	int Distance;//[Offset: 0x0, Size: 4]
	int[] Teams;//[Offset: 0x8, Size: 16]

--------------------------------
Class: UserWidgetStyle.DataAsset.Object
	UserWidgetStyleInfo[] StylesInfo;//[Offset: 0x30, Size: 16]
	bool bShouldHidenJoystick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bShouldHidenCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bUseBLEBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	BLEEnumInfo[] BLEBlackList;//[Offset: 0x48, Size: 16]
	float UnloadDurationTime;//[Offset: 0x58, Size: 4]
	TimerHandle UnloadTimerHandle;//[Offset: 0x60, Size: 8]

--------------------------------
Class: UserWidgetStyleInfo
	FName ClassName;//[Offset: 0x0, Size: 8]
	class UserWidget* ClassSoftClass;//[Offset: 0x8, Size: 40]
	UserWidgetRefInfo[] RefWidget;//[Offset: 0x30, Size: 16]
	Object*[] RefObject;//[Offset: 0x40, Size: 16]
	int BuffSize;//[Offset: 0x50, Size: 4]
	WidgetTree* WidgetTree;//[Offset: 0x58, Size: 8]
	bool bHaveInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bHaveSaveedOld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	UserWidgetRefInfo[] TrainsRecoverInfo;//[Offset: 0x68, Size: 16]

--------------------------------
Class: UserWidgetRefInfo
	Widget* RefWidget;//[Offset: 0x0, Size: 8]
	FName SimpleName;//[Offset: 0x8, Size: 8]
	bool bAdvanceHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: BLEEnumInfo
	int BLEValue;//[Offset: 0x0, Size: 4]

--------------------------------
Class: PlayerCameraPossessManager.CameraPossessManager.ActorComponent.Object
	CurveVector* LandingHeavyCameraCurve;//[Offset: 0x358, Size: 8]
	STExtraPlayerCharacter* PossessedPlayerCache;//[Offset: 0x360, Size: 8]
	void InitFromNewCharacter(STExtraPlayerCharacter* InPlayerCharacter);// 0x3f05934
	void HandlePlayerStateLeave(enum LeavedState);// 0x3f058b0
	void HandlePlayerStateInterrupted(int stateID, int InterruptedBy);// 0x3f057f4
	void HandlePlayerStateEnter(enum EnteredState);// 0x3f05770
	void HandlePlayerPoseStateChanged(bool IsEnable);// 0x3f056ec
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x3f05634
	void HandlePlayerPeek(bool IsPeeking, bool IsPeekingLeft);// 0x3f05564
	void HandlePlayerNearDeath(bool IsNearDeath);// 0x3f054e0
	void HandlePlayerIndoorStateChanged(bool IsIndoor);// 0x3f0545c
	void HandlePlayerIndoorLowerStateChanged(bool IsIndoor);// 0x3f053d8
	void HandleCharacterDetachedFromVehicle(STExtraVehicleBase* InTargetVehicle);// 0x3f0535c
	void HandleCharacterAttachedToVehcicle(STExtraVehicleBase* InTargetVehicle);// 0x3f052e0
	void EnterLandingHeavy();// 0x3f052cc

--------------------------------
Class: CameraPossessManager.ActorComponent.Object
	CameraPossessData[] StaticCameraPossessList;//[Offset: 0x120, Size: 16]
	float RelativeLocationOffsetInterpSpeed;//[Offset: 0x130, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x134, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x138, Size: 4]
	float SocketOffsetInterpSpeed;//[Offset: 0x13c, Size: 4]
	float DesiredRotationOffsetInterpSpeed;//[Offset: 0x140, Size: 4]
	float CameraRotOffsetInterpSpeed;//[Offset: 0x144, Size: 4]
	float FieldOfViewInterpSpeed;//[Offset: 0x148, Size: 4]
	CameraPossessData[] DynamicCameraPossessList;//[Offset: 0x150, Size: 16]
	CameraPossessData[] CurrentActiveCameraPossessList;//[Offset: 0x160, Size: 16]
	FName[] CurrentActiveModifyNameList;//[Offset: 0x170, Size: 16]
	CameraModifyData[] CurrentActiveCameraModifyList;//[Offset: 0x180, Size: 16]
	CameraModifyData CurrentCameraModifyResult;//[Offset: 0x190, Size: 352]
	class PossessedSpringArmComponent* SpringArmClass;//[Offset: 0x2f0, Size: 8]
	class PossessedCameraComponent* CameraClass;//[Offset: 0x2f8, Size: 8]
	PossessedSpringArmComponent* ManagedSpringArm;//[Offset: 0x300, Size: 8]
	PossessedCameraComponent* ManagedCamera;//[Offset: 0x308, Size: 8]
	CameraAnimData[] CameraAnimDataList;//[Offset: 0x310, Size: 16]
	Vector AnimExtraTargetOffset;//[Offset: 0x320, Size: 12]
	Vector AnimExtraSocketOffset;//[Offset: 0x32c, Size: 12]
	Vector SpringArmTargetOffsetCache;//[Offset: 0x338, Size: 12]
	Vector SpringArmSocketOffsetCache;//[Offset: 0x344, Size: 12]
	bool IsCameraShouldActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	void UpdateCameraAnimData(float DeltaTime);// 0x42cf06c
	void SetCurrentSpringArmLength(float newSpringLength);// 0x42ceff0
	bool SetCameraPossessActive(FName InPossessName, bool InIsActive, SceneComponent* InAttachParentComp, bool Force);// 0x42cee94
	void SetCameraModifyEnable(FName InCameraPossessName, FName InCameraModifyName, bool InEnable, bool AutoRecalculateCameraModify);// 0x42ced48
	void SetCameraActive(bool InIsActive);// 0x42cecbc
	void RemoveDynamicCameraPossess(FName InPossessName);// 0x42cec40
	void RemoveDynamicCameraModify(FName InCameraPossessName, FName InCameraModifyName, bool ApplyImmediately);// 0x42ceb48
	void RefreshCameraModify(bool ApplyImmediately);// 0x42ceac4
	void RecalculateCameraModify(bool ApplyImmediately);// 0x42cea40
	bool PossessCamera_Internal(out CameraPossessData InCameraPossessData, SceneComponent* InAttachParentComp);// 0x42ce800
	void PlayCameraCurveAnim(byte CameraAnimType, CurveVector* CurveVec);// 0x42ce748
	float GetCurrentSpringArmLength();// 0x42ce714
	SpringArmComponent* GetCurrentSpring();// 0x42ce6f8
	CameraComponent* GetCurrentCamera();// 0x42ce6dc
	FName[] GetCurrentActiveModifyNameList();// 0x42ce61c
	FName GetCurrentActiveCameraPossessName();// 0x42ce5cc
	CameraPossessData[] GetCurrentActiveCameraPossessList();// 0x42ce4ac
	CameraPossessData GetCurrentActiveCameraPossessData();// 0x42ce468
	CameraPossessData GetCameraPossessDataByName(out const FName InPossessName);// 0x42ce354
	bool FindCameraPossess(FName InCameraPossessName, out CameraPossessData OutCameraPossessData);// 0x42ce0f0
	bool FindCameraModify(out const CameraPossessData InPossessData, FName InCameraModifyName, out CameraModifyData OutCameraModifyData);// 0x42cdcec
	void ApplyCameraModifyData(out const CameraModifyData InData, float DeltaTime);// 0x42cdac4
	void AddOrRemoveModifyDataFromCurrentActiveList(out const CameraModifyData InModifyData, bool IsAdd, bool AutoRecalculateCameraModify, bool ApplyImmediately);// 0x42cd804
	bool AddDynamicCameraPossess(out CameraPossessData InCameraPossessData, bool IsAutoPossess);// 0x42cd5a4
	void AddDynamicCameraModify(FName InCameraPossessName, out const CameraModifyData InModifyData, bool IsAutoActive, bool ApplyImmediately);// 0x42cd2c8

--------------------------------
Class: CameraPossessData
	FName PossessName;//[Offset: 0x0, Size: 8]
	FName[] OverridePossessNameList;//[Offset: 0x8, Size: 16]
	CameraModifyData DefaultCameraData;//[Offset: 0x20, Size: 352]
	CameraModifyData[] StaticCameraModifyDataList;//[Offset: 0x180, Size: 16]
	CameraModifyData[] DynamicCameraModifyDataList;//[Offset: 0x190, Size: 16]
	bool bDestroyStaticCameraComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	SceneComponent*[] StaticCameraAndSpringArm;//[Offset: 0x1a8, Size: 16]

--------------------------------
Class: PossessedSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	bool bShouldTraceArmOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 1]
	float SpringArmRestoreInterpSpeed;//[Offset: 0x36c, Size: 4]
	CameraPossessManager* OwnerManager;//[Offset: 0x370, Size: 8]

--------------------------------
Class: PossessedCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraPossessManager* OwnerManager;//[Offset: 0x8a0, Size: 8]

--------------------------------
Class: CameraAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	CurveVector* AnimCurve;//[Offset: 0x4, Size: 8]

--------------------------------
Class: ScreenAppearanceActor.Actor.Object
	bool EnableScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	ScreenAppearanceProvider*[] DefaultScreenAppearanceProviders;//[Offset: 0x3f0, Size: 16]
	<Actor*,ScreenAppearanceProviders> SavedPlayerScreenAppearances;//[Offset: 0x400, Size: 80]
	ScreenAppearanceProviders PersistentScreenAppearances;//[Offset: 0x450, Size: 16]
	Transform RelativeTransform;//[Offset: 0x460, Size: 48]
	float FOV;//[Offset: 0x490, Size: 4]
	ScreenAppearanceVolume*[] ScreenAppearanceVolumesInThisWorld;//[Offset: 0x4b0, Size: 16]
	void StopScreenAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x3f6d1b4
	void StopScreenAppearance(ScreenAppearanceProvider* Provider);// 0x3f6d138
	void StopAllScreenAppearances(const Actor* AppearanceOwner);// 0x3f6d0bc
	void SetScalarParameter(out const FName ParameterName, float ParameterValue);// 0x3f6cfe8
	void SetFloatParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, float NewValue);// 0x3f6cec4
	void SetColorParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, out const LinearColor NewValue);// 0x3f6cd94
	void SetColorParameter(out const FName ParameterName, out const LinearColor ParameterValue);// 0x3f6ccb4
	Actor* ResolveAppearanceOwner(Actor* InOwner);// 0x3f6cc20
	ScreenAppearanceProvider* PlayDefaultScreenAppearance(const Actor* AppearanceOwner, FName AppearanceName, const Actor* causer);// 0x3f6cb20
	bool IsScreenAppearancePlaying(const Actor* AppearanceOwner, FName AppearanceName);// 0x3f6ca58
	bool HasActiveAppearance();// 0x3f6ca20
	PlayerController* GetPlayerController();// 0x3f6c94c
	PlayerCameraManager* GetPlayerCameraManager();// 0x3f6c8d0
	Actor* GetCurrentViewTarget();// 0x3f6c89c
	ScreenAppearanceProvider* FindDefaultScreenAppearanceProvider(out const FName Name);// 0x3f6c800
	ScreenAppearanceProvider* FindAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x3f6c73c
	void Enable();// 0x3f6c728
	void Disable();// 0x3f6c714

--------------------------------
Class: ScreenAppearanceProvider.Object
	FName AppearanceName;//[Offset: 0x28, Size: 8]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bTickEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	float TickInterval;//[Offset: 0x34, Size: 4]
	AppearanceParameter[] MaterialParameterCurve;//[Offset: 0x38, Size: 16]
	float LifeSpan;//[Offset: 0x48, Size: 4]
	Transform RelativeTransform;//[Offset: 0x50, Size: 48]
	ScreenAppearanceScalarParameter[] AppearanceScalarParamters;//[Offset: 0x80, Size: 16]
	ScreenAppearanceColorParameter[] AppearanceColorParameters;//[Offset: 0x90, Size: 16]
	ScreenAppearanceActor* OwnerAppearance;//[Offset: 0xc8, Size: 8]
	Actor* OwnerActor;//[Offset: 0xd0, Size: 8]
	FName[] HighPriorityProviderNames;//[Offset: 0xd8, Size: 16]
	void SetVectorParameter(out const FName ParameterName, out const Vector Param);// 0x3f6e3cc
	void SetLifeSpan(float NewLifeSpan);// 0x3f6e354
	void SetFloatParameter(out const FName ParameterName, float Param);// 0x3f6e280
	void SetColorParameter(out const FName ParameterName, out const LinearColor Param);// 0x3f6e1a0
	void SetAsset(Object* Asset);// 0x3f6e11c
	void ReceiveTick(float DeltaTime);// 0xffffff8f20d162a8
	void ReceiveEndPlay();// 0xffffff8f20d162a8
	void ReceiveBeginPlay();// 0xffffff8f20d162a8
	MaterialInterface* GetMaterial();// 0x3f6e0e0

--------------------------------
Class: AppearanceParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	CurveBase* ControlCurve;//[Offset: 0x8, Size: 40]

--------------------------------
Class: ScreenAppearanceScalarParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ScreenAppearanceColorParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ScreenAppearanceProviders
	ScreenAppearanceProvider*[] ScreenAppearances;//[Offset: 0x0, Size: 16]

--------------------------------
Class: ScreenAppearanceVolume.Volume.Brush.Actor.Object
	ScreenAppearanceProvider*[] EnabledScreenAppearances;//[Offset: 0x420, Size: 16]
	FName[] EnabledScreenAppearanceNames;//[Offset: 0x430, Size: 16]
	FName[] DisabledScreenAppearanceNames;//[Offset: 0x440, Size: 16]

--------------------------------
Class: BountyBuyingInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int BuyingCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BountyBuyingResultInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int FinalBuyingCount;//[Offset: 0x4, Size: 4]
	enum BuyingResult;//[Offset: 0x8, Size: 1]
	int BountyBeforeBuying;//[Offset: 0xc, Size: 4]
	int BountyAfterBuying;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PlayerDecalData
	int DecalId;//[Offset: 0x0, Size: 4]
	Transform DecalTransform;//[Offset: 0x10, Size: 48]
	int DecalInstanceId;//[Offset: 0x40, Size: 4]
	IdeaDecalInfo[] DecalInfos;//[Offset: 0x48, Size: 16]

--------------------------------
Class: StopFireInfo
	uint32 CurClipID;//[Offset: 0x0, Size: 4]
	int CurrentBullet;//[Offset: 0x4, Size: 4]

--------------------------------
Class: StartFireInfo
	uint32 CurShootID;//[Offset: 0x0, Size: 4]
	uint32 CurClipID;//[Offset: 0x4, Size: 4]
	int CurBulletNumInClip;//[Offset: 0x8, Size: 4]
	byte ShootMode;//[Offset: 0xc, Size: 1]
	float StartFireTime;//[Offset: 0x10, Size: 4]
	double StartFireSysTime;//[Offset: 0x18, Size: 8]
	byte shootType;//[Offset: 0x20, Size: 1]

--------------------------------
Class: WatchGamePlayerInfoButtonClick
	uint64 WatchPlayer_UID;//[Offset: 0x0, Size: 8]
	uint64 WatchedPlayer_UID;//[Offset: 0x8, Size: 8]

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x3e8, Size: 8]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x3f0, Size: 8]
	ParticleSystem* EffectOverride;//[Offset: 0x3f8, Size: 8]
	float NearToFarDistance;//[Offset: 0x400, Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x408, Size: 8]
	AkAudioEvent* ExplosionSoundOverride;//[Offset: 0x410, Size: 8]
	float PlayEffectDelayTime;//[Offset: 0x418, Size: 4]
	HitResult SurfaceHit;//[Offset: 0x420, Size: 136]
	bool bPlayFallbackEffectIfFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	float VoiceCheckDistance;//[Offset: 0x4ac, Size: 4]
	float VoiceCheckLifeTime;//[Offset: 0x4b0, Size: 4]
	void SetExplosionSoundOverride(AkAudioEvent* InAudioEvent);// 0x4040194
	void SetExplosionFXOverride(ParticleSystem* InTemplate);// 0x4040118

--------------------------------
Class: SacStructSplit

--------------------------------
Class: SacStructNew

--------------------------------
Class: SACData
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0, Size: 16]
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0x10, Size: 16]
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x20, Size: 16]
	int ShootTimes;//[Offset: 0x30, Size: 4]
	byte[] TssSdkAntiData;//[Offset: 0x38, Size: 16]
	int TssSdkAntiDataLen;//[Offset: 0x48, Size: 4]
	int8 RetCode;//[Offset: 0x4c, Size: 1]
	int NetworkStatus;//[Offset: 0x50, Size: 4]

--------------------------------
Class: LocalShootHitData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10, Size: 12]
	int BulletFlyDistance;//[Offset: 0x1c, Size: 4]
	int BulletDown;//[Offset: 0x20, Size: 4]
	int8 CurBullet;//[Offset: 0x24, Size: 1]
	int ShootInterval;//[Offset: 0x28, Size: 4]
	int BulletFlyTime;//[Offset: 0x2c, Size: 4]
	int BulletShootTime;//[Offset: 0x30, Size: 4]
	int BulletHitTime;//[Offset: 0x34, Size: 4]
	int AimFov;//[Offset: 0x38, Size: 4]
	byte bulletDamageReduceRatio;//[Offset: 0x3c, Size: 1]
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x40, Size: 12]
	BulletID BulletID;//[Offset: 0x4c, Size: 2]
	int64 ClientStartTime;//[Offset: 0x50, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x58, Size: 16]
	int AutoAimSpeed;//[Offset: 0x68, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x6c, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x70, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x74, Size: 4]
	bool bHitCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	Vector CameraLocation;//[Offset: 0x7c, Size: 12]
	Rotator CameraRotate;//[Offset: 0x88, Size: 12]
	Vector2D BackTrace;//[Offset: 0xa0, Size: 8]
	uint64 VicitimPawnState;//[Offset: 0xa8, Size: 8]

--------------------------------
Class: ShootTimeData
	Vector ShootPos;//[Offset: 0x0, Size: 12]
	Vector GunPos;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18, Size: 12]
	uint32 ShootID;//[Offset: 0x24, Size: 4]
	uint64 CurrentStates;//[Offset: 0x28, Size: 8]
	byte CapsuleHalfHeight;//[Offset: 0x30, Size: 1]
	byte SkeletonLength;//[Offset: 0x31, Size: 1]
	BInfo FBInfos;//[Offset: 0x34, Size: 16]
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x50, Size: 112]
	double ShootSystemTime;//[Offset: 0xc0, Size: 8]
	float ShootLevelTime;//[Offset: 0xc8, Size: 4]
	bool bFakeTraceBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	Vector GunTailPos;//[Offset: 0xd0, Size: 12]

--------------------------------
Class: Vector_NetQuantizeNormalSv.Vector

--------------------------------
Class: BInfo

--------------------------------
Class: ShootTimeInfo_NetQuantize

--------------------------------
Class: STExtraFireBalloon.Actor.Object
	BoxComponent* RootCollision;//[Offset: 0x3f0, Size: 8]
	BoxComponent* AreaBox;//[Offset: 0x3f8, Size: 8]
	StaticMeshComponent* BalloonMesh;//[Offset: 0x400, Size: 8]
	FireBalloonMovementComponent* Movement;//[Offset: 0x408, Size: 8]
	int MapMarkTypeID;//[Offset: 0x410, Size: 4]
	enum MapMarkFlag;//[Offset: 0x414, Size: 1]
	bool bIsMapMarkRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
	Pawn* Driver;//[Offset: 0x420, Size: 8]
	float MoveUpValue;//[Offset: 0x428, Size: 4]
	byte MovementSmoothMode;//[Offset: 0x460, Size: 1]
	float MovementSmoothAlpha;//[Offset: 0x464, Size: 4]
	float MoveUpScale;//[Offset: 0x468, Size: 4]
	bool bAutoFallOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 1]
	float AutoFallOffSpeed;//[Offset: 0x470, Size: 4]
	enum MoveState;//[Offset: 0x478, Size: 1]
	Vector ControlInputVector;//[Offset: 0x47c, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x488, Size: 12]
	float TickInterval;//[Offset: 0x494, Size: 4]
	Vector InitialLocation;//[Offset: 0x498, Size: 12]
	float CheckOverlapInterval;//[Offset: 0x4a8, Size: 4]
	void SetParachuteServerAuthorized(Pawn* InPawn);// 0x40428bc
	void SetMoveUpValue(float InMoveUpValue);// 0x4042840
	void SetDriver(Pawn* InPawn);// 0x40427bc
	void OnTriggerLeave(Actor* OverlapActor);// 0x4042738
	void OnTriggerEnter(Actor* OverlapActor);// 0x40426b4
	void OnRep_MoveUpValue();// 0x4042698
	void OnRep_Driver(Pawn* PrevDriver);// 0x4042614
	Pawn* GetDriver();// 0x40425f8
	bool CanBeDriver(Pawn* InPawn);// 0x4042560
	bool BlueprintIsNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0xffffff8f20d162a8

--------------------------------
Class: FireBalloonMovementComponent.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	enum MaxFlyHeightType;//[Offset: 0x1bd, Size: 1]
	float MaxFlyHeight;//[Offset: 0x1c0, Size: 4]
	float InitialMaxTarceDist;//[Offset: 0x1c4, Size: 4]
	Vector InitialLocation;//[Offset: 0x1c8, Size: 12]
	delegate OnFireBalloonImpactDelegate;//[Offset: 0x1d8, Size: 16]
	Actor* ActorOwner;//[Offset: 0x1e8, Size: 8]
	void SetSkipUpdate(bool bNewValue);// 0x4041ff4
	void ReceiveOnImpact(out const HitResult Hit, float TimeSlice, out const Vector MoveDelta);// 0xffffff8f20d162a8
	void OnFireBalloonImpactDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xffffff8f20d162a8
	float GetMaxFlyHeight();// 0x4041fc0

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x1a8, Size: 4]
	float Acceleration;//[Offset: 0x1ac, Size: 4]
	float Deceleration;//[Offset: 0x1b0, Size: 4]
	float TurningBoost;//[Offset: 0x1b4, Size: 4]
	float FloatingMoveSpeedScale;//[Offset: 0x1b8, Size: 4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 1]

--------------------------------
Class: ConcertPlayerActor.Actor.Object
	ConcertPlayerComponent* ConcertPlayerComponent;//[Offset: 0x3e8, Size: 8]
	bool bSetupObStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	TimerHandle timehandle;//[Offset: 0x3f8, Size: 8]
	void StopSequence(bool NetPlayAgain);// 0x3d53834
	void SequenceEventName(FName InEventType, int InParamValue, FString InParamStr);// 0x3d536d4
	void SequenceEvent(enum InActivity, enum InEventType, int InParamValue, FString InParamStr);// 0x3d53534
	void SendSync(STExtraPlayerController* InRequestPlayer);// 0x3d534b8
	void RequestSync();// 0x3d534a4
	void ReceiveSequenceEventType(int InEventType, int InParamValue, FString InParamStr, float InEventTime);// 0x3d5330c
	void ReceiveSequenceEventName(FName InEventType, int InParamValue, FString InParamStr);// 0x3d531ac
	void ReceiveSequenceEvent(enum InActivity, enum InEventType, int InParamValue, FString InParamStr);// 0x3d5300c
	void PlaySequence(int InIndex);// 0x3d52f90
	void OnReconnected();// 0x3d52f7c
	void OnDelayRequest();// 0x3d52f68
	void OnApplicationactivated(bool IsActive);// 0x3d52ee4
	void JumpToPos(float InPos);// 0x3d52e68
	void ClientRequestSync(ConcertSendSyncData InSyncData);// 0x3d52bc0
	void BindApplicationactivated();// 0x3d52bac

--------------------------------
Class: ConcertPlayerComponent.ActorComponent.Object
	bool SequenceIsClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool SequenceLoadedNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	bool PlayNextIfFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 1]
	ConcertLevelSoftConfig[] LevelConfigList;//[Offset: 0x128, Size: 16]
	ConcertLevelHardConfig CurrentLevelConfig;//[Offset: 0x138, Size: 48]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x168, Size: 8]
	delegate OnReceiveConcertEventBegin;//[Offset: 0x170, Size: 16]
	delegate OnReceiveConcertEventEnd;//[Offset: 0x180, Size: 16]
	delegate OnSequencePlayOrStopEvent;//[Offset: 0x190, Size: 16]
	delegate OnSequencePlayEnd;//[Offset: 0x1a0, Size: 16]
	delegate OnSequenceRequestSync;//[Offset: 0x1b0, Size: 16]
	delegate OnSequenceSyncEnd;//[Offset: 0x1c0, Size: 16]
	Actor*[] ActivityList;//[Offset: 0x1d0, Size: 16]
	LevelSequenceActor* SequenceActor;//[Offset: 0x1e0, Size: 8]
	TimerHandle DelayStartHandle;//[Offset: 0x1e8, Size: 8]
	STExtraGameStateBase* GameState;//[Offset: 0x1f8, Size: 8]
	enum[] NeedMemoryEventList;//[Offset: 0x200, Size: 16]
	ConcertSequenceEventData[] TriggerEventList;//[Offset: 0x210, Size: 16]
	ConcertSyncData LastConcertSyncData;//[Offset: 0x220, Size: 40]
	FName[] NeedMemoryEventNameList;//[Offset: 0x248, Size: 16]
	int[] NeedMemoryEventTypeList;//[Offset: 0x258, Size: 16]
	void UnRegisterActivity(Actor* InActivity);// 0x3d54ea0
	void StopConcert(bool NetPlayAgain);// 0x3d54e1c
	void StartConcert();// 0x3d54e08
	void SetupConcert(int Index);// 0x3d54d8c
	void SetActivityEnable(bool InEnable);// 0x3d54d08
	void RegisterActivity(Actor* InActivity);// 0x3d54c8c
	void ReceiveConcertEvent(bool IsSyncData, out const ConcertSequenceEventData InParamData);// 0x3d54b7c
	void OnSequenceStop();// 0x3d54b68
	void OnSequenceObjectSpawned(Object* InObject, out const Guid InBindingID, MovieSceneSequenceID InSequenceID);// 0x3d54a54
	void OnSequenceFinish();// 0x3d54a40
	void OnLoadSequenceDone(int Index, SoftObjectPath AssetRef);// 0x3d54920
	void OnDelayStart();// 0x3d5490c
	void OnDelayLoopSetup();// 0x3d548f8
	void JumpToPos(float InPos);// 0x3d5487c
	bool InitConcertConfig(int Index);// 0x3d547ec
	float GetTriggerIntEventDuraction(int EventType, FString InParam, bool UseEventTime);// 0x3d54680
	float GetTriggerEventNameDuraction(FName EventTypeName, FString InParam);// 0x3d54558
	float GetTriggerEventDuraction(enum EventType);// 0x3d544cc
	Timespan GetTimeSpanFromSecond(float InSecond);// 0x3d54440
	float GetTime(bool isServerTime);// 0x3d543ac
	float GetSequenceCurrentTime();// 0x3d54378
	float GetLastTriggerEventTime(enum EventType);// 0x3d542ec
	float GetLastTriggerEventNameTime(FName EventTypeName, FString InParam);// 0x3d541c4
	bool GetIsPlaying();// 0x3d5418c
	bool GetIsNeedJumpEvent();// 0x3d54170
	STExtraGameStateBase* GetGameState();// 0x3d5413c
	enum GetConcertPlayerState();// 0x3d54120

--------------------------------
Class: ConcertLevelSoftConfig
	bool IsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int LoopCount;//[Offset: 0x4, Size: 4]
	float DelayStart;//[Offset: 0x8, Size: 4]
	LevelSequence* LevelSequence;//[Offset: 0x10, Size: 40]
	LevelSequence* LevelSequenceDS;//[Offset: 0x38, Size: 40]
	bool bEnableActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bSpawnActorAttachToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool bDestroySpawnActorOnFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	float PlayRate;//[Offset: 0x64, Size: 4]

--------------------------------
Class: ConcertLevelHardConfig
	bool IsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int LoopCount;//[Offset: 0x4, Size: 4]
	float DelayStart;//[Offset: 0x8, Size: 4]
	LevelSequence* LevelSequence;//[Offset: 0x10, Size: 8]
	int CurrentSoftIndex;//[Offset: 0x18, Size: 4]
	int PlayCount;//[Offset: 0x1c, Size: 4]
	float StartTime;//[Offset: 0x20, Size: 4]
	bool bEnableActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bSpawnActorAttachToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bDestroySpawnActorOnFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	float PlayRate;//[Offset: 0x28, Size: 4]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x750, Size: 16]
	Object*[] AdditionalEventReceivers;//[Offset: 0x790, Size: 16]
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x5c67ccc

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x370, Size: 16]
	delegate OnPlayReverse;//[Offset: 0x380, Size: 16]
	delegate OnStop;//[Offset: 0x390, Size: 16]
	delegate OnPause;//[Offset: 0x3a0, Size: 16]
	delegate OnFinished;//[Offset: 0x3b0, Size: 16]
	delegate OnObjectSpawnedEvent;//[Offset: 0x3c0, Size: 16]
	byte Status;//[Offset: 0x3d0, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d1, Size: 1]
	bool bPendingFirstUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d1, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x3d8, Size: 8]
	float TimeCursorPosition;//[Offset: 0x3e0, Size: 4]
	float StartTime;//[Offset: 0x3e4, Size: 4]
	float EndTime;//[Offset: 0x3e8, Size: 4]
	int CurrentNumLoops;//[Offset: 0x3ec, Size: 4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x400, Size: 40]
	void Stop();// 0x5820bd4
	void StartPlayingNextTick();// 0x5820bc0
	void SetPlayRate(float PlayRate);// 0x5820b44
	void SetPlayLoopCount(int NumLoops);// 0x5820ac8
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x5820a14
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x5820998
	void Scrub();// 0x5820984
	void PlayReverse();// 0x5820970
	void PlayLooping(int NumLoops);// 0x58208f4
	void Play();// 0x58208e0
	void Pause();// 0x58208cc
	void JumpToPositionEx(float NewPlaybackPosition);// 0x5820850
	void JumpToPosition(float NewPlaybackPosition);// 0x58207d4
	bool IsPlaying();// 0x582079c
	bool IsPaused();// 0x5820764
	void GoToEndAndStop();// 0x5820750
	float GetPlayRate();// 0x582071c
	float GetPlaybackStart();// 0x5820700
	float GetPlaybackPosition();// 0x58206cc
	float GetPlaybackEnd();// 0x58206b0
	float GetLength();// 0x582067c
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x5820584
	void ChangePlaybackDirection();// 0x5820570

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	int LoopCount;//[Offset: 0x0, Size: 4]
	float PlayRate;//[Offset: 0x4, Size: 4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float StartTime;//[Offset: 0xc, Size: 4]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bEnableHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	interface class * BindingOverrides;//[Offset: 0x18, Size: 16]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 4]
	enum Space;//[Offset: 0x4, Size: 1]
	Guid Guid;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LevelSequenceActor.Actor.Object
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x3f8, Size: 40]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x420, Size: 8]
	SoftObjectPath LevelSequence;//[Offset: 0x428, Size: 24]
	LevelSequence* TempLevelSequence;//[Offset: 0x440, Size: 8]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x448, Size: 16]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x458, Size: 8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x460, Size: 8]
	bool bReduceFrequency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	int ReduceFrameCount;//[Offset: 0x46c, Size: 4]
	float IgnoreFrameTolerance;//[Offset: 0x470, Size: 4]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x474, Size: 1]
	Object* DefaultInstanceData;//[Offset: 0x478, Size: 8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x480, Size: 8]
	Actor* OwnCharacter;//[Offset: 0x488, Size: 8]
	void SetSequence(LevelSequence* InSequence);// 0x5c66b64
	void SetOwnCharacter(Actor* Actor);// 0x5c66ae8
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x5c66a10
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x5c668c4
	void ResetBindings();// 0x5c66814
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x5c6673c
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x5c66628
	void ReceiveInitailizePlayer();// 0xffffff8f20d162a8
	LevelSequence* GetSequence(bool bLoad, bool bInitializePlayer);// 0x5c66550
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x5c66400

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 24]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 8]

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x30, Size: 16]
	MovieSceneObjectBindingID MakeBindingID(out const Guid InBindingID, MovieSceneSequenceID InSequenceID, enum InSpace);// 0x581c920
	FString GetGuidStr(out const MovieSceneObjectBindingID BindingID);// 0x581c828
	MovieSceneBindingOverrideData[] GetBindingData();// 0x581c77c

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 24]
	Object* Object;//[Offset: 0x18, Size: 8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x240, Size: 88]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x298, Size: 8]
	void SetSettings(Object* InSettings);// 0xffffff8f20d162a8
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x5c6760c

--------------------------------
Class: LevelSequencePlayerSnapshot
	FText MasterName;//[Offset: 0x0, Size: 24]
	float MasterTime;//[Offset: 0x18, Size: 4]
	FText CurrentShotName;//[Offset: 0x20, Size: 24]
	float CurrentShotLocalTime;//[Offset: 0x38, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0x40, Size: 8]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x48, Size: 8]
	MovieSceneSequenceID ShotID;//[Offset: 0x50, Size: 4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 1]
	float FrameRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ConcertSequenceEventData
	enum ActivityType;//[Offset: 0x0, Size: 1]
	enum EventType;//[Offset: 0x1, Size: 1]
	FName EventTypeName;//[Offset: 0x8, Size: 8]
	int EventIntType;//[Offset: 0x10, Size: 4]
	int DataIndex;//[Offset: 0x14, Size: 4]
	float TriggerTime;//[Offset: 0x18, Size: 4]
	float EventTime;//[Offset: 0x1c, Size: 4]
	FString DataStr;//[Offset: 0x20, Size: 16]

--------------------------------
Class: ConcertSyncData
	ConcertSendSyncData SyncData;//[Offset: 0x8, Size: 32]

--------------------------------
Class: ConcertSendSyncData
	int SyncIndex;//[Offset: 0x0, Size: 4]
	int SequenceIndex;//[Offset: 0x4, Size: 4]
	int PlayCount;//[Offset: 0x8, Size: 4]
	float SequenceTime;//[Offset: 0xc, Size: 4]
	ConcertSequenceEventData[] SequenceData;//[Offset: 0x10, Size: 16]

--------------------------------
Class: Timespan

--------------------------------
Class: CheatCommandInfo
	enum CommandType;//[Offset: 0x0, Size: 1]
	int[] CommandContent_int32Type;//[Offset: 0x8, Size: 16]
	float[] CommandContent_floatType;//[Offset: 0x18, Size: 16]
	FString CommandContent_ExtraType;//[Offset: 0x28, Size: 16]

--------------------------------
Class: RemoteControlComponent.ActorComponent.Object
	bool bSpawnedFromBackPack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	delegate OnSpawnedFromBackPack;//[Offset: 0x128, Size: 16]
	STExtraBaseCharacter* Character;//[Offset: 0x138, Size: 8]
	delegate OnRepCharacterEvent;//[Offset: 0x140, Size: 16]
	delegate OnRefreshCharacterAnimEvent;//[Offset: 0x150, Size: 16]
	BattleItemHandleBase* BindingHandle;//[Offset: 0x160, Size: 8]
	delegate HPFuelChangedDelegate;//[Offset: 0x170, Size: 16]
	float DistanceToPlayer;//[Offset: 0x180, Size: 4]
	bool ShutdownNeedDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	bool CanControlInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 1]
	bool bSendClientOkMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x186, Size: 1]
	enum RemoteControlState;//[Offset: 0x187, Size: 1]
	enum LastRemoteControlState;//[Offset: 0x188, Size: 1]
	enum CharacterAnimState;//[Offset: 0x189, Size: 1]
	delegate RemoteControlStateChanged;//[Offset: 0x190, Size: 16]
	delegate RemoteControlReconnect;//[Offset: 0x1a0, Size: 16]
	delegate OnEnterRemoteControlClient;//[Offset: 0x1b0, Size: 16]
	delegate OnRemoteControlPause;//[Offset: 0x1c0, Size: 16]
	delegate OnRemoteControlRecall;//[Offset: 0x1d0, Size: 16]
	delegate OnRemoteControlReconnect;//[Offset: 0x1e0, Size: 16]
	enum CurRemoteControlType;//[Offset: 0x1f8, Size: 1]
	float CoolDownTimeSpeed;//[Offset: 0x1fc, Size: 4]
	float CoolDownTimeMin;//[Offset: 0x200, Size: 4]
	float MaxOperateDistanceToPlayer;//[Offset: 0x204, Size: 4]
	float MaxOperateFalloffDistance;//[Offset: 0x208, Size: 4]
	float LowFuelWarning;//[Offset: 0x20c, Size: 4]
	float SkillRecallingTime;//[Offset: 0x210, Size: 4]
	float SkillDisappearingTime;//[Offset: 0x214, Size: 4]
	float SkillDestoryTime;//[Offset: 0x218, Size: 4]
	float RemoteControlDyingTime;//[Offset: 0x21c, Size: 4]
	int DestoryPawnTipID;//[Offset: 0x220, Size: 4]
	float MaxRecallTime;//[Offset: 0x224, Size: 4]
	float SkillRecallingTimerRemain;//[Offset: 0x228, Size: 4]
	float MaxCameraFOV;//[Offset: 0x238, Size: 4]
	float MinCameraFOV;//[Offset: 0x23c, Size: 4]
	float UAVFPPCameraFovPercent;//[Offset: 0x240, Size: 4]
	delegate OnEnterRemoteControl;//[Offset: 0x248, Size: 16]
	delegate OnOverMaxOperateDistance;//[Offset: 0x258, Size: 16]
	DriverAttachmentData[] DriverAttachmentDataList;//[Offset: 0x268, Size: 16]
	delegate OnCharAnimStateDiff;//[Offset: 0x280, Size: 16]
	int CantUseRemoteControlTips;//[Offset: 0x290, Size: 4]
	bool NeedForceSetViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	byte[] CantIgnoreDamageTypeArr;//[Offset: 0x298, Size: 16]
	void TickCharacterAnimState();// 0x3f47fec
	void SetMaxHP(float HP);// 0x3f47f68
	void SetMaxFuel(float Fuel);// 0x3f47ee4
	void SetFPPCameraFovEvent(float Factor);// 0xffffff8f20d162a8
	void SetFPPCameraFov(float Factor);// 0x3f47e68
	void SetDriverAttachement(Character* InDriver, bool EnableAttach, out const FName InAttachmentDataName, bool IngoreDelay);// 0x3f47d0c
	void SetCurHP(float HP);// 0x3f47c88
	void SetCurFuel(float Fuel);// 0x3f47c04
	void ServerShutDown();// 0x3f47be8
	bool ServerRecall(STExtraPlayerController* PC);// 0x3f47b50
	bool ServerPause(STExtraPlayerController* PC);// 0x3f47ab8
	bool ServerControl(STExtraPlayerController* PC);// 0x3f47a20
	void SendToServerUAVFPPCameraFovPercent(float percent);// 0x3f47970
	void SendClientOkToServer();// 0x3f4795c
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x3f478e0
	void RefreshCharacterAnim(STExtraBaseCharacter* PlayerCharacter);// 0x3f4785c
	void OnStateChangeEvent();// 0x3f47840
	void OnRep_SpawnedFromBackPack();// 0x3f4782c
	void OnRep_RemoteControlState();// 0x3f47810
	void OnRep_FPPCameraFovChanged();// 0x3f477fc
	void OnRep_Character();// 0x3f477e8
	void OnRecycled();// 0x3f477cc
	void HandleRemoteControlReconnect(STExtraPlayerController* PC);// 0x3f47748
	float GetMaxHP();// 0x3f4770c
	float GetMaxFuel();// 0x3f476d0
	BattleItemHandleBase* GetItemHandle();// 0x3f476b4
	float GetDisToPlayer();// 0x3f47680
	float GetCurHP();// 0x3f47644
	float GetCurFuel();// 0x3f47608
	void ForceExit(FString Reason);// 0x3f47584
	void DriverAttachementLoadFinish();// 0x3f47570
	bool CanUseRemmoteControl();// 0x3f47530

--------------------------------
Class: DriverAttachmentData
	FName AttachmentDataName;//[Offset: 0x0, Size: 8]
	StaticMesh* AttachmentMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* AttachmentMeshPtr;//[Offset: 0x30, Size: 8]
	StaticMesh* AttachmentMeshLod;//[Offset: 0x38, Size: 40]
	StaticMesh* AttachmentMeshLodPtr;//[Offset: 0x60, Size: 8]
	FName AttachSocket;//[Offset: 0x68, Size: 8]
	float AttachDelayTime;//[Offset: 0x70, Size: 4]
	float DettachDelayTime;//[Offset: 0x74, Size: 4]
	StaticMeshComponent* AttachmentComponentInstance;//[Offset: 0x80, Size: 8]
	STExtraPlayerCharacter* AttachDriverCache;//[Offset: 0x88, Size: 8]

--------------------------------
Class: DeviceInfo
	FString GPUFamily;//[Offset: 0x0, Size: 16]
	FString GLVersion;//[Offset: 0x10, Size: 16]
	FString OSVersion;//[Offset: 0x20, Size: 16]
	FString DeviceMake;//[Offset: 0x30, Size: 16]
	FString DeviceModel;//[Offset: 0x40, Size: 16]
	FString VulkanVersion;//[Offset: 0x50, Size: 16]
	FString MemorySizeInGB;//[Offset: 0x60, Size: 16]
	FString OpenID;//[Offset: 0x70, Size: 16]
	int HardWareLevel;//[Offset: 0x80, Size: 4]
	bool bMemoryLowLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	bool bDeviceLowLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 1]

--------------------------------
Class: ClientWeaponShootReportData
	int WeaponID;//[Offset: 0x0, Size: 4]
	ClientWeaponShootReportItemData[] WeaponDataList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ClientWeaponShootReportItemData
	int ShootRange;//[Offset: 0x0, Size: 4]
	int HitHeadNum;//[Offset: 0x4, Size: 4]
	int HitBodyNum;//[Offset: 0x8, Size: 4]
	int HitOtherNum;//[Offset: 0xc, Size: 4]
	int ShootNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SeekAndLockRPGBulletUploadData
	byte SeekAndLockStageType;//[Offset: 0x0, Size: 1]
	Actor* SeekAndLockTarget;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ShootMultiBulletsParam
	Vector LaunchBulletPos;//[Offset: 0x0, Size: 12]
	Rotator LaunchBulletRot;//[Offset: 0xc, Size: 12]
	uint32 ShootID;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ExplosionProjectileHitInfo
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector ImpactNormal;//[Offset: 0xc, Size: 12]
	float BulletHitTime;//[Offset: 0x18, Size: 4]
	float BulletLaunchTime;//[Offset: 0x1c, Size: 4]
	float BulletMovedDistance;//[Offset: 0x20, Size: 4]

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	bool EnableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c2, Size: 1]
	bool bEnableSimulateBulletResponseToPawnChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c3, Size: 1]
	float MaxActiveTime;//[Offset: 0x6c4, Size: 4]
	float AutoDestroyTime;//[Offset: 0x6c8, Size: 4]
	Vector ServerShootPos;//[Offset: 0x6cc, Size: 12]
	float ServerShootTime;//[Offset: 0x6d8, Size: 4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x6e0, Size: 112]
	int LocalShootId;//[Offset: 0x77c, Size: 4]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x784, Size: 1]
	Controller* CachedInstigator;//[Offset: 0x790, Size: 8]
	bool bNeedResumeMoveInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x798, Size: 1]
	class Actor[] IgnoreActorClasses;//[Offset: 0x7a0, Size: 16]
	void RPC_Multicast_StartLaunchNew(const ProjectileBulletLaunchParams LaunchParams);// 0x3f34c98
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x3f34af4
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x3f34a78
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x3f3498c
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x3f348e4
	void OnImpact(out const HitResult _ImpactResult);// 0x3f3483c
	void HandleOnImpactOnServer(out const HitResult _ImpactResult, bool bVerifyRet);// 0x3f34744
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3f3456c
	void ForceInvalidate();// 0x3f34558
	void DelayDestroyOnServerFinish();// 0x3f34544
	void DelayDestroyOnServer(float DelayTime);// 0x3f344c8
	void CustomCheckResumeMove(out const HitResult _ImpactResult, out bool OutRst);// 0x3f343c8

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x3e8, Size: 8]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x3f4, Size: 4]
	float LaunchGravityScale;//[Offset: 0x3f8, Size: 4]
	int PunctureTimes;//[Offset: 0x3fc, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x400, Size: 8]
	class DamageType* DamageType;//[Offset: 0x408, Size: 8]
	ParticleSystem* NormalTailFX;//[Offset: 0x410, Size: 8]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x420, Size: 8]
	Vector RootScale;//[Offset: 0x428, Size: 12]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	Vector ShootDir;//[Offset: 0x438, Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	float ShowBulletEffectMinDistance;//[Offset: 0x448, Size: 4]
	float OutRangeDefaultImpactLength;//[Offset: 0x44c, Size: 4]
	bool bApplyCurVehicleSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	delegate OnRecycleBullet;//[Offset: 0x458, Size: 16]
	delegate OnResetBullet;//[Offset: 0x590, Size: 16]
	delegate OnBulletImpact;//[Offset: 0x5a0, Size: 16]
	delegate OnLaunchBullet;//[Offset: 0x5b0, Size: 16]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x5c0, Size: 8]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x5c8, Size: 8]
	STExtraCharacter* InstigatorCharacter;//[Offset: 0x5d0, Size: 8]
	PlayerController* ShootPlayerController;//[Offset: 0x638, Size: 8]
	Controller* ShooterController;//[Offset: 0x640, Size: 8]
	bool bShootPlayerIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	bool IngoreSameGroupBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 1]
	void ResetBulletDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void ReceiveLaunchBullet();// 0xffffff8f20d162a8
	void PostFillBulletHitUploadData(out BulletHitInfoUploadData Data);// 0x40cccf4
	void OnShowBulletEffect();// 0xffffff8f20d162a8
	void OnRecycleBulletDelegate__DelegateSignature(STExtraShootWeaponBulletBase* Bullet);// 0xffffff8f20d162a8
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x40ccc4c
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0xffffff8f20d162a8
	void OnImpact(out const HitResult _ImpactResult);// 0x40ccba4
	bool NeedCheckBulletFlySound();// 0x40ccb64
	void LaunchBulletDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void LaunchBP(float Speed, out Transform InTrans, Actor* InOwningWeapon, Actor* InInstigator, out Transform OutTrans);// 0xffffff8f20d162a8
	byte GetOwnerRole();// 0x40ccb30
	float GetMaxBulletFlySpeed();// 0x40ccaf4
	Controller* GetInstigatorControllerSafe();// 0x40ccac0
	float GetCurBulletFlySpeed();// 0x40cca8c

--------------------------------
Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Actor* OwningWeapon;//[Offset: 0x40, Size: 8]
	Actor* Instigator;//[Offset: 0x48, Size: 8]
	uint32 ShootID;//[Offset: 0x50, Size: 4]
	FString ExtraData;//[Offset: 0x58, Size: 16]

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bResumeMoveAfterImpactWithNoLostFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	bool bHasTickDelayedOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e, Size: 1]
	float ExtraGravityZOffset;//[Offset: 0x240, Size: 4]
	bool bCheckBodyInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246, Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x248, Size: 8]
	void ResumeMoveAfterImpactWithNoLost();// 0x3d11544
	void ResetTickDelay();// 0x3d1152c
	void IgnoreBounceReflectOnce();// 0x3d11510
	void ForceStop();// 0x3d114fc

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x15c, Size: 4]
	float MaxSpeed;//[Offset: 0x160, Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x164, Size: 1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x164, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x164, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x164, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x164, Size: 1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x164, Size: 1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x164, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x164, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x165, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x165, Size: 1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x165, Size: 1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x165, Size: 1]
	float PreviousHitTime;//[Offset: 0x168, Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x16c, Size: 12]
	float ProjectileGravityScale;//[Offset: 0x178, Size: 4]
	float Buoyancy;//[Offset: 0x17c, Size: 4]
	float Bounciness;//[Offset: 0x180, Size: 4]
	float Friction;//[Offset: 0x184, Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x188, Size: 4]
	float MinFrictionFraction;//[Offset: 0x18c, Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x190, Size: 16]
	delegate OnProjectileStop;//[Offset: 0x1a0, Size: 16]
	float HomingAccelerationMagnitude;//[Offset: 0x1b0, Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x1b4, Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x1bc, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x1c0, Size: 4]
	int BounceAdditionalIterations;//[Offset: 0x1c4, Size: 4]
	float InterpLocationTime;//[Offset: 0x1c8, Size: 4]
	float InterpRotationTime;//[Offset: 0x1cc, Size: 4]
	float InterpLocationMaxLagDistance;//[Offset: 0x1d0, Size: 4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x1d4, Size: 4]
	void StopSimulating(out const HitResult HitResult);// 0x67a2954
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x67a28cc
	void SetInterpolatedComponent(SceneComponent* Component);// 0x67a2848
	void ResetInterpolation();// 0x67a282c
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xffffff8f20d162a8
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0xffffff8f20d162a8
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x67a2740
	Vector LimitVelocity(Vector NewVelocity);// 0x67a26ac
	bool IsVelocityUnderSimulationThreshold();// 0x67a2664
	bool IsInterpolationComplete();// 0x67a2638

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x5a8, Size: 4]
	float DestroyBulletDelayAfterDestroyWeapon;//[Offset: 0x5ac, Size: 4]
	bool bOwnerClientReCalcShootTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x5b4, Size: 44]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x5e0, Size: 16]
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	float CurShootLockInterval;//[Offset: 0x5f4, Size: 4]
	void UpdateShootLockCD(float DeltaTime);// 0x3ecec5c
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0xffffff8f20d162a8
	bool CheckShootState();// 0x3ecec1c

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	bool bUseBulletCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	float BulletLifeTimeAfterImpact;//[Offset: 0x594, Size: 4]
	Actor*[] BulletCacheList;//[Offset: 0x598, Size: 16]
	void RecycleBullet(STExtraShootWeaponBulletBase* Bullet);// 0x3fc2918

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	FName NormalBulletsTrackCompTag;//[Offset: 0x140, Size: 8]
	FName ScopeBulletsTrackCompTag;//[Offset: 0x148, Size: 8]
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool bDebugGunBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	float DrawShootLineTime;//[Offset: 0x154, Size: 4]
	bool bDrawShootPointOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	float DrawShootPointOnScreenTime;//[Offset: 0x15c, Size: 4]
	float DrawShootPointOnScreenSize;//[Offset: 0x160, Size: 4]
	float DrawShootPoint3DSize;//[Offset: 0x164, Size: 4]
	CurveFloat* DeviationToDegreeCurve;//[Offset: 0x168, Size: 8]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0x170, Size: 8]
	BulletTrackComponent* ShootWeaponScopeBulletsTrackComponent;//[Offset: 0x178, Size: 8]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x180, Size: 8]
	bool bIsContinuousShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	int ContinuousShootingBulletsNum;//[Offset: 0x18c, Size: 4]
	delegate OnShoot;//[Offset: 0x190, Size: 16]
	delegate OnBulletHitDelegate;//[Offset: 0x1a0, Size: 16]
	Rotator LastShootRot;//[Offset: 0x1b0, Size: 12]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1c0, Size: 8]
	int PelletsOnShot;//[Offset: 0x1e4, Size: 4]
	int PelletsFlag;//[Offset: 0x1e8, Size: 4]
	float VaildHistoryClipTime;//[Offset: 0x1f8, Size: 4]
	bool bNeedPullBackMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 1]
	VolleyShootInfoCache[] VolleyShootLocCache;//[Offset: 0x570, Size: 16]
	delegate AutoTestShootDelegate;//[Offset: 0x580, Size: 16]
	void UpdateVolleyShootParameters(Vector TargetLoc, out Vector StartLoc, out Rotator BulletRot, out Vector BulletDir);// 0x40ce104
	void TraceShoot(int ShootNum);// 0x40ce080
	void TargetShoot(int ShootNum);// 0x40cdffc
	void ShootDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void OverrideShotGunShootParametersBP(Vector InTargetLoc, Vector InStartLoc, Rotator InBulletRot, out Vector OutStartLoc, out Rotator OutBulletRot);// 0xffffff8f20d162a8
	void OverrideShootParametersBP(Vector InTargetLoc, Vector InStartLoc, Rotator InBulletRot, out Vector OutStartLoc, out Rotator OutBulletRot);// 0xffffff8f20d162a8
	void OnWeaponClipMaxBulletChanged();// 0x40cdfe8
	void OnWeaponBulletChanged();// 0x40cdfd4
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0xffffff8f20d162a8
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0xffffff8f20d162a8
	void OnBulletHitDelegate__DelegateSignature(BulletHitInfoUploadData Data, STExtraShootWeapon* Weapon);// 0xffffff8f20d162a8
	void OnAutoTestShootDelegate__DelegateSignature(Vector ShootStartPos, Rotator ShootRotation);// 0xffffff8f20d162a8
	void MuzzleShoot(int ShootNum);// 0x40cdf50
	float ModifyDeviationBP(float InDeviation);// 0x40cdebc
	int MaxBulletPerShot();// 0x40cde80
	bool LocalSimulateOBBulletTrack_ModifyHitRet(out HitResult HitRet);// 0x40cddc4
	void LocalSimulateOBBulletTrack();// 0x40cdda8
	Vector GetFinalBulletLaunchPos(out const Vector InitMuzle, out const Vector InitMuzleDir);// 0x40cdca8
	bool CheckShootState();// 0x40cdc68
	void CheckInitShootIDAndClipID();// 0x40cdc4c
	Rotator CalcShootRot();// 0x40cdc0c
	Vector CalcDirectionByDeviation(Vector InCameraDir, float InDeviation);// 0x40cdb30
	Rotator CaclShootRotADS();// 0x40cdaf0

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	bool bApplyOwnerNetRelavance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool bOverrideOwnerNetRelavance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	bool bTickInSimulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 1]
	STExtraWeapon* OwnerWeapon;//[Offset: 0x128, Size: 8]
	STExtraPlayerController* GlobalController;//[Offset: 0x138, Size: 8]
	void UpdateComponentTick();// 0x41fc994
	STExtraWeapon* TryGetOwnerWeapon();// 0x41fc960
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x41fc92c
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x41fc86c
	bool IsWeaponOwnerOBTarget();// 0x41fc834
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x41fc7a4
	bool IsWeaponLogicComponentTickEnabled();// 0x41fc76c
	bool IsLocalOrSpectorPlayer();// 0x41fc734
	void InitBP(STExtraWeapon* TargetWeapon);// 0xffffff8f20d162a8
	void Init(STExtraWeapon* TargetWeapon);// 0x41fc6b0
	FString GetWeaponDetailInfo();// 0x41fc614
	byte GetOwnerPawnRole();// 0x41fc5e0

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0, Size: 4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4, Size: 4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8, Size: 4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc, Size: 4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float MaxDiffServerClient;//[Offset: 0x14, Size: 4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1c, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20, Size: 4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x28, Size: 4]

--------------------------------
Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnEquipDelegate;//[Offset: 0x140, Size: 16]
	delegate HandleGetOwnerActorDelegate;//[Offset: 0x150, Size: 16]
	delegate OnBulletTrackShootDelegate;//[Offset: 0x160, Size: 16]
	delegate OnPostGetDataFromWeaponEntity;//[Offset: 0x170, Size: 16]
	delegate OnPostGetAccessoriesFactorsFromWeaponEntity;//[Offset: 0x180, Size: 16]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x190, Size: 8]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x198, Size: 8]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x1a0, Size: 8]
	float CurRecoilValue;//[Offset: 0x1a8, Size: 4]
	float VerticalRecoilTarget;//[Offset: 0x1ac, Size: 4]
	float HorizontalRecoilTarget;//[Offset: 0x1b0, Size: 4]
	float VerticalRecoveryTarget;//[Offset: 0x1b4, Size: 4]
	float CurVerticalRecovery;//[Offset: 0x1b8, Size: 4]
	float PoseRecoilFactor;//[Offset: 0x1bc, Size: 4]
	float AccessoriesVRecoilFactor;//[Offset: 0x1c0, Size: 4]
	float AccessoriesVRecoilFactorModifier;//[Offset: 0x1c4, Size: 4]
	float VerticalRecoilFactorModifier;//[Offset: 0x1c8, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x1cc, Size: 4]
	float AccessoriesHRecoilFactorModifier;//[Offset: 0x1d0, Size: 4]
	float AccessoriesAllRecoilFactorModifier;//[Offset: 0x1d4, Size: 4]
	float HorizontalRecoilFactorModifier;//[Offset: 0x1d8, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x1dc, Size: 4]
	bool BlockRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	float LastCalcHRecoilTargetTime;//[Offset: 0x1e4, Size: 4]
	float LastHorizontalRecoilTarget;//[Offset: 0x1e8, Size: 4]
	float LastVerticalRecoilTarget;//[Offset: 0x1ec, Size: 4]
	float LastVerticalRecoveryTarget;//[Offset: 0x1f0, Size: 4]
	float CurDeviationValue;//[Offset: 0x1f4, Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x1f8, Size: 4]
	float AccessoriesFinalDeviationFactor;//[Offset: 0x1fc, Size: 4]
	float DeviationFactorModifier;//[Offset: 0x200, Size: 4]
	int ShootBursts;//[Offset: 0x204, Size: 4]
	TimerHandle BurstEmptyHandler;//[Offset: 0x208, Size: 8]
	bool BlockPostFireRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	bool PostFirePitchCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 1]
	float PostFireStartPitch;//[Offset: 0x214, Size: 4]
	float PostFireRecoveryPitch;//[Offset: 0x218, Size: 4]
	float LastPostFireRecoveryPitch;//[Offset: 0x21c, Size: 4]
	int UseTss;//[Offset: 0x220, Size: 4]
	float LogIntervalTmp;//[Offset: 0x224, Size: 4]
	bool bHasGetWeaponEntityData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	SDeviation DeviationInfo_NoTss;//[Offset: 0x22c, Size: 64]
	bool bNeedGetDataFromWeaponEntity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	float CurAccVerticalRecoilTarget;//[Offset: 0x580, Size: 4]
	float CurAccHorizontalRecoilTarget;//[Offset: 0x584, Size: 4]
	float MaxAbsCurAccHorizontalRecoilTarget;//[Offset: 0x588, Size: 4]
	float MaxAbsCurHorizontalRecoilTarget;//[Offset: 0x58c, Size: 4]
	float AccRecoilTargetClearInterval;//[Offset: 0x590, Size: 4]
	SRecoilInfo RecoilInfo_NoTss;//[Offset: 0x5a8, Size: 136]
	void UpdateRecoveryTarget(out const SRecoilInfo RecoilInfo, float DelataTime);// 0x3d12a8c
	void UpdateRecoilValue(out const SRecoilInfo RecoilInfo, float DeltaTime);// 0x3d12928
	void UpdateRecoilTarget(out const SRecoilInfo RecoilInfo, float DelataTime);// 0x3d127c4
	void UpdateRecoilFactor(out const SRecoilInfo RecoilInfo);// 0x3d126ac
	void UpdatePostFireRecovery(out const SRecoilInfo RecoilInfo, float DeltaTime);// 0x3d12548
	void UpdateKickBack(float DeltaTime);// 0x3d124cc
	void OnWeaponStopFire();// 0x3d124b8
	void OnWeaponStartFire();// 0x3d124a4
	void OnWeaponShoot();// 0x3d12490
	void OnUpdate(float DeltaTime);// 0x3d12414
	void OnPostFire();// 0x3d12400
	void HandleGetOwnerActor(Actor* OwnerActor);// 0x3d1237c
	FString GetWeaponInfo();// 0x3d122fc
	void GetDataFromWeaponEntityNew();// 0x3d122e8
	void GetDataFromWeaponEntity();// 0x3d122d4
	Vector GetCurRecoilInfo();// 0x3d1229c
	float GetCurDeviation();// 0x3d12268
	void GetAccessoriesFactorsFromWeaponEntity();// 0x3d12254
	void CheckComponentTick();// 0x3d12240
	void CaptureShootPitch();// 0x3d1222c
	void CapturePostFirePitch();// 0x3d12218
	void CalculateRecoveryTarget(out const SRecoilInfo RecoilInfo, out const Vector Curve);// 0x3d120a0
	void CalculateRecoilTarget(out const SRecoilInfo RecoilInfo, out const Vector Curve);// 0x3d11f28
	void CalcDeviationTarget(out const SDeviation DeviationInfo);// 0x3d11e7c
	void BlockedRecovery(bool State);// 0x3d11dfc
	void BlockedPostFireRecovery(bool State);// 0x3d11d7c

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 4]
	float DeviationMax;//[Offset: 0x18, Size: 4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 4]
	float LeftMax;//[Offset: 0x18, Size: 4]
	float RightMax;//[Offset: 0x1c, Size: 4]
	float HorizontalTendency;//[Offset: 0x20, Size: 4]
	CurveVector* RecoilCurve;//[Offset: 0x28, Size: 8]
	int BulletPerSwitch;//[Offset: 0x30, Size: 4]
	float TimePerSwitch;//[Offset: 0x34, Size: 4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float RecoilSpeedVertical;//[Offset: 0x3c, Size: 4]
	float RecoilSpeedHorizontal;//[Offset: 0x40, Size: 4]
	float RecovertySpeedVertical;//[Offset: 0x44, Size: 4]
	float RecoilValueClimb;//[Offset: 0x48, Size: 4]
	float RecoilValueFail;//[Offset: 0x4c, Size: 4]
	float RecoilModifierStand;//[Offset: 0x50, Size: 4]
	float RecoilModifierCrouch;//[Offset: 0x54, Size: 4]
	float RecoilModifierProne;//[Offset: 0x58, Size: 4]
	float RecoilHorizontalMinScalar;//[Offset: 0x5c, Size: 4]
	float BurstEmptyDelay;//[Offset: 0x60, Size: 4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float ShootSightReturnSpeed;//[Offset: 0x68, Size: 4]
	float RecoilCurveStart;//[Offset: 0x6c, Size: 4]
	float RecoilCurveEnd;//[Offset: 0x70, Size: 4]
	float RecoilCurveSamplingInterval;//[Offset: 0x74, Size: 4]
	Vector[] RecoilCurveArray;//[Offset: 0x78, Size: 16]

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	Rotator[] RearSightRotConfig;//[Offset: 0xc08, Size: 16]
	FName[] RearSightSocketConfig;//[Offset: 0xc18, Size: 16]
	Rotator[] RearSightHandRotOffsetConfig;//[Offset: 0xc28, Size: 16]
	int RearSightRotIndex;//[Offset: 0xc38, Size: 4]
	byte EditorArchiveDataType;//[Offset: 0xc3c, Size: 1]
	byte RuntimeArchiveDataType;//[Offset: 0xc3d, Size: 1]
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0xc40, Size: 8]
	enum ShootWeaponType;//[Offset: 0xc48, Size: 1]
	float BulletFireSpeed;//[Offset: 0xc4c, Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0xc50, Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0xc54, Size: 4]
	int[] ExtendMaxBulletNumInOneClipList;//[Offset: 0xc58, Size: 16]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc68, Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc69, Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6a, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6b, Size: 1]
	int BurstShootBulletsNum;//[Offset: 0xc6c, Size: 4]
	float BulletGravityModifier;//[Offset: 0xc70, Size: 4]
	float BulletGravityExtraOffset;//[Offset: 0xc74, Size: 4]
	FName[] ExtraAvailableMuzzleSocketNameList;//[Offset: 0xc78, Size: 16]
	bool bHasVolleyFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc88, Size: 1]
	int VolleyShootBulletsNum;//[Offset: 0xc8c, Size: 4]
	float VolleyBulletSpreadFactor;//[Offset: 0xc90, Size: 4]
	FName[] VolleyMuzzleSocketNameList;//[Offset: 0xc98, Size: 16]
	float BurstShootCD;//[Offset: 0xca8, Size: 4]
	int BulletNumSingleShot;//[Offset: 0xcac, Size: 4]
	int MaxProjectileBulletsNumSingleShot;//[Offset: 0xcb0, Size: 4]
	bool bLoadSensitive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb4, Size: 1]
	FName MuzzleSocketName;//[Offset: 0xcb8, Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0xcc0, Size: 8]
	FName SilencerSocketName;//[Offset: 0xcc8, Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0xcd0, Size: 8]
	FName ShellDropSocketName;//[Offset: 0xcd8, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0xce0, Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0xce8, Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0xcec, Size: 4]
	byte shootType;//[Offset: 0xcf0, Size: 1]
	int ShootTotalType;//[Offset: 0xcf4, Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf8, Size: 1]
	float WeaponWarnUpTime;//[Offset: 0xcfc, Size: 4]
	float BulletMuzzleBackwardDis;//[Offset: 0xd00, Size: 4]
	float BulletMuzzleBackwardDisWhenHandInFold;//[Offset: 0xd04, Size: 4]
	float CalcShootDirMaxDegreeOffset;//[Offset: 0xd08, Size: 4]
	bool bForcePlayMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0c, Size: 1]
	bool bCanJumpWhenShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0d, Size: 1]
	bool bForceUseShootIntervalConsistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0e, Size: 1]
	bool bSkipDSShootDamageVerifyA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0f, Size: 1]
	bool bSkipDSShootDamageVerifyB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd10, Size: 1]
	bool bSkipDSShootDamageVerifyC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd11, Size: 1]
	bool bHasValideTSSData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd12, Size: 1]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0xd14, Size: 20]
	WeaponHitPartCoff MonsterWeaponHitPartCoff;//[Offset: 0xd28, Size: 20]
	float BaseImpactDamage;//[Offset: 0xd3c, Size: 4]
	float MinimumImpactDamage;//[Offset: 0xd40, Size: 4]
	float BulletRange;//[Offset: 0xd44, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0xd48, Size: 8]
	FName HitEffectTag;//[Offset: 0xd50, Size: 8]
	byte ImpactDirType;//[Offset: 0xd58, Size: 1]
	bool bShootIgnoreCurVehicleAllPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd59, Size: 1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0xd60, Size: 16]
	float RangeModifier;//[Offset: 0xd70, Size: 4]
	float ReferenceDistance;//[Offset: 0xd74, Size: 4]
	float ExtraRangeModifier;//[Offset: 0xd78, Size: 4]
	class DamageType* DamageType;//[Offset: 0xd80, Size: 8]
	ItemDefineID BulletType;//[Offset: 0xd88, Size: 24]
	bool bHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda0, Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda1, Size: 1]
	int InitBulletInClip;//[Offset: 0xda4, Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda8, Size: 1]
	float TraceDistance;//[Offset: 0xdac, Size: 4]
	float MaxValidHitTime;//[Offset: 0xdb0, Size: 4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0xdb8, Size: 80]
	FName SpesificWeaponBulletCanBreakThroughTargetTag;//[Offset: 0xe08, Size: 8]
	float MaxDamageRate;//[Offset: 0xe10, Size: 4]
	bool bIgnoreTeammatesCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe14, Size: 1]
	bool bIgnoreAttachedOwnerCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe15, Size: 1]
	bool bReturnBulletsWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe16, Size: 1]
	bool bStoreBulletsToWrapperWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe17, Size: 1]
	bool bStoreBulletsToTombBoxWrapperWhenDropToBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe18, Size: 1]
	bool bForbidSpawnWrapperWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe19, Size: 1]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1a, Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0xe20, Size: 8]
	CurveFloat* OBBulletSizeScaleCurve;//[Offset: 0xe28, Size: 8]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0xe30, Size: 112]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0xea0, Size: 8]
	float SimulateOBBulletMinDistance;//[Offset: 0xea8, Size: 4]
	float DamageImpulse;//[Offset: 0xeac, Size: 4]
	byte ReloadType;//[Offset: 0xeb0, Size: 1]
	float PreFireTime;//[Offset: 0xeb4, Size: 4]
	float PostFireTime;//[Offset: 0xeb8, Size: 4]
	float PostReloadTime;//[Offset: 0xebc, Size: 4]
	float ReloadDurationStart;//[Offset: 0xec0, Size: 4]
	float ReloadDurationLoop;//[Offset: 0xec4, Size: 4]
	float ReloadTime;//[Offset: 0xec8, Size: 4]
	float ReloadTimeModifier;//[Offset: 0xecc, Size: 4]
	float ReloadTimeTactical;//[Offset: 0xed0, Size: 4]
	float ReloadTimeTacticalModifier;//[Offset: 0xed4, Size: 4]
	float ReloadTimeTacticalOneByOneModifier;//[Offset: 0xed8, Size: 4]
	float AllReloadTimeModifier;//[Offset: 0xedc, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0xee0, Size: 4]
	float ReloadTimeMagOutTactical;//[Offset: 0xee4, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0xee8, Size: 4]
	float ReloadTimeMagInTactical;//[Offset: 0xeec, Size: 4]
	FName ReloadAllTIDName;//[Offset: 0xef0, Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0xef8, Size: 8]
	float AutoReloadCD;//[Offset: 0xf00, Size: 4]
	bool InitAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf04, Size: 1]
	bool bAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf05, Size: 1]
	float DropDuration;//[Offset: 0xf08, Size: 4]
	int InterruptReloadByFireMinBulletThreshold;//[Offset: 0xf0c, Size: 4]
	SRecoilInfo RecoilInfo;//[Offset: 0xf10, Size: 136]
	float AccessoriesVRecoilFactor;//[Offset: 0xf98, Size: 4]
	float AccessoriesVRecoilFactorModifier;//[Offset: 0xf9c, Size: 4]
	float VerticalRecoilFactorModifier;//[Offset: 0xfa0, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0xfa4, Size: 4]
	float AccessoriesHRecoilFactorModifier;//[Offset: 0xfa8, Size: 4]
	float HorizontalRecoilFactorModifier;//[Offset: 0xfac, Size: 4]
	float AccessoriesAllRecoilFactorModifier;//[Offset: 0xfb0, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0xfb4, Size: 4]
	SDeviation DeviationInfo;//[Offset: 0xfb8, Size: 64]
	float ShotGunVerticalSpread;//[Offset: 0xff8, Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0xffc, Size: 4]
	float GameDeviationFactor;//[Offset: 0x1000, Size: 4]
	float GameDeviationAccuracy;//[Offset: 0x1004, Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x1008, Size: 4]
	float AccessoriesFinalDeviationFactor;//[Offset: 0x100c, Size: 4]
	float DeviationFactorModifier;//[Offset: 0x1010, Size: 4]
	byte CrossHairType;//[Offset: 0x1014, Size: 1]
	float CrossHairInitialSize;//[Offset: 0x1018, Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0x101c, Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x1020, Size: 4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1024, Size: 1]
	FName DefaultScopeSocket;//[Offset: 0x1028, Size: 8]
	FName DefaultGripSocket;//[Offset: 0x1030, Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0x1038, Size: 8]
	FName DefaultMagSocket;//[Offset: 0x1040, Size: 8]
	float WeaponBodyLength;//[Offset: 0x1048, Size: 4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x1050, Size: 16]
	float WeaponAimFOV;//[Offset: 0x1064, Size: 4]
	float WeaponAimInTime;//[Offset: 0x1068, Size: 4]
	float WeaponAimPitchRate;//[Offset: 0x106c, Size: 4]
	float WeaponAimYawRate;//[Offset: 0x1070, Size: 4]
	float GameMotionYawRate;//[Offset: 0x1074, Size: 4]
	float GameMotionPitchRate;//[Offset: 0x1078, Size: 4]
	float ForegripParam;//[Offset: 0x107c, Size: 4]
	float MagParam;//[Offset: 0x1080, Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1084, Size: 1]
	float SensitiveFireYawRate;//[Offset: 0x1088, Size: 4]
	float SensitiveFirePitchRate;//[Offset: 0x108c, Size: 4]
	byte SightType;//[Offset: 0x1090, Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0x1098, Size: 24]
	FName ScopeAimCameraSocketNameOverride;//[Offset: 0x10b0, Size: 8]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x10b8, Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x10bc, Size: 4]
	float RecoilKickADS;//[Offset: 0x10c0, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0x10c4, Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x10c8, Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cc, Size: 1]
	enum ReleaseFireType;//[Offset: 0x10cd, Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ce, Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cf, Size: 1]
	float LockAnimPitchDegree;//[Offset: 0x10d0, Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0x10d4, Size: 4]
	float AnimationKick;//[Offset: 0x10d8, Size: 4]
	int ReloadAnimSlot;//[Offset: 0x10dc, Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e0, Size: 1]
	bool bEnableNightVersionWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e1, Size: 1]
	bool bUseScopeOutLerpFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e2, Size: 1]
	bool bDisableFolderInReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e3, Size: 1]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e4, Size: 1]
	float HandleFolderFactorScale;//[Offset: 0x10e8, Size: 4]
	int[] DefaultWeaponIDList;//[Offset: 0x10f0, Size: 16]
	float ShootInterval;//[Offset: 0x1100, Size: 4]
	int ShootIntervalShowNumber;//[Offset: 0x1104, Size: 4]
	float ExtraShootInterval;//[Offset: 0x1108, Size: 4]
	int ExtraShootIntervalShowNumber;//[Offset: 0x110c, Size: 4]
	float BurstShootInterval;//[Offset: 0x1110, Size: 4]
	void OnRep_InfiniteBulletsChanged();// 0x3f8c8c4
	void CheckAndFillEncryptConfigMap();// 0x3f8c8b0

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponID;//[Offset: 0x140, Size: 4]
	byte WeaponType;//[Offset: 0x144, Size: 1]
	enum weaponTypeNew;//[Offset: 0x145, Size: 1]
	byte WeaponHoldType;//[Offset: 0x146, Size: 1]
	FName WeaponAttachSocket;//[Offset: 0x148, Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0x158, Size: 8]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	bool bUseAnimWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 1]
	bool bForceFinishPreviousSwitchWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x162, Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0x164, Size: 4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	bool bEnableVaultHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 1]
	bool bDoNotSwitchWeaponWhenVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0x170, Size: 4]
	bool bCanBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	bool bLockCameraPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 1]
	bool bLockCameraYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176, Size: 1]
	bool bNeedCheckGunCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x177, Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	FName CustomAttachTargetComponentTag;//[Offset: 0x180, Size: 8]
	bool bNeedDestroyAfterDisuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	bool bEnableSpecWeaponCreateOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 1]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x190, Size: 16]
	enum[] BackpackWeaponPlayerStateList;//[Offset: 0x1a0, Size: 16]
	int DisableUseWeaponPlayerStateMsgIDDefault;//[Offset: 0x1b0, Size: 4]
	int DisableUseWeaponPlayerStateMsgIDSpecific;//[Offset: 0x1b4, Size: 4]
	bool bWeaponSwitchToNoneIgnorePlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	bool bNoneSwitchToWeaponIgnorePlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 1]
	bool bDriverCanHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 1]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x1c0, Size: 80]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x210, Size: 80]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x260, Size: 4]
	float SwitchFromIdleToBackpackTimeModifier;//[Offset: 0x264, Size: 4]
	float SwitchAnimFromIdleToBackpackTimeAdjust;//[Offset: 0x268, Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x26c, Size: 4]
	float SwitchFromBackpackToIdleTimeModifier;//[Offset: 0x270, Size: 4]
	float SwitchAnimFromBackpackToIdleTimeAdjust;//[Offset: 0x274, Size: 4]
	float PreSwitchFromBackpackToIdleTime;//[Offset: 0x278, Size: 4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x280, Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x2b0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x2e0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x310, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x340, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x370, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x3a0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x3d0, Size: 48]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x400, Size: 8]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 1]
	float DelayTimeWhenDisableWeaponAnim;//[Offset: 0x40c, Size: 4]
	bool bResetPosWhenDisableWeaponAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	Vector SightSlowBlendAlpha;//[Offset: 0x414, Size: 12]
	int CustomWeaponSlotUIType;//[Offset: 0x420, Size: 4]
	enum[] SyncState_CurWeaponStateGateList;//[Offset: 0x428, Size: 16]
	enum[] SyncState_TargetRepWeaponStateGateList;//[Offset: 0x438, Size: 16]
	enum[] AutoCheckCreateSkillCompWeaponTypeList;//[Offset: 0x448, Size: 16]
	bool bAutoCheckCreateSkillComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	bool bNoAvatarMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 1]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x45c, Size: 148]

--------------------------------
Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0, Size: 304]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x130, Size: 32]

--------------------------------
Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0x10, Size: 1]
	SlateBrush SmallProfileImage;//[Offset: 0x18, Size: 120]
	SlateBrush LargerProfileImage;//[Offset: 0x90, Size: 120]
	FString Name;//[Offset: 0x108, Size: 16]
	FString Description;//[Offset: 0x118, Size: 16]
	int DisplayPriority;//[Offset: 0x128, Size: 4]

--------------------------------
Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x8, Size: 4]
	int PickUpSoundID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0x10, Size: 4]
	byte Type;//[Offset: 0x14, Size: 1]
	StaticMesh* ShowMesh;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0, Size: 72]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x48, Size: 72]
	float followTimeMax;//[Offset: 0x90, Size: 4]

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0, Size: 4]
	float RangeRate;//[Offset: 0x4, Size: 4]
	float SpeedRate;//[Offset: 0x8, Size: 4]
	float RangeRateSight;//[Offset: 0xc, Size: 4]
	float SpeedRateSight;//[Offset: 0x10, Size: 4]
	float CrouchRate;//[Offset: 0x14, Size: 4]
	float ProneRate;//[Offset: 0x18, Size: 4]
	float DyingRate;//[Offset: 0x1c, Size: 4]
	float DriveVehicleRate;//[Offset: 0x20, Size: 4]
	float InVehicleRate;//[Offset: 0x24, Size: 4]
	float FreeFallRate;//[Offset: 0x28, Size: 4]
	float OpeningRate;//[Offset: 0x2c, Size: 4]
	float LandingRate;//[Offset: 0x30, Size: 4]
	float adsorbMaxRange;//[Offset: 0x34, Size: 4]
	float adsorbMinRange;//[Offset: 0x38, Size: 4]
	float adsorbMinAttenuationDis;//[Offset: 0x3c, Size: 4]
	float adsorbMaxAttenuationDis;//[Offset: 0x40, Size: 4]
	float adsorbActiveMinRange;//[Offset: 0x44, Size: 4]

--------------------------------
Class: WeaponHitPartCoff
	float head;//[Offset: 0x0, Size: 4]
	float Body;//[Offset: 0x4, Size: 4]
	float Limbs;//[Offset: 0x8, Size: 4]
	float Hand;//[Offset: 0xc, Size: 4]
	float Foot;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 4]
	int rangeEnd;//[Offset: 0x4, Size: 4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0, Size: 48]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x30, Size: 48]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x60, Size: 16]

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0, Size: 16]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x10, Size: 16]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x20, Size: 16]

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x8, Size: 8]

--------------------------------
Class: VolleyShootInfoCache
	Vector StartLoc;//[Offset: 0x0, Size: 12]
	Vector ShootDir;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponReconnectReplicateData
	FString OwnerPlayerName;//[Offset: 0x0, Size: 16]
	FName WeaponInventoryLogicSocket;//[Offset: 0x10, Size: 8]
	int WeaponBulletNumInClip;//[Offset: 0x18, Size: 4]
	uint32 WeaponShootID;//[Offset: 0x1c, Size: 4]
	uint32 WeaponClipID;//[Offset: 0x20, Size: 4]
	uint32 OwnerNetGUID;//[Offset: 0x24, Size: 4]
	enum CurWeaponState;//[Offset: 0x28, Size: 1]
	byte CurShootType;//[Offset: 0x29, Size: 1]
	int CurShootTotalType;//[Offset: 0x2c, Size: 4]
	ItemDefineID DefineID;//[Offset: 0x30, Size: 24]
	int BackpackPistolListIndex;//[Offset: 0x48, Size: 4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int OperationIndex;//[Offset: 0x50, Size: 4]

--------------------------------
Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0, Size: 16]
	int AttrModifyUniqueID;//[Offset: 0x10, Size: 4]
	FString AttrModifyItemName;//[Offset: 0x18, Size: 16]
	FString AttrName;//[Offset: 0x28, Size: 16]
	enum ModifierOp;//[Offset: 0x38, Size: 1]
	bool bIsResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	float ModifierValue;//[Offset: 0x3c, Size: 4]
	SoftObjectPath ModifierResValue;//[Offset: 0x40, Size: 24]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 8]
	bool bIsResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float FinalAddValue;//[Offset: 0xc, Size: 4]
	SoftObjectPath ResValue;//[Offset: 0x10, Size: 24]

--------------------------------
Class: WeaponAttachmentEquipNotifyData
	byte WeaponSlot;//[Offset: 0x0, Size: 1]
	ItemDefineID ItemID;//[Offset: 0x8, Size: 24]
	bool bIsEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: PlayerID
	FName PlayerType;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]

--------------------------------
Class: StoreProductInfo
	int ProductID;//[Offset: 0x0, Size: 4]
	int ItemID;//[Offset: 0x4, Size: 4]
	int weight;//[Offset: 0x8, Size: 4]
	FString ProductName;//[Offset: 0x10, Size: 16]
	FString LargeIcon;//[Offset: 0x20, Size: 16]
	FString SmallIcon;//[Offset: 0x30, Size: 16]
	FString Desc;//[Offset: 0x40, Size: 16]
	int Count;//[Offset: 0x50, Size: 4]
	int Price;//[Offset: 0x54, Size: 4]
	bool bLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int LimitCount;//[Offset: 0x5c, Size: 4]
	int MaxCount;//[Offset: 0x60, Size: 4]
	int TabType;//[Offset: 0x64, Size: 4]
	int InnerType;//[Offset: 0x68, Size: 4]
	int bSlideBar;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0, Size: 8]
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x8, Size: 16]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0, Size: 8]
	PickUpItemData MainItemData;//[Offset: 0x8, Size: 56]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: RCRVisualizationInfo
	Transform ViewerCameraTransform;//[Offset: 0x0, Size: 48]
	Actor* TargetActor;//[Offset: 0x30, Size: 8]
	Transform TargetTransform;//[Offset: 0x40, Size: 48]
	Vector TargetBoundingExtent;//[Offset: 0x70, Size: 12]
	bool bIsRCRRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	RCRBox[] VisibilityPathBoxes;//[Offset: 0x80, Size: 16]
	RCRBox[] NonVisibilityPathBoxes;//[Offset: 0x90, Size: 16]
	Vector[] VisibilityPathSweepPoint;//[Offset: 0xa0, Size: 16]
	Vector VisibilityPathSweepVector;//[Offset: 0xb0, Size: 12]
	RCRBox[] FullOcclusionBoxes;//[Offset: 0xc0, Size: 16]
	Vector FailedRaycastStart;//[Offset: 0xd0, Size: 12]
	Vector FailedRaycastEnd;//[Offset: 0xdc, Size: 12]
	FString CurrentBuildingDebugName;//[Offset: 0xe8, Size: 16]

--------------------------------
Class: RCRBox
	enum Type;//[Offset: 0x0, Size: 1]
	byte Group;//[Offset: 0x1, Size: 1]
	Transform Transform;//[Offset: 0x10, Size: 48]
	Vector Extent;//[Offset: 0x40, Size: 12]
	Vector OutDirection;//[Offset: 0x4c, Size: 12]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	FString DebugName;//[Offset: 0x60, Size: 16]

--------------------------------
Class: NavLinkInfo
	Transform ActorTransform;//[Offset: 0x0, Size: 48]
	Vector Left;//[Offset: 0x30, Size: 12]
	Vector Right;//[Offset: 0x3c, Size: 12]
	Vector LeftHighPoint;//[Offset: 0x48, Size: 12]
	Vector RightHighPoint;//[Offset: 0x54, Size: 12]
	float LinkDis;//[Offset: 0x60, Size: 4]

--------------------------------
Class: CheatCommandResultInfo
	enum CommandType;//[Offset: 0x0, Size: 1]
	enum ResultType;//[Offset: 0x1, Size: 1]
	float Remain_CoolingDownTime;//[Offset: 0x4, Size: 4]
	float Remain_GlobalCoolingDownTime;//[Offset: 0x8, Size: 4]
	int Remain_ExecuteCountThreshold;//[Offset: 0xc, Size: 4]
	int Remain_GlobalExecuteCountThreshold;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AsyncLoadMeshResReq
	SoftObjectPath[] MeshResList;//[Offset: 0x0, Size: 16]
	BattleItemHandleBase*[] AvatarHandleList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: AvatarModule.Object
	AvatarComponent* AvatarComp;//[Offset: 0x30, Size: 8]
	void SetModuleType(enum inType);// 0x3c82048
	enum GetModuleType();// 0x3c8202c
	AvatarComponent* GetAvatarComp();// 0x3c82010

--------------------------------
Class: VehicleShootWeaponRotateCalculator.Object
	float YawSpeedLimit;//[Offset: 0x28, Size: 4]
	float PitchSpeedLimit;//[Offset: 0x2c, Size: 4]
	float Tolerance;//[Offset: 0x30, Size: 4]
	float AnimTolerance;//[Offset: 0x34, Size: 4]
	float TurningStopTimeBuffer;//[Offset: 0x38, Size: 4]
	float DefaultZ;//[Offset: 0x3c, Size: 4]
	float IntersectionDistance;//[Offset: 0x40, Size: 4]
	bool bUseZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool bUseLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	float StopTurningTime;//[Offset: 0x48, Size: 4]
	bool bIsTurningStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	Rotator CurLogicRotator;//[Offset: 0x50, Size: 12]
	Rotator CurAnimRotator;//[Offset: 0x5c, Size: 12]
	VehicleShootWeapon* OwnerWeapon;//[Offset: 0x68, Size: 8]
	Rotator GetWeaponRotator_Implementation(float DeltaSeconds);// 0x41cd1f8
	Rotator GetWeaponRotator(float DeltaSeconds);// 0x41cd160
	Vector GetShootTarget();// 0x41cd120
	Rotator GetFinalLogicRotator_Implementation(VehicleShootWeapon* Weapon, STExtraPlayerCharacter* RefSeatPlayer);// 0x41cd050
	Rotator GetFinalLogicRotator(VehicleShootWeapon* Weapon, STExtraPlayerCharacter* RefSeatPlayer);// 0x41ccf80
	Rotator CalWeaponRotator_Implementation(float DeltaTime, STExtraPlayerCharacter* RefSeatPlayer, VehicleShootWeapon* Weapon);// 0x41cce74
	Rotator CalWeaponRotator(float DeltaTime, STExtraPlayerCharacter* RefSeatPlayer, VehicleShootWeapon* Weapon);// 0x41ccd68

--------------------------------
Class: CameraOffsetData
	FName DataName;//[Offset: 0x0, Size: 8]
	FName[] ExclusionDataNames;//[Offset: 0x8, Size: 16]
	Vector RelativeLocationOffset;//[Offset: 0x18, Size: 12]
	Vector SocketOffset;//[Offset: 0x24, Size: 12]
	Vector TargetOffset;//[Offset: 0x30, Size: 12]
	float TargetArmLength;//[Offset: 0x3c, Size: 4]
	float SpringArmLength;//[Offset: 0x40, Size: 4]
	float TargetArmLengthAdditiveOffset;//[Offset: 0x44, Size: 4]
	float FieldOfView;//[Offset: 0x48, Size: 4]
	float AdditiveOffsetFov;//[Offset: 0x4c, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x50, Size: 4]
	bool bDoCollisionTestModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	bool bUsePawnControlRotationModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 1]
	Rotator SpringArmRotation;//[Offset: 0x58, Size: 12]
	bool bEnableCameraLagModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 1]
	bool bEnableCameraRotationLagModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 1]
	bool bCameraLagSpeedModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	float CameraLagSpeed;//[Offset: 0x6c, Size: 4]
	enum OperateType;//[Offset: 0x70, Size: 1]

--------------------------------
Class: PaperSprite.Object
	Vector2D SourceUV;//[Offset: 0x38, Size: 8]
	Vector2D SourceDimension;//[Offset: 0x40, Size: 8]
	Texture2D* SourceTexture;//[Offset: 0x48, Size: 8]
	Texture*[] AdditionalSourceTextures;//[Offset: 0x50, Size: 16]
	Vector2D BakedSourceUV;//[Offset: 0x60, Size: 8]
	Vector2D BakedSourceDimension;//[Offset: 0x68, Size: 8]
	Texture2D* BakedSourceTexture;//[Offset: 0x70, Size: 8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x78, Size: 8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x80, Size: 8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x88, Size: 16]
	byte SpriteCollisionDomain;//[Offset: 0x98, Size: 1]
	float PixelsPerUnrealUnit;//[Offset: 0x9c, Size: 4]
	BodySetup* BodySetup;//[Offset: 0xa0, Size: 8]
	int AlternateMaterialSplitIndex;//[Offset: 0xa8, Size: 4]
	Vector4[] BakedRenderData;//[Offset: 0xb0, Size: 16]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 48]
	FName SocketName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x3e8, Size: 12]
	Vector LowThrowOffset;//[Offset: 0x3f4, Size: 12]
	enum ThrowMode;//[Offset: 0x400, Size: 1]
	float PredictLineVelocityScale;//[Offset: 0x404, Size: 4]
	float MaxSimTime;//[Offset: 0x408, Size: 4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x410, Size: 48]
	float GrenadeRadius;//[Offset: 0x440, Size: 4]
	Vector PredictLineStartLocation;//[Offset: 0x444, Size: 12]
	Vector PredictLineStartVelocity;//[Offset: 0x450, Size: 12]
	Vector LauncheVelocity;//[Offset: 0x45c, Size: 12]
	void SetGrenadePredictLineVisible(bool bNewVisible);// 0xffffff8f20d162a8

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 16]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Vector HitActorLocation;//[Offset: 0x14, Size: 12]
	Rotator HitActorRotation;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x140, Size: 16]
	float PistolCenterDownDis;//[Offset: 0x150, Size: 4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x158, Size: 4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x160, Size: 4]
	float RotateAngle;//[Offset: 0x164, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x168, Size: 8]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x170, Size: 8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x178, Size: 8]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x180, Size: 8]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x188, Size: 8]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x190, Size: 8]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x198, Size: 8]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x1a0, Size: 8]
	Texture2D* CrossHairShotGun;//[Offset: 0x1a8, Size: 8]
	void UpdateComponentTick();// 0x3d58168
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x3d580a8
	void DrawSpreadEnd();// 0x3d58094
	void DrawDebugPointEnd();// 0x3d58080

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0, Size: 16]
	enum SpreadType;//[Offset: 0x10, Size: 1]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 24]
	float Offset;//[Offset: 0x18, Size: 4]
	Vector2D IconOffset;//[Offset: 0x1c, Size: 8]
	float Alpha;//[Offset: 0x24, Size: 4]
	float Scale;//[Offset: 0x28, Size: 4]
	float IconRotate;//[Offset: 0x2c, Size: 4]
	float LogicRotate;//[Offset: 0x30, Size: 4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	float BlendInOutRatePerSec;//[Offset: 0x38, Size: 4]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 8]
	float U;//[Offset: 0x8, Size: 4]
	float V;//[Offset: 0xc, Size: 4]
	float UL;//[Offset: 0x10, Size: 4]
	float VL;//[Offset: 0x14, Size: 4]

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x28, Size: 4]
	Vector2D Position;//[Offset: 0x2c, Size: 8]
	Vector2D Size;//[Offset: 0x34, Size: 8]
	Vector2D Origin;//[Offset: 0x3c, Size: 8]
	Vector2D ScreenPosition;//[Offset: 0x44, Size: 8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	float Opacity;//[Offset: 0x50, Size: 4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	SurviveHUD* HUDOwner;//[Offset: 0x58, Size: 8]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x60, Size: 8]
	Pawn* CharacterOwner;//[Offset: 0x68, Size: 8]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 1]
	float LastRenderTime;//[Offset: 0x74, Size: 4]
	Vector2D RenderPosition;//[Offset: 0x78, Size: 8]
	Vector2D RenderSize;//[Offset: 0x80, Size: 8]
	float RenderScale;//[Offset: 0x88, Size: 4]
	Vector2D CanvasCenter;//[Offset: 0x8c, Size: 8]
	Canvas* Canvas;//[Offset: 0x98, Size: 8]
	float AspectScale;//[Offset: 0xa0, Size: 4]
	Vector2D CanvasClip;//[Offset: 0xa4, Size: 8]
	StructProperty*[] RenderObjectList;//[Offset: 0xb0, Size: 16]
	bool ShouldDraw(bool bShowScores);// 0x3e4ce94
	void SetHidden(bool bIsHidden);// 0x3e4ce08
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x3e4cc28
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x3e4caf8
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x3e4c8a8
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x3e4c694
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x3e4c2c0
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x3e4bdc8
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x3e4ba38
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x3e4b97c
	void Draw(float DeltaTime);// 0x3e4b8f8
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x3e4b860

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d0, Size: 1]
	Vector MarkerPosition;//[Offset: 0x4d4, Size: 12]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 1]
	int HideCrosshairByStyleNum;//[Offset: 0x4e4, Size: 4]
	bool bDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	HitPerformData HitPerform;//[Offset: 0x4f0, Size: 136]
	Texture2D* HUDMainTexture;//[Offset: 0x578, Size: 8]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x580, Size: 8]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x588, Size: 8]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x590, Size: 16]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x5a0, Size: 16]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x5b0, Size: 8]
	CanvasIcon WORLDMAP;//[Offset: 0x5c0, Size: 24]
	bool IsDrawSpread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	float DateDrawOffsetX;//[Offset: 0x5fc, Size: 4]
	void UpdateDamageNumberPar();// 0x41107d4
	void SubStyleCrosshairHide();// 0x41107b4
	void SetDrawCrosshair(bool InDrawCrossHair);// 0x4110734
	void OnAsyncLoadingFinished();// 0x4110720
	float GetUIScale();// 0x41106e4
	LinearColor GetPlayerNameColorByTeamID(int TeamID);// 0x411064c
	LinearColor GetColorByTeamID(int TeamID);// 0x41105b4
	void EnableCrosshair(bool bEnable);// 0x4110534
	void AddStyleCrosshairHide();// 0x4110514
	void AddHitDamageNumber(float Damage, const Actor* HitTarget, bool IsHeadShot, bool bIsDeadlyShot, int MyTeamID, int EnemyTeamID, int PlayerNumPerTeam);// 0x411031c

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0, Size: 16]
	float DefaultSpread;//[Offset: 0x10, Size: 4]
	float SpreadMax;//[Offset: 0x14, Size: 4]
	float AddSpreadScale;//[Offset: 0x18, Size: 4]
	float SpreadDecreaseSpeed;//[Offset: 0x1c, Size: 4]
	float DefaultOffset;//[Offset: 0x20, Size: 4]
	float DefaultAlpha;//[Offset: 0x24, Size: 4]
	float AlphaDecreaseSpeed;//[Offset: 0x28, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	LinearColor HitBodyDrawColor;//[Offset: 0x30, Size: 16]
	LinearColor HitHeadDrawColor;//[Offset: 0x40, Size: 16]
	LinearColor HitToDeathDrawColor;//[Offset: 0x50, Size: 16]
	AkAudioEvent* HeadShotSound;//[Offset: 0x60, Size: 8]
	AkAudioEvent* BodyShotSound;//[Offset: 0x68, Size: 8]
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x70, Size: 8]
	float CurCrosshairSpread;//[Offset: 0x78, Size: 4]

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0, Size: 8]
	float U;//[Offset: 0x8, Size: 4]
	float V;//[Offset: 0xc, Size: 4]
	float UL;//[Offset: 0x10, Size: 4]
	float VL;//[Offset: 0x14, Size: 4]

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x38, Size: 8]
	TextureUVs UVs;//[Offset: 0x40, Size: 16]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x58, Size: 16]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 1]
	Vector2D RenderOffset;//[Offset: 0x6c, Size: 8]
	float Rotation;//[Offset: 0x74, Size: 4]
	Vector2D RotPivot;//[Offset: 0x78, Size: 8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float RenderPriority;//[Offset: 0xc, Size: 4]
	Vector2D Position;//[Offset: 0x10, Size: 8]
	Vector2D Size;//[Offset: 0x18, Size: 8]
	LinearColor RenderColor;//[Offset: 0x20, Size: 16]
	float RenderOpacity;//[Offset: 0x30, Size: 4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 4]
	float V;//[Offset: 0x4, Size: 4]
	float UL;//[Offset: 0x8, Size: 4]
	float VL;//[Offset: 0xc, Size: 4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x48, Size: 24]
	Font* Font;//[Offset: 0x60, Size: 8]
	float TextScale;//[Offset: 0x68, Size: 4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	Vector2D ShadowDirection;//[Offset: 0x70, Size: 8]
	LinearColor ShadowColor;//[Offset: 0x78, Size: 16]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x8c, Size: 16]
	byte HorzPosition;//[Offset: 0x9c, Size: 1]
	byte VertPosition;//[Offset: 0x9d, Size: 1]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 36]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 16]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0x140, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x148, Size: 8]
	static void ToggleBulletUploadSplit(const bool InUseSplit);// 0x3d11074
	void HandleOnWeaponStopFire();// 0x3d11060
	void HandleOnWeaponStartFire();// 0x3d1104c
	void AddHitData(out const BulletHitInfoUploadData Data, out const LocalShootHitData ShootData);// 0x3d10ec8

--------------------------------
Class: WeaponVisualBulletClientModeConfigNew
	WeaponVisualBulletCameraModeConfigNew AutonomousClientSetting;//[Offset: 0x0, Size: 72]
	WeaponVisualBulletCameraModeConfigNew OBPawnPerspectiveClientSetting;//[Offset: 0x48, Size: 72]
	WeaponVisualBulletItemConfigNew DefaultSetting;//[Offset: 0x90, Size: 24]

--------------------------------
Class: WeaponVisualBulletCameraModeConfigNew
	WeaponVisualBulletItemConfigNew FPPSetting;//[Offset: 0x0, Size: 24]
	WeaponVisualBulletItemConfigNew TPPSetting;//[Offset: 0x18, Size: 24]
	WeaponVisualBulletItemConfigNew GunADSSetting;//[Offset: 0x30, Size: 24]

--------------------------------
Class: WeaponVisualBulletItemConfigNew
	SoftObjectPath BulletTrackEffectPath;//[Offset: 0x0, Size: 24]

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<enum,AkAudioEvent*> ShootModeFireShotSoundDataMap;//[Offset: 0x1a0, Size: 80]
	bool EnableShakeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x1f8, Size: 8]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x200, Size: 8]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x208, Size: 8]
	float CameraShakeInnerRadius;//[Offset: 0x210, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x214, Size: 4]
	float CameraShakFalloff;//[Offset: 0x218, Size: 4]
	ParticleSystem* MuzzleFX;//[Offset: 0x220, Size: 8]
	Vector LocalMuzzelFXScale;//[Offset: 0x228, Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x238, Size: 8]
	Vector ScopeMuzzelFXScale;//[Offset: 0x240, Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x250, Size: 8]
	Vector RemoteMuzzelFXScale;//[Offset: 0x258, Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x264, Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x278, Size: 8]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x280, Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x290, Size: 8]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x298, Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x2a8, Size: 8]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x2b0, Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x2bc, Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x2d0, Size: 8]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x2d8, Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x2e8, Size: 8]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x2f0, Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x300, Size: 8]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x308, Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x314, Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x328, Size: 8]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x330, Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x340, Size: 8]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x348, Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x358, Size: 8]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x360, Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x370, Size: 8]
	Vector ShellDropFXScale;//[Offset: 0x378, Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x388, Size: 8]
	Vector FPPShellDropFXScale;//[Offset: 0x390, Size: 12]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x3a0, Size: 8]
	Vector MaxMuzzleFxScaleThreshold;//[Offset: 0x3a8, Size: 12]
	Vector MaxMuzzleFxScaleCorrection;//[Offset: 0x3b4, Size: 12]
	float MaxMuzzleFxDistanceScaleCorrection;//[Offset: 0x3c0, Size: 4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x3c4, Size: 4]
	bool bDestroyOldParticleInsWhenActiveShellDropFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	AkAudioEvent* FiringPinSound;//[Offset: 0x3d0, Size: 8]
	FName FiringPinSoundRTPCName;//[Offset: 0x3d8, Size: 8]
	float FiringPinSoundRTPCValue;//[Offset: 0x3e0, Size: 4]
	bool bSilencerBuiltIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x3e8, Size: 8]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x3f0, Size: 8]
	Vector MuzzleFXOriginalScale;//[Offset: 0x3f8, Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x404, Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x408, Size: 8]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x410, Size: 8]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x428, Size: 16]
	ParticleSystem* TemplateContinuousMuzzleFX;//[Offset: 0x438, Size: 8]
	ParticleSystemComponent* ContinuousMuzzleFXComp;//[Offset: 0x440, Size: 8]
	bool bEnableContinuousFXWhileShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool bIsActiveContinuousFXWhileShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	bool bCachedNeedChangeFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44a, Size: 1]
	float CachedDistanceScaler;//[Offset: 0x44c, Size: 4]
	Vector CachedFXScale;//[Offset: 0x450, Size: 12]
	MeshComponent* CachedAttachComponent;//[Offset: 0x460, Size: 8]
	FName CachedSocketName;//[Offset: 0x468, Size: 8]
	void StopPlayContinuousFXWhileShoot();// 0x3f8c280
	void StartPlayContinuousFXWhileShoot();// 0x3f8c26c
	void SetContinuousMuzzleFX(ParticleSystem* TempFX);// 0x3f8c1f0
	void RecycleOBEffectBullet(OBEffectBullet* Bullet);// 0x3f8c174
	void OnWeaponUnEquiped();// 0x3f8c160
	void OnWeaponEuiped();// 0x3f8c14c
	void MarkAKBankLoadAsync(out Package*[] OutPackageList);// 0x3f8c0b8
	void HandleWeaponAction(byte Action);// 0x3f8c034
	OBEffectBullet* GetOBEffectBullet();// 0x3f8c000
	int GetAvailableOBEffectBulletNum();// 0x3f8bfcc
	void ActiveLocalShellDropFX();// 0x3f8bfb8

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x140, Size: 80]
	AkAudioEvent* ShellDropSound;//[Offset: 0x190, Size: 8]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x198, Size: 8]
	void HandleWeaponAction(byte Action);// 0x41f9b0c

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x3e8, Size: 4]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x3f0, Size: 16]
	ParticleSystem* CurFXTemplate;//[Offset: 0x408, Size: 8]
	float CurMovingTime;//[Offset: 0x438, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x440, Size: 8]
	CurveFloat* SizeScaleCurve;//[Offset: 0x448, Size: 8]

--------------------------------
Class: Package.Object

--------------------------------
Class: ShootWeaponAutoTestHandle.Object
	FString GenerateBulletsImpactJsonStringAndClearData();// 0x3f8bc88

--------------------------------
Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	float ShootRateCheckInterval;//[Offset: 0x164, Size: 4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	float ShootRateCheckMulCoff;//[Offset: 0x16c, Size: 4]
	bool ShootHitTargetIntervalCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x174, Size: 4]
	bool bCheckParachuteHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	float MaxParachuteHeightDist;//[Offset: 0x17c, Size: 4]
	float MaxParachutePlaneDist;//[Offset: 0x180, Size: 4]
	float DeCon6SpanTime;//[Offset: 0x1d8, Size: 4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x1e0, Size: 4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x1e4, Size: 4]
	float ShootTimeGunPosBigCircle;//[Offset: 0x1e8, Size: 4]
	float ShootTimeGunPosZThres;//[Offset: 0x1ec, Size: 4]
	float ShootTimeGunPosMaxForwadDifNew;//[Offset: 0x1f0, Size: 4]
	float ShootTimeGunPosForwardAdditionalVehicle;//[Offset: 0x1f4, Size: 4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x1f8, Size: 4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x1fc, Size: 4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x200, Size: 4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 1]
	float TimeLineCheckDnBorders;//[Offset: 0x208, Size: 4]
	float TimeLineCheckUpBorder;//[Offset: 0x20c, Size: 4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x210, Size: 4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x218, Size: 4]
	float MuzzleDiffTorelate;//[Offset: 0x21c, Size: 4]
	float ShortDirReverseDistance;//[Offset: 0x220, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x224, Size: 4]
	float MaxFootRoot;//[Offset: 0x228, Size: 4]

--------------------------------
Class: BulletHitInfoRepData
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc, Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x18, Size: 12]
	int8 SurfaceType;//[Offset: 0x24, Size: 1]
	Actor* Actor;//[Offset: 0x28, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x30, Size: 8]
	int ClientTimeStamp;//[Offset: 0x38, Size: 4]
	byte HitBodyType;//[Offset: 0x3c, Size: 1]
	byte bIsUnderWater;//[Offset: 0x3d, Size: 1]

--------------------------------
Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte AvatarDamagePosition;//[Offset: 0xb4, Size: 1]
	uint32 ShootID;//[Offset: 0xb8, Size: 4]
	float DamageImpulse;//[Offset: 0xd0, Size: 4]

--------------------------------
Class: VehicleWeaponReconnectData
	uint32 RecconectIndex;//[Offset: 0x0, Size: 4]
	WeaponSyncData SyncData;//[Offset: 0x4, Size: 8]

--------------------------------
Class: WeaponSyncData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	uint32 ClipID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: WeaponTriggerEventHandleSkill.WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x420e54c
	static int[] GetWeaponSkillIDList(STExtraWeapon* Weapon);// 0x420e48c

--------------------------------
Class: WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x420dc24
	void ProcessTriggerEvent(enum Event);// 0x420dba0

--------------------------------
Class: SceneCompUpdateOptimizationItem

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0x140, Size: 8]
	WeaponStateBase* DefaultState;//[Offset: 0x148, Size: 8]
	<enum,WeaponStateBase*> StateMap;//[Offset: 0x150, Size: 80]
	WeaponStateBase* GetCurrentState();// 0x420d738
	enum GetCurrentFreshWeaponStateType();// 0x420d704

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	bool bCanEnterAnyState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	delegate OnBeginState;//[Offset: 0x148, Size: 16]
	delegate OnEndState;//[Offset: 0x158, Size: 16]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	enum FreshWeaponStateType;//[Offset: 0x169, Size: 1]
	enum[] ConditionGateMap;//[Offset: 0x170, Size: 16]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	delegate OnAttrModified;//[Offset: 0x158, Size: 16]
	bool bIsResBunchModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	DataTable* AttrDataTable;//[Offset: 0x170, Size: 8]
	int AttrGroup;//[Offset: 0x178, Size: 4]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x180, Size: 16]
	AttrModifyGroupItem[] ConfigAttrModifyGroupList;//[Offset: 0x190, Size: 16]
	byte[] AttrModifyStateList;//[Offset: 0x1a0, Size: 16]
	byte[] AttrModifyGroupStateList;//[Offset: 0x1b0, Size: 16]
	AttrModifyItem[] DynamicModifierRepList;//[Offset: 0x1c0, Size: 16]
	AttrModifyItem[] DynamicModifierList;//[Offset: 0x1d0, Size: 16]
	AttrModifyItem[] DynamicModifierClientList;//[Offset: 0x1e0, Size: 16]
	AttrModifyItem_ID[] DynamicModifierRepList_WithID;//[Offset: 0x1f0, Size: 16]
	<FName,AttrRegisterItem> AttrRegisterItemMap;//[Offset: 0x220, Size: 80]
	bool UpdateRegisteredModifyAbleAttr(out const AttrRegisterItem AttrRegistItem);// 0x42c179c
	bool UnregisterModifyAbleAttr(out const FString[] AttrRegists);// 0x42c16cc
	void UnRegisterAllModifyAbleAttr();// 0x42c16b8
	void SetValueToAttributeSafety(FString AttrName, float Value);// 0x42c15f4
	void SetAttributeGroup(int InGroup, bool InRegister);// 0x42c1534
	bool ReplaceModifyAbleAttr(AttrRegisterItem AttrRegist);// 0x42c13c0
	void RemoveDynamicModifier(FString AttrModifyId, int IntAttrModifyID);// 0x42c12fc
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x42c1194
	bool RegisterAttributesFromTable(int InGroup);// 0x42c1104
	void OnRep_DynamicModifierList_IDs();// 0x42c10f0
	void OnRep_DynamicModifierList();// 0x42c10d4
	void OnRep_AttrModifyStateList();// 0x42c10b8
	void OnRep_AttrModifyGroupStateList();// 0x42c109c
	void OnBatchResLoaded__DelegateSignature(int ReqID, FString AttrName);// 0xffffff8f20d162a8
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0xffffff8f20d162a8
	bool HasDynamicModifier(FString AttrModifyId);// 0x42c1004
	AttrModifyItem[] GetDynamicModifierRepList();// 0x42c0fe4
	bool GetAttrModifyItemByItemName(FString AttrModifyItemName, out AttrModifyItem OutItem);// 0x42c0e70
	float GetAttributeValueMax(FString AttrName);// 0x42c0ddc
	float GetAttributeValue(FString AttrName);// 0x42c0d48
	void EnableAttrModifiers(out const FString[] AttrModifyItemNames, bool bForceNetUpdate, FString ModifierSuffix);// 0x42c0bf0
	bool EnableAttrModifier(FString AttrModifyItemName, bool bForceNetUpdate);// 0x42c0b10
	bool EnableAllAttrModifier();// 0x42c0ad8
	bool DisableModifierToActor(Actor* TargetActor);// 0x42c0a48
	void DisableAttrModifiers(out const FString[] AttrModifyItemNames, bool bForceNetUpdate, FString ModifierSuffix);// 0x42c08f0
	bool DisableAttrModifier(FString AttrModifyItemName, bool bForceNetUpdate);// 0x42c0810
	bool DisableAllAttrModifier(bool bRecycled);// 0x42c0778
	void AddValueToAttribute(FString AttrName, float Value);// 0x42c06b4
	void AddDynamicModifier(AttrModifyItem AttrModifyItem);// 0x42c0548
	void AddConfigAttrModifyItem(out const AttrModifyItem NewItem);// 0x42c0434

--------------------------------
Class: AttrModifyGroupItem
	AttrModifyItem[] AttrModifyItem;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AttrModifyItem_ID
	int ModifyItemID;//[Offset: 0x0, Size: 4]
	AttrModifyItem_ID_CacheAffactTargetInfo[] AttrModifyItem_ID_CacheAffactTargetInfo;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AttrModifyItem_ID_CacheAffactTargetInfo
	CacheAffactTargetInfo[] AffactTargetInfo;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AttrRegisterItem
	FName AttrName;//[Offset: 0x0, Size: 8]
	enum AttrVariableType;//[Offset: 0x8, Size: 1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	Object* OriginalRes;//[Offset: 0x10, Size: 8]
	Object* Owner;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 16]
	Actor* AffectedActor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: WeaponAttrModifyConfig
	FString ModifyConfigID;//[Offset: 0x0, Size: 16]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0x10, Size: 16]

--------------------------------
Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 16]
	enum Op;//[Offset: 0x10, Size: 1]
	float ModifyValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0xf8, Size: 600]
	class AnimInstance* AnimBP;//[Offset: 0x350, Size: 8]
	class AnimInstance* animBPClass;//[Offset: 0x358, Size: 40]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x380, Size: 16]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x390, Size: 16]
	BackpackComponent* BackpackComp;//[Offset: 0x3a0, Size: 8]
	FName SightCameraSocket;//[Offset: 0x3a8, Size: 8]
	Transform SightCameraSocketTransform;//[Offset: 0x3b0, Size: 48]
	bool bCacheNotifyRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int bulletNum);// 0x3cb8414
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x3cb83f8
	bool IsVirtualAvatarHandle();// 0x3cb83b8
	bool IsAvatarOf(int resID);// 0x3cb8320
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x3cb82a4
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x3cb81e0
	int GetSubSlotID();// 0x3cb81a4
	FString GetSTMeshPath();// 0x3cb8120
	int GetSlotID();// 0x3cb80e4
	FString GetSKMeshPath();// 0x3cb8060
	ItemDefineID GetReadyPakItemDefineID();// 0x3cb800c
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x3cb7fb4
	void GetMeshPackCfg(out WeaponMeshCfg meshCfg);// 0x3cb7e50
	WeaponAttachmentConfig GetAttachmentConfig();// 0x3cb7df8
	SoftObjectPath GetAnimationBPAsset();// 0x3cb7d9c
	class Object GetAnimationBP();// 0x3cb7d60
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x3cb7c50

--------------------------------
Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0, Size: 1]
	int PendantIndex;//[Offset: 0x4, Size: 4]
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10, Size: 96]
	bool OverrideLocalJoinOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	Vector LocalJoinOffset;//[Offset: 0x74, Size: 12]
	Vector LocalOffset;//[Offset: 0x80, Size: 12]

--------------------------------
Class: WeaponPendantMap
	int WeaponID;//[Offset: 0x0, Size: 4]
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: WeaponAttachmentSlot
	int TypeSpecificID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: STExtraVehicleWeaponsOnSeat
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0, Size: 16]

--------------------------------
Class: STExtraVehicleAttachment
	FName AttachSocket;//[Offset: 0x0, Size: 8]
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8, Size: 8]

--------------------------------
Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	float HitSelfModifier;//[Offset: 0x3fc, Size: 4]
	float HitSelfImpactReduce;//[Offset: 0x400, Size: 4]
	float HitOthersModifier;//[Offset: 0x404, Size: 4]
	float HitOthersImpactRaise;//[Offset: 0x408, Size: 4]
	float HitCharacterModifier;//[Offset: 0x40c, Size: 4]

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0x120, Size: 8]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0x128, Size: 4]
	float MaxLaunchVelocityFactorOnHitCharacter;//[Offset: 0x12c, Size: 4]
	float ImpactModifier;//[Offset: 0x130, Size: 4]
	float ImpactAbsorption;//[Offset: 0x134, Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0x138, Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0x13c, Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0x140, Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0x144, Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0x148, Size: 4]
	class Actor[] HitIgnoreClasses;//[Offset: 0x150, Size: 16]
	bool PushCharacterSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	float PushCharacterForwardVectorStrength;//[Offset: 0x164, Size: 4]
	float PushCharacterRightVectorStrength;//[Offset: 0x168, Size: 4]
	float PushCharacterTopVectorStrength;//[Offset: 0x16c, Size: 4]
	float ApplyImpluseSpeed;//[Offset: 0x170, Size: 4]
	<Actor*,float> VehicleImpluseCharacterTimes;//[Offset: 0x178, Size: 80]
	float VehicleImpluseCharacterCooldownTime;//[Offset: 0x1c8, Size: 4]
	TimeCoolDown HitCharacterDamageCD;//[Offset: 0x1cc, Size: 8]
	TimeCoolDown HitDamageSelfCD;//[Offset: 0x1d4, Size: 8]
	float HitDamageSelfMaxFactor;//[Offset: 0x1dc, Size: 4]
	float HitDamagePassengerMaxHP;//[Offset: 0x1e0, Size: 4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0x1e8, Size: 4]
	class DamageType* VehicleDamageTypeClass;//[Offset: 0x1f0, Size: 8]
	float ExplosionBaseDamage;//[Offset: 0x1f8, Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0x1fc, Size: 4]
	float ExplosionRadiusInner;//[Offset: 0x200, Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x204, Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x208, Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x20c, Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x210, Size: 8]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	<Actor*,float> VehicleDamageCharacterTimes;//[Offset: 0x220, Size: 80]
	bool bProcessVehicleDamageCharacterOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	float VehicleDamageCharacterCooldownTime;//[Offset: 0x274, Size: 4]
	<Actor*,float> VehicleDamageMobTimes;//[Offset: 0x278, Size: 80]
	bool bProcessVehicleDamageMobOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	float VehicleDamageMobCooldownTime;//[Offset: 0x2cc, Size: 4]
	float HitStoneVelocityDamp;//[Offset: 0x2d0, Size: 4]
	bool bEnabledMobHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	CurveFloat* HitMobDamageCurve;//[Offset: 0x2d8, Size: 8]
	CurveFloat* HitMobVelocityCurve;//[Offset: 0x2e0, Size: 8]
	byte[] MobObjectTypes;//[Offset: 0x2e8, Size: 16]
	float MaxAllowedMobHitDistanceSq;//[Offset: 0x2f8, Size: 4]
	bool bUseProciseHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	float TestHitMobInterval;//[Offset: 0x300, Size: 4]
	float HitMobFeedBackBase;//[Offset: 0x304, Size: 4]
	float HitMobOwnFeedBack;//[Offset: 0x308, Size: 4]
	float PlayHitMobFXInternal;//[Offset: 0x30c, Size: 4]
	float PlayHitMobSpeedThreshold;//[Offset: 0x310, Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x320, Size: 64]
	Actor*[] LastOverlapTickKey;//[Offset: 0x480, Size: 16]
	<Actor*,float> CustomImpulseHitTimes;//[Offset: 0x500, Size: 80]
	bool bProcessCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool bOnlyPlayerCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	float CustomImpulseCooldownTime;//[Offset: 0x554, Size: 4]
	<FString,VehicleCustomImpulse> CustomImpulseComponentMap;//[Offset: 0x558, Size: 80]
	VehicleCustomImpulseFilter mFilter;//[Offset: 0x5a8, Size: 40]
	void SendMobHitToServer(const STExtraSimpleCharacter*[] InMobArr);// 0x41c5f70
	void SendHitDamagedActorToServer(DamageableActor* DamageableActor, const RigidBodyState InHitBodyState);// 0x41c5e64
	void SendHitDamagedActorInterfaceToServer(Actor* InActor, const RigidBodyState InHitBodyState);// 0x41c5d58
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x41c5c4c
	void OnCustomImpulseComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x41c5ab0
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x41c5958
	void ClientMobFeedback(float InVal);// 0x41c58a8

--------------------------------
Class: TimeCoolDown
	float IntervalTime;//[Offset: 0x0, Size: 4]

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 12]
	Quat Quaternion;//[Offset: 0x10, Size: 16]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 12]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 12]
	byte Flags;//[Offset: 0x38, Size: 1]

--------------------------------
Class: VehicleCustomImpulse
	class Actor[] IgnoreClasses;//[Offset: 0x0, Size: 16]
	VehicleCustomImpulseFilter[] ImpulseFilters;//[Offset: 0x10, Size: 16]
	class DamageType* DamageType;//[Offset: 0x20, Size: 8]
	bool bApplyImpulseWhileDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bApplyImpulseWhileStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bUseHitActorAsDamageInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: VehicleCustomImpulseFilter
	class Actor* ImpulseAbsorberType;//[Offset: 0x0, Size: 8]
	bool bApplyRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bApplyImpulseAsVelocityChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	float MaxDamagingImpulseMagnituge;//[Offset: 0xc, Size: 4]
	float MaxImpulseDamage;//[Offset: 0x10, Size: 4]
	float ImpulseStrength;//[Offset: 0x14, Size: 4]
	float RadialImpulseStrength;//[Offset: 0x18, Size: 4]
	float ImpulseRadius;//[Offset: 0x1c, Size: 4]
	byte ImpulseFalloffType;//[Offset: 0x20, Size: 1]

--------------------------------
Class: DamageableActor.UAERegionActor.Actor.Object
	void SetTargetDamageRateMap(<enum,float> InTargetDamageRateMap);// 0x3d65cdc
	int GetVehicleDamagedSpeed();// 0xffffff8f20d162a8
	int GetVehicleDamagedCoefficient();// 0xffffff8f20d162a8
	<enum,float> GetTargetDamageRateMap();// 0x3d65b7c
	float CPP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3d65a18
	bool CPP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x3d65980
	bool CPP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x3d657dc
	float CPP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x3d6572c
	float CPP_GetDamageRateByTarget(Actor* Target);// 0x3d65698
	enum[] CPP_GetDamageableGameObjectType();// 0x3d65610
	bool CPP_GetCanBePicked();// 0x3d655d0
	FName CPP_GetBulletBlockComponentTag();// 0x3d65594
	float CPP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x3d654e4
	float CPP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x3d65414
	float CPP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x3d65324
	float BP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0xffffff8f20d162a8
	bool BP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0xffffff8f20d162a8
	bool BP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0xffffff8f20d162a8
	float BP_GetMaxHP();// 0xffffff8f20d162a8
	float BP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0xffffff8f20d162a8
	float BP_GetDamageRateByTarget(Actor* Target);// 0xffffff8f20d162a8
	enum[] BP_GetDamageableGameObjectType();// 0xffffff8f20d162a8
	float BP_GetCurrentHP();// 0xffffff8f20d162a8
	bool BP_GetCanBePicked();// 0xffffff8f20d162a8
	FName BP_GetBulletBlockComponentTag();// 0xffffff8f20d162a8
	float BP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0xffffff8f20d162a8
	float BP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0xffffff8f20d162a8
	float BP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0xffffff8f20d162a8

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0x120, Size: 16]
	delegate VehicleFuelChangedDelegate;//[Offset: 0x130, Size: 16]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0x140, Size: 16]
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0x150, Size: 16]
	delegate VehicleChargingStateChangedDelegate;//[Offset: 0x160, Size: 16]
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0x170, Size: 16]
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0x180, Size: 16]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool ShouldShowVehicleHp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	float HPMax;//[Offset: 0x194, Size: 4]
	float HP;//[Offset: 0x198, Size: 4]
	float[] WheelsCurrentHP;//[Offset: 0x1a0, Size: 16]
	bool bInCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 1]
	bool ShouldShowVehicleFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b2, Size: 1]
	float FuelMax;//[Offset: 0x1b4, Size: 4]
	float Fuel;//[Offset: 0x1b8, Size: 4]
	float FuelConsumeFactor;//[Offset: 0x1bc, Size: 4]
	bool ShouldShowVehicleHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	MaterialDamage[] MaterialDamageConfig;//[Offset: 0x1c8, Size: 16]
	Actor* LastHitCauser;//[Offset: 0x1d8, Size: 8]
	bool bEnableDamageCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	<byte,class CameraShake> DamageCameraShake_DamageType;//[Offset: 0x1e8, Size: 80]
	float DamageCameraShake_InnerRadius;//[Offset: 0x238, Size: 4]
	float DamageCameraShake_OuterRadius;//[Offset: 0x23c, Size: 4]
	float DamageCameraShake_FallOff;//[Offset: 0x240, Size: 4]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x248, Size: 16]
	bool ShouldBeUnWalkableWhenDriving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	float CheckWalkableInterval;//[Offset: 0x25c, Size: 4]
	float UnWalkableVelocity;//[Offset: 0x260, Size: 4]
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x41c39e4
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x41c380c
	void TakeDamageByBoneName(float Damage, out const FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x41c3618
	void RPC_Multicast_VehicleWheelTakeDamage(float Damage, int LeftHP, int LeftWheelHP, int DamageType, Actor* DamageCauser);// 0x41c34a8
	void RPC_Multicast_VehicleTakeDamage(float Damage, int LeftHP, int DamageType, Actor* DamageCauser);// 0x41c3374
	void RefreshWheelState();// 0x41c3360
	void OnRep_WheelsCurrentHP();// 0x41c334c
	void OnRep_InCharging();// 0x41c3338
	void OnRep_HP();// 0x41c3324
	void OnRep_Fuel();// 0x41c3310
	bool NoFuel();// 0x41c32d8
	void Maintenance(float addpercenthp, bool FixTire);// 0x41c3218
	bool IsDontDamage();// 0x41c31fc
	bool IsDontConsumeFuel();// 0x41c31e0
	bool IsDestroyed();// 0x41c31a8
	int GetWheelsHPNum();// 0x41c3174
	float GetWheelHPMax(int WheelIdx);// 0x41c30e8
	float GetWheelHP(int WheelIdx);// 0x41c305c
	float GetVehicleHPMax();// 0x41c3028
	float GetVehicleHP();// 0x41c2ff4
	float GetFuelMax();// 0x41c2fc0
	float GetFuelConsumeFactor();// 0x41c2f8c
	float GetFuel();// 0x41c2f58

--------------------------------
Class: MaterialDamage
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 8]
	float DamageScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0, Size: 4]
	bool DontDamageWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	OceanManager* OceanManager;//[Offset: 0x2c0, Size: 8]
	float MeshDensity;//[Offset: 0x2c8, Size: 4]
	float FluidDensity;//[Offset: 0x2cc, Size: 4]
	Vector VelocityDamper;//[Offset: 0x2d0, Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x2e0, Size: 4]
	float TestPointRadius;//[Offset: 0x2e4, Size: 4]
	Vector[] TestPoints;//[Offset: 0x2e8, Size: 16]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	bool EnableCheckBoundsSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa, Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fb, Size: 1]
	float[] PointDensityOverride;//[Offset: 0x300, Size: 16]
	StructBoneOverride[] BoneOverride;//[Offset: 0x310, Size: 16]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	bool DrawDebugSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 1]
	float StayUprightStiffness;//[Offset: 0x324, Size: 4]
	float StayUprightDamping;//[Offset: 0x328, Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x32c, Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	float WaveForceMultiplier;//[Offset: 0x33c, Size: 4]
	bool LockPhysSceneOneTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	SceneComponent* UpdatedComponent;//[Offset: 0x348, Size: 8]
	byte TickGroup;//[Offset: 0x350, Size: 1]
	bool EnableCustomWaveForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	Vector CustomWaveForceTestPointOffset;//[Offset: 0x354, Size: 12]
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x360, Size: 16]
	PhysicsConstraintComponent* UprightConstraintComp;//[Offset: 0x528, Size: 8]
	bool bShouldDoVehicleLandingDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 1]
	bool bFluidDampingShouldConsiderWaterPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53e, Size: 1]
	float FluidLinearDamping;//[Offset: 0x540, Size: 4]
	float FluidAngularDamping;//[Offset: 0x544, Size: 4]
	float LandedLinearDamping;//[Offset: 0x548, Size: 4]
	float LandedAngularDamping;//[Offset: 0x54c, Size: 4]
	float DoVehicleLandingDetect_Interval;//[Offset: 0x550, Size: 4]
	int DoVehicleLandingDetect_LeaveWaterFrameThreshold;//[Offset: 0x554, Size: 4]
	float DoVehicleLandingDetect_TraceDistance;//[Offset: 0x558, Size: 4]
	void TickBuoyancyForce(float DeltaTime);// 0x736e940
	void NativeSetEnableCustomWaveForce(bool bEnable);// 0x736e8bc
	bool IsEntirelyUnderWater();// 0x736e880
	bool IsContactedWater();// 0x736e85c
	void EndableUprightConstraint(bool bEnable);// 0x736e7d8
	bool CheckPointInWater(Vector Point, bool isWorldPosition);// 0x736e6fc

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	Vector GlobalWaveDirection;//[Offset: 0x3ec, Size: 12]
	float GlobalWaveSpeed;//[Offset: 0x3f8, Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x3fc, Size: 4]
	float DistanceCheckAbove;//[Offset: 0x400, Size: 4]
	float DistanceCheckBelow;//[Offset: 0x404, Size: 4]
	WaveParameter[] WaveClusters;//[Offset: 0x408, Size: 16]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x418, Size: 16]
	float NetWorkTimeOffset;//[Offset: 0x428, Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	float ModulationStartHeight;//[Offset: 0x430, Size: 4]
	float ModulationMaxHeight;//[Offset: 0x434, Size: 4]
	float ModulationPower;//[Offset: 0x438, Size: 4]
	Landscape* Landscape;//[Offset: 0x440, Size: 8]
	Texture2D* HeightmapTexture;//[Offset: 0x448, Size: 8]
	bool bShouldCorrectTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	float CorrectTimeInterval;//[Offset: 0x47c, Size: 4]
	float ReplicatedWorldRealTimeSeconds;//[Offset: 0x484, Size: 4]
	float ServerWorldRealTimeSecondsDelta;//[Offset: 0x488, Size: 4]
	delegate OnReplicatedWorldRealTimeSeconds;//[Offset: 0x490, Size: 16]
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	Box[] WaterBoxes;//[Offset: 0x4a8, Size: 16]
	bool bEnableWaterTransformModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	Transform[] WaterTransforms;//[Offset: 0x4c0, Size: 16]
	Vector[] WaterBoxExtends;//[Offset: 0x4d0, Size: 16]
	void OnRep_ReplicatedWorldRealTimeSeconds();// 0x736fecc
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x736fe50
	LinearColor GetHeightmapPixel(float U, float V);// 0x736fd88

--------------------------------
Class: WaveParameter
	float Rotation;//[Offset: 0x0, Size: 4]
	float Length;//[Offset: 0x4, Size: 4]
	float Amplitude;//[Offset: 0x8, Size: 4]
	float Steepness;//[Offset: 0xc, Size: 4]
	float TimeScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0, Size: 20]
	WaveParameter Wave02;//[Offset: 0x14, Size: 20]
	WaveParameter Wave03;//[Offset: 0x28, Size: 20]
	WaveParameter Wave04;//[Offset: 0x3c, Size: 20]
	WaveParameter Wave05;//[Offset: 0x50, Size: 20]
	WaveParameter Wave06;//[Offset: 0x64, Size: 20]
	WaveParameter Wave07;//[Offset: 0x78, Size: 20]
	WaveParameter Wave08;//[Offset: 0x8c, Size: 20]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x3e8, Size: 8]
	Guid LandscapeGuid;//[Offset: 0x3f0, Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x400, Size: 8]
	int MaxLODLevel;//[Offset: 0x408, Size: 4]
	float LODDistanceFactor;//[Offset: 0x40c, Size: 4]
	byte LODFalloff;//[Offset: 0x410, Size: 1]
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 1]
	float LOD0DistributionSetting;//[Offset: 0x414, Size: 4]
	float LODDistributionSetting;//[Offset: 0x418, Size: 4]
	byte NearMaxLOD_Baked;//[Offset: 0x41c, Size: 1]
	float NearFactor_Baked;//[Offset: 0x420, Size: 4]
	float NearExtent_Baked;//[Offset: 0x424, Size: 4]
	float FarFactor_Baked;//[Offset: 0x428, Size: 4]
	float LandscapeRoughness;//[Offset: 0x42c, Size: 4]
	bool EnableImproveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	float[] ImproveLODValues;//[Offset: 0x438, Size: 16]
	byte NearMaxLOD;//[Offset: 0x448, Size: 1]
	float NearFactor;//[Offset: 0x44c, Size: 4]
	float NearExtent;//[Offset: 0x450, Size: 4]
	float FarFactor;//[Offset: 0x454, Size: 4]
	int StaticLightingLOD;//[Offset: 0x458, Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x460, Size: 8]
	float StreamingDistanceMultiplier;//[Offset: 0x468, Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46c, Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x470, Size: 8]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x478, Size: 8]
	<FName,MaterialInterface*> OtherMaterials;//[Offset: 0x480, Size: 80]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d0, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x4d8, Size: 16]
	float MinGrassWeightThreshold;//[Offset: 0x4e8, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x4ec, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x4f0, Size: 4]
	Texture2D* GrassColor_WorldMaskNoiseTexture;//[Offset: 0x4f8, Size: 8]
	Vector2D GrassColor_UVScale_WorldMaskNoise;//[Offset: 0x500, Size: 8]
	Vector2D GrassColor_Center_WorldMaskNoise;//[Offset: 0x508, Size: 8]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x510, Size: 16]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x520, Size: 16]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x530, Size: 16]
	<HierarchicalInstancedStaticMeshComponent*> StillUsed;//[Offset: 0x5a0, Size: 80]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 1]
	float StaticLightingResolution;//[Offset: 0x614, Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x618, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x618, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x618, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x619, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61a, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61a, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x61c, Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x620, Size: 24]
	int CollisionMipLevel;//[Offset: 0x638, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x63c, Size: 4]
	float CollisionThickness;//[Offset: 0x640, Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x648, Size: 416]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e8, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e8, Size: 1]
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e8, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x7ec, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x7f0, Size: 4]
	int NumSubsections;//[Offset: 0x7f4, Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7f8, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x7f9, Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fa, Size: 1]
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x57bece8
	void ChangeLODDistributionSettingConsoleVariable();// 0x57beccc
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x57bec48
	void ChangeLOD0DistributionSettingConsoleVariable();// 0x57bec2c
	void ChangebUseScreenSizeLOD(bool InbUseScreenSizeLOD);// 0x57beba0

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x6a8, Size: 16]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x6b8, Size: 16]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x6c8, Size: 16]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	float Width;//[Offset: 0x40, Size: 4]
	float SideFalloff;//[Offset: 0x44, Size: 4]
	float EndFalloff;//[Offset: 0x48, Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x50, Size: 16]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x60, Size: 16]
	Box Bounds;//[Offset: 0x70, Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x90, Size: 8]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 8]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 24]
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 24]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 16]
	Box Bounds;//[Offset: 0x80, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 16]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 8]
	float TangentLen;//[Offset: 0x8, Size: 4]
	FName SocketName;//[Offset: 0x10, Size: 8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 12]
	Vector Left;//[Offset: 0xc, Size: 12]
	Vector Right;//[Offset: 0x18, Size: 12]
	Vector FalloffLeft;//[Offset: 0x24, Size: 12]
	Vector FalloffRight;//[Offset: 0x30, Size: 12]
	float StartEndFalloff;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x7e8, Size: 88]
	Vector SplineUpDir;//[Offset: 0x840, Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84c, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84c, Size: 1]
	byte ForwardAxis;//[Offset: 0x84d, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x850, Size: 4]
	float SplineBoundaryMax;//[Offset: 0x854, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x858, Size: 8]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x860, Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x870, Size: 1]
	void UpdateMesh();// 0x67d7f1c
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x67d7e54
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x67d7d98
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x67d7cd8
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x67d7c10
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x67d7b54
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x67d79b0
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x67d78d0
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x67d7810
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x67d7748
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x67d768c
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x67d75cc
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x67d7504
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x67d7448
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x67d7388
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x67d72c8
	Vector GetStartTangent();// 0x67d7290
	Vector2D GetStartScale();// 0x67d725c
	float GetStartRoll();// 0x67d7228
	Vector GetStartPosition();// 0x67d71f0
	Vector2D GetStartOffset();// 0x67d71bc
	Vector GetSplineUpDir();// 0x67d7184
	byte GetForwardAxis();// 0x67d7150
	Vector GetEndTangent();// 0x67d7118
	Vector2D GetEndScale();// 0x67d70e4
	float GetEndRoll();// 0x67d70b0
	Vector GetEndPosition();// 0x67d7078
	Vector2D GetEndOffset();// 0x67d7044
	float GetBoundaryMin();// 0x67d7010
	float GetBoundaryMax();// 0x67d6fdc

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 12]
	Vector StartTangent;//[Offset: 0xc, Size: 12]
	Vector2D StartScale;//[Offset: 0x18, Size: 8]
	float StartRoll;//[Offset: 0x20, Size: 4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 8]
	Vector EndPos;//[Offset: 0x2c, Size: 12]
	Vector EndTangent;//[Offset: 0x38, Size: 12]
	Vector2D EndScale;//[Offset: 0x44, Size: 8]
	float EndRoll;//[Offset: 0x4c, Size: 4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 8]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 16]
	StaticMesh* GrassMesh;//[Offset: 0x38, Size: 8]
	float GrassDensity;//[Offset: 0x40, Size: 4]
	float PlacementJitter;//[Offset: 0x44, Size: 4]
	int StartCullDistance;//[Offset: 0x48, Size: 4]
	int EndCullDistance;//[Offset: 0x4c, Size: 4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 8]
	float GrassDensity;//[Offset: 0x8, Size: 4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float PlacementJitter;//[Offset: 0x10, Size: 4]
	int StartCullDistance;//[Offset: 0x14, Size: 4]
	int EndCullDistance;//[Offset: 0x18, Size: 4]
	int MinLOD;//[Offset: 0x1c, Size: 4]
	enum Scaling;//[Offset: 0x20, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 8]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 8]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 4]
	float Max;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x6a4, Size: 4]
	int SectionBaseY;//[Offset: 0x6a8, Size: 4]
	int ComponentSizeQuads;//[Offset: 0x6ac, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x6b0, Size: 4]
	int NumSubsections;//[Offset: 0x6b4, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x6b8, Size: 8]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x6c0, Size: 8]
	<FName,MaterialInterface*> OverrideOtherMaterials;//[Offset: 0x6c8, Size: 80]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x718, Size: 32]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x738, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x740, Size: 16]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x750, Size: 16]
	<FName,MaterialInstanceConstant*> OtherMaterialInstances;//[Offset: 0x760, Size: 80]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x7b0, Size: 16]
	Texture2D*[] WeightmapTextures;//[Offset: 0x7c0, Size: 16]
	int VisibilityLayerChannel;//[Offset: 0x7d0, Size: 4]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x7d8, Size: 8]
	Vector4 WeightmapScaleBias;//[Offset: 0x7e0, Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x7f0, Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x800, Size: 16]
	Texture2D* HeightmapTexture;//[Offset: 0x810, Size: 8]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x818, Size: 1]
	<FString,VisibilityData> MultiVisibilityTextureData;//[Offset: 0x820, Size: 80]
	FString VisibleVisibilityLayer;//[Offset: 0x870, Size: 16]
	Box CachedLocalBox;//[Offset: 0x880, Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x89c, Size: 28]
	Guid MapBuildDataId;//[Offset: 0x8b8, Size: 16]
	Guid[] IrrelevantLights;//[Offset: 0x8c8, Size: 16]
	int CollisionMipLevel;//[Offset: 0x8d8, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x8dc, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x8e0, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x8e4, Size: 4]
	float StaticLightingResolution;//[Offset: 0x8e8, Size: 4]
	int ForcedLOD;//[Offset: 0x8ec, Size: 4]
	int LODBias;//[Offset: 0x8f0, Size: 4]
	float[] LODDeltaVertex;//[Offset: 0x908, Size: 16]
	float MaxDeltaVertex;//[Offset: 0x918, Size: 4]
	Guid stateID;//[Offset: 0x91c, Size: 16]
	Guid BakedTextureMaterialGuid;//[Offset: 0x92c, Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x940, Size: 8]
	StaticMesh* OccluderMesh;//[Offset: 0x948, Size: 8]
	byte MobileBlendableLayerMask;//[Offset: 0x950, Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x958, Size: 8]
	<FName,MaterialInterface*> OtherMobileMaterialInterfaces;//[Offset: 0x960, Size: 80]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x9b0, Size: 16]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x9c0, Size: 8]
	uint16[] CachedHeightData;//[Offset: 0x9c8, Size: 16]
	bool[] CachedHaltonBaseIndex;//[Offset: 0x9f8, Size: 16]
	int[] CachedAddHaltonBaseIndexList;//[Offset: 0xa08, Size: 16]
	FName UsedOtherMaterialName;//[Offset: 0xa80, Size: 8]

--------------------------------
Class: OverridePhyxMaterial
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0, Size: 16]
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 8]
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 1]
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 8]
	float Hardness;//[Offset: 0x38, Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 16]

--------------------------------
Class: VisibilityData
	byte[] VisibilityData;//[Offset: 0x0, Size: 16]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x6a8, Size: 16]
	int SectionBaseX;//[Offset: 0x6b8, Size: 4]
	int SectionBaseY;//[Offset: 0x6bc, Size: 4]
	int CollisionSizeQuads;//[Offset: 0x6c0, Size: 4]
	float CollisionScale;//[Offset: 0x6c4, Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x6c8, Size: 4]
	byte[] CollisionQuadFlags;//[Offset: 0x6d0, Size: 16]
	Guid HeightfieldGuid;//[Offset: 0x6e0, Size: 16]
	Box CachedLocalBox;//[Offset: 0x6f0, Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x70c, Size: 28]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x7b0, Size: 16]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x9a0, Size: 16]
	int NumBuiltInstances;//[Offset: 0x9b0, Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x9b8, Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x9d4, Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x9f0, Size: 16]
	int[] UnbuiltInstanceIndexList;//[Offset: 0xa00, Size: 16]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa10, Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0xa38, Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0xa3c, Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5d, Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0xa60, Size: 4]
	int OptimiMinInstancesToSplitNode;//[Offset: 0xa64, Size: 4]
	bool IsOpenTreeOptimi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa68, Size: 1]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x66bfeb0

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x6a8, Size: 96]
	InterpCurveVector SplineInfo;//[Offset: 0x708, Size: 24]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x720, Size: 24]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x738, Size: 24]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x750, Size: 24]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x76c, Size: 4]
	float Duration;//[Offset: 0x770, Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x775, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x776, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x777, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x779, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77a, Size: 1]
	float LoopPosition;//[Offset: 0x77c, Size: 4]
	Vector DefaultUpVector;//[Offset: 0x780, Size: 12]
	bool bUseConfigRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c, Size: 1]
	void UpdateSpline();// 0x67d23fc
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x67d2328
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x67d21d0
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x67d2148
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x67d1f9c
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x67d1e44
	void SetSplineWorldPoints(out const Vector[] Points);// 0x67d1da8
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x67d1cac
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x67d1b88
	void SetSplineLocalPoints(out const Vector[] Points);// 0x67d1aec
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x67d1a64
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x67d190c
	void SetDrawDebug(bool bShow);// 0x67d1888
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x67d17b0
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x67d16a4
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x67d15d4
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x67d1514
	bool IsClosedLoop();// 0x67d14dc
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x67d1448
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x67d1370
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x67d12dc
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x67d1204
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x67d1170
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x67d10dc
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x67d1004
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x67d0f70
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67d0e60
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67d0d94
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67d0cc8
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x67d0b60
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x67d0a3c
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x67d0918
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67d0808
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67d073c
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67d0670
	byte GetSplinePointType(int PointIndex);// 0x67d05e4
	float GetSplineLength();// 0x67d05b0
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x67d04dc
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x67d044c
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x67d03bc
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67d02ac
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67d01e0
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67d0114
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67d0008
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67cff40
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67cfe78
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67cfd68
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67cfc9c
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67cfbd0
	int GetNumberOfSplinePoints();// 0x67cfb9c
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67cfa8c
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67cf9c0
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67cf8f4
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x67cf78c
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x67cf660
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67cf594
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x67cf508
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x67cf47c
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67cf36c
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67cf2a0
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67cf1d4
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x67cf144
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67cf078
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67cef94
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x67cee58
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67ced74
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x67cecd4
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67cebf0
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67ceb10
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67cea2c
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67ce948
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x67ce8ac
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67ce7c8
	void EditorSnapToGround();// 0x67ce7b4
	void EditorNormalizeSplineTangent();// 0x67ce7a0
	void ClearSplinePoints(bool bUpdateSpline);// 0x67ce71c
	void AddSplineWorldPoint(out const Vector Position);// 0x67ce688
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x67ce530
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x67ce414
	void AddSplineLocalPoint(out const Vector Position);// 0x67ce380
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x67ce298
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x67ce1a0

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 24]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 24]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 24]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 24]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 16]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 4]
	Quat OutVal;//[Offset: 0x10, Size: 16]
	Quat ArriveTangent;//[Offset: 0x20, Size: 16]
	Quat LeaveTangent;//[Offset: 0x30, Size: 16]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 16]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 4]
	float OutVal;//[Offset: 0x4, Size: 4]
	float ArriveTangent;//[Offset: 0x8, Size: 4]
	float LeaveTangent;//[Offset: 0xc, Size: 4]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 4]
	Vector Position;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	Vector Scale;//[Offset: 0x34, Size: 12]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0, Size: 8]
	float Density;//[Offset: 0x8, Size: 4]
	float TestRadius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WaterBoxComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float AcceptHigherZ;//[Offset: 0x6d0, Size: 4]
	Vector Direction;//[Offset: 0x6d4, Size: 12]
	float SpeedValue;//[Offset: 0x6e0, Size: 4]
	float WaveForceMultiplier;//[Offset: 0x6e4, Size: 4]
	TrippleWaveParameter[] TrippleWaveClusters;//[Offset: 0x6e8, Size: 16]
	float TimeScaleOffset;//[Offset: 0x6f8, Size: 4]
	float Offset;//[Offset: 0x6fc, Size: 4]
	bool UseSplineDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	float SpeedAttenuationFromSpline;//[Offset: 0x704, Size: 4]
	bool UseSplineZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 1]
	float ZOffset;//[Offset: 0x70c, Size: 4]
	float CellSizeX;//[Offset: 0x710, Size: 4]
	float CellSizeY;//[Offset: 0x714, Size: 4]
	<float,WaterBoxCell> Cells;//[Offset: 0x718, Size: 80]
	int KeyFactor;//[Offset: 0x768, Size: 4]

--------------------------------
Class: TrippleWaveParameter
	WaveParameter WaveCluster0;//[Offset: 0x0, Size: 20]
	WaveAdjust WaveAdjust0;//[Offset: 0x14, Size: 8]
	WaveParameter WaveCluster1;//[Offset: 0x1c, Size: 20]
	WaveAdjust WaveAdjust1;//[Offset: 0x30, Size: 8]
	WaveParameter WaveCluster2;//[Offset: 0x38, Size: 20]
	WaveAdjust WaveAdjust2;//[Offset: 0x4c, Size: 8]

--------------------------------
Class: WaveAdjust
	float TimeScaleOffset;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WaterBoxCell
	Vector WaveDirection;//[Offset: 0x0, Size: 12]
	float WaveZ;//[Offset: 0xc, Size: 4]
	Vector PushForceDirection;//[Offset: 0x10, Size: 12]
	float Speed;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x2c0, Size: 8]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x2c8, Size: 8]
	Actor* ConstraintActor2;//[Offset: 0x2d0, Size: 8]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x2d8, Size: 8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x2f0, Size: 8]
	delegate OnConstraintBroken;//[Offset: 0x2f8, Size: 16]
	ConstraintInstance ConstraintInstance;//[Offset: 0x308, Size: 440]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x677ea4c
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x677e9c8
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x677e910
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x677e858
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x677e7a0
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x677e714
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x677e600
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x677e574
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x677e460
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x677e370
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x677e2a8
	void SetDisableCollision(bool bDisableCollision);// 0x677e224
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x677e158
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x677e030
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x677df50
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x677de28
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x677dd9c
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x677dccc
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x677dc48
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x677db78
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x677dac0
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x677da08
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x677d950
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x677d8c8
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x677d7f8
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x677d708
	void SetAngularDriveMode(byte DriveMode);// 0x677d68c
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x677d5c4
	bool IsBroken();// 0x677d58c
	float GetCurrentTwist();// 0x677d558
	float GetCurrentSwing2();// 0x677d524
	float GetCurrentSwing1();// 0x677d4f0
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x677d404
	void BreakConstraint();// 0x677d3f0

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0x120, Size: 16]
	float MinCorrectionInterval;//[Offset: 0x130, Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0x134, Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x138, Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x13c, Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0x140, Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0x144, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x148, Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0x14c, Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0x150, Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0x154, Size: 4]
	float StationaryCorrectFloorOffset;//[Offset: 0x158, Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0x15c, Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0x160, Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0x164, Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0x168, Size: 4]
	bool bEnableApplyMultiRigidBodys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	float IdleForceSyncInterval;//[Offset: 0x170, Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	float StaticFixLocation;//[Offset: 0x178, Size: 4]
	float StaticFixAngel;//[Offset: 0x17c, Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x180, Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x184, Size: 4]
	bool UseLegacySimulatedCorrectStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	float MaxSimulatedCorrectTimer;//[Offset: 0x18c, Size: 4]
	int MaxSimulatedCorrectFailCount;//[Offset: 0x190, Size: 4]
	float SimulatedCorrectZ;//[Offset: 0x194, Size: 4]
	bool SimulatedCorrectConsiderVehicleAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d, Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f, Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool SendServerMoveToClientUseAllServerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	bool SendServerMoveToClientWithLinkMeshUseAllServerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2, Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x1a4, Size: 4]
	bool NeedSendGravityZAndDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	bool CheckGravityAndDeltaValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 1]
	float DefaultGravityZ;//[Offset: 0x1ac, Size: 4]
	float DefaultGravityDelta;//[Offset: 0x1b0, Size: 4]
	float ClientMinDeltaTime;//[Offset: 0x1b4, Size: 4]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x2f0, Size: 88]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x41d4ce4
	void SendServerMoveToClientWithLinkMesh(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, const Vector_NetQuantize100 LinkMeshServerLocation, const Vector_NetQuantize100 LinkMeshServerLinearVelocity, const Vector_NetQuantizeNormal LinkMeshServerRotator, const Vector_NetQuantize100 LinkMeshServerAngularVelocity, bool bIsSnap);// 0x41d4a1c
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x41d485c
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x41d466c
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x41d447c
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x41d4210
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x41d3ffc
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x41d3de0
	void SendClientHitToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x41d3b0c
	void SendClientHitToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x41d3838
	void SendClientGravityZAndDeltaTime(float GravityZ, float DeltaTime);// 0x41d3750
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x41d35f8
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x41d34a0
	void OnDriverRide();// 0x41d348c
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x41d3390
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x41d321c
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x41d3120
	STExtraBaseCharacter*[] GetRiders();// 0x41d30a0
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x41d3004
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation);// 0x41d2f0c
	void DragUnderGround();// 0x41d2ef8
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x41d2dec
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x41d2cb4
	bool CheckAndLoadLandscape(float DeltaTime);// 0x41d2c24
	void ApplyRigidBodyState(out RigidBodyState NewState);// 0x41d2b80
	bool AdjustFloorPosition(out const Vector ClientLocation, out const STExtraBaseCharacter*[] Riders, out Vector OutLocation);// 0x41d2a24

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: VehicleStatComponent.VehicleComponent.ActorComponent.Object
	int RollCount;//[Offset: 0x140, Size: 4]
	float RollDegrees;//[Offset: 0x144, Size: 4]
	float InAirTime;//[Offset: 0x148, Size: 4]
	float AirControlFTime;//[Offset: 0x14c, Size: 4]
	float AirControlBTime;//[Offset: 0x150, Size: 4]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	float ReachGroundTime;//[Offset: 0x158, Size: 4]
	void StopRecord();// 0x41d1d20
	void ClearStats();// 0x41d1d0c
	void BeginRecord();// 0x41d1cf8

--------------------------------
Class: VehBackpackItem
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CarMusicConfigBlueprint
	SoftObjectPath MusicAsset;//[Offset: 0x0, Size: 24]
	int MusicProbability;//[Offset: 0x18, Size: 4]
	FString MusicActivatedTime;//[Offset: 0x20, Size: 16]
	FString MusicDeactivatedTime;//[Offset: 0x30, Size: 16]

--------------------------------
Class: CarMusicConfig
	FString MusicAssetPath;//[Offset: 0x0, Size: 16]
	int MusicProbability;//[Offset: 0x10, Size: 4]
	DateTime MusicActivatedTime;//[Offset: 0x18, Size: 8]
	DateTime MusicDeactivatedTime;//[Offset: 0x20, Size: 8]

--------------------------------
Class: CarMusicWrapper
	SoftObjectPath AssetPath;//[Offset: 0x0, Size: 24]
	AkAudioEvent* Music;//[Offset: 0x18, Size: 8]

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0, Size: 1]
	byte ViewYaw;//[Offset: 0x1, Size: 1]
	byte ViewRoll;//[Offset: 0x2, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: VehicleSpringArmComponent.STExtraVehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x468, Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x46c, Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x470, Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 1]
	float ArmOriginProbeSize;//[Offset: 0x478, Size: 4]
	SpringArmModifier* Modifier;//[Offset: 0x480, Size: 8]
	class SpringArmModifier* ModifierTemplate;//[Offset: 0x488, Size: 8]
	Rotator RelativeToOwnerRotator;//[Offset: 0x490, Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	float MinPitch;//[Offset: 0x4b4, Size: 4]
	float MaxPitch;//[Offset: 0x4b8, Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x4c0, Size: 4]
	float ResultMinPitch;//[Offset: 0x504, Size: 4]
	float ResultMaxPitch;//[Offset: 0x508, Size: 4]
	Vector ArmOriginOffset;//[Offset: 0x50c, Size: 12]
	float FreeCamRotationReturnRate;//[Offset: 0x518, Size: 4]
	bool bIgnoreInheritPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	void SetCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x41d1694
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x41d153c
	void DelayRotationLagEnabledEnd();// 0x41d1528
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x41d1424

--------------------------------
Class: STExtraVehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x368, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x36c, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x370, Size: 4]
	bool UseRotationLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	float YawMin;//[Offset: 0x378, Size: 4]
	float YawMax;//[Offset: 0x37c, Size: 4]
	float PitchMin;//[Offset: 0x380, Size: 4]
	float PitchMax;//[Offset: 0x384, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x3d0, Size: 120]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x450, Size: 8]
	Actor*[] ExtraIgnoreActorArray;//[Offset: 0x458, Size: 16]
	void SetExtraIgnoreActorArray(Actor*[] IgnoreActors);// 0x40efa88
	Rotator GetTargetRotation();// 0x40efa48
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x40ef8f0
	void ClearCameraData();// 0x40ef8d4

--------------------------------
Class: SpringArmModifier.Object
	SpringArmComponent* SpringArmComp;//[Offset: 0x28, Size: 8]
	CameraComponent* CameraComp;//[Offset: 0x30, Size: 8]
	CameraOffsetData[] CurActiveDataList;//[Offset: 0x38, Size: 16]
	CameraOffsetData CurCameraData;//[Offset: 0x48, Size: 120]
	CameraOffsetData[] CameraOffsetDatas;//[Offset: 0xc0, Size: 16]
	float FieldOfViewInterpSpeed;//[Offset: 0xd0, Size: 4]
	float SocketOffsetInterpSpeed;//[Offset: 0xd4, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0xd8, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0xdc, Size: 4]
	float RelativeLocationOffsetInterpSpeed;//[Offset: 0xe0, Size: 4]
	bool bDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 1]
	CameraOffsetData ResultCameraData;//[Offset: 0xe8, Size: 120]
	float CurAdditiveOffsetFov;//[Offset: 0x160, Size: 4]
	void UpdateCustomCameraData(out const CameraOffsetData CustomCameraData);// 0x3fa40dc
	bool UpdateCurCameraDataBlueprint(float DeltaTime);// 0xffffff8f20d162a8
	void UpdateCurCameraData(float DeltaTime);// 0x3fa4058
	void SetTargetArmLengthByName(FName DataName, float TargetArmLength);// 0x3fa3fa0
	void SetCustomCameraDataEnable(out const CameraOffsetData CustomCameraData, bool IsEnable);// 0x3fa3e24
	void SetCameraDataEnableByName(FName DataName, bool IsEnable);// 0x3fa3d64
	CameraOffsetData OverrideParam(out const CameraOffsetData from, out CameraOffsetData Target);// 0x3fa3a80
	bool IsDoLocationLag(bool bDoLocationLag);// 0x3fa39e0
	bool IsCameraDataEnableByName(FName DataName);// 0x3fa3950
	Vector GetCameraTargetOffset();// 0x3fa3910
	float GetCameraTargetArmLength();// 0x3fa38d4
	Vector GetCameraSocketOffset();// 0x3fa3894
	Vector GetCameraRelativeLocationOffset();// 0x3fa3854
	float GetCameraAdditiveOffsetFov();// 0x3fa3818
	bool GetbDoCollisionTest();// 0x3fa37e0
	float GetArmLengthInterpSpeed();// 0x3fa37ac
	HitResult DoSpringArmSweepSingleByChannel(out Vector ArmOrigin, out Vector DesiredLoc);// 0x3fa3678
	void ClearCameraData();// 0x3fa365c
	bool CalculateBlueprint();// 0xffffff8f20d162a8
	void Calculate();// 0x3fa3640
	void AddAdditiveOffsetBP(CameraComponent* Camera, out const Transform Transform, float FOV);// 0x3fa3524

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: VehicleLagVerifyConfig
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x0, Size: 4]

--------------------------------
Class: VehicleAIComponent.VehicleComponent.ActorComponent.Object
	delegate VehicleAINavStateChangedDelegate;//[Offset: 0x120, Size: 16]
	delegate VehicleAINavStateAllowableDistanceChangedDelegate;//[Offset: 0x130, Size: 16]
	STExtraVehicleAIController* VehicleAIController;//[Offset: 0x168, Size: 8]
	AINavStateData AutoDriver_AINavStateData;//[Offset: 0x170, Size: 28]
	bool AutoDriver_EnableNoDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	float AutoDriver_MaxAllowableDistanceSquared;//[Offset: 0x190, Size: 4]
	float CheckAllowableDistanceInter;//[Offset: 0x194, Size: 4]
	Vector[] AutoDrive_RouteList;//[Offset: 0x198, Size: 16]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x1a8, Size: 16]
	void StopAutoDriving();// 0x41bb9e0
	bool StartAutoDriving();// 0x41bb9a8
	void ServerSetAutoDriverTarget(Vector TargetPosition);// 0x41bb8f0
	void OnRep_AutoDriver_AINavStateData();// 0x41bb8dc
	bool IsAutoDriving();// 0x41bb8a4
	bool HasAutoDriveTarget();// 0x41bb86c
	STExtraVehicleAIController* GetVehicleAIController();// 0x41bb838
	int GetCurrentTargetWaypointIdx();// 0x41bb804
	Vector GetAutoDriveTarget();// 0x41bb7cc
	void EndAutoDriving();// 0x41bb7b8
	bool CanAutoDrivingNoDriver();// 0x41bb780
	bool CanAutoDriving();// 0x41bb748
	bool AllowableDistanceAutoDriving();// 0x41bb710

--------------------------------
Class: STExtraVehicleAIController.AIController.Controller.Actor.Object
	FName IsDestroyedBlackboardKeyName;//[Offset: 0x4d8, Size: 8]
	FName AIPawnTag;//[Offset: 0x4e0, Size: 8]
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x40e1b30

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x480, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x480, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x480, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x480, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x480, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x480, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x488, Size: 8]
	BrainComponent* BrainComponent;//[Offset: 0x490, Size: 8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x498, Size: 8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x4a0, Size: 8]
	BlackboardComponent* BlackBoard;//[Offset: 0x4a8, Size: 8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x4b0, Size: 8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x4b8, Size: 8]
	delegate ReceiveMoveCompleted;//[Offset: 0x4c0, Size: 16]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x5c06cfc
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x5c06c80
	void SetMoveBlockDetection(bool bEnable);// 0x5c06bfc
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x5c06b64
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0xffffff8f20d162a8
	void OnUnpossess(Pawn* UnpossessedPawn);// 0xffffff8f20d162a8
	void OnPossess(Pawn* PossessedPawn);// 0xffffff8f20d162a8
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x5c06aa4
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath, bool bUseNavLink);// 0x5c067d4
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x5c065b8
	void K2_SetFocus(Actor* NewFocus);// 0x5c0653c
	void K2_SetFocalPoint(Vector FP);// 0x5c064bc
	void K2_ClearFocus();// 0x5c064a8
	bool HasPartialPath();// 0x5c06470
	PathFollowingComponent* GetPathFollowingComponent();// 0x5c06454
	byte GetMoveStatus();// 0x5c06420
	Vector GetImmediateMoveDestination();// 0x5c063e8
	Actor* GetFocusActor();// 0x5c063b4
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x5c0631c
	Vector GetFocalPoint();// 0x5c062e4
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x5c062c8
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x5c0624c

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0x128, Size: 8]
	AIController* AIOwner;//[Offset: 0x130, Size: 8]
	void StopLogic(FString Reason);// 0x5c16300
	void RestartLogic();// 0x5c162e4
	bool IsRunning();// 0x5c162a4
	bool IsPaused();// 0x5c16264

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0x120, Size: 8]
	BlackboardData* BlackboardAsset;//[Offset: 0x128, Size: 8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0x150, Size: 16]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x5c14014
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x5c13eec
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x5c13e18
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x5c13d44
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x5c13c70
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x5c13b9c
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x5c13ac8
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x5c139f4
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x5c13920
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x5c13844
	bool IsVectorValueSet(out const FName KeyName);// 0x5c137a4
	Vector GetValueAsVector(out const FName KeyName);// 0x5c13704
	FString GetValueAsString(out const FName KeyName);// 0x5c13624
	Rotator GetValueAsRotator(out const FName KeyName);// 0x5c13584
	Object* GetValueAsObject(out const FName KeyName);// 0x5c134e8
	FName GetValueAsName(out const FName KeyName);// 0x5c1344c
	int GetValueAsInt(out const FName KeyName);// 0x5c133b0
	float GetValueAsFloat(out const FName KeyName);// 0x5c13314
	byte GetValueAsEnum(out const FName KeyName);// 0x5c13278
	class Object GetValueAsClass(out const FName KeyName);// 0x5c131dc
	bool GetValueAsBool(out const FName KeyName);// 0x5c1313c
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x5c13050
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x5c12f5c
	void ClearValue(out const FName KeyName);// 0x5c12ed0

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 16]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0x120, Size: 16]
	class AISense* DominantSense;//[Offset: 0x130, Size: 8]
	AIController* AIOwner;//[Offset: 0x148, Size: 8]
	delegate OnPerceptionUpdated;//[Offset: 0x1d0, Size: 16]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x1e0, Size: 16]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x5c089fc
	void RequestStimuliListenerUpdate();// 0x5c089e8
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x5c08930
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x5c0889c
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5c087c8
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5c086f4
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5c08620
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x5c08528

--------------------------------
Class: AISenseConfig.Object
	Color debugColor;//[Offset: 0x28, Size: 4]
	float MaxAge;//[Offset: 0x2c, Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 4]
	enum NotifyType;//[Offset: 0x2c, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 8]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x80, Size: 16]
	float PerceptionAgingRate;//[Offset: 0x90, Size: 4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x5c099b4
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x5c09938
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x5c09844
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x5c0978c
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x5c09610

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 4]
	float ExpirationAge;//[Offset: 0x4, Size: 4]
	float Strength;//[Offset: 0x8, Size: 4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 12]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 12]
	FName Tag;//[Offset: 0x28, Size: 8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 16]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0x120, Size: 8]
	PawnActionStack[] ActionStacks;//[Offset: 0x128, Size: 16]
	PawnActionEvent[] ActionEvents;//[Offset: 0x138, Size: 16]
	PawnAction* CurrentAction;//[Offset: 0x148, Size: 8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x5c30584
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x5c30488
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x5c303fc
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x5c30370

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 8]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 8]
	Object* Instigator;//[Offset: 0x40, Size: 8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 1]
	byte GetActionPriority();// 0x5c2f3a4
	void Finish(byte WithResult);// 0x5c2f318
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x5c2f264

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 8]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0x128, Size: 16]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0x138, Size: 16]
	GameplayTask*[] TickingTasks;//[Offset: 0x158, Size: 16]
	GameplayTask*[] KnownTasks;//[Offset: 0x168, Size: 16]
	delegate OnClaimedResourcesChange;//[Offset: 0x180, Size: 16]
	void OnRep_SimulatedTasks();// 0x5b6100c
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x5b60dbc

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 8]
	void ReadyForActivation();// 0x5b5f1bc
	void GenericGameplayTaskDelegate__DelegateSignature();// 0xffffff8f20d162a8
	void EndTask();// 0x5b5f1a8

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x28, Size: 8]
	BlackboardData* BlackboardAsset;//[Offset: 0x30, Size: 8]
	BTDecorator*[] RootDecorators;//[Offset: 0x38, Size: 16]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x48, Size: 16]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 16]
	BTService*[] Services;//[Offset: 0x68, Size: 16]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 16]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 8]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 16]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 16]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 16]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 4]
	float RandomDeviation;//[Offset: 0x5c, Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 2]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AINavStateData
	int CurrentTargetWaypointIdx;//[Offset: 0x0, Size: 4]
	Vector TargetPosition;//[Offset: 0x4, Size: 12]
	Vector StartPosition;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	int ItemID;//[Offset: 0x48, Size: 4]
	uint32 CauseUniqueID;//[Offset: 0x50, Size: 4]

--------------------------------
Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x2bc, Size: 4]
	float TriggerInterval;//[Offset: 0x2c0, Size: 4]
	float MaxAllowedValidationDiff;//[Offset: 0x2c4, Size: 4]
	void OnTriggered();// 0xffffff8f20d162a8

--------------------------------
Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0x140, Size: 16]
	float SeekAreaPixelSize;//[Offset: 0x150, Size: 4]
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0x154, Size: 8]
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0x15c, Size: 8]
	float ScopeInDelayTime;//[Offset: 0x164, Size: 4]
	float InitialLockFrameLength;//[Offset: 0x168, Size: 4]
	float FinalLockFrameLength;//[Offset: 0x16c, Size: 4]
	float MaxSeekDeistance;//[Offset: 0x170, Size: 4]
	float LineTraceTargetMaxDistance;//[Offset: 0x174, Size: 4]
	float HistoryLockDataMaxCacheTime;//[Offset: 0x178, Size: 4]
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x17c, Size: 4]
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x180, Size: 4]
	float TraceTargetInterval;//[Offset: 0x184, Size: 4]
	float TraceTargetIntervalNoLaserTrace;//[Offset: 0x188, Size: 4]
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x190, Size: 80]
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x1e0, Size: 80]
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x230, Size: 80]
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x280, Size: 8]
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x288, Size: 8]
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x290, Size: 8]
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x298, Size: 8]
	FString HideVehicleUIMsg;//[Offset: 0x2a0, Size: 16]
	FString ShowVehicleUIMsg;//[Offset: 0x2b0, Size: 16]
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x2c8, Size: 16]
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x2d8, Size: 16]
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x2e8, Size: 16]
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x308, Size: 4]
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x30c, Size: 4]
	float CurTraceTargetCountTime;//[Offset: 0x310, Size: 4]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x3f82400
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x3f82350
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x3f82260
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x3f821b0
	void RemoveTargetList(Actor*[] TargetList);// 0x3f820d8
	void RemoveTarget(Actor* Target);// 0x3f8205c
	void PlaySound(Actor* Target, AkAudioEvent* Sound);// 0x3f81fa8
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0xffffff8f20d162a8
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0xffffff8f20d162a8
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0xffffff8f20d162a8
	void InitComplete();// 0x3f81f94
	void HandleTargetOutOfSeekArea();// 0x3f81f80
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x3f81efc
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x3f81e78
	enum GetCurrentSeekAndLockStage();// 0x3f81e3c
	Actor* GetCurrentLockTarget();// 0x3f81e08
	bool CheckTargetIsVisible(Actor* Target);// 0x3f81d70
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x3f81ce0
	void AddTarget(Actor* Target);// 0x3f81c64

--------------------------------
Class: SeekAndLockStageConfig
	float LockTotalTime;//[Offset: 0x0, Size: 4]
	float ShrinkSpeed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleMotorbikeComponent.VehicleComponent.ActorComponent.Object
	delegate OnContactChanged;//[Offset: 0x120, Size: 16]
	CurveFloat* Curve_Roll;//[Offset: 0x130, Size: 8]
	CurveFloat* Curve_ReturnClamp;//[Offset: 0x138, Size: 8]
	CurveFloat* Curve_Steer;//[Offset: 0x140, Size: 8]
	CurveFloat* Curve_Yaw;//[Offset: 0x148, Size: 8]
	CurveFloat* Curve_TorqueStab;//[Offset: 0x150, Size: 8]
	CurveFloat* Curve_Roll_Cart;//[Offset: 0x158, Size: 8]
	CurveFloat* Curve_ReturnClamp_Cart;//[Offset: 0x160, Size: 8]
	CurveFloat* Curve_Steer_Cart;//[Offset: 0x168, Size: 8]
	CurveFloat* Curve_Yaw_Cart;//[Offset: 0x170, Size: 8]
	CurveFloat* Curve_TorqueStab_Cart;//[Offset: 0x178, Size: 8]
	bool bHasSidecart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	FName LowStabBoneName;//[Offset: 0x188, Size: 8]
	FName HighStabBoneName;//[Offset: 0x190, Size: 8]
	Vector SideCartHighStabCOM;//[Offset: 0x198, Size: 12]
	float MinSuspensionOffsetForContact;//[Offset: 0x1a4, Size: 4]
	Vector StabStaticVector;//[Offset: 0x1a8, Size: 12]
	Vector2D StabXVelocityIn;//[Offset: 0x1b4, Size: 8]
	Vector2D StabXVelocityOut;//[Offset: 0x1bc, Size: 8]
	Vector2D StabXPitchIn;//[Offset: 0x1c4, Size: 8]
	Vector2D StabXPitchOut;//[Offset: 0x1cc, Size: 8]
	Vector2D StabZVelocityIn;//[Offset: 0x1d4, Size: 8]
	Vector2D StabZVelocityOut;//[Offset: 0x1dc, Size: 8]
	Vector2D StabZRollIn;//[Offset: 0x1e4, Size: 8]
	Vector2D StabZRollOut;//[Offset: 0x1ec, Size: 8]
	Vector2D StabZPitchIn;//[Offset: 0x1f4, Size: 8]
	Vector2D StabZPitchOut;//[Offset: 0x1fc, Size: 8]
	Vector2D StabTorqueIn;//[Offset: 0x204, Size: 8]
	Vector2D StabTorqueOut;//[Offset: 0x20c, Size: 8]
	float StabTorqueForceScalar;//[Offset: 0x214, Size: 4]
	Vector2D StabTorquePitchIn;//[Offset: 0x218, Size: 8]
	Vector2D StabTorquePitchOut;//[Offset: 0x220, Size: 8]
	bool bUseNewCOMCal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	float ScaleTorque;//[Offset: 0x22c, Size: 4]
	float ScaleCenterOfMass;//[Offset: 0x230, Size: 4]
	Vector CurrentTorque;//[Offset: 0x234, Size: 12]
	Vector CurrentCenterOfMass;//[Offset: 0x240, Size: 12]
	bool bKickstandStabilizeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	float KickstandAngularDamping;//[Offset: 0x250, Size: 4]
	float KickstandMaxAngVelocity;//[Offset: 0x254, Size: 4]
	float KickstandEnableMaxSpeed;//[Offset: 0x258, Size: 4]
	bool bEnableAirControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	Vector2D AirControlFVelMap;//[Offset: 0x260, Size: 8]
	Vector2D AirControlBVelMap;//[Offset: 0x268, Size: 8]
	float AirControlFBTorque;//[Offset: 0x270, Size: 4]
	bool EnableAirPitchAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool EnablePitchNearLandAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	float NearLandAdjustMaxPitch;//[Offset: 0x278, Size: 4]
	float AdjustMaxPitchNeraLand;//[Offset: 0x27c, Size: 4]
	float AdjustMaxPitch;//[Offset: 0x280, Size: 4]
	float AdjustRateF;//[Offset: 0x284, Size: 4]
	float AdjustRateB;//[Offset: 0x288, Size: 4]
	float AdjustPitchRateScale;//[Offset: 0x28c, Size: 4]
	bool EnableAirRollAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	bool EnableRollNearLandAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	float NearLandAdjustMaxRoll;//[Offset: 0x294, Size: 4]
	float AdjustMaxRollNeraLand;//[Offset: 0x298, Size: 4]
	float AdjustMaxRoll;//[Offset: 0x29c, Size: 4]
	float AdjustRateR;//[Offset: 0x2a0, Size: 4]
	float AdjustRateL;//[Offset: 0x2a4, Size: 4]
	float AdjustRollRateScale;//[Offset: 0x2a8, Size: 4]
	bool bResetRotationSafeCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	bool bNewStableMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 1]
	float NewStabilizeMaxAngVel;//[Offset: 0x2b0, Size: 4]
	float NewStabilizeMaxAngVelAngle;//[Offset: 0x2b4, Size: 4]
	float NewStabilizeMinAngle;//[Offset: 0x2b8, Size: 4]
	float NewStabilizeStopLinearVel;//[Offset: 0x2bc, Size: 4]
	float LeanAngleScale;//[Offset: 0x2c0, Size: 4]
	int MainSteerWheelIndex;//[Offset: 0x2c4, Size: 4]
	float NewStabilizeTireLoadTorque;//[Offset: 0x2c8, Size: 4]
	float NewStabilizeTireLoadDesiredYaw;//[Offset: 0x2cc, Size: 4]
	float NewStabilizeTireLoadSmoothFactor;//[Offset: 0x2d0, Size: 4]
	float AirSteerAngVel;//[Offset: 0x2d4, Size: 4]
	bool bContact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool bLastContact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	float COMOffsetSteer;//[Offset: 0x30c, Size: 4]
	float RotSteeringFinal;//[Offset: 0x310, Size: 4]
	void HandleOnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x41c7b44
	void ForceSyncVelocity(Vector ServerLinearVelocity, Vector ServerAngularVelocity);// 0x41c7a74

--------------------------------
Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0, Size: 1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PawnStateRepSyncData
	uint64 CurrentStates;//[Offset: 0x0, Size: 8]
	uint64 DisabledStates;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0, Size: 1]
	int8 Disabled;//[Offset: 0x1, Size: 1]

--------------------------------
Class: PawnStateCustomRelation
	int from;//[Offset: 0x0, Size: 4]
	int to;//[Offset: 0x4, Size: 4]
	enum relation;//[Offset: 0x8, Size: 1]

--------------------------------
Class: STBaseBuffSystemComponent.ActorComponent.Object
	delegate OnBuffAttached;//[Offset: 0x160, Size: 16]
	delegate OnBuffDetached;//[Offset: 0x170, Size: 16]
	float BuffSyncTimer;//[Offset: 0x180, Size: 4]
	<int,int> BuffSynIndexMap;//[Offset: 0x188, Size: 80]
	UTBuffSyncData[] BuffSyncList;//[Offset: 0x1d8, Size: 16]
	FString ServerBuffString;//[Offset: 0x1e8, Size: 16]
	float BuffSyncRemainingPeriod;//[Offset: 0x1f8, Size: 4]
	float SimulateTickInterval;//[Offset: 0x1fc, Size: 4]
	Actor* ActorOwner;//[Offset: 0x200, Size: 8]
	bool bSyncBuffRequired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	TimerHandle ResetForDeathDelayTimerHandler;//[Offset: 0x260, Size: 8]
	TimerHandle RepBuffListDelayTimerHandler;//[Offset: 0x268, Size: 8]
	void ResetForDeath(bool bImmediately, bool bDetached);// 0x42e3eac
	void RepBuffSyncList();// 0x42e3e98
	bool RemoveBuffByInstanceID(int BuffInstanceID, bool bRemoveLayerOnly);// 0x42e3dc4
	bool RemoveBuff(FName BuffName, bool bRemoveLayerOnly, Actor* BuffApplierActor, Controller* pCauser);// 0x42e3c7c
	bool IsBufferMutexed(FName NewBuffName);// 0x42e3bec
	bool HasBuff(FName BuffName);// 0x42e3b5c
	UAEBlackboard* GetUAEBlackboard(int BuffInstanceID);// 0x42e3ad0
	Pawn* GetPawnOwner();// 0x42e3a9c
	FName GetBuffName(int BuffID);// 0x42e3a10
	int GetBuffIDByName(FName BuffName);// 0x42e3984
	STBaseBuff* GetBuffByName(FName BuffName);// 0x42e38f8
	Actor* GetActorOwner();// 0x42e38c4
	void BuffDetached__DelegateSignature(out const FName BuffName);// 0xffffff8f20d162a8
	void BuffAttached__DelegateSignature(out const FName BuffName);// 0xffffff8f20d162a8
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x42e3750

--------------------------------
Class: UTBuffSyncData
	FName BuffName;//[Offset: 0x0, Size: 8]
	int BuffID;//[Offset: 0x8, Size: 4]
	int BuffInstanceID;//[Offset: 0xc, Size: 4]
	Controller* BuffCauser;//[Offset: 0x10, Size: 8]
	int LayerCount;//[Offset: 0x18, Size: 4]
	Actor* BuffApplierActor;//[Offset: 0x20, Size: 8]
	float RemainingTime;//[Offset: 0x28, Size: 4]
	float ExpireTime;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: STBaseBuff.Object
	FString BuffName;//[Offset: 0x38, Size: 16]
	FString DisplayName;//[Offset: 0x48, Size: 16]
	FString Message;//[Offset: 0x58, Size: 16]
	Texture2D* Icon;//[Offset: 0x68, Size: 8]
	SoundBase* SoundData;//[Offset: 0x70, Size: 8]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool IgnoreMagicalImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool bAllowOtherPawnRefreshBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	bool NeedDetachAndAttachForAddLayerWhenReachMaxLayerCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f, Size: 1]
	int LayerMax;//[Offset: 0x80, Size: 4]
	int InitialLayerCount;//[Offset: 0x84, Size: 4]
	float ValidityTime;//[Offset: 0x88, Size: 4]
	bool ValidityTimeAccumulable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	float MaxValidityTime;//[Offset: 0x90, Size: 4]
	float Internal;//[Offset: 0x94, Size: 4]
	UTSkillCondition*[] BuffConditions;//[Offset: 0x98, Size: 16]
	StatusChange[] StatusChanges;//[Offset: 0xa8, Size: 16]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	byte SimulateAddBuffRole;//[Offset: 0xba, Size: 1]
	FName[] MutexBuffers;//[Offset: 0xc0, Size: 16]
	FName[] ExcludedBuffs;//[Offset: 0xd0, Size: 16]
	BuffActionItem[] BuffActions;//[Offset: 0xe0, Size: 16]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0xf0, Size: 16]
	float fADScale;//[Offset: 0x100, Size: 4]
	float fAPScale;//[Offset: 0x104, Size: 4]
	bool IsAlwaysExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	BuffUIConfig UIConfig;//[Offset: 0x110, Size: 88]
	UAEBlackboardParameter[] UAEBlackboardParamList;//[Offset: 0x170, Size: 16]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x180, Size: 80]
	int InstancedNodesTotalSize;//[Offset: 0x1d0, Size: 4]

--------------------------------
Class: StatusChange
	class STBaseBuffStatusType* StatusName;//[Offset: 0x0, Size: 8]
	bool StatusValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: STBaseBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	UTSkillAction* BuffAction;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTSkillActionCreateData BaseData;//[Offset: 0x180, Size: 4]
	bool bFinalizeBeforeDestructToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	bool bClearTimerAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 1]
	void UpdateAction_Internal(float DeltaSeconds);// 0x732bf90
	void UpdateAction(Object* InstanceNodeContainer, float DeltaSeconds);// 0x732bed8
	void UndoAction_Internal();// 0x732bebc
	void UndoAction(Object* InstanceNodeContainer);// 0x732be40
	void TimerRealDoAction(Object* InstanceNodeContainer);// 0x732bdc4
	void Reset_Internal();// 0x732bda8
	void Reset(Object* InstanceNodeContainer);// 0x732bd2c
	bool RealDoAction_Internal();// 0x732bcec
	bool RealDoAction(Object* InstanceNodeContainer);// 0x732bc54
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x732bb98
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x732badc
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x732ba20
	void OnUpdateAction(float DeltaSeconds);// 0x732b99c
	void OnUndoAction();// 0x732b980
	void OnReset();// 0x732b964
	bool OnRealDoAction();// 0x732b924
	void OnPreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x732b868
	void OnPostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x732b7ac
	void OnPostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x732b6f0
	void OnFinalizeBeforeDestruct();// 0x732b6d4
	bool JudgeNeedPhaseWait();// 0x732b694
	bool DoAction(Object* InstanceNodeContainer);// 0x732b5fc

--------------------------------
Class: UTSkillActionCreateData
	float DelayTime;//[Offset: 0x0, Size: 4]

--------------------------------
Class: BuffEventActionItem
	STBaseBuffEventType* EventType;//[Offset: 0x0, Size: 8]
	UTSkillAction* BuffEventAction;//[Offset: 0x8, Size: 8]

--------------------------------
Class: STBaseBuffEventType.Object
	STBaseBuffSystemComponent* STBuffSystemComponent;//[Offset: 0x28, Size: 8]
	bool GetBuffInstance(out BuffInstancedItem OutOwnerBuffInstance);// 0x42e16f4
	bool Equals(out STBaseBuffEventContext Context);// 0x42e14f4
	bool DoAction(out STBaseBuffEventContext Context, UTSkillAction* SkillAction);// 0x42e12b0

--------------------------------
Class: BuffInstancedItem
	FName BuffName;//[Offset: 0x0, Size: 8]
	int BuffID;//[Offset: 0x8, Size: 4]
	STBaseBuff* Buff;//[Offset: 0x10, Size: 8]
	int LayerCount;//[Offset: 0x18, Size: 4]
	Controller* CauserPawnController;//[Offset: 0x1c, Size: 8]
	Actor* CauserActor;//[Offset: 0x24, Size: 8]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	float Expiry;//[Offset: 0x30, Size: 4]
	Actor* Target;//[Offset: 0x34, Size: 8]
	Actor* BuffApplier;//[Offset: 0x3c, Size: 8]
	int BuffInstanceID;//[Offset: 0x44, Size: 4]
	UAEBlackboard* UAEBlackboard;//[Offset: 0xa0, Size: 8]

--------------------------------
Class: STBaseBuffEventContext
	class STBaseBuffEventType* BuffEventClass;//[Offset: 0x0, Size: 8]
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x8, Size: 960]

--------------------------------
Class: BuffUIConfig
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x0, Size: 40]
	int ZOrder;//[Offset: 0x28, Size: 4]
	Margin MarginData;//[Offset: 0x2c, Size: 16]
	Anchors AnchorsData;//[Offset: 0x3c, Size: 16]
	Vector2D Position;//[Offset: 0x4c, Size: 8]

--------------------------------
Class: EffectComponent.ActorComponent.Object
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x3d88770
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x3d885bc
	void S2A_EndEffectGraph(int UID);// 0x3d88538
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x3d8834c

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0x120, Size: 8]
	float UpdateHitBoxDeltaTime;//[Offset: 0x128, Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	bool bOptimizeBulletCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 1]
	bool bOptimizeBulletCache_Server;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 1]
	Transform[] HitBoxs_Stand_Tran;//[Offset: 0x130, Size: 16]
	Transform[] HitBoxs_Prone_Tran;//[Offset: 0x140, Size: 16]
	PrimitiveComponent*[] HitBoxs_Stand;//[Offset: 0x150, Size: 16]
	PrimitiveComponent*[] HitBoxs_Prone;//[Offset: 0x160, Size: 16]
	BoxComponent* BoxEar;//[Offset: 0x170, Size: 8]
	bool bEnableBoxEar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	byte ClientHitPartJudgment;//[Offset: 0x179, Size: 1]
	byte DSHitPartJudgment;//[Offset: 0x17a, Size: 1]
	FString HitBox_Stand_Tag;//[Offset: 0x180, Size: 16]
	FString HitBox_Prone_Tag;//[Offset: 0x190, Size: 16]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x1a0, Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x1a4, Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x1a8, Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x1ac, Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x1b0, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x1b8, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x1c0, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x1c8, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x1d0, Size: 8]
	Vector NewStandHitBodyBoxScale;//[Offset: 0x1d8, Size: 12]
	Vector NewProneHitBodyBoxScale;//[Offset: 0x1e4, Size: 12]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x1f0, Size: 80]
	float PawnCollisionCountdown;//[Offset: 0x240, Size: 4]
	bool IsRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x248, Size: 4]
	bool IsRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	void UpdatePoseCollisionShapes(byte PoseState);// 0x3eeab2c
	void UpdateAllInstanceBodyTransform(int Type);// 0x3eeaaa8
	void InitBodyHitBox(byte PoseState);// 0x3eeaa24
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x3eea998
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x3eea8f4
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x3eea858
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x3eea708
	byte GetCurHitPartJugementType();// 0x3eea6d4
	void CloseBodyBulletCollision();// 0x3eea6b8
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef bodyDef);// 0x3eea510

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0, Size: 4]
	int DownThreshold;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 1]
	float MinMoveAntiCheatCheckIntervel;//[Offset: 0x124, Size: 4]
	int MaxCheatTimes;//[Offset: 0x128, Size: 4]
	float TolerateDistanceFractor;//[Offset: 0x12c, Size: 4]
	float MaxPacketLossRate;//[Offset: 0x130, Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0x134, Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0x138, Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0x13c, Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0x140, Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	int MaxMoveAntiCheatCheatSpeedTimes;//[Offset: 0x148, Size: 4]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x1c8, Size: 616]
	MoveCheatAntiStrategy2 MoveCheatAntiStrategy4;//[Offset: 0x430, Size: 88]
	MoveCheatAntiStrategy6 MoveCheatAntiStrategy6;//[Offset: 0x488, Size: 1392]
	MoveCheatAntiStrategy7 MoveCheatAntiStrategy7;//[Offset: 0x9f8, Size: 120]
	ClientTimeAccChecker ClientTimeAccChecker;//[Offset: 0xa70, Size: 40]
	MoveCheatCheckPlayerStuck MoveCheatAntiPlayerStuck;//[Offset: 0xa98, Size: 16]
	MoveCheatCheckPlayerStuck2 MoveCheatAntiPlayerStuck2;//[Offset: 0xaa8, Size: 28]
	CharacterZMoveDistanceCheck CharacterZMoveDistanceCheck;//[Offset: 0xac4, Size: 88]
	CheckMoveInputStateUseSixteenDir CheckMoveInputState;//[Offset: 0xb20, Size: 40]
	CheckMoveSpeedUpFromMovementComp CheckSpeedUpFromMoveComp;//[Offset: 0xb48, Size: 13712]
	RelSpeedInspector RelSpeedInspector;//[Offset: 0x4128, Size: 96]
	ServerMoveLimitor SrvMoveLimitor;//[Offset: 0x4188, Size: 64]
	MoveSpeedInspector MoveSpeedInspector;//[Offset: 0x41c8, Size: 80]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x4218, Size: 128]
	Character* CharacterOwner;//[Offset: 0x4298, Size: 8]
	float TimeResetThreshold;//[Offset: 0x42e4, Size: 4]
	float ColdMovePunishMaxTime;//[Offset: 0x42e8, Size: 4]
	float MaxJumpHeight;//[Offset: 0x4380, Size: 4]
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x3eaf990
	void SendForceAdjust(const ForceAdjustInf InForceAdjust);// 0x3eaf904
	void RefreshRealMaxJumpHeight();// 0x3eaf8f0
	void Ping2Server(const Mc3ClientInfo ClientInfo);// 0x3eaf824
	void Ping2Client(Mc3IndexInfo ServerTime);// 0x3eaf7a4
	void OnTimeInspectorColdMove();// 0x3eaf790
	void OnPreReconnectOnServer();// 0x3eaf77c
	void OnMovementModeChange(Character* Character, byte PrevMovementMode, byte PreviousCustomMode);// 0x3eaf688
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x3eaf424
	void DebugDrawLine(const Vector Start, const Vector End);// 0x3eaf364

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	uint32 bIsOpenDeltailLog;//[Offset: 0x4, Size: 4]
	uint32 bIsForbidServerCallPing2Client;//[Offset: 0x8, Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0xc, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x10, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x14, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x18, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x1c, Size: 4]
	float ServerSendPingIntervel;//[Offset: 0x20, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x24, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x28, Size: 4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x2c, Size: 4]
	float MaxAllowDelaySecondsRecvPingFromClient;//[Offset: 0x30, Size: 4]
	float MaxAllowDelaySecondsRecvMovePacketFromClient;//[Offset: 0x34, Size: 4]
	uint32 bIsOpenNoPingPublish;//[Offset: 0x38, Size: 4]
	int MaxAllowNoPingTimes;//[Offset: 0x3c, Size: 4]
	float NoPingPulishForbidMoveTime;//[Offset: 0x40, Size: 4]
	bool bPunishVeirfyLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float VerifyLostPunishTime;//[Offset: 0x48, Size: 4]
	float AllowNoVerifyTime;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy2
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x4, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x8, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0xc, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x10, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x14, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x18, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy6
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x8, Size: 4]
	float MaxVectorAccAngel;//[Offset: 0xc, Size: 4]
	float MaxSumVectorLength;//[Offset: 0x10, Size: 4]
	float MaxVectorAccTime;//[Offset: 0x14, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy7
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x4, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x8, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0xc, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x10, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x14, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x18, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ClientTimeAccChecker

--------------------------------
Class: MoveCheatCheckPlayerStuck
	float StuckTime;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MoveCheatCheckPlayerStuck2
	int MaxServerMoveCount;//[Offset: 0x0, Size: 4]
	float MaxStuckDistance;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterZMoveDistanceCheck
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 4]
	float MaxAllowMoveZHeight;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CheckMoveInputStateUseSixteenDir
	int MaxAllowCheatMoveTimes;//[Offset: 0x0, Size: 4]
	int CheckCountInterval;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CheckMoveSpeedUpFromMovementComp
	int MaxAllowCheatMoveTimes;//[Offset: 0x0, Size: 4]
	int MaxLogTimes;//[Offset: 0x4, Size: 4]
	float MaxVerificationTimeInSeconds;//[Offset: 0x8, Size: 4]
	float MaxClientSideTimeLagInSeconds;//[Offset: 0xc, Size: 4]
	float MaxClientAndServerVelocityDiff;//[Offset: 0x10, Size: 4]
	float MaxClientAndServerLocationDiff;//[Offset: 0x14, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x18, Size: 4]
	float MinCheckTimeIntervalWhenExceedMaxTimes;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: RelSpeedInspector.McCheckerBase
	float CheckInterval;//[Offset: 0x1c, Size: 4]
	float MaxSpeed;//[Offset: 0x20, Size: 4]
	int PunishTimeSeconds;//[Offset: 0x24, Size: 4]

--------------------------------
Class: McCheckerBase

--------------------------------
Class: ServerMoveLimitor
	float InspectSpan;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MoveSpeedInspector

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0, Size: 4]
	float DataSampleInterval;//[Offset: 0x4, Size: 4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8, Size: 4]
	float CheatLockTime;//[Offset: 0xc, Size: 4]
	int MaxServerClientDeltaCount;//[Offset: 0x10, Size: 4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x78, Size: 8]

--------------------------------
Class: ShovelInfo

--------------------------------
Class: ForceAdjustInf
	Vector NewLocation;//[Offset: 0x0, Size: 12]
	Vector NewVelocity;//[Offset: 0xc, Size: 12]
	PrimitiveComponent* NewBase;//[Offset: 0x18, Size: 8]
	FName NewBaseBoneName;//[Offset: 0x20, Size: 8]
	bool bHasBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bBaseRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	byte ServerMovementMode;//[Offset: 0x2a, Size: 1]

--------------------------------
Class: Mc3ClientInfo
	Mc3IndexInfo BackSrvInfo;//[Offset: 0x0, Size: 4]
	float NowTime;//[Offset: 0x4, Size: 4]
	Vector_NetQuantize100 NowLocation;//[Offset: 0x8, Size: 12]
	float MaxSpeed;//[Offset: 0x14, Size: 4]

--------------------------------
Class: Mc3IndexInfo
	byte SrvIndex;//[Offset: 0x0, Size: 1]
	uint16 SrvInf;//[Offset: 0x2, Size: 2]

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object

--------------------------------
Class: CharacterParachuteComponent.ActorComponent.Object
	float CurrentDiveRate;//[Offset: 0x160, Size: 4]
	float HorizontalSpeedModifier;//[Offset: 0x174, Size: 4]
	float VerticalSpeedModifier;//[Offset: 0x178, Size: 4]
	float FreeFall_InputTriggerThreshold;//[Offset: 0x17c, Size: 4]
	float FreeFall_AcceFall;//[Offset: 0x180, Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0x184, Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0x188, Size: 4]
	float FreeFall_AcceForward;//[Offset: 0x18c, Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0x190, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x194, Size: 4]
	float FreeFall_AcceRight;//[Offset: 0x198, Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0x19c, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x1a0, Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x1a4, Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x1a8, Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x1ac, Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x1b0, Size: 4]
	float DifferencePitchBetweenCharcterAndCamera;//[Offset: 0x1b4, Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x1b8, Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x1bc, Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x1c0, Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	float Opened_AcceFall;//[Offset: 0x1c8, Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x1cc, Size: 4]
	float Opened_AcceForward;//[Offset: 0x1d0, Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x1d4, Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x1d8, Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x1dc, Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x1e0, Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x1e4, Size: 4]
	float Opened_AcceRight;//[Offset: 0x1e8, Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x1ec, Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x1f0, Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x1f4, Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x1f8, Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x1fc, Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x200, Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x204, Size: 4]
	float CurrentFallSpeed;//[Offset: 0x208, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x20c, Size: 4]
	float AllowVelocityZErrorTolerance;//[Offset: 0x210, Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	bool bUseCompressedInputRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x215, Size: 1]
	float FollowerDist;//[Offset: 0x23c, Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x240, Size: 4]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x3d2e624
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, byte State, out const Rotator ControlRotation);// 0x3d2e4b0
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, byte State, out const Rotator ControlRotation);// 0x3d2e33c
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x3d2e24c
	void UpdateFreeFallRotation(Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x3d2e120
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator ControlRotation);// 0x3d2dfe8
	void StopParachute();// 0x3d2dfd4
	void StartParachute();// 0x3d2dfc0
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x3d2df3c
	void ResetVelocity();// 0x3d2df28
	void PostNetReceiveNewState();// 0x3d2df14
	void OnPreReconnectOnServer();// 0x3d2df00
	void InvalidateAdjustFollowerLocation();// 0x3d2deec
	float GetReplicatedRightInput();// 0x3d2deb8
	float GetReplicatedForwardInput();// 0x3d2de84
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x3d2dd80
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x3d2dc7c
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x3d2db44
	void AdjustFollowerLocation();// 0x3d2db30

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0x120, Size: 4]
	float TileRemovalRadius;//[Offset: 0x124, Size: 4]

--------------------------------
Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0, Size: 1]
	float TotalTime;//[Offset: 0x4, Size: 4]
	float AttachWeaponTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MoveableBaseSmoothComp.ActorComponent.Object
	float SmoothNetUpdateTime;//[Offset: 0x158, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x15c, Size: 4]
	bool bFindFloorWhenSmoothInterpolate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	void OnRespawned();// 0x3eae2e0
	void OnRecycled();// 0x3eae2c4

--------------------------------
Class: VelocitySimulatorSmoothComp.ActorComponent.Object
	float SmoothNetUpdateTime;//[Offset: 0x158, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x15c, Size: 4]
	bool bFindFloorWhenSmoothInterpolate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	void OnRespawned();// 0x41ddc0c
	void OnRecycled();// 0x41ddbf0

--------------------------------
Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 8]
	FString SwitchGroupName;//[Offset: 0x8, Size: 16]
	FString SwitchValue;//[Offset: 0x18, Size: 16]

--------------------------------
Class: AIShootingOffsetComponent.ActorComponent.Object
	Vector AIShootingCenterOffset;//[Offset: 0x120, Size: 12]

--------------------------------
Class: ActivitySyncData
	bool bIsDuringActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsAttachedToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIsMovementDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Vector AttachedOffsetLocation;//[Offset: 0x4, Size: 12]
	Rotator AttachedOffsetRotation;//[Offset: 0x10, Size: 12]
	bool bUseSkinWeightProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: TurnAroundViewComponent.OnlyActorComponent.ActorComponent.Object
	FocusTargetItem FocusTurnData;//[Offset: 0x128, Size: 56]
	bool bTurnOnlyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	Character* MyChar;//[Offset: 0x1a0, Size: 8]
	void OnRep_FocusTurnTargetChange();// 0x41588b4
	FString GetToString();// 0x415882c

--------------------------------
Class: FocusTargetItem
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Position;//[Offset: 0x8, Size: 12]
	bool IsStartTurnTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float TurnTargetVelocity;//[Offset: 0x18, Size: 4]
	Rotator LastActorRotation;//[Offset: 0x1c, Size: 12]
	FString CurveName;//[Offset: 0x28, Size: 16]

--------------------------------
Class: AimOffsetViewComponent.OnlyActorComponent.ActorComponent.Object

--------------------------------
Class: PlayerVaultComponent.ActorComponent.Object
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	VaultAnimDataAsset* VaultAnimDataAssetPtr;//[Offset: 0x160, Size: 8]
	PlayerAIVaultCheckData[] AICheckDataList;//[Offset: 0x168, Size: 16]
	bool isloadAllAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	int VaultEndZDeviation;//[Offset: 0x17c, Size: 4]
	AnimMontage*[] VaultMontageCacheList;//[Offset: 0x188, Size: 16]
	bool VaultFromCPP();// 0x3f2adb8
	void Vault();// 0xffffff8f20d162a8
	void UpdateVault_BluePrint();// 0x3f2ad9c
	void SetZombieVaultAnim(FString AnimKey, float PlayRate);// 0x3f2ac88
	void SetPlayerVaultAnim(FString AnimKey, float PlayRate);// 0x3f2ab74
	void PreSaveCacheData();// 0xffffff8f20d162a8
	void PawnStartVault(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Vector EndPos, Rotator vaultRot, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir, bool bCheckDynamicBlock);// 0x3f2a7d0
	void OnRespawned_BlueprintImpl();// 0xffffff8f20d162a8
	bool IsUnAttachToWorld();// 0x3f2a798
	FString GetVaultKeyForAutoTest();// 0xffffff8f20d162a8
	FString GetVaultKeyByBlockHeightAndBlockLengthWithJump(float Height, float BlockLength, bool bIsJump);// 0x3f2a644
	FString GetVaultKeyByBlockHeightAndBlockLength(float Height, float BlockLength);// 0x3f2a534
	FString GetVaultKeyByBlockHeight(float Height);// 0x3f2a45c
	AnimMontage* GetVaultFPPAnimByName(FString AnimKey);// 0x3f2a37c
	AnimMontage* GetVaultAnimByName(FString AnimKey);// 0x3f2a29c
	Rotator GetRelicateRotator();// 0x3f2a264
	bool GetIsJumpByBlockHeightAndBlockLength(float Height, float BlockLength);// 0x3f2a194
	FString GetAIVaultLengthKey(float blockHeightTemp, float TestHeight);// 0x3f2a08c
	FString GetAIVaultKeyWithJump(float blockHeightTemp, float BlockLengthTemp, float TestHeight, float TestBlocklength, bool bIsJump);// 0x3f29ec8
	FString GetAIVaultKey(float blockHeightTemp, float BlockLengthTemp, float TestHeight, float TestBlocklength);// 0x3f29d4c
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x3f29b38
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x3f29924
	bool CheckCanVaultWithPosition(bool bUsePawnPosition, bool bCheckState, Vector WorldLocation, Rotator WorldRotation);// 0xffffff8f20d162a8
	void CharacterStartVault(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir, AnimMontage* AnimMontage, bool bCheckDynamicBlock);// 0x3f295c4

--------------------------------
Class: VaultAnimDataAsset.DataAsset.Object
	<FString,VaultAnimInfo> VaultAnimMap;//[Offset: 0x30, Size: 80]
	<FString,VaultAnimInfo> FPPVaultAnimMap;//[Offset: 0x80, Size: 80]
	void OnPostLoadMapWithWorld(World* World);// 0x41badf0
	void OnAsyncLoadingFinished();// 0x41baddc

--------------------------------
Class: VaultAnimInfo
	AnimMontage* AnimSoftPtr;//[Offset: 0x0, Size: 40]

--------------------------------
Class: PlayerAIVaultCheckData
	FString VaultKey;//[Offset: 0x0, Size: 16]
	float blockthickLength;//[Offset: 0x10, Size: 4]
	float BlockHeight;//[Offset: 0x14, Size: 4]
	bool isFallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]

--------------------------------
Class: SubAnimInstanceMap.DataAsset.Object
	<enum,AnimMapData> AnimMap;//[Offset: 0x30, Size: 80]
	LoadAnimData[] AnimLoadList;//[Offset: 0x80, Size: 16]
	int SyncLoadIndex;//[Offset: 0xa0, Size: 4]
	void UpdateFinishPending_GameThread();// 0x410b954
	void ResetSubAnimNodeBySubAnimType(enum SubAnimTypeName, AnimInstance* TargetAnim);// 0x410b89c
	void ResetSubAnimNodeBySlot(FName SubAnimSlotName, AnimInstance* TargetAnim);// 0x410b7e8
	void ReplaceSubAnimNodeBySubAnimType(enum SubAnimTypeName, AnimInstance* TagetAnim);// 0x410b730
	void ReplaceSubAnimNodeByAnimData(out const AnimMapData AnimData, AnimInstance* TagetAnim);// 0x410b634
	void RemoveLoadIndexLoadAnimData(out const LoadAnimData LoadAnimData);// 0x410b574
	void ProcessLoadAnimData(out const LoadAnimData LoadAnimData);// 0x410b4b4
	void ProcessAsyncLoadFinishIndex(int SyncIndex);// 0x410b438
	void OnLoadAnimComponent(int SyncIndex);// 0x410b3bc
	LoadAnimData GetLoadIndexLoadAnimData(int SyncIndex, out bool bFound);// 0x410b298
	void EnqueueLoadIndexLoadAnimData(out const LoadAnimData LoadAnimData);// 0x410b1d8
	bool DequeueLoadIndexLoadAnimData(int SyncIndex, out LoadAnimData LoadAnimData);// 0x410b0c8

--------------------------------
Class: LoadAnimData
	int LoadIndex;//[Offset: 0x0, Size: 4]
	AnimMapData AnimMapData;//[Offset: 0x8, Size: 48]
	AnimInstance* TargetAnim;//[Offset: 0x38, Size: 8]
	class Object* LoadedAnimInstanceClass;//[Offset: 0x40, Size: 8]

--------------------------------
Class: STExtraPlayerVaultComponent.ActorComponent.Object
	byte DrawDebugType;//[Offset: 0x158, Size: 1]
	float DrawTime;//[Offset: 0x15c, Size: 4]
	bool bPreLoadAllAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	VaultAnimDataAsset* VaultAnimDataAssetPtr;//[Offset: 0x168, Size: 8]
	float SweepCapsuleRadius;//[Offset: 0x170, Size: 4]
	byte[] SweepObjectTypes;//[Offset: 0x178, Size: 16]
	VaultCheckRule[] CheckRuleList;//[Offset: 0x188, Size: 16]
	float CheckDeviation;//[Offset: 0x198, Size: 4]
	float TPPCheckDist;//[Offset: 0x19c, Size: 4]
	float FPPCheckDist;//[Offset: 0x1a0, Size: 4]
	float InValidAngle;//[Offset: 0x1a4, Size: 4]
	float CheckHeightHalfDist;//[Offset: 0x1a8, Size: 4]
	float MinCheckHeight;//[Offset: 0x1ac, Size: 4]
	float FPPMinCheckHeight;//[Offset: 0x1b0, Size: 4]
	float MaxCheckHeight;//[Offset: 0x1b4, Size: 4]
	float FPPMaxCheckHeight;//[Offset: 0x1b8, Size: 4]
	float LowWindowMinCheckHeight;//[Offset: 0x1bc, Size: 4]
	float MinVaultHeightDiff;//[Offset: 0x1c0, Size: 4]
	float VaultCheckDist;//[Offset: 0x1c4, Size: 4]
	float FPPVaultThickThreshold;//[Offset: 0x1c8, Size: 4]
	<FString,CommonVaultData> VaultDataMap;//[Offset: 0x1d0, Size: 80]
	FPPVaultData[] FPPVaultDataArray;//[Offset: 0x220, Size: 16]
	float VaultAnimPlayRatio;//[Offset: 0x230, Size: 4]
	float StopVaultRelativeWallDist;//[Offset: 0x234, Size: 4]
	float FPPVaultShakeOffDeltaHeight;//[Offset: 0x238, Size: 4]
	float FallingVaultMinHeightToFloor;//[Offset: 0x23c, Size: 4]
	Vector ClimbDistance;//[Offset: 0x240, Size: 12]
	float InclinationCheckHeight;//[Offset: 0x24c, Size: 4]
	float MaxLandingAreaTiltAngle;//[Offset: 0x250, Size: 4]
	Vector CheckThePathIsPurePlaneBoxHalfExtent;//[Offset: 0x254, Size: 12]
	float MinJumpLandingHeightDiff;//[Offset: 0x260, Size: 4]
	float CheatingDist;//[Offset: 0x264, Size: 4]
	bool bEnableLeaveStuckState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	float LeaveStuckAllowedPercentage;//[Offset: 0x26c, Size: 4]
	<FString,AIVaultData> AIVaultDataMap;//[Offset: 0x278, Size: 80]
	byte ExtraSweepObjectType;//[Offset: 0x2c8, Size: 1]
	CommonVaultData CurVaultData;//[Offset: 0x370, Size: 96]
	FPPVaultData CurFPPVaultData;//[Offset: 0x428, Size: 40]
	Actor* CheckActor;//[Offset: 0x458, Size: 8]
	PrimitiveComponent* CheckComponent;//[Offset: 0x460, Size: 8]
	AnimMontage* CurVaultMontage;//[Offset: 0x468, Size: 8]
	UAEWindowComponent*[] VaultWindows;//[Offset: 0x470, Size: 16]
	bool Vault(bool bNeedCheck);// 0x40c2b7c
	void PawnVaultNetMulticast(float _ForwardBlockDist, float _BlockHeight, float _VaultDist, byte VaultDataMapKeyIndex, Vector _PawnVaultStartLoc, Vector _PawnVaultEndLoc, Rotator _PawnVaultRot, Actor* _CheckActor, float _CurJumpLandingHeight, float _CurJumpLandingDist, Vector _ForwardHitPoint, Vector _ForwardBlockDir, bool bCheckDynamicBlock);// 0x40c27e0
	void OnStateLeave(enum State);// 0x40c2764
	void OnStateInterrupted(int State, int InterruptedBy);// 0x40c26b0
	byte GetVaultKeyIndexForAI(float _BlockHeight, float _VaultThick, bool _bIsJumping);// 0x40c25a8
	void ForceCancelVaultOnServer();// 0x40c2594
	bool CheckCanVault(bool bCheckPlayerState, bool bUseCustomLocAndRot, Vector CustomLoc, Rotator CustomRot);// 0x40c2430
	void CancelVaultOnServer(bool bForce);// 0x40c23ac
	void BP_OnRecycled();// 0xffffff8f20d162a8

--------------------------------
Class: VaultCheckRule
	float CheckHeight;//[Offset: 0x0, Size: 4]
	float StandCheckDist;//[Offset: 0x4, Size: 4]
	float MoveCheckDist;//[Offset: 0x8, Size: 4]
	float SprintCheckDist;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CommonVaultData
	FString MontageName;//[Offset: 0x0, Size: 16]
	CurveFloat* UpwardCurve;//[Offset: 0x10, Size: 8]
	CurveFloat* FowardCurve;//[Offset: 0x18, Size: 8]
	float ForwardBlockDist;//[Offset: 0x20, Size: 4]
	float BlockHeight;//[Offset: 0x24, Size: 4]
	float VaultThickThreshold;//[Offset: 0x28, Size: 4]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bForceStartSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bForceZPostionStartSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	float VaultTime;//[Offset: 0x30, Size: 4]
	float PlaySpeedRatio;//[Offset: 0x34, Size: 4]
	float SpeedChangeTime;//[Offset: 0x38, Size: 4]
	float ChangeSpeedRatio;//[Offset: 0x3c, Size: 4]
	bool bAllowStandState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bAllowMoveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bAllowSprintState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	bool bPutUpGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 1]
	float BreakWindowDelayTime;//[Offset: 0x44, Size: 4]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	float MinCancelTime;//[Offset: 0x4c, Size: 4]
	float MaxCancelTime;//[Offset: 0x50, Size: 4]
	bool bIsFallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	float FallingVaultMinHeight;//[Offset: 0x58, Size: 4]
	float FallCrossMinHeight;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: FPPVaultData
	float VaultHeight;//[Offset: 0x0, Size: 4]
	FString MontageName;//[Offset: 0x8, Size: 16]
	float VaultTime;//[Offset: 0x18, Size: 4]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float VaultSpeed;//[Offset: 0x20, Size: 4]
	float VaultSpeedRate;//[Offset: 0x24, Size: 4]

--------------------------------
Class: AIVaultData
	float BlockHeight;//[Offset: 0x0, Size: 4]
	float VaultThickThreshold;//[Offset: 0x4, Size: 4]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIsFallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: CustomFeatureComponent.Object
	Actor* OwnerActor;//[Offset: 0x28, Size: 8]

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	delegate OnRescueSucceedWithRef;//[Offset: 0x158, Size: 16]
	FName DeadBuffName;//[Offset: 0x168, Size: 8]
	float BreathMax;//[Offset: 0x178, Size: 4]
	float AssistAccountableDuration;//[Offset: 0x17c, Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0x180, Size: 4]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0x188, Size: 8]
	int MaxDeathTimes;//[Offset: 0x190, Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 1]
	float ZombieInitHealth;//[Offset: 0x198, Size: 4]
	byte HealthStatusOnServer;//[Offset: 0x19d, Size: 1]
	byte LastHealthStatusOnServer;//[Offset: 0x19e, Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x1a8, Size: 8]
	float EnterNearDeathSeconds;//[Offset: 0x1b0, Size: 4]
	float Breath;//[Offset: 0x1b4, Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0x1bc, Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0x1c0, Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x1c8, Size: 8]
	Actor* DamageCauserRecorded;//[Offset: 0x1d0, Size: 8]
	DamageEvent DamageEventRecorded;//[Offset: 0x1d8, Size: 24]
	bool TryGotoLastBreathOrZombie(Controller* EventInstigator, Actor* DamageCauser, DamageEvent DamageEvent, float _finalDamage, bool IsDamageFromVehicleExplode);// 0x3fbe638
	void SetIsDirectlyDie(bool bIsDirectlyDie);// 0x3fbe5b4
	float SetHealthSafety(float AddVal);// 0x3fbe528
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x3fbe3e4
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x3fbe2a0
	void RescueFinishSuccessfully(int HealthAddtive);// 0x3fbe224
	void OnRep_BreathChanged();// 0x3fbe210
	void MakeSureOwnerEnterDeadState();// 0x3fbe1fc
	bool IsNearDeathInvincible();// 0x3fbe1c4
	bool IsHealthAlive();// 0x3fbe18c
	bool IsHaveLastBreathStatus();// 0x3fbe154
	bool IsFinishedLastBreathStatus();// 0x3fbe11c
	void InitializeOwner(Pawn* TempPawn);// 0x3fbe0a0
	float GetBreathMax();// 0x3fbe084
	float GetBreath();// 0x3fbe068
	void EnterSwimWhileDying();// 0x3fbe054
	void DoFinishLastBreath();// 0x3fbe040
	void ClearNearDeathTeammateIfNeeded();// 0x3fbe02c
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x3fbdf5c
	void AddDeadBuff();// 0x3fbdf48

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0x158, Size: 4]
	float RescueingElapsedThrehold;//[Offset: 0x15c, Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0x160, Size: 4]
	anPickerData FanData;//[Offset: 0x164, Size: 20]
	delegate OnRescueSucceed;//[Offset: 0x178, Size: 16]
	delegate OnRescueOtherEndWithRef;//[Offset: 0x188, Size: 16]
	STExtraBaseCharacter* RescueWho;//[Offset: 0x1b8, Size: 8]
	float RescueingStatusStartTimeSeconds;//[Offset: 0x1c0, Size: 4]
	float RestoringDuration;//[Offset: 0x1dc, Size: 4]
	float ReduceTime;//[Offset: 0x1e0, Size: 4]
	bool IgnoreReduceTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	STExtraBaseCharacter* PawnOwner_Private;//[Offset: 0x1e8, Size: 8]
	bool IgnoreSelfDistanceAndState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 1]
	int ToTargetHealthAddtive;//[Offset: 0x208, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x3fbfbf4
	void WaitingConfirmState_ActOnUnsatisfied();// 0x3fbfbe0
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x3fbfb64
	void TickAsHelper(float DeltaTime);// 0x3fbfae8
	void SetIsDisableRescue(bool bIsDisableRefuse);// 0x3fbfa64
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x3fbf9b4
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x3fbf938
	bool RescueSucImmediately(STExtraBaseCharacter* Target);// 0x3fbf8a8
	bool RescueingState_IsConditionSatisfied();// 0x3fbf870
	void RescueingState_ActOnUnsatisfied();// 0x3fbf85c
	void RescueingState_ActOnSatisfied(float DeltaTime);// 0x3fbf7e0
	void RescueingProcessFinished();// 0x3fbf7cc
	void PlayerConfirmToRescueServerSide(STExtraBaseCharacter* _RescueWho);// 0x3fbf750
	bool PlayerConfirmToRescueClientSide();// 0x3fbf718
	bool PickTargetsAsHelper(out STExtraBaseCharacter*[] pickedTargets);// 0x3fbf670
	void OnRep_IsRescueingOtherStatusChange();// 0x3fbf65c
	bool IsInRescueingStatus();// 0x3fbf624
	void InitializeOwner(Pawn* _TempPawn, STCharacterNearDeathComp* _Outer, bool IgnoreSelf, bool IgnoreReduce);// 0x3fbf4e0
	float GetRestoringDuration();// 0x3fbf4ac
	void DrawDebugFan();// 0x3fbf498
	void ClientPlayerRefuse();// 0x3fbf438
	void ClientPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x3fbf388

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float angle;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	Vector2D screenCenter;//[Offset: 0x120, Size: 8]
	CDInfo CDInfo;//[Offset: 0x128, Size: 12]
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0x138, Size: 24]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0x150, Size: 24]
	PlayerController* PlayerController;//[Offset: 0x168, Size: 8]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x170, Size: 8]
	SurviveHUD* SurHUD;//[Offset: 0x178, Size: 8]
	Actor*[] AllCharacters;//[Offset: 0x180, Size: 16]
	byte EnemyRaycastReachChannel;//[Offset: 0x1a0, Size: 1]
	byte SmokeChannel;//[Offset: 0x1a1, Size: 1]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x1a4, Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x1a8, Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x1ac, Size: 4]
	FName[] Bones;//[Offset: 0x248, Size: 16]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	bool ReadAutoAimingConfigSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 1]
	STExtraPlayerController* extraPlayerController;//[Offset: 0x260, Size: 8]
	void TryDoAiming(float DeltaTime);// 0x41f2f5c
	void SetCD(float CDTime);// 0x41f2ee0
	void SelectAimTarget(float DeltaTime);// 0x41f2e64
	void OnUnEquipWeapon();// 0x41f2e50
	void OnShoot(STExtraWeapon* Weapon);// 0x41f2dd4
	void OnEquipWeapon();// 0x41f2dc0
	bool IsTeammate(STExtraPlayerState* PlayerState, STExtraPlayerCharacter* Character);// 0x41f2cf8
	bool isOpenFire();// 0x41f2cc0
	bool IsCool();// 0x41f2c88
	void Init(Controller* Controller);// 0x41f2c0c
	bool HoldFire();// 0x41f2bd4
	Actor* GetCurSelectEnermy();// 0x41f2ba0
	void FindInRangeEnemies(out AutoAimEnemyInfo[] InRangeEnemyList);// 0x41f2b0c
	void FindBarrierFreeEnemy(out AutoAimEnemyInfo[] InRangeEnemyList);// 0x41f2a78
	void ClearCD();// 0x41f2a64
	bool CheckSmoke(Vector StartPoint, STExtraPlayerCharacter* Pawn);// 0x41f2988
	bool CheckBuffStun();// 0x41f2950
	bool CanEnemeyRaycastReach(Vector StartPoint, STExtraPlayerCharacter* Pawn);// 0x41f2874

--------------------------------
Class: CDInfo
	float CDTime;//[Offset: 0x0, Size: 4]
	float FireTime;//[Offset: 0x4, Size: 4]
	float followTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0, Size: 8]
	float DisToScreenCenter;//[Offset: 0x8, Size: 4]
	Vector WorldLocation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0x120, Size: 8]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0x128, Size: 8]
	STExtraBaseCharacter* Target;//[Offset: 0x138, Size: 8]
	float CanFollowDist;//[Offset: 0x140, Size: 4]
	float QuitFollowAngleInput;//[Offset: 0x144, Size: 4]
	float QuitFollowDist;//[Offset: 0x148, Size: 4]
	float PointDensityTimeInterval;//[Offset: 0x14c, Size: 4]
	float DistThrehold;//[Offset: 0x150, Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x158, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x160, Size: 8]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x1a0, Size: 16]
	TargetKeyOperation* CurOp;//[Offset: 0x1b0, Size: 8]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x3fb6740
	void WaitingConfirmState_ActOnUnsatisfied();// 0x3fb672c
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x3fb66b0
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x3fb6620
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x3fb65a4
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x3fb6528
	bool PlayerStopFollow();// 0x3fb64f0
	bool PlayerConfirmToFollow();// 0x3fb64b8
	void InitializeOwner(Pawn* _TempPawn);// 0x3fb643c
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x3fb63c0
	bool FollowingState_IsConditionSatisfied();// 0x3fb6388
	void FollowingState_ActOnUnsatisfied();// 0x3fb6374
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x3fb62f8

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x41135b8
	byte Start();// 0x411357c
	bool IsValidate();// 0x411353c
	void DebugDraw(Color debugColor, bool isPersist);// 0x4113478
	void Awake();// 0x411345c

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x80, Size: 8]
	STExtraBaseCharacter* Target;//[Offset: 0x88, Size: 8]
	byte Update(float DeltaTime);// 0x4112384
	FString ToString();// 0x41122a8
	void TaskRemoved();// 0x411228c
	byte Start();// 0x4112250
	bool IsValidate();// 0x4112210
	bool IsReachable();// 0x41121d0
	byte Finish();// 0x4112194
	void DebugDraw(Color debugColor, bool isPersist);// 0x41120d0
	void Awake();// 0x41120b4

--------------------------------
Class: STNewCharacterFollowComp.ActorComponent.Object
	int FollowStopDist;//[Offset: 0x158, Size: 4]
	int TurnaroundSpeedScale;//[Offset: 0x15c, Size: 4]
	int TurnaroundAngleThreshold;//[Offset: 0x160, Size: 4]
	bool bStartTurnInstantly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	bool bNeedCorrectDirWhenFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165, Size: 1]
	FollowTargetTransferAreaItem[] FollowTargetTransferAreaList;//[Offset: 0x168, Size: 16]
	SelfFollowLimitAreaItem[] SelfFollowLimitAreaList;//[Offset: 0x178, Size: 16]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x188, Size: 8]
	STExtraPlayerController* OwnerController;//[Offset: 0x190, Size: 8]
	void RPC_Server_StartFollowWithPlayerKey(uint32 PlayerKey);// 0x41001fc
	void RPC_Client_PreFollow(Vector followPos);// 0x4100144
	void OnCharacterMoveBlock(STExtraCharacter* BlockedCharacter, out const HitResult HitResult);// 0x4100068

--------------------------------
Class: FollowTargetTransferAreaItem
	Vector TopLeftVec;//[Offset: 0x0, Size: 12]
	Vector BottomRightVec;//[Offset: 0xc, Size: 12]
	Vector TransferVec;//[Offset: 0x18, Size: 12]

--------------------------------
Class: SelfFollowLimitAreaItem
	Vector TopLeftVec;//[Offset: 0x0, Size: 12]
	Vector BottomRightVec;//[Offset: 0xc, Size: 12]

--------------------------------
Class: GiftTypeData
	byte GiftType;//[Offset: 0x0, Size: 1]
	int GiftSubType;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BonfireActor.UAEBuffApplierActor.Actor.Object
	float RemainingLifeTime;//[Offset: 0x3f8, Size: 4]
	bool bHasBeenLit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	bool bHasBurnOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	RoastMeatActor* curRoastMeat;//[Offset: 0x400, Size: 8]
	void RemingLifeTimeChanged(float previousRemaining);// 0x3cdc324
	void RecordBonFireSuccess();// 0x3cdc310
	void OnRep_RemainingLifeTime(float previousRemaining);// 0x3cdc294
	void OnRep_HasBurnOut();// 0x3cdc280
	void OnRep_HasBeenLit();// 0x3cdc26c
	void OnRep_CurRoastMeat();// 0x3cdc258
	void IsBurnOutChanged();// 0x3cdc23c
	FString CastMsg_Implementation(FString Msg);// 0x3cdc158

--------------------------------
Class: UAEBuffApplierActor.Actor.Object
	Controller* InstigatorController;//[Offset: 0x3e8, Size: 8]
	Controller* GetTheInstigatorController();// 0x49d6de4

--------------------------------
Class: RoastMeatActor.Actor.Object
	BonfireActor* parentBonfire;//[Offset: 0x3e8, Size: 8]
	enum AnimalType;//[Offset: 0x3f0, Size: 1]
	bool IsDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	void RecordRoastMeatSuccess();// 0x3f5fadc
	void OnRep_IsDone();// 0x3f5fac8
	void CastActorMsg(FString Msg);// 0x3f5fa3c

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x4e8, Size: 4]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	enum PerspectiveMode;//[Offset: 0x4f9, Size: 1]
	<enum,SpringArmParams> PerspectiveModeSpringArmParamMaps;//[Offset: 0x500, Size: 80]
	SpringArmModifierTPP* ModifierTPP;//[Offset: 0x550, Size: 8]
	class SpringArmModifier* ModifierTPPTemplate;//[Offset: 0x558, Size: 8]
	SpringArmModifierFPP* ModifierFPP;//[Offset: 0x560, Size: 8]
	class SpringArmModifier* ModifierFPPTemplate;//[Offset: 0x568, Size: 8]
	SpringArmFreeCamera* FreeCamera;//[Offset: 0x570, Size: 8]
	class SpringArmFreeCamera* FreeCameraTemplate;//[Offset: 0x578, Size: 8]
	float FreeCamRotationReturnRate;//[Offset: 0x580, Size: 4]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x588, Size: 120]
	bool bViewAtActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	Rotator CameraRelativeActorRot;//[Offset: 0x604, Size: 12]
	Vector CameraRelativeActorLoc;//[Offset: 0x610, Size: 12]
	Vector2D SocketOffsetPitchHipMapIn;//[Offset: 0x624, Size: 8]
	Vector2D SocketOffsetPitchHipMapOut;//[Offset: 0x62c, Size: 8]
	Vector2D SocketOffsetZRatioLengthMapIn;//[Offset: 0x634, Size: 8]
	Vector2D SocketOffsetZRatioLengthMapOut;//[Offset: 0x63c, Size: 8]
	Vector DefaultSocketOffset;//[Offset: 0x644, Size: 12]
	float SpringArmRestoreInterpSpeed;//[Offset: 0x650, Size: 4]
	bool NeedTraceHeadCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x654, Size: 1]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x660, Size: 8]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x668, Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x66c, Size: 4]
	Actor* ResultActor;//[Offset: 0x670, Size: 8]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67a, Size: 1]
	float OffsetCountTime;//[Offset: 0x67c, Size: 4]
	float OffSetDurTime;//[Offset: 0x680, Size: 4]
	float RevertMoveSpeed;//[Offset: 0x684, Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x688, Size: 8]
	Transform PrevRelativeTrans;//[Offset: 0x690, Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0x6c0, Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0x6d0, Size: 16]
	bool PrevCameraUseControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	bool bBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 1]
	void SetShoulderCameraMode(bool bShoulder);// 0x3d63c18
	void SetFPPCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x3d63b58
	void SetCustomCameraDataValueEnable(CameraOffsetData CustomCameraData, bool IsEnable);// 0x3d6397c
	void SetCustomCameraDataEnable(out const CameraOffsetData CustomCameraData, bool IsEnable);// 0x3d63800
	void SetCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x3d63740
	void OnRespawned();// 0x3d63724
	void OnRecycled();// 0x3d63708
	bool GetUsePawnControlRotation();// 0x3d636d0
	SpringArmModifier* GetModifierByPerspectiveMode(enum Mode);// 0x3d63644
	void EnterLandingHeavy();// 0x3d63630
	void DelayRotationLagEnabledEnd();// 0x3d6361c
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x3d63554

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x3a0, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x3a4, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x3a8, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x3e0, Size: 120]
	CameraOffsetData DefaultCameraData;//[Offset: 0x458, Size: 120]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x4d8, Size: 8]
	SpringArmModifier* CurModifier;//[Offset: 0x4e0, Size: 8]
	void OnRespawned();// 0x40da434
	void OnRecycled();// 0x40da418
	Rotator GetTargetRotation();// 0x40da3d8
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x40da280
	void ClearCameraData();// 0x40da264

--------------------------------
Class: SpringArmModifierTPP.SpringArmModifier.Object
	float AdditionalSocketOffetZMax;//[Offset: 0x164, Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x168, Size: 8]
	float CurrentAdditionalSocketOffetZ;//[Offset: 0x170, Size: 4]
	bool UpdateCurCameraDataTPPBlueprint(float DeltaTime);// 0xffffff8f20d162a8
	void UpdateCurCameraData(float DeltaTime);// 0x3fa50c8
	bool SetCameraDataEnableBlueprint(enum CameraDataType, bool IsEnable);// 0xffffff8f20d162a8
	void SetCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x3fa5008

--------------------------------
Class: SpringArmModifierFPP.SpringArmModifier.Object
	bool SetFPPCameraDataEnableBlueprint(enum CameraDataType, bool IsEnable);// 0xffffff8f20d162a8
	void SetFPPCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x3fa4b50

--------------------------------
Class: SpringArmFreeCamera.Object
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	float ResultMinPitch;//[Offset: 0x38, Size: 4]
	float ResultMaxPitch;//[Offset: 0x3c, Size: 4]
	SpringArmComponent* SpringArmComp;//[Offset: 0x40, Size: 8]
	float FreeCamRotationReturnRate;//[Offset: 0x48, Size: 4]

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0, Size: 4]
	Vector AkLocation;//[Offset: 0x4, Size: 12]

--------------------------------
Class: DamageCauserRecordData
	Controller* causer;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]
	float Damage;//[Offset: 0xc, Size: 4]
	int StatusChangeMargin;//[Offset: 0x10, Size: 4]
	int DamageType;//[Offset: 0x14, Size: 4]
	int AdditionalParam;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ObserverSmoothComponent.ActorComponent.Object
	float SmoothNetUpdateLocationTime;//[Offset: 0x158, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x15c, Size: 4]
	float SmoothNetLocationTolerate;//[Offset: 0x160, Size: 4]
	float SmoothNetRotationTolerate;//[Offset: 0x164, Size: 4]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x168, Size: 392]
	bool bIsOpenExceededDSMaxDisLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	float ExceededDSMaxDisLimit;//[Offset: 0x2f4, Size: 4]
	float ZToFloorInterpSpeed;//[Offset: 0x2f8, Size: 4]
	bool bIsOpenInterpToFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	bool bIsOpenZToFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 1]
	float MoveAlongFloorCheckMaxZDis;//[Offset: 0x300, Size: 4]
	float CanMoveAlongFloorOffsetZ;//[Offset: 0x304, Size: 4]
	bool bIsOpenNotFloorZToServerZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	float SendStuckLogCD;//[Offset: 0x30c, Size: 4]
	float MinInStuckTime;//[Offset: 0x310, Size: 4]
	float NotMoveableDistance;//[Offset: 0x314, Size: 4]
	float MinMoveableVelocity;//[Offset: 0x318, Size: 4]
	float SendFallingLogCD;//[Offset: 0x31c, Size: 4]
	float MinInFallingTime;//[Offset: 0x320, Size: 4]
	float MinFallingZChangeDistance;//[Offset: 0x324, Size: 4]
	void OnRespawned();// 0x3edcd44
	void OnRecycled();// 0x3edcd28

--------------------------------
Class: SimViewData
	uint16 ViewPitch;//[Offset: 0x0, Size: 2]
	uint16 ViewYaw;//[Offset: 0x2, Size: 2]
	uint16 ActorPitch;//[Offset: 0x4, Size: 2]
	uint16 ActorYaw;//[Offset: 0x6, Size: 2]
	byte ViewRoll;//[Offset: 0x8, Size: 1]
	byte DataExternded;//[Offset: 0x9, Size: 1]
	uint16 RelativeYawToPlayer;//[Offset: 0xa, Size: 2]

--------------------------------
Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DamageReductionComponent.ActorComponent.Object
	<int,DamageReductionRule> DamageReductionMap;//[Offset: 0x120, Size: 80]
	int DamageReductionKey;//[Offset: 0x170, Size: 4]
	void RemoveDamageReductionData(int Key);// 0x3d6d2d4
	float DamageReductionByAction(float UntreatedDamage, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x3d6d1b0
	int AddDamageReductionData(out DamageReductionRule Rule, int Key);// 0x3d6d098

--------------------------------
Class: DamageReductionRule
	byte[] DamageTypeEnums;//[Offset: 0x0, Size: 16]
	class DamageType[] DamageTypeClasses;//[Offset: 0x10, Size: 16]
	class Object[] DamageCauserClasses;//[Offset: 0x20, Size: 16]
	float DamageReductionValue;//[Offset: 0x30, Size: 4]
	bool bIsMultiplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bBasedOnBasicValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]

--------------------------------
Class: FootprintActorArrayInfo
	Transform[] CachedTransform;//[Offset: 0x0, Size: 16]

--------------------------------
Class: PlayEmoteID
	int EmoteId;//[Offset: 0x0, Size: 4]
	int TypeSpecificID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0x158, Size: 4]
	int DetectThreshold;//[Offset: 0x15c, Size: 4]
	float FoldFactor;//[Offset: 0x160, Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0x168, Size: 8]
	byte BlockChannel;//[Offset: 0x175, Size: 1]
	Vector BoxHalfSize;//[Offset: 0x178, Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0x184, Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0x190, Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0x19c, Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x1a8, Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x1b4, Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x1b8, Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x1c4, Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x1d0, Size: 12]
	int FoldFactorDelt;//[Offset: 0x1dc, Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x1e0, Size: 4]
	float TraceDisOffset;//[Offset: 0x1e4, Size: 4]
	float TraceDisForSfate;//[Offset: 0x1e8, Size: 4]
	float TickDeltTime;//[Offset: 0x1ec, Size: 4]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x3f09ae4
	void OnReconnectOnClient();// 0x3f09ad0
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x3f0998c

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0x120, Size: 16]
	float SwimWaterSufaceOffset;//[Offset: 0x130, Size: 4]
	float OnVehicleWaterSufaceOffset;//[Offset: 0x134, Size: 4]
	float DistoVolume;//[Offset: 0x138, Size: 4]
	float UpdateMeshZOffsetWithTheWaves;//[Offset: 0x13c, Size: 4]
	float MaxBreathAmount;//[Offset: 0x140, Size: 4]
	float DrowningHurtHight;//[Offset: 0x144, Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0x148, Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0x14c, Size: 4]
	float BreathDeltaTime;//[Offset: 0x150, Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0x154, Size: 4]
	float MinSpeedScale;//[Offset: 0x158, Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0x15c, Size: 4]
	float MaxProneWaterHeight;//[Offset: 0x160, Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0x164, Size: 4]
	float RollMaxAngle;//[Offset: 0x168, Size: 4]
	float UpdateMeshZWithTheWavesInterpolationSpeed;//[Offset: 0x16c, Size: 4]
	float UpdateMeshZWithTheWavesRatio;//[Offset: 0x170, Size: 4]
	bool bIsUpdatingMeshZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x190, Size: 8]
	void UpdateSwimCollisionHeightCpp();// 0x3f155b8
	void LeaveWater();// 0x3f155a4
	Actor* GetWaterObject();// 0x3f15570
	void EnterWater_BluePrint();// 0xffffff8f20d162a8
	void EnterWater(Actor* WaterObject);// 0x3f154f4

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0, Size: 4]
	float PoseChange_Prone_Move;//[Offset: 0x4, Size: 4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8, Size: 4]
	float PoseChange_UnProne_Move;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x30, Size: 8]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x28, Size: 8]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x830, Size: 4]
	float AttachCheckDistance;//[Offset: 0x834, Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x838, Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x83c, Size: 4]
	float WeaponReconnectStuckAutoRecoverInterval;//[Offset: 0x840, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x848, Size: 8]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x868, Size: 16]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x878, Size: 16]
	void UpdateDataWhenFinishPickInitialItemOnServer();// 0x3d31c30
	void UpdateDataWhenBagChangedOnServer(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x3d31b2c
	void OnRecoverOnServer();// 0x3d31b10
	void OnReconnectOnServer();// 0x3d31af4
	void OnReconnectOnClient();// 0x3d31ad8
	void OnDisconnectToClientOnServer();// 0x3d31ac4
	void LocalUpdateDataWhenBagChanged();// 0x3d31ab0
	int GetBagLevel();// 0x3d31a74
	void ForceUpdateWeaponPoseByBagLevelOnServer();// 0x3d31a58
	void ForceClearClientCreateWeaponCacheFinishToServer();// 0x3d319f8
	void ForceClearClientCreateWeaponCache();// 0x3d31998
	void ClearAllInventoryData();// 0x3d3197c
	void BuildWeaponReconnectData(byte Slot, int OpIndex);// 0x3d318c4

--------------------------------
Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0, Size: 88]
	STExtraWeapon* Weapon;//[Offset: 0x58, Size: 8]

--------------------------------
Class: PlayerVehAnimList
	AnimationAsset* IdleAnim;//[Offset: 0x8, Size: 8]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0x10, Size: 8]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x18, Size: 8]
	AnimationAsset* LeanOutAnim;//[Offset: 0x20, Size: 8]
	AnimationAsset* LeanInAnim;//[Offset: 0x28, Size: 8]
	AnimationAsset* AimAnim;//[Offset: 0x30, Size: 8]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x38, Size: 8]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x40, Size: 8]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x48, Size: 8]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0x50, Size: 8]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0x58, Size: 8]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0x60, Size: 8]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0x68, Size: 8]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0x70, Size: 8]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x78, Size: 8]
	AnimationAsset* SurfBoard_ProneAnim;//[Offset: 0x80, Size: 8]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x88, Size: 8]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x90, Size: 8]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x98, Size: 8]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0xa0, Size: 8]
	AnimationAsset* Ski_Falling;//[Offset: 0xa8, Size: 8]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0xb0, Size: 8]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0xb8, Size: 8]
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0xc0, Size: 8]
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0xc8, Size: 8]
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0xd0, Size: 8]
	AnimationAsset* MotorgliderSteerAnim;//[Offset: 0xd8, Size: 8]
	AnimationAsset* MotorgliderIdleAnim;//[Offset: 0xe0, Size: 8]
	AnimationAsset* BalloonManAnim;//[Offset: 0xe8, Size: 8]
	AnimationAsset* BalloonCPManAnim;//[Offset: 0xf0, Size: 8]
	AnimationAsset* BalloonWomanAnim;//[Offset: 0xf8, Size: 8]
	AnimationAsset* BalloonCPWomanAnim;//[Offset: 0x100, Size: 8]

--------------------------------
Class: AnimVehParamList
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	float VacateHight;//[Offset: 0x4, Size: 4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	Rotator VehViewRotation;//[Offset: 0xc, Size: 12]
	Vector VehMoveVelocity;//[Offset: 0x18, Size: 12]
	byte SeatWeaponHoldType;//[Offset: 0x24, Size: 1]
	byte SeatSpecialType;//[Offset: 0x25, Size: 1]
	enum VehicleType;//[Offset: 0x26, Size: 1]
	float LeanOutPercentage;//[Offset: 0x28, Size: 4]

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x20, Size: 8]

--------------------------------
Class: DamageScale
	int[] TypeIDs;//[Offset: 0x0, Size: 16]
	float DamageScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BodyPartCfg
	float DamageScale;//[Offset: 0x0, Size: 4]
	float Durability;//[Offset: 0x4, Size: 4]
	float DamageReduceScale;//[Offset: 0x8, Size: 4]
	FString BodyDurabilityIndexName;//[Offset: 0x10, Size: 16]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x20, Size: 8]
	FName HitEffectTagOverride;//[Offset: 0x28, Size: 8]

--------------------------------
Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0, Size: 16]
	float EnergyMax;//[Offset: 0x10, Size: 4]
	float EnergyCurrent;//[Offset: 0x14, Size: 4]
	float AttenuationPeriod;//[Offset: 0x18, Size: 4]
	float AttenuationAmount;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0, Size: 4]
	FName BuffName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x160, Size: 4]

--------------------------------
Class: STCharacterBonfireLinkComp.ActorComponent.Object
	BonfireFanPickerData FanData;//[Offset: 0x120, Size: 20]
	float ReturnToFindNewTimer;//[Offset: 0x134, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x13c, Size: 8]
	BonfireActor*[] bonFireCandidates;//[Offset: 0x148, Size: 16]
	void RemoveBonfireCandidate(BonfireActor* newBonfire);// 0x3fb5df8
	void InitializeOwner(Pawn* _TempPawn);// 0x3fb5d7c
	void AddBonfireCandidate(BonfireActor* newBonfire);// 0x3fb5d00

--------------------------------
Class: BonfireFanPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float HightDiff;//[Offset: 0x4, Size: 4]
	float angle;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0, Size: 16]
	byte ShowType;//[Offset: 0x10, Size: 1]
	float Value;//[Offset: 0x14, Size: 4]
	float LimitValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	void ReportVerifyInfoFlow();// 0x3f7b688
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x3f7b5cc
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x3f7b50c
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x3f7b420
	void ReportJoyStickFlow(const JoyStickFlow JoyStickFlow);// 0x3f7b358
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x3f7b28c
	void ReportGvoiceTeamQuit(const GvoiceTeamQuit teamQuit);// 0x3f7b1bc
	void ReportGvoiceTeamCreate(const GvoiceTeamCreate teamCreate);// 0x3f7b0ec
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x3f7b028
	void ReportGameSetting(const GameSetting GameSetting);// 0x3f7af58
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x3f7ae54
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x3f7ad50
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x3f7ac44
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x3f7ab78
	void ReportAimFlow(const AimFlow AimFlow);// 0x3f7aaac

--------------------------------
Class: ClientSecMrpcsFlow
	byte SecMrpcsFlowID;//[Offset: 0x0, Size: 1]
	byte[] MrpcsFlowData;//[Offset: 0x8, Size: 16]

--------------------------------
Class: JoyStickFlow
	FString UID;//[Offset: 0x0, Size: 16]
	int StickAngle;//[Offset: 0x10, Size: 4]
	FString RoleCoordinate;//[Offset: 0x18, Size: 16]
	int RoleMovingState;//[Offset: 0x28, Size: 4]

--------------------------------
Class: GvoiceTeamQuit
	FString GVoiceTeamID;//[Offset: 0x0, Size: 16]
	FString GVoiceRoomID;//[Offset: 0x10, Size: 16]
	int GVoiceTeamMemberID;//[Offset: 0x20, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x24, Size: 4]
	uint64 UID;//[Offset: 0x28, Size: 8]

--------------------------------
Class: GvoiceTeamCreate
	FString GVoiceTeamID;//[Offset: 0x0, Size: 16]
	FString GVoiceRoomID;//[Offset: 0x10, Size: 16]
	int GVoiceTeamMemberID;//[Offset: 0x20, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x24, Size: 4]
	uint64 UID;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ClientGameStartFlow
	uint32 ClientStartTime;//[Offset: 0x0, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 16]
	FString MapName;//[Offset: 0x18, Size: 16]
	int8 WeatherID;//[Offset: 0x28, Size: 1]
	FString ItemList;//[Offset: 0x30, Size: 16]
	int8 TeamType;//[Offset: 0x40, Size: 1]
	int8 TeamID;//[Offset: 0x41, Size: 1]
	FString TeamPlayer1;//[Offset: 0x48, Size: 16]
	FString TeamPlayer2;//[Offset: 0x58, Size: 16]
	FString TeamPlayer3;//[Offset: 0x68, Size: 16]
	byte SecGameStartFlowFlowID;//[Offset: 0x78, Size: 1]
	FString GVoiceTeamID;//[Offset: 0x80, Size: 16]
	FString GVoiceRoomID;//[Offset: 0x90, Size: 16]
	int GVoiceTeamMemberID;//[Offset: 0xa0, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0xa4, Size: 4]
	byte[] MrpcsFlowData;//[Offset: 0xa8, Size: 16]

--------------------------------
Class: GameSetting
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	GameSetting_BasicSetting BasicSetting;//[Offset: 0x8, Size: 76]
	GameSetting_ArtQuality ArtQuality;//[Offset: 0x54, Size: 8]
	GameSetting_Operate Operate;//[Offset: 0x5c, Size: 8]
	GameSetting_Vehicle Vehicle;//[Offset: 0x64, Size: 8]
	GameSetting_Sensibility Sensibility;//[Offset: 0x6c, Size: 112]
	GameSetting_PickUp Pickup;//[Offset: 0xe0, Size: 88]
	GameSetting_Effect Effect;//[Offset: 0x138, Size: 8]

--------------------------------
Class: GameSetting_BasicSetting
	int CrossHairColor;//[Offset: 0x0, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int SingleShotWeaponShootMode;//[Offset: 0x8, Size: 4]
	int ShotGunShootMode;//[Offset: 0xc, Size: 4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int LRShootMode;//[Offset: 0x14, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int LeftHandFire;//[Offset: 0x1c, Size: 4]
	int Gyroscope;//[Offset: 0x20, Size: 4]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool OneKeyScopeFire_OtherMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	int InterruptReloadType;//[Offset: 0x2c, Size: 4]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int OpenMirrorMode;//[Offset: 0x34, Size: 4]
	int SideMirrorMode;//[Offset: 0x38, Size: 4]
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int FpViewValue;//[Offset: 0x40, Size: 4]
	int TpViewValue;//[Offset: 0x44, Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool QuickThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]

--------------------------------
Class: GameSetting_ArtQuality
	int ArtStyle;//[Offset: 0x0, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Operate
	int fireMode;//[Offset: 0x0, Size: 4]
	bool Touch_3D_Switcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Vehicle
	int VehicleControlMode;//[Offset: 0x0, Size: 4]
	int DrivingViewMode;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameSetting_Sensibility
	int CameraLensSensibility;//[Offset: 0x0, Size: 4]
	GameSetting_Sensibility_FreeCam Sens_FreeCamera;//[Offset: 0x4, Size: 12]
	GameSetting_Sensibility_Cam Sens_Camera;//[Offset: 0x10, Size: 32]
	GameSetting_Sensibility_Fire Sens_Fire;//[Offset: 0x30, Size: 32]
	GameSetting_Sensibility_Gyroscope Sens_Gyroscope;//[Offset: 0x50, Size: 32]

--------------------------------
Class: GameSetting_Sensibility_FreeCam
	float VehicleEye;//[Offset: 0x0, Size: 4]
	float ParachuteEye;//[Offset: 0x4, Size: 4]
	float CamFpFreeEye;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Cam
	float CamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Fire
	float FireCamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Gyroscope
	float GyroscopeSenNoneSniper;//[Offset: 0x0, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0xc, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x10, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x14, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x18, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: GameSetting_PickUp
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool AutoPickupSideMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool AKMAutoMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	GameSetting_PickUp_Drug Drug;//[Offset: 0x8, Size: 24]
	Gamesetting_PickUp_Grenade Grenade;//[Offset: 0x20, Size: 16]
	GameSetting_PickUp_WeaponBullet[] WeaponBulletList;//[Offset: 0x30, Size: 16]
	GameSetting_PickUp_SightingTelescope SightingTelescope;//[Offset: 0x40, Size: 24]

--------------------------------
Class: GameSetting_PickUp_Drug
	int MedicalTreatment;//[Offset: 0x0, Size: 4]
	int Bandage;//[Offset: 0x4, Size: 4]
	int PainKiller;//[Offset: 0x8, Size: 4]
	int Adrenaline;//[Offset: 0xc, Size: 4]
	int EnergyDrink;//[Offset: 0x10, Size: 4]
	int FirstAidKit;//[Offset: 0x14, Size: 4]

--------------------------------
Class: Gamesetting_PickUp_Grenade
	int IncendiaryBomb;//[Offset: 0x0, Size: 4]
	int ShockBomb;//[Offset: 0x4, Size: 4]
	int SmokeBomb;//[Offset: 0x8, Size: 4]
	int GrenadeFragmented;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameSetting_PickUp_WeaponBullet
	int WeaponID;//[Offset: 0x0, Size: 4]
	int BulletCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameSetting_PickUp_SightingTelescope
	int LimitSniper2X;//[Offset: 0x0, Size: 4]
	int LimitSniper3X;//[Offset: 0x4, Size: 4]
	int LimitSniper4X;//[Offset: 0x8, Size: 4]
	int LimitSniper6X;//[Offset: 0xc, Size: 4]
	int LimitSniper8X;//[Offset: 0x10, Size: 4]
	int NewLimitRedDotHolographic;//[Offset: 0x14, Size: 4]

--------------------------------
Class: GameSetting_Effect
	int HitEffect_Type;//[Offset: 0x0, Size: 4]
	int HitEffect_Color;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ClientGameEndFlow
	uint32 ClientStartTime;//[Offset: 0x0, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 16]
	FString ClientVersion;//[Offset: 0x18, Size: 16]
	uint16 OverTime;//[Offset: 0x28, Size: 2]
	int8 EndType;//[Offset: 0x2a, Size: 1]
	byte KillCount;//[Offset: 0x2b, Size: 1]
	byte AssistsCount;//[Offset: 0x2c, Size: 1]
	byte DropCount;//[Offset: 0x2d, Size: 1]
	byte SaveCount;//[Offset: 0x2e, Size: 1]
	byte RebornCount;//[Offset: 0x2f, Size: 1]
	bool AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	int GoldGet;//[Offset: 0x34, Size: 4]
	int DiamondGet;//[Offset: 0x38, Size: 4]
	int ExpGet;//[Offset: 0x3c, Size: 4]
	byte WinRank;//[Offset: 0x40, Size: 1]
	byte TotalPlayers;//[Offset: 0x41, Size: 1]
	int PlayerRank;//[Offset: 0x44, Size: 4]
	int RankEnd;//[Offset: 0x48, Size: 4]
	int8 TeamID;//[Offset: 0x4c, Size: 1]
	FString TeamPlayer1;//[Offset: 0x50, Size: 16]
	FString TeamPlayer2;//[Offset: 0x60, Size: 16]
	FString TeamPlayer3;//[Offset: 0x70, Size: 16]
	bool TeamPlayer1AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool TeamPlayer2AliveType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool TeamPlayer3AliveType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	byte TeamPlayer1Kill;//[Offset: 0x81, Size: 1]
	byte TeamPlayer2Kill;//[Offset: 0x82, Size: 1]
	byte TeamPlayer3Kill;//[Offset: 0x83, Size: 1]
	byte GameEndFlowID;//[Offset: 0x84, Size: 1]
	byte RoundCircleCount;//[Offset: 0x85, Size: 1]
	byte[] MrpcsFlowData;//[Offset: 0x88, Size: 16]

--------------------------------
Class: AttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 16]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 16]
	FString OpenID;//[Offset: 0x28, Size: 16]
	int8 AreaID;//[Offset: 0x38, Size: 1]
	int8 PlatID;//[Offset: 0x39, Size: 1]
	FString ZoneID;//[Offset: 0x40, Size: 16]
	uint64 BattleID;//[Offset: 0x50, Size: 8]
	int64 ClientStartTime;//[Offset: 0x58, Size: 8]
	int64 ReportTimeSinceOnPlane;//[Offset: 0x60, Size: 8]
	int8 MrpcsFlowcount_;//[Offset: 0x68, Size: 1]
	int[] MrpcsFlow;//[Offset: 0x70, Size: 16]
	FString UserName;//[Offset: 0x80, Size: 16]
	uint64 RoleID;//[Offset: 0x90, Size: 8]
	int8 RoleType;//[Offset: 0x98, Size: 1]
	FString TargetOpenID;//[Offset: 0xa0, Size: 16]
	FString TargetUserName;//[Offset: 0xb0, Size: 16]
	uint64 TargetRoleID;//[Offset: 0xc0, Size: 8]
	int8 TargetRoleType;//[Offset: 0xc8, Size: 1]
	FString GunName;//[Offset: 0xd0, Size: 16]
	FString GunPartsType;//[Offset: 0xe0, Size: 16]
	int8 SightType;//[Offset: 0xf0, Size: 1]
	int BulletSpeed;//[Offset: 0xf4, Size: 4]
	int8 MagazineMax;//[Offset: 0xf8, Size: 1]
	int8 MagazineLeft;//[Offset: 0xf9, Size: 1]
	int ShotFrequency;//[Offset: 0xfc, Size: 4]
	int BulletDamage;//[Offset: 0x100, Size: 4]
	int16 BulletDown;//[Offset: 0x104, Size: 2]
	byte BulletDamageReduce;//[Offset: 0x106, Size: 1]
	int Recoil;//[Offset: 0x108, Size: 4]
	int ReloadTime;//[Offset: 0x10c, Size: 4]
	FString PlayerState;//[Offset: 0x110, Size: 16]
	byte ShotPose;//[Offset: 0x120, Size: 1]
	byte FireType;//[Offset: 0x121, Size: 1]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x122, Size: 1]
	byte Sideways;//[Offset: 0x123, Size: 1]
	int ShootingDeviationX;//[Offset: 0x124, Size: 4]
	int ShootingDeviationY;//[Offset: 0x128, Size: 4]
	uint32 ZeroDistance;//[Offset: 0x12c, Size: 4]
	uint32 ShotTime;//[Offset: 0x130, Size: 4]
	int HitTime;//[Offset: 0x134, Size: 4]
	int PlayerPositionX;//[Offset: 0x138, Size: 4]
	int PlayerPositionY;//[Offset: 0x13c, Size: 4]
	int PlayerPositionZ;//[Offset: 0x140, Size: 4]
	int GunPositionX;//[Offset: 0x144, Size: 4]
	int GunPositionY;//[Offset: 0x148, Size: 4]
	int GunPositionZ;//[Offset: 0x14c, Size: 4]
	int BulletsBornPositionX;//[Offset: 0x150, Size: 4]
	int BulletsBornPositionY;//[Offset: 0x154, Size: 4]
	int BulletsBornPositionZ;//[Offset: 0x158, Size: 4]
	uint32 LastHitTime;//[Offset: 0x15c, Size: 4]
	uint32 BulletFlyDistance;//[Offset: 0x160, Size: 4]
	uint32 BulletFlyTime;//[Offset: 0x164, Size: 4]
	int HitPositionX;//[Offset: 0x168, Size: 4]
	int HitPositionY;//[Offset: 0x16c, Size: 4]
	int HitPositionZ;//[Offset: 0x170, Size: 4]
	float DamageRate;//[Offset: 0x174, Size: 4]
	byte HitPart;//[Offset: 0x178, Size: 1]
	bool bHitCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x179, Size: 1]
	bool bTireOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x179, Size: 1]
	byte BulletCost;//[Offset: 0x17a, Size: 1]
	int HPstart;//[Offset: 0x17c, Size: 4]
	int HPEnd;//[Offset: 0x180, Size: 4]
	int ArmorHPStart;//[Offset: 0x184, Size: 4]
	int ArmorHPEnd;//[Offset: 0x188, Size: 4]
	int CarHPStart;//[Offset: 0x18c, Size: 4]
	int CarHPEnd;//[Offset: 0x190, Size: 4]
	byte PlayerKill;//[Offset: 0x194, Size: 1]
	bool bArmorKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x195, Size: 1]
	bool bCarKill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x195, Size: 1]
	int RecoilMoveX;//[Offset: 0x198, Size: 4]
	int RecoilMoveY;//[Offset: 0x19c, Size: 4]
	int WeaponAimFOV;//[Offset: 0x1a0, Size: 4]
	int BulletDamageDebuff;//[Offset: 0x1a4, Size: 4]
	int BulletDamageBuff;//[Offset: 0x1a8, Size: 4]
	uint32 AtackFlowID;//[Offset: 0x1ac, Size: 4]
	int AutoAimSpeed;//[Offset: 0x1b0, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x1b4, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x1b8, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x1bc, Size: 4]
	int GunID;//[Offset: 0x1c0, Size: 4]

--------------------------------
Class: AimFlow
	FString GameSvrId;//[Offset: 0x0, Size: 16]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 16]
	FString OpenID;//[Offset: 0x28, Size: 16]
	int8 AreaID;//[Offset: 0x38, Size: 1]
	int8 PlatID;//[Offset: 0x39, Size: 1]
	FString ZoneID;//[Offset: 0x40, Size: 16]
	uint64 BattleID;//[Offset: 0x50, Size: 8]
	int64 ClientStartTime;//[Offset: 0x58, Size: 8]
	int8 MrpcsFlowcount_;//[Offset: 0x60, Size: 1]
	int[] MrpcsFlow;//[Offset: 0x68, Size: 16]
	FString UserName;//[Offset: 0x78, Size: 16]
	uint64 RoleID;//[Offset: 0x88, Size: 8]
	int8 RoleType;//[Offset: 0x90, Size: 1]
	int AimTime;//[Offset: 0x94, Size: 4]
	FString ShotCDTime;//[Offset: 0x98, Size: 16]
	int ShotCount;//[Offset: 0xa8, Size: 4]
	int ShotHitCount;//[Offset: 0xac, Size: 4]
	int ShotHeadHitCount;//[Offset: 0xb0, Size: 4]
	int ShotPersonHitCount;//[Offset: 0xb4, Size: 4]
	int ShotPersonKillCount;//[Offset: 0xb8, Size: 4]
	FString HitDistance;//[Offset: 0xc0, Size: 16]
	FString HitEachDistance;//[Offset: 0xd0, Size: 16]
	FString HitAngle;//[Offset: 0xe0, Size: 16]
	FString HitEachCdTime;//[Offset: 0xf0, Size: 16]
	FString HitPartInfo;//[Offset: 0x100, Size: 16]
	FString PlayerState;//[Offset: 0x110, Size: 16]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 1]
	int8 SightType;//[Offset: 0x121, Size: 1]
	uint32 AimFlowID;//[Offset: 0x124, Size: 4]

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	int8 State;//[Offset: 0x8, Size: 1]
	Rotator ControlRotation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharParachuteAnimData[] CharParachuteAnimDataList;//[Offset: 0x270, Size: 16]
	void ReleaseParachuteAnimAssets();// 0x49d74f4
	void OnParachuteAnimAsyncLoadingFinished(FString AnimLoaded);// 0x49d741c
	void OnAnimListAsyncLoadingFinished();// 0x49d7408
	bool IsAnimAsyncLoading();// 0x49d73d0
	bool HasAnimAsyncLoadingFinished();// 0x49d7398
	void HandleAsyncLoadingFinishedEvent();// 0x49d7384
	FString GetOwnerName();// 0x49d7304
	AnimationAsset* GetCharacterParachuteAnim(byte AnimType);// 0x49d7278

--------------------------------
Class: CharParachuteAnimData
	byte ParachuteAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* ParachuteAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* ParachuteAnim;//[Offset: 0x30, Size: 8]

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize100 Velocity;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object
	void SetIsDisableParachuteFollow(bool bIsDisableParachuteFollow);// 0x3ee53c0

--------------------------------
Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0, Size: 1]
	int LeaderIdx;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	delegate SwitchVehicleWeaponDelegate;//[Offset: 0x160, Size: 16]
	STExtraPlayerCharacter* Pawn;//[Offset: 0x180, Size: 8]
	FName FirstPersonCameraSocketName;//[Offset: 0x188, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x190, Size: 8]
	FName FPPSocketName;//[Offset: 0x198, Size: 8]
	FName BoltActionCurveName;//[Offset: 0x1a0, Size: 8]
	float ScopeZoomSpringArmLength;//[Offset: 0x1a8, Size: 4]
	float ScopeZoomAlpha;//[Offset: 0x1ac, Size: 4]
	float ScopeZoomSpeed;//[Offset: 0x1b4, Size: 4]
	<FName,MaterialInterface*> ScopeMaterials;//[Offset: 0x1b8, Size: 80]
	int CurrentPlayAnimIndex;//[Offset: 0x208, Size: 4]
	DollyZoomParam ZoomScopeParam;//[Offset: 0x210, Size: 12]
	<int,CurveFloat*> ScopeZoomFovCurveMap;//[Offset: 0x220, Size: 80]
	<uint64,int> WeaponAngledSightState;//[Offset: 0x270, Size: 80]
	int NearClipCameraAimMode;//[Offset: 0x2c0, Size: 4]
	CharacterAvatarComponent* _AvatarComp;//[Offset: 0x2f0, Size: 8]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x300, Size: 192]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x3c0, Size: 192]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x480, Size: 192]
	SpringArmParams FPPSpringArmParam;//[Offset: 0x540, Size: 192]
	SpringArmParams ShoulderSpringArmParam;//[Offset: 0x600, Size: 192]
	SpringArmParams AIMSpringArmParam;//[Offset: 0x6c0, Size: 192]
	CurveFloat* ADSCurve;//[Offset: 0x780, Size: 8]
	CurveFloat* SightAngledCurve;//[Offset: 0x788, Size: 8]
	FName SourceScopeAimCameraSocketName;//[Offset: 0x790, Size: 8]
	FName TargetScopeAimCameraSocketName;//[Offset: 0x798, Size: 8]
	CameraModifyData ADSModify;//[Offset: 0x7a0, Size: 352]
	CameraModifyData VehWeaponADSModify;//[Offset: 0x900, Size: 352]
	void UpdateScopeCameraOffsets(out DollyZoomParam Param, bool IsAngledSight, float Alpha);// 0x3cc2ae0
	void SwitchVehicleShootWeapon(CustomSpringArmComponent* ThirdPersonSpringArm, STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x3cc29e8
	float SwitchSightConfigMaterial();// 0xffffff8f20d162a8
	void SwitchScopeMeshAnim(byte Type);// 0x3cc296c
	void SwitchRearSightTimelineUpdate(float Alpha);// 0x3cc28f0
	void SwitchRearSightTimelineFinish(int TargetRearSightSocketIndex);// 0x3cc2874
	void SwitchCameraMode(byte Mode, bool IsUseLerpFPP);// 0x3cc27b4
	float SwitchAngledSightConfigMaterial(bool forceSwitch);// 0xffffff8f20d162a8
	void StopScopeIn();// 0xffffff8f20d162a8
	float ShowReflectorSightTPPMaterial(bool forceADSState);// 0xffffff8f20d162a8
	float ShowAngledSightTPPMaterial(bool forceADSState);// 0xffffff8f20d162a8
	void SetWeaponAngledSightState(STExtraShootWeapon* Weapon, bool State);// 0x3cc26ec
	void SetTagCulling(bool IsUse);// 0xffffff8f20d162a8
	void SetNearClipPlane(bool EnableNearClip);// 0x3cc2668
	void ScopingChange(bool InValue);// 0x3cc25e4
	void Scoping(byte NewType);// 0x3cc2568
	void ScopeZoomUpdate(float Alpha);// 0x3cc24ec
	void ScopeZoomTick(float DeltaTime);// 0x3cc2470
	void ScopeTimelineUpdate(float Alpha);// 0x3cc23f4
	void ScopeOutSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x3cc2340
	void ScopeOutLogic();// 0x3cc232c
	void ScopeOutEnd();// 0xffffff8f20d162a8
	void ScopeOut(byte NewType);// 0x3cc22b0
	void ScopeNotHandFold();// 0x3cc229c
	void ScopeInterrupt(byte NewType, bool ForceInterrupt);// 0x3cc21dc
	void ScopeInSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x3cc2128
	bool ScopeInLogic();// 0x3cc20f0
	void ScopeInEnd();// 0xffffff8f20d162a8
	void ScopeInContinue();// 0x3cc20dc
	void ScopeInAfterTimeline();// 0x3cc20c8
	bool ScopeIn(byte NewType);// 0x3cc2038
	void ScopeHandFold();// 0x3cc2024
	void PlayScopeInTimeline();// 0xffffff8f20d162a8
	void OnRespawned();// 0x3cc2008
	void OnRecycled();// 0x3cc1fec
	bool IsUseZoomScope();// 0x3cc1fb4
	int IsUseCameraProcess();// 0x3cc1f80
	bool IsScopeInTimelinePlaying();// 0xffffff8f20d162a8
	bool IsRPGScopeIn();// 0x3cc1f48
	bool IsCurWeaponAttachedAngledSight();// 0x3cc1f10
	bool IsAngledSightBySlot(byte Slot);// 0x3cc1e78
	bool IsAngledSight();// 0x3cc1e38
	void InitScopeZoom(int WeaponID, int ScopeID);// 0x3cc1d84
	bool HaveAngledSightBySlot(byte Slot);// 0x3cc1cf4
	bool HaveAngledSight();// 0x3cc1cbc
	void HandleScopeMeshLoaded(enum Type);// 0x3cc1c40
	byte GetSightType();// 0x3cc1c0c
	float GetScopeZoomValue(int WeaponID, int ScopeID);// 0x3cc1b48
	FName GetScopeZoomKey(int WeaponID, int ScopeID);// 0x3cc1a84
	float GetScopeFov(STExtraShootWeapon* ShootWeapon, bool bIsAngled);// 0xffffff8f20d162a8
	MeshComponent* GetScopeCameraAttachTarget(bool IsAngled);// 0x3cc19e8
	FName GetScopeAimCameraSocketName();// 0x3cc19b4
	void GetCurrentScopeZoomFov(out float MinFov, out float CurFov, float InScopeZoomAlpha);// 0x3cc1890
	bool CheckPawnIsAutonomousOrObTarget();// 0x3cc1858
	void CalculateDollyZoomParam(float SpringOffset, float MinFov, float CurFov, out DollyZoomParam Param);// 0x3cc1714
	void BoltAction(float DeltaSeconds);// 0x3cc1698
	void AttachToSightKeepTransform();// 0xffffff8f20d162a8
	void AttachToSight();// 0xffffff8f20d162a8
	void ApplyDollyZoomParam(out const DollyZoomParam Param, bool bSyncToPawn);// 0x3cc15b4
	void AngledSightMove(out const DollyZoomParam Param, Vector SourceLoc, Vector TargetLoc, float Alpha, MeshComponent* WeaponMesh, bool bSyncToPawn);// 0x3cc13d0
	void ActiveComponentTickable();// 0x3cc13bc

--------------------------------
Class: DollyZoomParam
	float FOV;//[Offset: 0x0, Size: 4]
	float Scale;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x270, Size: 16]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x280, Size: 16]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x290, Size: 16]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x2a0, Size: 16]
	CurveFloat* FallingIKCurve;//[Offset: 0x2b0, Size: 8]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x2b8, Size: 16]
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x2c8, Size: 16]
	DynamicLoadinigAnimData[] DynamicLoadinigAnimEditList;//[Offset: 0x2d8, Size: 16]
	float StandbyTimeOver;//[Offset: 0x2e8, Size: 4]
	bool EnableStandbyAnimOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee, Size: 1]
	void OnDynamicAnimAsyncLoadingFinished(DynamicLoadinigAnimAsynLoadParam LoadPrarm, SoftObjectPath TempPath);// 0x49d966c
	void OnAsyncLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x49d94e4
	float GetStandbyTimeOver();// 0x49d94b0
	bool GetEnableStandbyAnimOverride();// 0x49d9494
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType);// 0x49d93c4
	void AnimModifyByMask(int MaskValue);// 0x49d9340

--------------------------------
Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 56]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x48, Size: 56]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x80, Size: 56]

--------------------------------
Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* PoseAnim;//[Offset: 0x30, Size: 8]

--------------------------------
Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0, Size: 1]
	FName JumpTypeName;//[Offset: 0x8, Size: 8]
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10, Size: 56]
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x48, Size: 56]
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x80, Size: 56]
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xb8, Size: 56]
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xf0, Size: 56]

--------------------------------
Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* PhaseAnim;//[Offset: 0x30, Size: 8]

--------------------------------
Class: CharAnimModifyData
	int AppliedGameMode;//[Offset: 0x0, Size: 4]
	byte ModifyAnimListType;//[Offset: 0x4, Size: 1]
	byte AnimType;//[Offset: 0x5, Size: 1]
	byte PoseType;//[Offset: 0x6, Size: 1]
	byte JumpType;//[Offset: 0x7, Size: 1]
	byte JumpPhase;//[Offset: 0x8, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: CharacterVehAnimModifyData
	enum VehicleType;//[Offset: 0x0, Size: 1]
	int SeatIdx;//[Offset: 0x4, Size: 4]
	byte VehicleAnimType;//[Offset: 0x8, Size: 1]
	AnimationAsset* VehicleAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: DynamicLoadinigAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x8, Size: 56]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 56]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x78, Size: 56]

--------------------------------
Class: DynamicLoadinigAnimAsynLoadParam

--------------------------------
Class: AsyncLoadCharAnimParams

--------------------------------
Class: WeaponOverrideAttrs
	float GameModeOverride_DeviationMoveModifier;//[Offset: 0x0, Size: 4]
	float GameModeOverride_DeviationStanceJumpModifier;//[Offset: 0x4, Size: 4]
	float GameModeOverride_MeleeDamageAmountModifier;//[Offset: 0x8, Size: 4]
	float GameModeOverride_GrenadeDamageRadiusModifier;//[Offset: 0xc, Size: 4]
	float GameModeOverride_GrenadeDamageAmountModifier;//[Offset: 0x10, Size: 4]
	float GameModeOverride_GunsDamageAmountModifier;//[Offset: 0x14, Size: 4]
	float GameModeOverride_WeaponAimInTimeModifier;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CharacterOverrideAttrs
	float GameModeOverride_SpeedScaleModifier;//[Offset: 0x0, Size: 4]
	float GameModeOverride_SwimSpeedScaleModifier;//[Offset: 0x4, Size: 4]
	float GameModeOverride_EnergySpeedScaleModifier;//[Offset: 0x8, Size: 4]
	float GameModeOverride_LastBreathSpeedScaleModifier;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WeaponOwnerComponent.ActorComponent.Object
	FString WeaponMuduleConfigTablePath;//[Offset: 0x158, Size: 16]
	FString WeaponAttrConfigTablePath;//[Offset: 0x168, Size: 16]
	WeaponShootDisRecordDataConfig WeaponShootDisRecordDataConfig;//[Offset: 0x178, Size: 28]
	CurveFloat* DistanceAndRotations;//[Offset: 0x198, Size: 8]
	CurveFloat* DistanceWeightCurve;//[Offset: 0x1a0, Size: 8]
	CurveFloat* AngleWeightCurve;//[Offset: 0x1a8, Size: 8]
	float IntervalAlternateTime;//[Offset: 0x1b0, Size: 4]
	WeaponRecordCircleData RecordCircleData;//[Offset: 0x1b4, Size: 16]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c5, Size: 1]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x1d8, Size: 8]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0x1e0, Size: 16]
	Actor* AutoAimTargetCache;//[Offset: 0x240, Size: 8]
	WeaponShootAlternateData AlternateData;//[Offset: 0x248, Size: 56]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x338, Size: 8]
	byte ShootMode;//[Offset: 0x344, Size: 1]
	void SetCurShootMode(byte InShootMode);// 0x42032fc
	void ServerSetReloadMethod(byte reloadMethod);// 0x420324c
	void ServerDropWeapon(STExtraShootWeapon* CurrentWeapon);// 0x420319c
	byte SequenceSearchUseableWeaponSlot(STExtraShootWeapon* ShootWeapon);// 0x4203108
	void RPC_Server_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, bool bAllowSwitch);// 0x4202f18
	void RPC_Server_SwapMainWeapon();// 0x4202eb8
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x4202df4
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x4202c50
	void RPC_Client_SwapMainWeapon();// 0x4202bf0
	void RPC_Client_SetReloadCurWeapon(STExtraWeapon* Weapon);// 0x4202b40
	void OnWeaponDropStart();// 0x4202b2c
	void OnWeaponDropFinished();// 0x4202b18
	void OnOwnerPlayerChangeState(enum State);// 0x4202a9c
	void OnCurEquipedShootWeaponReloadLastBullet(int RemainBulletNumToReload);// 0x4202a20
	void OnCurEquipedShootWeaponChangeState(enum LastState, enum State);// 0x4202968
	void LocalUnEquipWeapon(STExtraWeapon* Weapon, bool bIsAI, bool bSimulatedProxy);// 0x420285c
	void LocalEquipWeapon(STExtraWeapon* Weapon, bool bIsAI, bool bLocalFPP, bool bSimulatedProxy, byte Slot);// 0x42026c8
	void HandleWeaponStartFire();// 0x42026b4
	void HandleWeaponOnShoot();// 0x42026a0
	void HandleOnCharAnimLoadingFinished();// 0x420268c
	byte GetCurShootMode();// 0x4202670
	void DrawRecordData();// 0x420265c
	void DoAutoReloadVehicleWeapon();// 0x4202648
	void DoAutoReloadCurrentWeapon();// 0x4202634
	void DoAutoDropWeapon();// 0x4202620

--------------------------------
Class: WeaponShootDisRecordDataConfig
	float DistanceNear;//[Offset: 0x0, Size: 4]
	float DistanceMiddle;//[Offset: 0x4, Size: 4]
	float DistanceMiddleFar;//[Offset: 0x8, Size: 4]
	float DistanceFar;//[Offset: 0xc, Size: 4]
	float AotoAimTargetCacheTime;//[Offset: 0x10, Size: 4]
	float ShootItemDataCacheTime;//[Offset: 0x14, Size: 4]
	float FlushInterval;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WeaponRecordCircleData
	Vector2D centrePod;//[Offset: 0x0, Size: 8]
	float Radius;//[Offset: 0x8, Size: 4]
	float OpenTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WeaponShootAlternateData
	float weight;//[Offset: 0x0, Size: 4]
	float angle;//[Offset: 0x4, Size: 4]
	float dis;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LastEmoteInfo
	int EmoteId;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]
	float EmoteTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InjuryParticleAttachOffset
	byte MovementMode;//[Offset: 0x0, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	byte AttachLocationType;//[Offset: 0x40, Size: 1]

--------------------------------
Class: KOFActivityData
	float ActivityHealth;//[Offset: 0x0, Size: 4]
	float ReActivityHealthTime;//[Offset: 0x4, Size: 4]
	float HitInterval;//[Offset: 0x8, Size: 4]
	float SwimParticleOffset;//[Offset: 0x10, Size: 4]
	AkAudioEvent* ActivityHealthOverAudio;//[Offset: 0x18, Size: 40]
	ParticleSystem* ActivityHealthOverParticle;//[Offset: 0x40, Size: 40]
	ParticleSystem* ActivityHealthHitParticle;//[Offset: 0x68, Size: 40]
	AnimationAsset* ActivityHealthOverAnim;//[Offset: 0x90, Size: 40]
	AnimationAsset* ActivityHealthHitAnim;//[Offset: 0xb8, Size: 40]
	bool NeedHitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]

--------------------------------
Class: CharacterBodyOffset
	Vector HeadOffset;//[Offset: 0x0, Size: 12]
	Vector PitchOffset;//[Offset: 0xc, Size: 12]
	Vector FootOffset;//[Offset: 0x18, Size: 12]
	Vector TPPSpringArmOffset;//[Offset: 0x24, Size: 12]

--------------------------------
Class: PersistClientStateComponent.ActorComponent.Object
	PersistForcePersonPerspectiveInfo ForcePersonPerspectiveInfo;//[Offset: 0x130, Size: 16]
	PersistUIMaskInfo UIMaskInfo;//[Offset: 0x140, Size: 32]
	PersistViewTargetInfo ViewTargetInfo;//[Offset: 0x160, Size: 32]
	PersistSubAnimInfo SubAnimInfo;//[Offset: 0x180, Size: 48]
	PersistMontageInfo MontageInfo;//[Offset: 0x1b0, Size: 56]
	PersistDoActionsInfo DoActionsInfo;//[Offset: 0x1e8, Size: 24]
	PersistPlaySequenceInfo PlaySequenceInfo;//[Offset: 0x200, Size: 24]
	PersistVisPosUIInfo VisPosUIInfo;//[Offset: 0x218, Size: 16]
	PersistAvatarHideInfo AvatarHideInfo;//[Offset: 0x228, Size: 40]
	PersistUIStyleInfo UIStyleInfo;//[Offset: 0x250, Size: 40]
	PersistActivityUIInfo ActivityUIInfo;//[Offset: 0x278, Size: 48]
	PersistRTPCValueInfo RTPCValueInfo;//[Offset: 0x2a8, Size: 40]
	PersistLevelSequenceInfo LevelSequenceInfo;//[Offset: 0x2d0, Size: 96]
	LevelSequenceActor* SequencePlayerActor;//[Offset: 0x330, Size: 8]
	delegate OnLevelSequencePlayDelegate;//[Offset: 0x338, Size: 16]
	delegate OnLevelSequenceStopDelegate;//[Offset: 0x348, Size: 16]
	delegate OnServerPlayerSequenceTimer;//[Offset: 0x358, Size: 16]
	delegate OnLevelSequencePrePlayDelegate;//[Offset: 0x368, Size: 16]
	bool bSetMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	FName[] IgnoreSequenceBlackList;//[Offset: 0x388, Size: 16]
	STExtraBaseCharacter* Owner;//[Offset: 0x398, Size: 8]
	void StopCurSeuqence();// 0x3ef0df4
	void SetUpVisPosUIInfo(bool bSetUp);// 0x3ef0d70
	void SetUpUIStyleInfo(bool bSetUp, UserWidgetStyle* UserWidgetStyle);// 0x3ef0ca8
	void SetUpUIMaskServer(bool bSetUp, FString Param);// 0x3ef0b8c
	void SetUpSubViewTargetServer(bool bSetUp, Actor* TargetActor, float BlendTime);// 0x3ef0a88
	void SetUpSubAnimInstanceServer(bool bSetUp, class AnimInstance SubInstanceClass, FName SlotName, Actor* OwningActor);// 0x3ef094c
	void SetUpRTPCValue(bool bSetUp, PersistRTPCKeyValue[] RTPCValues);// 0x3ef0830
	void SetUpLevelSequenceServer(bool bSetUp, Actor* OwningActor);// 0x3ef0768
	void SetUpLevelSequenceInfo(bool bSetUp, class LevelSequenceActor SequenceActorClass, LevelSequenceBindingInfo[] LevelSequenceBindings, Transform TransfromOrigin, Actor* TransfromOriginActor, bool bRunServer, bool bAutoStop, float ServerFixTime);// 0x3ef0494
	void SetUpForcePersonPerspective(bool bSetUp, bool bFpp);// 0x3ef03c4
	void SetUpAvatarHideServer(bool bSetUp, enum[] SlotArray);// 0x3ef02a8
	void SetUpActivityUIInfos(bool bSetUp, FName[] ShowUINames, Actor* OwningActor, enum ActivityUIShowMode);// 0x3ef0114
	void SetUpActivityUIInfo(bool bSetUp, FName ShowUIName, Actor* OwningActor, enum ActivityUIShowMode);// 0x3eeffd8
	void SetUpActivityActionServer(bool bDo, out FName[] ActionName, Actor* OwningActor);// 0x3eefeb4
	void ServerSetSequenceTimer(float ServerFixTime);// 0x3eefe38
	void RefreshCurSeuqencePos();// 0x3eefe24
	void RecoverClientStateNetLoss(UAEPlayerController* PC);// 0x3eefda8
	void RecoverClientStateApplicationReactivated();// 0x3eefd94
	void PlayMontage(bool bPlay, SoftObjectPath InMontage, float fTime);// 0x3eefc34
	void OnServerPlayerSequenceTD();// 0x3eefc20
	void OnRepGameStateServerTime(float NewServerTimeSeconds);// 0x3eefba4
	void OnRep_VisPosUIInfo();// 0x3eefb54
	void OnRep_ViewTargetInfo();// 0x3eefb04
	void OnRep_UIStyleInfo();// 0x3eefab4
	void OnRep_UIMaskInfo();// 0x3eefa64
	void OnRep_SubAnimInfo();// 0x3eefa50
	void OnRep_RTPCValueInfo();// 0x3eefa00
	void OnRep_PlaySequenceInfo();// 0x3eef9b0
	void OnRep_MontageInfo();// 0x3eef99c
	void OnRep_LevelSequenceInfo();// 0x3eef94c
	void OnRep_ForcePersonPerspectiveInfo();// 0x3eef8fc
	void OnRep_DoActionsInfo();// 0x3eef8ac
	void OnRep_AvatarHideInfo();// 0x3eef85c
	void OnRep_ActivityUIInfo();// 0x3eef80c
	void OnMainCharAnimInstanceInit();// 0x3eef7f8
	void OnLoadMontageInfoDone();// 0x3eef7e4
	void HandlePlayerSeuqence();// 0x3eef7d0
	void HandleLevelSequenceOnAppReactive(float NewServerTimeSeconds);// 0x3eef754
	void ForceUndoActivityUI();// 0x3eef71c
	void ClearSequenceRepInfo();// 0x3eef708
	void ClearActivityActionServer();// 0x3eef6f4

--------------------------------
Class: PersistForcePersonPerspectiveInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bFpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: PersistBase

--------------------------------
Class: PersistUIMaskInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FString Param;//[Offset: 0x10, Size: 16]

--------------------------------
Class: PersistViewTargetInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	Actor* OwningActor;//[Offset: 0x10, Size: 8]
	float BlendTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: PersistSubAnimInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	class AnimInstance* SubInstanceClass;//[Offset: 0x10, Size: 8]
	FName SlotName;//[Offset: 0x18, Size: 8]
	Actor* OwningActor;//[Offset: 0x20, Size: 8]

--------------------------------
Class: PersistMontageInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	SoftObjectPath TargetMontage;//[Offset: 0x10, Size: 24]
	float PlayTime;//[Offset: 0x28, Size: 4]

--------------------------------
Class: PersistDoActionsInfo.PersistBase
	DoActionsInfo[] RepActionsInfos;//[Offset: 0x8, Size: 16]

--------------------------------
Class: DoActionsInfo
	FName[] Actions;//[Offset: 0x0, Size: 16]
	Actor* OwningActor;//[Offset: 0x20, Size: 8]

--------------------------------
Class: PersistPlaySequenceInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	Actor* OwningActor;//[Offset: 0xc, Size: 8]

--------------------------------
Class: PersistVisPosUIInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: PersistAvatarHideInfo.PersistBase
	enum[] AvatarID;//[Offset: 0x8, Size: 16]

--------------------------------
Class: PersistUIStyleInfo.PersistBase
	UserWidgetStyle*[] UserWidgetStyle;//[Offset: 0x8, Size: 16]

--------------------------------
Class: PersistActivityUIInfo.PersistBase
	ActivityUIInfo[] UINameAndShowModeArray;//[Offset: 0x8, Size: 16]
	Actor* OwningActor;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ActivityUIInfo
	FName UIName;//[Offset: 0x0, Size: 8]
	enum ShowMode;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PersistRTPCValueInfo.PersistBase
	PersistRTPCKeyValue[] RTPCKeyValue;//[Offset: 0x8, Size: 16]

--------------------------------
Class: PersistRTPCKeyValue
	FName RTPCKey;//[Offset: 0x0, Size: 8]
	float RTPCValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PersistLevelSequenceInfo.PersistBase
	LevelSequenceBindingInfo[] LevelSequenceBindings;//[Offset: 0x8, Size: 16]
	class LevelSequenceActor* SequenceActorClass;//[Offset: 0x18, Size: 8]
	Transform TransfromOrigin;//[Offset: 0x20, Size: 48]
	Actor* TransfromOriginActor;//[Offset: 0x50, Size: 8]
	float StartPlayTimeSeconds;//[Offset: 0x58, Size: 4]

--------------------------------
Class: LevelSequenceBindingInfo
	MovieSceneObjectBindingID Binding;//[Offset: 0x0, Size: 24]
	Actor* Actor;//[Offset: 0x18, Size: 8]
	bool bBindingCharacterDisableMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: PlayMontageData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 8]
	float InPlayRate;//[Offset: 0x8, Size: 4]
	float InStartPosition;//[Offset: 0xc, Size: 4]
	FName StartSectionName;//[Offset: 0x10, Size: 8]
	byte PlayType;//[Offset: 0x18, Size: 1]
	bool IsPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool PlayDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]

--------------------------------
Class: UGCMoveSpeedScaleModifyItem
	FString AttrModifyItemName;//[Offset: 0x0, Size: 16]
	FString AttrName;//[Offset: 0x10, Size: 16]
	enum[] ValidPawnStateList;//[Offset: 0x20, Size: 16]
	float ModifierValue;//[Offset: 0x30, Size: 4]

--------------------------------
Class: Float_NetQuantize8.FloatNet

--------------------------------
Class: FloatNet

--------------------------------
Class: STPoisonWaterDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: UGCRadialDamageEvent.STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	int damageTypeID;//[Offset: 0x58, Size: 4]

--------------------------------
Class: UGCPointDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	int damageTypeID;//[Offset: 0xb4, Size: 4]

--------------------------------
Class: LowTemperatureDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: LastBreathWithoutRescueDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: ElectricDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: ReplayWidgetBase.UAEUserWidget.UserWidget.Widget.Visual.Object
	int LoadingCountLimit;//[Offset: 0x434, Size: 4]
	STExtraPlayerController* pReplayExtraPC;//[Offset: 0x438, Size: 8]
	FString ReplayTargetPlayerName;//[Offset: 0x470, Size: 16]
	FString ReplayTargetUIDStr;//[Offset: 0x480, Size: 16]
	int ReplayTargetTeamID;//[Offset: 0x490, Size: 4]
	LiveUIRecordSetting[] UIRecordSetting;//[Offset: 0x498, Size: 16]
	int[] GameModeIDIgnoreCheckPlayerList;//[Offset: 0x4a8, Size: 16]
	void UpdateWeaponUI();// 0x3f4f984
	void UpdateBulletUI();// 0x3f4f968
	void SetupUIRoot_BP();// 0x3f4f94c
	void SetIsResettingViewTarget(bool isResetting);// 0x3f4f8c8
	void RefreshUIInfoOnAttachCameraViewFinished();// 0xffffff8f20d162a8
	void OnWidgetRelease();// 0x3f4f8ac
	void OnWidgetReInit();// 0x3f4f890
	void OnWidgetInitialize();// 0x3f4f874
	void OnViewCharaterChangedVechileSeat();// 0x3f4f858
	void OnViewCharacterDetachedFromVehicle(STExtraVehicleBase* Vehicle);// 0x3f4f7d4
	void OnViewCharacterAttachedToVehicle(STExtraVehicleBase* Vehicle);// 0x3f4f750
	void OnSimulatedWeaponChanged();// 0x3f4f734
	void OnResetViewTarget_BP(OnReplaySetViewTarget inSettingInfo);// 0x3f4f6a4
	void OnReplayFinishPlay();// 0x3f4f688
	void OnInitChildWidget();// 0xffffff8f20d162a8
	void OnBulletNumChanged();// 0x3f4f66c
	bool GetIsResettingViewTarget();// 0x3f4f634
	void ForceRefreshUI();// 0x3f4f618
	void ClearUIOnGotoTime();// 0x3f4f5fc

--------------------------------
Class: LiveUIRecordSetting
	int UniqueUIIndex;//[Offset: 0x0, Size: 4]
	FString WidgetName;//[Offset: 0x8, Size: 16]
	FString OuterName;//[Offset: 0x18, Size: 16]

--------------------------------
Class: OnReplaySetViewTarget
	int LastTeamID;//[Offset: 0x0, Size: 4]
	bool IsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	STExtraPlayerState* NewPlayerState;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ReplayProgressbarWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bPressedReplayFastForwardButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool bPressedReplayRewindButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	bool MouseIsHoveredOnProgressEventItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 1]
	ReplayKillOrHitdownInfoUIModel[] KillOrHitdownInfoUIModels;//[Offset: 0x430, Size: 16]
	ReplayKillOrHitdownInfoUIModel[] NextChunkKillOrHitdownInfoUIModels;//[Offset: 0x440, Size: 16]
	void UpdateKillorHitDownUIData();// 0xffffff8f20d162a8
	void ShowReplayProgressUI();// 0xffffff8f20d162a8
	void ShowReplayEventListUI();// 0xffffff8f20d162a8
	void ShowReConnetionLoadingUI();// 0xffffff8f20d162a8
	void RefreshUIInfoOnAttachCameraViewFinished();// 0xffffff8f20d162a8
	void RefreshKillorHitDownUIData(bool hasData, bool IsHadData);// 0xffffff8f20d162a8
	void OnWidgetInitialize();// 0xffffff8f20d162a8
	void OnResetViewTarget_BP();// 0xffffff8f20d162a8
	void OnReplayFinishPlay();// 0xffffff8f20d162a8
	void OnReleasedReplayRewindButton();// 0xffffff8f20d162a8
	void OnReleasedReplayPauseButton();// 0xffffff8f20d162a8
	void OnReleasedReplayFastForwardButton();// 0xffffff8f20d162a8
	void OnPressedReplayRewindButton();// 0xffffff8f20d162a8
	void OnPressedReplayFastForwardButton();// 0xffffff8f20d162a8
	void OnPressedEnterButtonEvent();// 0xffffff8f20d162a8
	void OnLeaveFreeView();// 0xffffff8f20d162a8
	void OnEnterFreeView();// 0xffffff8f20d162a8
	void OnChangeInDilation(float InDilation);// 0xffffff8f20d162a8
	void HideReConnetionLoadingUI();// 0xffffff8f20d162a8

--------------------------------
Class: ReplayKillOrHitdownInfoUIModel
	FString Attacker;//[Offset: 0x0, Size: 16]
	FString Victim;//[Offset: 0x10, Size: 16]
	FString AttackerUID;//[Offset: 0x20, Size: 16]
	FString VictimUID;//[Offset: 0x30, Size: 16]
	bool IsKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	int KillTime;//[Offset: 0x44, Size: 4]
	bool KilledByPoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: Replay_SkeletalData_Manager.Object
	DemoNetDriver* ReplyDemoNd;//[Offset: 0x30, Size: 8]
	Transform[] EveryTicksBonesTransform;//[Offset: 0x38, Size: 16]
	FName[] BonesName;//[Offset: 0x48, Size: 16]
	float[] EveryTicktime;//[Offset: 0x58, Size: 16]
	Character* CurCharacter;//[Offset: 0x68, Size: 8]
	bool[] EveryTicksErrorBonesIndex;//[Offset: 0x70, Size: 16]
	FString[] ErrorLog;//[Offset: 0x80, Size: 16]
	FString[] FPSLog;//[Offset: 0x90, Size: 16]
	FString[] OthersLog;//[Offset: 0xa0, Size: 16]
	FString[] OutFileNames;//[Offset: 0xb0, Size: 16]
	Transform[] ReadInBonesTransform;//[Offset: 0xc0, Size: 16]
	ActorComponent*[] Meshes;//[Offset: 0xd0, Size: 16]
	MaterialInterface*[] PreMaterials;//[Offset: 0xe0, Size: 16]
	STExtraGameInstance* CurGameInstance;//[Offset: 0x130, Size: 8]
	UserWidget* ReplaySkeletonGMUI;//[Offset: 0x138, Size: 8]
	class UserWidget* ReplaySkeletonGMUIClass;//[Offset: 0x140, Size: 40]
	FString AddtionalName;//[Offset: 0x168, Size: 16]
	bool bPauseWhenCompareError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bUseErrorMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	float Threshold;//[Offset: 0x17c, Size: 4]
	Material* ErrorMaterial;//[Offset: 0x180, Size: 8]
	float FixedFPS;//[Offset: 0x188, Size: 4]
	bool bIsDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	void ShowGMUI(bool isShow);// 0x3f4c344
	void PauseOrPlay();// 0x3f4c330
	void DoBatchTexture(Texture* tex);// 0xffffff8f20d162a8
	void BP_StartWriteOrCompareData(bool compare);// 0x3f4c2ac
	void BP_ShowCompare();// 0x3f4c298
	void BP_SetReplayFile(FString FullPath);// 0x3f4c1c0
	void BP_SetDataFile(FString FullPath);// 0x3f4c0e8
	FString BP_OpenReplayFile();// 0x3f4c068
	bool BP_GetIsWrite();// 0x3f4c030
	bool BP_GetCanShowCompare();// 0x3f4bff8
	bool AutoTestWriteStart(FString replay_fullpath);// 0x3f4bf14
	bool AutoTestCompareStart(FString replay_fullpath, FString data_fullpath);// 0x3f4bda0

--------------------------------
Class: ReplayCameraDataManager.Object

--------------------------------
Class: AssetRefStrategicManager.Object
	delegate OnPreloadContentForURLDelegate;//[Offset: 0x30, Size: 16]
	delegate OnCheckCacheObjectDelegate;//[Offset: 0x40, Size: 16]
	delegate OnAvatarAsyncLoadFinishedDelegate;//[Offset: 0x50, Size: 16]
	class AssetRefStrategicBase[] InitStrategicClass;//[Offset: 0x60, Size: 16]
	FString LobbyMapName;//[Offset: 0x70, Size: 16]
	AssetRefStrategicBase*[] Strategics;//[Offset: 0x80, Size: 16]
	AssetRefStrategicBase*[] TickableStrategics;//[Offset: 0x90, Size: 16]

--------------------------------
Class: AssetRefStrategicBase.Object
	AssetRefStrategicManager* OwnerManager;//[Offset: 0x28, Size: 8]
	<Object*> RefSet;//[Offset: 0x30, Size: 80]
	<Object*> NoGCRefSet;//[Offset: 0x80, Size: 80]

--------------------------------
Class: CompletePlayback.FilebasedPlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0x4b0, Size: 40]
	UAEUserWidget* ReplayUI;//[Offset: 0x4d8, Size: 8]
	bool IsUsingMapPlayerItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 1]
	FString[] ExcludedGameModes;//[Offset: 0x4e8, Size: 16]
	bool bEnableUIDisplaySystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	ReplayUIDisplayManager* pUIDisplayManager;//[Offset: 0x530, Size: 8]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	uint32[] TeammateKeyArray;//[Offset: 0x560, Size: 16]
	UAEDataTable* ConfigTable;//[Offset: 0x5d0, Size: 8]
	void NotifyCharacterShoot(STExtraWeapon* Weapon);// 0x3d50cb0
	void GetReplayPathFromBrowser(out FString OutReplayFullName);// 0x3d50c1c
	static CompletePlayback* GetInstance(Object* WorldContextObj);// 0x3d50ba0

--------------------------------
Class: FilebasedPlayback.GameReplay.Object
	int MaxHoursForKeepingFiles;//[Offset: 0x2f0, Size: 4]
	void UploadReplayFile(FString FileFullPath, int Sponsor, FString BattleID);// 0x3dd48c8
	bool StopRecordingReplay();// 0x3dd4888
	bool StopPlay();// 0x3dd4848
	bool StartRecordingReplay(bool bSkipConditionCheck, enum RecordCondition);// 0x3dd476c
	FString ReplayNameToFullPath(FString InReplayName);// 0x3dd4690
	bool PreloadReplayMap(FString MapId, int DelayFrame);// 0x3dd45b0
	bool PlayReplayWithPreloadedMap(FString MapId, FString DemoName, int DelayFrame);// 0x3dd4488
	bool PlayReplay();// 0x3dd4448
	bool PlayLiveDemoWithGameId(FString DemoName);// 0x3dd43a8
	bool PlayDemoWithFilename(FString DemoName);// 0x3dd4308
	ReplayFileHeader GetReplayFileHeaderInfoByReplayName(FString InReplayName);// 0x3dd417c
	ReplayFileHeader GetReplayFileHeaderInfo(FString InSourceFile);// 0x3dd3ff0
	FString GetRemoteStorageDir();// 0x3dd3f70
	FString GetFileCacheDir();// 0x3dd3ee8
	bool EnumerateReplayFiles(out ReplayFileItem[] OutFileInfos);// 0x3dd3df4
	void DownloadReplayFile(FString InUrl, out const delegate Delegate);// 0x3dd3cf8
	bool DeleteReplayFile(FString FileFullPath);// 0x3dd3c60

--------------------------------
Class: ReplayFileHeader
	int ReplayFileFormatRevision;//[Offset: 0x0, Size: 4]
	FString ReplayName;//[Offset: 0x8, Size: 16]
	FString ReplayVersion;//[Offset: 0x18, Size: 16]
	int64 DateTime;//[Offset: 0x28, Size: 8]
	float TotalTime;//[Offset: 0x30, Size: 4]
	FString RoomName;//[Offset: 0x38, Size: 16]
	int GameModeID;//[Offset: 0x48, Size: 4]
	int SubModeId;//[Offset: 0x4c, Size: 4]
	int MapId;//[Offset: 0x50, Size: 4]
	int PlayerNum;//[Offset: 0x54, Size: 4]
	int CustomGameModeId;//[Offset: 0x58, Size: 4]
	float FullDataStartTime;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: ReplayFileItem
	ReplayFileHeader HeaderInfo;//[Offset: 0x0, Size: 96]
	FString FullPath;//[Offset: 0x60, Size: 16]
	int64 FileSize;//[Offset: 0x70, Size: 8]

--------------------------------
Class: ReplayUIDisplayManager.Object
	<int,Button*> CachedButtonMap;//[Offset: 0x38, Size: 80]

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x138, Size: 8]
	ButtonStyle WidgetStyle;//[Offset: 0x140, Size: 568]
	LinearColor ColorAndOpacity;//[Offset: 0x378, Size: 16]
	LinearColor BackgroundColor;//[Offset: 0x388, Size: 16]
	byte ClickMethod;//[Offset: 0x398, Size: 1]
	byte TouchMethod;//[Offset: 0x399, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 1]
	bool IsPassMouseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 1]
	bool IsImgAlphaBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	delegate OnClicked;//[Offset: 0x3a0, Size: 16]
	delegate OnPressed;//[Offset: 0x3b0, Size: 16]
	delegate OnReleased;//[Offset: 0x3c0, Size: 16]
	delegate OnHovered;//[Offset: 0x3d0, Size: 16]
	delegate OnUnhovered;//[Offset: 0x3e0, Size: 16]
	delegate OnPressedParam;//[Offset: 0x3f0, Size: 16]
	delegate OnReplayRecordNotify;//[Offset: 0x400, Size: 16]
	delegate OnMouseButtonDownEvent;//[Offset: 0x410, Size: 16]
	delegate OnMouseButtonUpEvent;//[Offset: 0x420, Size: 16]
	delegate OnMouseMoveEvent;//[Offset: 0x430, Size: 16]
	bool IsThisFrameClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	void SetTouchMethod(byte InTouchMethod);// 0x59f0ddc
	void SetStyle(out const ButtonStyle InStyle);// 0x59f0d3c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x59f0cc0
	void SetClickMethod(byte InClickMethod);// 0x59f0c44
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x59f0bc8
	void Release();// 0x59f0bb4
	bool IsPressed();// 0x59f0b7c
	byte GetReleasedReason();// 0x59f0b60

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x59f4538
	PanelSlot* GetContentSlot();// 0x59f4504
	Widget* GetContent();// 0x59f44d0

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 8]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 120]
	SlateBrush Hovered;//[Offset: 0x80, Size: 120]
	SlateBrush Pressed;//[Offset: 0xf8, Size: 120]
	SlateBrush Disabled;//[Offset: 0x170, Size: 120]
	Margin NormalPadding;//[Offset: 0x1e8, Size: 16]
	Margin PressedPadding;//[Offset: 0x1f8, Size: 16]
	SlateSound PressedSlateSound;//[Offset: 0x208, Size: 24]
	SlateSound HoveredSlateSound;//[Offset: 0x220, Size: 24]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 8]

--------------------------------
Class: WonderfulPlayback.GameReplay.Object
	bool bWonderfulPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	int curPlayerTemaID;//[Offset: 0x29c, Size: 4]
	bool IsOpenWonderfulReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	<FString,WonderfulReplayHeadInfo> headinfolist;//[Offset: 0x2a8, Size: 80]
	delegate OnWonderfulReplayUIRelease;//[Offset: 0x2f8, Size: 16]
	delegate OnWonderfulReplayFastforwardFinished;//[Offset: 0x308, Size: 16]
	delegate WonderfulReplayGameStateReadyHandler;//[Offset: 0x318, Size: 16]
	void SetPlayListPerReplay(FString MVPPlayerUID);// 0x4217728

--------------------------------
Class: WonderfulReplayHeadInfo
	FString PicURL;//[Offset: 0x0, Size: 16]
	FString UID;//[Offset: 0x10, Size: 16]
	int curAvatarBoxid;//[Offset: 0x20, Size: 4]
	int VsTeamLevel;//[Offset: 0x24, Size: 4]
	int[] BadgeID;//[Offset: 0x28, Size: 16]
	int Sex;//[Offset: 0x38, Size: 4]
	int PlayerLevel;//[Offset: 0x3c, Size: 4]
	FString Name;//[Offset: 0x40, Size: 16]

--------------------------------
Class: ObPlayback.CompletePlayback.FilebasedPlayback.GameReplay.Object
	FString TmpViewTargetName;//[Offset: 0x5d8, Size: 16]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x648, Size: 8]
	FString ReplayFileServerUrl;//[Offset: 0x650, Size: 16]
	float ChunkUploadDelayInSeconds;//[Offset: 0x660, Size: 4]
	float ChunkDownloadDelayInSeconds;//[Offset: 0x664, Size: 4]
	float ChunkAdvancePlayInSeconds;//[Offset: 0x668, Size: 4]
	int StartNotifyStartLiveChunkNum;//[Offset: 0x66c, Size: 4]
	float ChunkUploadRetryDelayInSeconds;//[Offset: 0x670, Size: 4]
	int ChunkUploadRetryTimes;//[Offset: 0x674, Size: 4]
	float ChunkDownloadRetryDelayInSeconds;//[Offset: 0x678, Size: 4]
	int ChunkDownloadRetryTimes;//[Offset: 0x67c, Size: 4]
	int MaxLiveUploadSpeed;//[Offset: 0x680, Size: 4]

--------------------------------
Class: LivePlayback.CompletePlayback.FilebasedPlayback.GameReplay.Object
	void SetSpectatorName(FString SpectatorName, bool bgm, bool isChangeViewTarget, bool isAutoSetName);// 0x3e7714c
	bool PlayReplay();// 0x3e7710c
	bool PlayDemoWithFilename(FString DemoName);// 0x3e7706c
	void OnLiveNumChanged();// 0x3e77058
	void OnKillNumChanged(out const byte KillNum);// 0x3e76fcc
	void OnGameOver(FName GameStatus);// 0x3e76f50
	void OnFinishOptimizeGotoTime();// 0x3e76f3c
	void OnEnterFinalState(const int CircleReverseIndex);// 0x3e76ec0
	static LivePlayback* GetInstance(Object* WorldContextObj);// 0x3e76e44
	bool CheckHasRealPlayerExits();// 0x3e76e0c

--------------------------------
Class: AntiCheatConfig.Object

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x28, Size: 16]
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FeatureConfigItem
	FString TargetClassName;//[Offset: 0x0, Size: 16]
	int bUseFeatureSet;//[Offset: 0x10, Size: 4]
	FString[] ExcludeComponentsList_DS;//[Offset: 0x18, Size: 16]
	FString[] ExcludeComponentsList_Autonomous;//[Offset: 0x28, Size: 16]
	FString[] ExcludeComponentsList_Team;//[Offset: 0x38, Size: 16]
	FString[] ExcludeComponentsList_NonTeam;//[Offset: 0x48, Size: 16]

--------------------------------
Class: FeatureSetItem

--------------------------------
Class: AvatarVisibilityCollection.BlueprintFunctionLibrary.Object
	bool bUseAvatarVisibilityFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bSelfAlwaysVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bOBAlwaysVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool bGMAlwaysVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	SlotVisiblityConfigItem[] NormalBattleSlotVisibilityConfigItemList;//[Offset: 0x30, Size: 16]
	SlotVisiblityConfigItem[] RoomModeSlotVisibilityConfigItemList;//[Offset: 0x40, Size: 16]
	SlotVisiblityConfigItem CurGameModeSlotVisibilityConfig;//[Offset: 0x50, Size: 56]
	STExtraBaseCharacter*[] DelayedRefreshCharList;//[Offset: 0x98, Size: 16]
	static void ResetCurBattleConfig(const Object* WorldContextObj);// 0x3c8c39c
	static bool MarkDelayedRefreshForChar(const STExtraBaseCharacter* InCheckChar);// 0x3c8c31c
	static bool IsWeaponSlotVisibleForChar(const STExtraBaseCharacter* InCheckChar, const int InSlotType, const bool InIsSkin);// 0x3c8c21c
	static bool IsWeaponSlotVisible(const Object* WorldContextObj, const int InSlotType, const bool InIsSelf, const bool InIsTeammate, const bool InIsInVehicle, const bool InIsSkin);// 0x3c8c040
	static bool IsWeaponAttachmentSlotVisibleForChar(const STExtraBaseCharacter* InCheckChar, const int InSlotType, const bool InIsSkin);// 0x3c8bf40
	static bool IsWeaponAttachmentSlotVisible(const Object* WorldContextObj, const int InSlotType, const bool InIsSelf, const bool InIsTeammate, const bool InIsInVehicle, const bool InIsSkin);// 0x3c8bd64
	static bool IsSelfViewForChar(const STExtraBaseCharacter* InCheckChar);// 0x3c8bce4
	static bool IsOBViewAlwaysVisibile(const Object* WorldContextObj);// 0x3c8bc64
	static bool IsGMViewAlwaysVisibile(const Object* WorldContextObj);// 0x3c8bbe4
	static bool IsFeatureEnable(const Object* WorldContextObj);// 0x3c8bb64
	static bool IsAvatarSlotVisibleForChar(const STExtraBaseCharacter* InCheckChar, const int InSlotType, const bool InIsSkin);// 0x3c8ba64
	static bool IsAvatarSlotVisible(const Object* WorldContextObj, const int InSlotType, const bool InIsSelf, const bool InIsTeammate, const bool InIsInVehicle, const bool InIsSkin);// 0x3c8b888

--------------------------------
Class: SlotVisiblityConfigItem
	int GameModeID;//[Offset: 0x0, Size: 4]
	AvatarVisibilityConfig AvatarVisibilityConfig;//[Offset: 0x8, Size: 16]
	WeaponVisibilityConfig WeaponVisibilityConfig;//[Offset: 0x18, Size: 32]

--------------------------------
Class: AvatarVisibilityConfig
	AvatarSlotVisibilityConfigItem[] AvatarSlotVisibilityConfigList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AvatarSlotVisibilityConfigItem.SlotVisiblityItem
	enum ConfigSlot;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SlotVisiblityItem
	SlotItemVisibilityCondition NormalVisibilityConfig;//[Offset: 0x8, Size: 4]
	SlotItemVisibilityCondition SkinVisibilityConfig;//[Offset: 0xc, Size: 4]
	SlotItemVisibilityCondition VehicleVisibilityConfig;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SlotItemVisibilityCondition
	int VisibilityConfig;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WeaponVisibilityConfig
	WeaponSlotVisiblityConfigItem[] WeaponSlotVisibilityConfigList;//[Offset: 0x0, Size: 16]
	WeaponAttachmentSlotVisibilityConfigItem[] WeaponAttachmentSlotVisibilityConfigList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: WeaponSlotVisiblityConfigItem.SlotVisiblityItem
	byte ConfigSlot;//[Offset: 0x14, Size: 1]

--------------------------------
Class: WeaponAttachmentSlotVisibilityConfigItem.SlotVisiblityItem
	enum ConfigSlot;//[Offset: 0x14, Size: 1]

--------------------------------
Class: FrequncyAccessActorList
	Actor*[] ActorList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: ObjectPoolConfig
	FName ObjectClassName;//[Offset: 0x0, Size: 8]
	FString ObjectClassFullPath;//[Offset: 0x8, Size: 16]
	int MaxObjectNum;//[Offset: 0x18, Size: 4]
	int MinObjectNum;//[Offset: 0x1c, Size: 4]
	int CleanupTimeout;//[Offset: 0x20, Size: 4]

--------------------------------
Class: FadeDynamicStyleInfo

--------------------------------
Class: GameBusinessManager.LogicManagerBase.Object
	GameWidgetConfig[] WidgetConfigList;//[Offset: 0x260, Size: 16]
	LuaClassObj* LuaObject;//[Offset: 0x2e0, Size: 8]
	UAEUserWidget* GetWidgetFromName(FString WidgetName);// 0x484b28c
	UAEUserWidget* GetWidget(int Index);// 0x484b200
	LuaClassObj* GetLuaObject();// 0x484b1cc
	GameFrontendHUD* GetGameFrontendHUD();// 0x484b198
	UAEUserWidget* CreateDynamicSingleWidget(FName GameStatus, FString WidgetName);// 0x484b068

--------------------------------
Class: GameWidgetConfig
	FString Path;//[Offset: 0x0, Size: 16]
	FString Container;//[Offset: 0x10, Size: 16]
	int ZOrder;//[Offset: 0x20, Size: 4]
	class Object* WidgetClass;//[Offset: 0x28, Size: 8]

--------------------------------
Class: LuaClassObj.LuaContext.Actor.Object
	GameBusinessManager* pManager;//[Offset: 0x400, Size: 8]
	bool bClearSourceCodeAfterInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 1]
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool bPersistentUI, bool InStatusConcern, bool bDynamicWidget, bool bKeepDynamicWidget, int inUIControlState, bool bAsyncLoad, bool bUIMsg);// 0x486ca5c
	void SubSceneCameraBlendTime(int miliSeconds);// 0x486c9e0
	void SubDefaultSceneCamera(int sceneCameraIndex);// 0x486c964
	void SubDefaultChildUI(out const FString[] childList);// 0x486c8a8
	void SubDefaultBaseUI(FString baseUI);// 0x486c824
	void SubCollapseWidgetList(FString RootWidgetName, out FString[] ChildWidgetNames);// 0x486c71c
	void ResetZOrderImm(int ZOrder, int Index);// 0x486c668
	void ResetZOrder(int ZOrder, int Index);// 0x486c5b4
	void ReplaceUIWidgetAbs(out const WidgetReplacePair[] InReplaceList);// 0x486c4ec
	void ReplaceUIWidget(out const WidgetReplacePair[] InReplaceList);// 0x486c424
	void PushPanel(FString srcTag, FString dstTag, bool Singleton);// 0x486c310
	void PopPanel();// 0x486c2fc
	bool IsTopStackPanel();// 0x486c2c4
	bool IsPushedPanel();// 0x486c28c
	void HandleUIMessageNoFetch(FString UIMessage);// 0x486c208
	void HandleUIMessage(FString UIMessage);// 0x486c184
	void HandleSingleDynamicCreation(FString WidgetName);// 0x486c0ac
	void HandleSceneReady();// 0x486c098
	void HandleDynamicDestruction();// 0x486c084
	void HandleDynamicCreation();// 0x486c070
	UAEUserWidget* GetWidgetFromName(FString WidgetPath);// 0x486bf90
	FString GetTopStackPanelSrcTag();// 0x486bf10
	FString GetTopStackPanelDstTag();// 0x486be90
	FString GetGameStatus();// 0x486be10
	FString GetFriendlyName();// 0x486bd90
	void DestroyUIWidget(UserWidget* UserWidget);// 0x486bd14
	UserWidget* CreateUIWidgetWithClass(class Object WidgetClass);// 0x486bc88
	UserWidget* CreateUIWidget(FString WidgetPath);// 0x486bba8
	void ClearReplaceUI();// 0x486bb94
	void AddToTopStackPanel();// 0x486bb80

--------------------------------
Class: LuaContext.Actor.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x3e8, Size: 8]
	Object* OwningObject;//[Offset: 0x3f0, Size: 8]
	ScriptContextComponent* ScriptContextComponent;//[Offset: 0x3f8, Size: 8]

--------------------------------
Class: LuaStateWrapper.Object
	void StatEnd(FString TagName);// 0x723fbb8
	void StatBegin(FString TagName);// 0x723fb34
	static int[] GetTestingValue(FString InTableName, int InKey);// 0x723fa2c
	static FString[] GetTableStrKeys(FString InTableName);// 0x723f904
	static int[] GetTableKeys(FString InTableName);// 0x723f838
	static bool GetLuaTableValueWithStrKey(FString InTableName, FString InKey, ScriptStruct* InStruct, out TableRowBase OutRow);// 0x723f2ec
	static bool GetLuaTableValueWithIntKey(FString InTableName, int InKey, ScriptStruct* InStruct, out TableRowBase OutRow);// 0x723edc0
	static int[] GetAvatarTestingValue(int InKey);// 0x723ed00
	static int[] GetAvatarTestingKeys();// 0x723ec80

--------------------------------
Class: WidgetReplacePair
	FString TargetWidget;//[Offset: 0x0, Size: 16]
	FString ReplaceDir;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ScriptContextComponent.ActorComponent.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x128, Size: 8]
	void PushOneScriptPropertyValues(FString ParamName);// 0x7240db4
	void PushAllScriptPropertyValues();// 0x7240d98
	void FetchOneScriptPropertyValues(FString ParamName);// 0x7240cb8
	void FetchAllScriptPropertyValues();// 0x7240c9c
	void CallScriptFunctionWithoutFetch(FString FunctionName);// 0x7240bc4
	void CallScriptFunction(FString FunctionName);// 0x7240aec

--------------------------------
Class: GameFrontendHUD.FrontendHUD.Object
	delegate OnFinishModifyUserSettings;//[Offset: 0x128, Size: 16]
	<FName,FString> GameStatusMap;//[Offset: 0x140, Size: 80]
	<FString> TestMarkNameSet;//[Offset: 0x198, Size: 80]
	GVoiceInterface* GVoice;//[Offset: 0x1e8, Size: 8]
	bool DisableGVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	LocalSettingManager* SettingManager;//[Offset: 0x1f8, Size: 8]
	<FName,Property*> SaveGamePropertyMap;//[Offset: 0x200, Size: 80]
	HttpHelper* HttpHelper;//[Offset: 0x250, Size: 8]
	bool isInFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	BugReporter* BugReporter;//[Offset: 0x260, Size: 8]
	GDolphinUpdater* GDolphin;//[Offset: 0x268, Size: 8]
	FString[] pufferPakFileList;//[Offset: 0x278, Size: 16]
	GPufferUpdater* GPuffer;//[Offset: 0x288, Size: 8]
	CustomMapManager* CustomMapManager;//[Offset: 0x290, Size: 8]
	UGCActorLuaManager* UGCActorLuaManager;//[Offset: 0x298, Size: 8]
	ReplayManager* ReplayManager;//[Offset: 0x2a0, Size: 8]
	FName UnrealNetworkStatus;//[Offset: 0x2b8, Size: 8]
	float UnrealNetworkConnectingTimer;//[Offset: 0x2d8, Size: 4]
	float UnrealNetworkConnectingDetectInterval;//[Offset: 0x2e0, Size: 4]
	float UnrealNetworkRecoverableLostDetectInterval;//[Offset: 0x2e4, Size: 4]
	float UnrealNetworkConnectingTime;//[Offset: 0x300, Size: 4]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x328, Size: 8]
	FString ScriptBPRelativeDir;//[Offset: 0x330, Size: 16]
	bool bLuaUseLobbyEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	bool bReleaseGameSettingAfterUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	bool bPrintObjListAfterShutdownLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 1]
	FString[] DisableSMStreamingMaps;//[Offset: 0x348, Size: 16]
	FString ScriptRelativeDir;//[Offset: 0x358, Size: 16]
	bool bWaitForGameRunningForLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	FString InGameLuaDir;//[Offset: 0x370, Size: 16]
	FString LuaEntryPath;//[Offset: 0x380, Size: 16]
	FString[] PreloadLuaDirList;//[Offset: 0x390, Size: 16]
	FString LuaCSVDir;//[Offset: 0x3a0, Size: 16]
	FString LuaUMGDir;//[Offset: 0x3b0, Size: 16]
	float LuaTickTime;//[Offset: 0x3c0, Size: 4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	bool bDisableMNAOnGameAccelerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 1]
	FString ZoneID;//[Offset: 0x3c8, Size: 16]
	GCloudLoginAccountInfo loginAccountInfo;//[Offset: 0x3d8, Size: 88]
	float TApmTickReportTime;//[Offset: 0x434, Size: 4]
	float TGPATickReportTime;//[Offset: 0x438, Size: 4]
	TssManager* TssMgr;//[Offset: 0x440, Size: 8]
	GCloudMidasManager* midasManager;//[Offset: 0x448, Size: 8]
	bool bIsCutdownSettingQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 1]
	uint64 GameID;//[Offset: 0x4d8, Size: 8]
	FString GameKey;//[Offset: 0x4e0, Size: 16]
	FString QQAppid;//[Offset: 0x4f0, Size: 16]
	FString WXAppid;//[Offset: 0x500, Size: 16]
	uint64 GameId_CE;//[Offset: 0x510, Size: 8]
	FString GameKey_CE;//[Offset: 0x518, Size: 16]
	FString QQAppid_CE;//[Offset: 0x528, Size: 16]
	FString WXAppid_CE;//[Offset: 0x538, Size: 16]
	FString payEnvironment;//[Offset: 0x548, Size: 16]
	FString OfferID_IOS;//[Offset: 0x558, Size: 16]
	FString OfferID_Anroid;//[Offset: 0x568, Size: 16]
	bool bWatchingDetailBtnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	delegate UIStackChangeDelegate;//[Offset: 0x580, Size: 16]
	delegate UIStackPopBottomDelegate;//[Offset: 0x590, Size: 16]
	delegate LoadingScreenVisibilityChanged;//[Offset: 0x5a0, Size: 16]
	delegate UIStackRecoverDelegate;//[Offset: 0x5b0, Size: 16]
	delegate MidasPayDelegate;//[Offset: 0x5c0, Size: 16]
	FString[] ListToPrintRefs;//[Offset: 0x5d0, Size: 16]
	bool PrintObjCompareList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	bool bSurportReupdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 1]
	bool bShowReleaseNoGCErrorMsgBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e2, Size: 1]
	bool bPrintObjListBeforeReinit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e3, Size: 1]
	FString SurportReupdateMapURL;//[Offset: 0x5e8, Size: 16]
	Object*[] PersistentAssetRefs;//[Offset: 0x5f8, Size: 16]
	FString[] NoGCPackage;//[Offset: 0x608, Size: 16]
	SoftObjectPath[] PersistentAssetList;//[Offset: 0x618, Size: 16]
	bool bUseOldSendTssOpenID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x629, Size: 1]
	FString UserSettingsClassName;//[Offset: 0x630, Size: 16]
	FString ReplayUserSettingsClassName;//[Offset: 0x640, Size: 16]
	class Object* UserSettingsClass;//[Offset: 0x650, Size: 8]
	SaveGame* UserSettings;//[Offset: 0x658, Size: 8]
	FString UIElemSettingClassName;//[Offset: 0x660, Size: 16]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0x670, Size: 16]
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x6e0, Size: 8]
	int FpsForWindowClient;//[Offset: 0x6e8, Size: 4]
	int FpsForWindowClientReplay;//[Offset: 0x6ec, Size: 4]
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x6f0, Size: 16]
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x701, Size: 1]
	int NativeHUDTickIndex;//[Offset: 0x704, Size: 4]
	SoftObjectPath[] LobbyPreloadAssets;//[Offset: 0x718, Size: 16]
	bool bEnableLobbyPreloadAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool bEnablePreloadAssetFromFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	FString[] AllowFlushPaths;//[Offset: 0x730, Size: 16]
	FString[] AllowMissings;//[Offset: 0x740, Size: 16]
	bool ReportFlushLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	bool ReportMissingFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 1]
	bool ReporObjectArrayGrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x752, Size: 1]
	bool LowMemoryCloseMNA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x753, Size: 1]
	int LowMemoryAndroidLimitGB;//[Offset: 0x754, Size: 4]
	int LowMemoryIOSLimitGB;//[Offset: 0x758, Size: 4]
	delegate OnGameLanguageChanged;//[Offset: 0x760, Size: 16]
	GameOverrider* GameOverrider;//[Offset: 0x7c0, Size: 8]
	bool UseStartupLevel();// 0x4850558
	void UploadTLOG_KafkaError(int inErrorCode);// 0x48504dc
	void TryPreLoadLobbyAsset(const SoftObjectPath[] InAssetPathList, int AndroidMemoryLimit, int IOSMemoryLimit);// 0x48502f4
	void ToggleTGPAPingCheck(bool bIsOpen);// 0x4850270
	void TestSRP(FString resPath);// 0x4850198
	void TestPrintGUObjectArray(FString Filename, FString RefName, int PrintLevel, bool bOnlyGCedObjects);// 0x484ffa0
	void TestPrintCustomNoGC();// 0x484ff8c
	void TestMountPak(FString PakName, bool bMount);// 0x484fe70
	void TestLoadNoGCPackages();// 0x484fe5c
	FString TestExecFunc(FString CmdStr, FString ExtralStr1, FString ExtralStr2);// 0x484fc18
	void TestBoundFunction();// 0x484fc04
	bool SurportReupdate();// 0x484fbc4
	bool StartGrayUpdate();// 0x484fb8c
	void ShutdownUnrealNetwork();// 0x484fb70
	bool ShouldWatchingDetailBtnOpen();// 0x484fb38
	void SetZoneID(FString midasZoneID);// 0x484fa60
	void SetPufferPakFileList(FString[] pakFileList);// 0x484f8f0
	void SetPayEnvironment(FString payEnvironment);// 0x484f818
	void SetLanguage(FString lang);// 0x484f794
	void SetGameStatusMap(<FName,FString> InGameStatusMap);// 0x484f678
	void SetCharmViewParam(bool AllowViewCharmInfoInRank);// 0x484f5f4
	void SetBLEDisableInfo(bool bDisable, int[] Blacklist);// 0x484f4d8
	void RetryDownload();// 0x484f4c4
	void ResetUserSettings();// 0x484f4b0
	void ResetIslandShowNicknameValue(bool flag);// 0x484f42c
	void ReportGameInfoToBugly(FString InfoType, FString InMsg, FString CallStack);// 0x484f234
	void ReloadSettingPropertyMap();// 0x484f220
	void ReleaseLobbyPreloadAsset();// 0x484f20c
	void ReInitLuaStateWrapper();// 0x484f1f0
	void ReInitialize();// 0x484f1dc
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x484f0a8
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x484ef74
	void RegisterUserSettingsDelegate_Enum(FString PropertyName, delegate Delegate);// 0x484ee40
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x484ed0c
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x484ec70
	void RegisterPay();// 0x484ec5c
	void PrintFName();// 0x484ec48
	static void PostUdpToTGPA(FString Host, int Port, int Count, int Interval, int Timeout, FString Content);// 0x484e9e8
	void PostSavedFileToTGPA(FString DirPath, FString FilePath);// 0x484e880
	static void PostPingToTGPA(FString Host, int Count, int Interval, int Timeout, FString Content);// 0x484e65c
	static void PostGameStatusToTGPASMap(FString OpenID, FString RoleID, FString appid, FString PlatID, FString appver, FString srcver);// 0x484e2c4
	void PostFileToTGPA(FString ExtraStr, FString FilePath);// 0x484e15c
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x484e0b4
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x484df50
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x484de80
	void OnQueryMyInfoNotify();// 0x484de6c
	void OnNearByPersonInfoNotify();// 0x484de58
	void OnMidasPayNeedLogin();// 0x484de44
	void OnMidasPayDelegate(int payItem, FString ProductID);// 0x484dd2c
	void OnMidasPayCallBack(out const APPayResponseInfo Info);// 0x484dc64
	void OnMidasLauchMpInfoCallBack(int resultCode, FString resultString);// 0x484db4c
	void OnMidasInitCallBack(FString Result);// 0x484da74
	void OnLocationInfoNotify(out const LocationInfoWrapper locationInfo);// 0x484d9ec
	void OnInGameEventNotified(byte gEvent);// 0x484d970
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* Downloader);// 0x484d8bc
	void OnHandleClassFieldAccessDenied(const FName InClassName, const FName InFieldName);// 0x484d808
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x484d740
	void OnGenQRImgNotify(int Ret, int Size, FString ImgPath);// 0x484d640
	FString OnCrashMessageNotify();// 0x484d5a8
	void OnAccountLoginInfoNotify(int Result, out const GCloudLoginAccountInfo Info);// 0x484d494
	void OnAccessTokenRefreshNotify(int Result, FString OpenID, FString OpenKey);// 0x484d2ec
	void NotifyUpdateFinalFinished(int ErrorCode);// 0x484d268
	void MidasPay(int payItem, FString ProductID);// 0x484d150
	void MidasMonthPay(out const APMonthPayInfo Info);// 0x484d0a0
	void MidasGoodsPay(out const APGoodsPayInfo Info);// 0x484cfbc
	void MatchVersion();// 0x484cfa8
	void MarkFName();// 0x484cf94
	void LauchMpInfo();// 0x484cf80
	bool IsUseAllNewIngameUI();// 0x484cf48
	bool IsPayEnable();// 0x484cf10
	bool IsMNAEnable();// 0x484ced8
	bool IsLowMemoryDevice();// 0x484cea0
	void InitMidasManager();// 0x484ce8c
	void InitLuaStateWrapper();// 0x484ce70
	FString HandleUQMCrashCallBack();// 0x484cdf0
	SaveGame* GetUserSettings();// 0x484cdb4
	GDolphinUpdater* GetUpdater();// 0x484cd98
	LocalSettingManager* GetSettingManager();// 0x484cd7c
	ReplayManager* GetReplayManager();// 0x484cd48
	GPufferUpdater* GetPufferUpdater();// 0x484cd2c
	FString[] GetPufferPakFileList();// 0x484cc50
	FString GetPlayerKeyStr();// 0x484cbd0
	GCloudMidasManager* GetMidasManager();// 0x484cb9c
	LuaStateWrapper* GetLuaStateWrapper();// 0x484cb68
	HttpHelper* GetHttpHelper();// 0x484cb34
	GVoiceInterface* GetGVoiceInterface();// 0x484caf8
	int GetDetailNetInfoFromGCloud();// 0x484cac4
	SaveGame* GetCustomSetting(FString InSlotName);// 0x484ca30
	CustomMapManager* GetCustomMapManager();// 0x484c9fc
	BugReporter* GetBugReporter();// 0x484c9c8
	FString GetBattleIDHexStr();// 0x484c948
	void FinishModifyUserSettings();// 0x484c92c
	void DoClientLuaUrl(FString UrlStr);// 0x484c8a8
	void DoClientLuaString(FString LuaString);// 0x484c824
	void CreateLogicManager(FString Filename);// 0x484c74c
	void CreateLobbyEnv();// 0x484c738
	int CountFNameMemory();// 0x484c704
	static FString ConvertTMap2JsonStr(out const <FString,FString> mapData);// 0x484c5ec
	void CompareFName();// 0x484c5d8
	static FString ClipboardPaste();// 0x484c558
	static void ClipBoardCopy(FString Text);// 0x484c490
	void ClearUIElemSettings();// 0x484c47c
	void ClearLobbyEnv();// 0x484c468
	void CheckLocalizationLanguage();// 0x484c454
	bool CheckIfNeedRegisterPay(int loginChannel, FString OpenID, FString PayToken, FString Pf, FString PfKey, int replaceValue);// 0x484c13c
	FString CallLuaTableFunctionRetString(FString TableName, FString FunctionName);// 0x484c010
	bool CallLuaTableFunctionRetBool(FString TableName, FString FunctionName);// 0x484bf24
	void CallLuaTableFunction(FString TableName, FString FunctionName);// 0x484be4c
	void CallGlobalScriptFunction(FString InFunctionName);// 0x484bdc0
	void BeginModifyUserSettings();// 0x484bda4
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x484bce0

--------------------------------
Class: GVoiceInterface.Object
	delegate JoinRoomDelegate;//[Offset: 0x30, Size: 16]
	float lbsRadiusWerewolf;//[Offset: 0x40, Size: 4]
	float lbsRadiusNormal;//[Offset: 0x44, Size: 4]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x118, Size: 8]
	bool isNormalInterphoneEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b7, Size: 1]
	bool LobbyTeamMicOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 1]
	bool IngameTeamMicOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb, Size: 1]
	bool IngameLbsMicOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	float uncleVoiceRate;//[Offset: 0x1e0, Size: 4]
	bool IsUnderagePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	bool IsChangeVoiceOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 1]
	void UploadRecordFile();// 0x485ee50
	void TryToChangeVoice();// 0x485ee3c
	bool TeamSpeakerEnable();// 0x485ee20
	bool TeamMicphoneEnable();// 0x485ee04
	void SwitchMicphoneWhenCorpsMode();// 0x485edf0
	void StopRecord();// 0x485eddc
	void StopPlayRecordFile();// 0x485edc8
	void StopInterphone();// 0x485edb4
	bool StartTestMagicVoice();// 0x485ed7c
	void StartRecord();// 0x485ed68
	void StartInterphone();// 0x485ed54
	void SpeechToText();// 0x485ed40
	void ShowOpenSpeakerAtFirstMsg();// 0x485ed2c
	void ShowLbsNotSupportInRoomMode();// 0x485ed18
	void ShowCorpsModeCannotUseLBSVoice();// 0x485ed04
	void SetWerewolfModeAudience(int[] Members);// 0x485ec2c
	void SetVoiceMode(int Type);// 0x485ebb0
	void SetTeammateAudienceList(int[] Members);// 0x485ead8
	void SetSpeakerVolum(float Value);// 0x485ea5c
	void SetSpeakerStatus(bool flag);// 0x485e9d8
	void SetShowReportVoiceSwitch(bool flag);// 0x485e954
	int SetServerInfo(FString URL);// 0x485e874
	void SetPlayerVolume(FString OpenID, int Volume);// 0x485e760
	void SetPlayerIsUnderage();// 0x485e74c
	void SetMicphoneVolum(float Value);// 0x485e6d0
	void SetMicphoneStatus(bool flag);// 0x485e64c
	void SetMainVolume(float Value);// 0x485e5d4
	void SetMainSoundSwitch(bool flag);// 0x485e554
	void SetLobbyAndInGameMicState(bool lobbyTeamMic, bool ingameTeamMic, bool ingameLbsMic);// 0x485e440
	void SetLbsVoiceRadius(float Radius);// 0x485e3c8
	void SetLbsRoomEnableStatus(bool flag);// 0x485e344
	void SetGvoiceLogState();// 0x485e330
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x485e2b4
	void SetCurrentDownloadFieldID(FString filedId);// 0x485e1cc
	void SetCivilVoiceStatusForRstt(bool flag);// 0x485e148
	void SetChangeVoiceSwitch(bool IsOpen);// 0x485e0c4
	void SetBGMVolume(float Value);// 0x485e04c
	void SetBGMSwitch(bool flag);// 0x485dfcc
	int SetAudienceList(FString RoomName, int[] Members);// 0x485de5c
	void ResetWhenLogOut();// 0x485de48
	void ResetBeforeInit();// 0x485de34
	int ReportUncivilVoice(bool isWerewolf);// 0x485dda0
	void ReactiveLbsStatus();// 0x485dd8c
	int QuitViceRoom(FString room);// 0x485dcac
	void QuitRoomAbs(FString RoomName, FString pendingName);// 0x485db44
	void QuitRoom_Replay(FString room);// 0x485da6c
	void QuitRoom();// 0x485da58
	void QuitLbsRoom(bool needReenterLbs);// 0x485d9d4
	void QuitGroupRoom(bool mNeedReenter);// 0x485d950
	void PlayRecordFile();// 0x485d93c
	void OpenTeamSpeakerOnly(bool ShowTips);// 0x485d8b8
	int OpenTeamMicphoneOnly(bool ShowTips);// 0x485d824
	int OpenTeamInterphone(bool ShowTips);// 0x485d790
	int OpenSpeaker_Replay(bool Force);// 0x485d6fc
	int OpenSpeaker(bool Force);// 0x485d668
	void OpenMicAndSpeakerAfterJoinRoom();// 0x485d654
	int OpenMic_Replay(bool Force);// 0x485d5c0
	int OpenMic(bool Force);// 0x485d52c
	bool OpenLocalFile(FString Filename);// 0x485d448
	void OpenGroupSpeakerOnly(bool ShowTips);// 0x485d3c4
	int OpenGroupMicphoneOnly(bool ShowTips);// 0x485d330
	int OpenGroupInterphone();// 0x485d2fc
	void OpenAllSpeaker(bool ShowTips);// 0x485d278
	int OpenAllMicphone(bool ShowTips);// 0x485d1e4
	int OpenAllInterphone(bool ShowTips);// 0x485d150
	void OnRoomTypeChanged(FString itemtext);// 0x485d078
	void OnPlayerStateChanged();// 0x485d064
	void OnPlayerEnterJumping();// 0x485d050
	void ManualPool();// 0x485d03c
	void ManualPoll_Replay();// 0x485d028
	void LeaveSilenceMode();// 0x485d014
	void LeaveHideAndSeekMode();// 0x485d000
	void LeaveGhostState();// 0x485cfec
	bool LbsSpeakerEnable();// 0x485cfd0
	bool LbsMicphoneEnable();// 0x485cfb4
	int JoinViceRoom(FString room);// 0x485ced4
	void JoinUgcRoom(FString roomId, FString OpenID);// 0x485cd6c
	void JoinRoom_Replay(FString room);// 0x485cc94
	void JoinRoom(FString room, FString UserId);// 0x485cb2c
	void JoinLbsRoom(FString lbsRoom, FString UserId);// 0x485c9c4
	void JoinGroupRoom(FString groupRoom, FString UserId);// 0x485c85c
	bool IsTeamInterphoneOpenned();// 0x485c840
	bool IsSupportLbsVoiceInRoomMode();// 0x485c808
	bool IsSpeaking();// 0x485c7d0
	bool IsSpeakerOpened_Replay();// 0x485c798
	bool IsSpeakerEnabled();// 0x485c760
	bool IsRobotEnable();// 0x485c728
	bool IsMicOpened_Replay();// 0x485c6f0
	bool IsMicEnabled();// 0x485c6b8
	bool IsMemberBeForbidVoice(FString RoomName, int memberID);// 0x485c598
	bool IsLbsInterphoneOpenned();// 0x485c57c
	bool IsInterphoneMode();// 0x485c558
	bool IsInRobotWhiteList();// 0x485c520
	bool IsInReportCoolDown();// 0x485c4e8
	bool IsIngameNow();// 0x485c4b0
	bool IsGVoiceInited_Replay();// 0x485c478
	bool IsGroupInterphoneOpenned();// 0x485c45c
	void InitGVoiceComponent_Replay(FString UserId);// 0x485c384
	void InitGVoiceComponent(FString UserId);// 0x485c2ac
	bool HaveTeamRoom();// 0x485c274
	bool HaveLbsRoom();// 0x485c23c
	bool HaveGroupRoom();// 0x485c204
	bool GroupSpeakerEnable();// 0x485c1e8
	bool GroupMicphoneEnable();// 0x485c1cc
	bool GetVoteSilenceStatus();// 0x485c1b0
	VoiceRoomMemberInfo[] GetVoiceRoomMemberInfo_Replay(FString room);// 0x485c038
	VoiceRoomMemberInfo[] GetVoiceRoomMemberInfo(FString room, int Limit);// 0x485be84
	float GetVoiceLength();// 0x485be50
	FString GetTeamRoomName();// 0x485bdd0
	int GetSpeakerState();// 0x485bd9c
	bool GetShowReportVoiceSwitch();// 0x485bd64
	int GetPlayerVolume(FString OpenID);// 0x485bc84
	FString GetPlayerVoiceRoom();// 0x485bbc4
	int GetMicState();// 0x485bb90
	int GetMemberVoiceID();// 0x485bb74
	FString GetLbsRoomName();// 0x485baf4
	int GetLBSRoomMemberID();// 0x485bad8
	int GetGvoiceLogState();// 0x485baa4
	void GetAuthKey();// 0x485ba90
	VoiceRoomMemberInfo[] GetAllTeammateMicState();// 0x485b9b4
	void ForbidVoiceById_Replay(FString room, int memberID, bool Enable);// 0x485b85c
	void ForbidTeammateVoiceByIdLBS(int memberID, bool IsEnable);// 0x485b79c
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x485b6dc
	void ForbidMemberVoiceById(FString RoomName, int memberID, bool Enable);// 0x485b584
	bool FinishiTestMagicVoice();// 0x485b54c
	void EnterWerewolfKilling();// 0x485b538
	void EnterSilenceMode();// 0x485b524
	void EnterHideAndSeekMode();// 0x485b510
	void EnterGhostState();// 0x485b4fc
	int EnableTranslate(FString RoomName, bool Enable, int Type);// 0x485b394
	void EnableRoomVoice(int member, int roomType);// 0x485b2e0
	void EnableRoomSpeaker_Replay(FString room, bool Enable);// 0x485b1c4
	void EnableRoomMicphone_Replay(FString room, bool Enable);// 0x485b0a8
	void EnableCivilVoice(bool flag);// 0x485b024
	void EnableBluetoothSCO(bool flag);// 0x485afa0
	void DownloadRecordFile();// 0x485af8c
	void DisableRoomVoice(int member, int roomType);// 0x485aed8
	void CloseSpeakerCheck(bool Force);// 0x485ae54
	int CloseSpeaker_Replay(bool Force);// 0x485adc0
	void CloseSpeaker();// 0x485adac
	int CloseMic_Replay(bool Force);// 0x485ad18
	void CloseMic();// 0x485ad04
	void CloseAllSpeaker(bool ShowTips);// 0x485ac80
	void CloseAllMicphone(bool ShowTips);// 0x485abfc
	void ClearPlayerUnderageState();// 0x485abe8
	void ChangeSpeakerStateWithRoomName(FString RoomName, bool Status);// 0x485aacc
	void ChangeMicphoneStateWithRoomName(FString RoomName, bool Status);// 0x485a9b0

--------------------------------
Class: VoiceRoomMemberInfo
	FString OpenID;//[Offset: 0x0, Size: 16]
	int memberID;//[Offset: 0x10, Size: 4]
	int micstatus;//[Offset: 0x14, Size: 4]

--------------------------------
Class: LocalSettingManager.Object
	void ReloadAllSetting(UAEGameInstance* GameInstance);// 0x486aff8

--------------------------------
Class: HttpHelper.Object
	void HttpGet(FString URL);// 0x4863b3c

--------------------------------
Class: BugReporter.Object
	void SendScreenShot(FString errorReason, FString errorDescription, FString ImagePath, float X, float Y, float Z);// 0x483db40
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll, int64 gid);// 0x483d8a8
	void ReadZipLog(FString Filename);// 0x483d7d0
	byte[] CompressLog(bool pullAllLog);// 0x483d6f8

--------------------------------
Class: GDolphinUpdater.Object
	bool bForceReInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	FString AppStoreUrl;//[Offset: 0x80, Size: 16]
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	FString UpdateUrl;//[Offset: 0x98, Size: 16]
	FString UpdateUrl_CE;//[Offset: 0xa8, Size: 16]
	FString PreUpdateUrl;//[Offset: 0xb8, Size: 16]
	FString PreUpdateUrl_CE;//[Offset: 0xc8, Size: 16]
	uint32 UpdateChannel;//[Offset: 0xd8, Size: 4]
	uint32 UpdateChannelIOS;//[Offset: 0xdc, Size: 4]
	uint32 UpdateChannelIOS_CE;//[Offset: 0xe0, Size: 4]
	uint32 UpdateChannelAndroid;//[Offset: 0xe4, Size: 4]
	uint32 UpdateChannelAndroid_CE;//[Offset: 0xe8, Size: 4]
	uint32 UpdateChannelIOS_PVRTC;//[Offset: 0xec, Size: 4]
	uint32 UpdateChannelIOS_PVRTC_CE;//[Offset: 0xf0, Size: 4]
	uint32 UpdateChannelIOS_PVRTC_Shipping;//[Offset: 0xf4, Size: 4]
	bool PreUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	FString UpdateInfoPath;//[Offset: 0x100, Size: 16]
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool CheckMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	bool bNeedFirstExtract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 1]
	FString[] FirstExtractFileList;//[Offset: 0x118, Size: 16]
	bool EnableCDNGetVersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	uint32 VersionGetMode;//[Offset: 0x12c, Size: 4]
	FString Pre_CDNVersionUrl;//[Offset: 0x130, Size: 16]
	FString CDNVersionUrl;//[Offset: 0x140, Size: 16]
	bool EnableIOSBgDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool EnableSelectP2PDownEngine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	FString[] pakFilesNeedCheckedByDolphin;//[Offset: 0x158, Size: 16]
	void StartAppUpdate();// 0x4856ebc
	void SetCurlBufferSize(int msize);// 0x4856e40
	void SetCheckMap(bool CheckMap);// 0x4856dbc
	int MountExtraPak(FString[] InToMountPakFileFullNameList);// 0x4856c3c
	void KillPakMountThread();// 0x4856c28
	bool IsUpdating();// 0x4856bf0
	bool IsGrayUpdate();// 0x4856bb8
	bool IsExamine();// 0x4856b80
	void Install();// 0x4856b6c
	FString[] GetSkipMountPakKeyWordList();// 0x4856a90
	FString GetPufferPredownloadJsonConfig();// 0x4856a10
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x48568cc
	void FinishUpdate();// 0x48568b8
	void ContinueUpdate();// 0x48568a4
	bool CheckIfPakInSkipMountList(FString InToCheckPakFullPath, FString[] InSkipMountPakKeyWordList);// 0x4856690
	void CancelUpdate();// 0x485667c
	void CancelResUpdate();// 0x4856668
	void CancelAppUpdate();// 0x4856654

--------------------------------
Class: GPufferUpdater.Object
	bool DisablePuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool PufferPreUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	FString PrePufferServerUrl;//[Offset: 0x50, Size: 16]
	FString PufferServerUrl;//[Offset: 0x60, Size: 16]
	uint32 PufferProductId;//[Offset: 0x70, Size: 4]
	uint32 PufferProductIdAndroid;//[Offset: 0x74, Size: 4]
	uint32 PufferProductIdIOS;//[Offset: 0x78, Size: 4]
	uint32 PufferProductIdIOSDev;//[Offset: 0x7c, Size: 4]
	uint32 PufferProductId5S;//[Offset: 0x80, Size: 4]
	FString PufferDownloadDir;//[Offset: 0x88, Size: 16]
	FString PufferEifsDir1;//[Offset: 0x98, Size: 16]
	FString PufferEifsDir2;//[Offset: 0xa8, Size: 16]
	bool UnmountPak(FString pakFileFullPath);// 0x4859c1c
	bool StopTask(uint64 TaskID);// 0x4859b8c
	int StopMergeBinDiff(int resID);// 0x4859b00
	int StopCheckPakFileMD5(int resID);// 0x4859a74
	int ReturnPufferTempCacheFiles_LuaState();// 0x4859a5c
	int ReturnLocalFiles_LuaState();// 0x4859a44
	void ResumePufferUpdater();// 0x4859a30
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x4859904
	bool RemountPakFiles(FString downloadDir, FString PakPrefix);// 0x4859790
	FString ReadFile(FString Filename);// 0x485966c
	void PausePufferUpdater();// 0x4859658
	int PatchPakFileFromBinDiff(const FString InPakFilenameOld, const FString InPakFilenameDiff, const FString InPakFileNew, bool bGenerateRecoredFile, bool bFast);// 0x48593c8
	int MoveFile(FString fromPath, FString toPath);// 0x4859258
	bool MountPak(FString pakFileFullPath, uint32 pakOrder);// 0x4859138
	int MergeBinDiffStart(int resID, const FString InPakFilenameOld, const FString InPakFilenameDiff, const FString InPakFileNew, bool bGenerateRecoredFile, bool bFast);// 0x4858e60
	void MergeBinDiffReturn(int resID, int ErrorCode);// 0x4858dac
	bool IsInitSuccess();// 0x4858d74
	bool IsFileReady(FString FilePath);// 0x4858c90
	bool IsFileIdValid(FString FilePath);// 0x4858bac
	bool IsFileExist(FString Filename, FString Extension);// 0x4858a38
	FString GetPufferDownloadPath();// 0x48589b8
	uint32 GetInitErrorCode();// 0x4858984
	uint32 GetFileSizeCompressed(FString FilePath);// 0x48588a4
	float GetFileSize(FString Filename);// 0x48587c4
	bool DeleteFile(FString FileFullPath);// 0x48586e0
	int CheckPakFileStart(int resID, const FString ToCheckPakFileName);// 0x48585b8
	void CheckPakFileReturn(int resID, FString retMD5);// 0x48584a0
	bool CheckBinDiffPakFileMD5(const FString InPakFilenameNew, FString Extension, const FString InPakFilenameNewMD5);// 0x485829c

--------------------------------
Class: CustomMapManager.Object
	delegate OnMapStatusUpdated;//[Offset: 0x28, Size: 16]
	void UpdateMap(FString InUrl, FString InMapId, FString InSaveFileName, int InTargetSize, FString InMapServerHash, FString InMapServerVer);// 0x4848448
	int UnmountMaps();// 0x4848414
	bool UnmountMap(FString InMapId);// 0x484837c
	bool UninstallMap(FString InMapId);// 0x48482e4
	void StopUpdate(FString InMapId);// 0x4848260
	void StopAllUpdate();// 0x484824c
	bool SaveDiffVerToLocal(FString InMapId);// 0x48481b4
	void OnUnzipFinished(FString InMapId, bool bSuccess);// 0x48480e8
	void OnMergePakFinished(FString InMapId, int RetCode);// 0x4848024
	void OnCheckHashFinished(FString InMapId, FString InHash, bool bNotifyError);// 0x4847f10
	int MountMaps();// 0x4847edc
	bool MountMap(FString InMapId);// 0x4847e44
	void MarkPendingMount(FString InMapId);// 0x4847dc0
	bool IsUpdating(FString InMapId);// 0x4847d28
	bool IsMerging(FString InMapId);// 0x4847c90
	bool IsMapNeedUpdate(FString InMapId, FString InMapServerVer);// 0x4847bac
	FString GetMapVerOnlyFromLocal(const FString InMapId);// 0x4847a88
	enum GetMapUpdateType(FString InMapId, FString InMapDiffVer, FString InMapServerVer);// 0x4847960
	FString GetMapLocalVer(FString InMapId);// 0x4847884
	FString GetMapLocalHash(FString InMapId);// 0x48477a8
	<FString,FString> GetLocalMapVersions();// 0x48476e8
	FString GetLastMountMapId();// 0x4847668
	FString GetLastMountId();// 0x48475e8
	void ForceSetMountIdByMapIdForAutoRunTest(FString InMapId, FString InMountId, FString InVersion);// 0x48474d0
	void DiffUpdateMap(FString InUrl, FString InMapId, FString InSaveFileName, int InDiffPakSize, FString InDiffMD5, FString InDiffVer, FString InDiffPakName);// 0x48472a4
	bool DeleteMap(FString InMapId);// 0x484720c
	void ClearPendingMount();// 0x48471f8
	bool CheckMap(FString InMapId, FString InMapPakName, FString InMapServerHash, FString InMountId, FString InMapServerVer);// 0x484703c

--------------------------------
Class: UGCActorLuaManager.Object

--------------------------------
Class: ReplayManager.Object
	delegate OnReplayStatusUpdated;//[Offset: 0x28, Size: 16]
	delegate OnPlayReplayEvent;//[Offset: 0x38, Size: 16]
	void StopDownload(FString InReplayId);// 0x48760cc
	void StopAllDownload();// 0x48760b8
	bool PlayReplay(FString InReplayFilename);// 0x4876020
	bool IsDownloading(FString InReplayId);// 0x4875f88
	void DownloadReplay(FString InUrl, FString InReplayId, int InIndex, FString InSaveFileName, int InTargetSize);// 0x4875df8
	bool DeleteReplay(FString InReplayFilename);// 0x4875d60
	enum CheckReplayStatus(FString InReplayId, int InIndex, FString InFileName);// 0x4875c44
	void CancelDownload(FString InReplayId);// 0x4875bc0

--------------------------------
Class: GCloudLoginAccountInfo
	int loginChannel;//[Offset: 0x0, Size: 4]
	FString OpenID;//[Offset: 0x8, Size: 16]
	FString OpenKey;//[Offset: 0x18, Size: 16]
	FString PayToken;//[Offset: 0x28, Size: 16]
	FString Pf;//[Offset: 0x38, Size: 16]
	FString PfKey;//[Offset: 0x48, Size: 16]

--------------------------------
Class: TssManager.Object
	int SendSkdData_LuaState();// 0x48aa58c
	int SendEigeninfoData_LuaState();// 0x48aa574
	int OnRecvData_LuaState();// 0x48aa55c

--------------------------------
Class: GCloudMidasManager.Object
	delegate MidasInitCallbackDelegate;//[Offset: 0x30, Size: 16]
	delegate PayNeedLoginDelegate;//[Offset: 0x40, Size: 16]
	delegate PayCallBackDelegate;//[Offset: 0x50, Size: 16]
	delegate LauchMpInfoCallbackDelegate;//[Offset: 0x60, Size: 16]
	interface class * midasInterface;//[Offset: 0x70, Size: 16]
	FString payEnvironment;//[Offset: 0x80, Size: 16]
	int CurrentPayItem;//[Offset: 0x90, Size: 4]
	bool bIsFirstPresent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	<int,int> PresentLevel;//[Offset: 0x98, Size: 80]
	bool bLauchedMpInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	void UnRegisterPay();// 0x74042f0
	void SetPayEnvironment(FString Environment);// 0x7404218
	void RegisterPay(int Platform, FString offerID, FString OpenID, FString OpenKey, FString Pf, FString PfKey, FString ZoneID);// 0x7403e20
	void RefreshPay(FString OpenID, FString OpenKey);// 0x7403cb0
	void Pay(FString ZoneID, int payItem, FString ProductID);// 0x7403af8
	void OnMidasPayNeedLogin();// 0x7403adc
	void OnMidasPayCallBack(out const APPayResponseInfo Info);// 0x7403a0c
	void OnMidasLauchMpInfoCallBack(int resultCode, FString resultString);// 0x74038e4
	void OnMidasInitCallBack(FString resultString);// 0x7403804
	void MonthPay(out const APMonthPayInfo Info);// 0x740374c
	void LauchMpInfo(FString ZoneID);// 0x740366c
	bool IsPayEnable();// 0x740362c
	bool IsFirstPresent();// 0x74035ec
	void Initialize();// 0x74035d8
	void GoodsPay(out const APGoodsPayInfo Info);// 0x74034ec
	<int,int> GetPresentInfo();// 0x74034ac
	int GetPresentCount(int payItem);// 0x7403418
	FString GetPayEnvironment();// 0x7403358
	bool CheckIfNeedRegisterPay(FString offerID, FString OpenID, FString OpenKey);// 0x7403144

--------------------------------
Class: APPayResponseInfo
	int resultCode;//[Offset: 0x0, Size: 4]
	int payState;//[Offset: 0x4, Size: 4]
	int provideState;//[Offset: 0x8, Size: 4]
	int netState;//[Offset: 0xc, Size: 4]
	int realSaveNum;//[Offset: 0x10, Size: 4]
	int payItem;//[Offset: 0x14, Size: 4]
	FString payChannel;//[Offset: 0x18, Size: 16]
	FString ResultMsg;//[Offset: 0x28, Size: 16]
	FString resultInerCode;//[Offset: 0x38, Size: 16]
	bool isReprovide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	FString billno;//[Offset: 0x50, Size: 16]

--------------------------------
Class: APMonthPayInfo
	FString offerID;//[Offset: 0x0, Size: 16]
	FString Pf;//[Offset: 0x10, Size: 16]
	bool bSubscribe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool autoPay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	FString ZoneID;//[Offset: 0x28, Size: 16]
	int saveValue;//[Offset: 0x38, Size: 4]
	FString ProductID;//[Offset: 0x40, Size: 16]
	FString serviceCode;//[Offset: 0x50, Size: 16]
	FString serviceName;//[Offset: 0x60, Size: 16]
	FString remark;//[Offset: 0x70, Size: 16]
	FString extras;//[Offset: 0x80, Size: 16]
	FString reserv;//[Offset: 0x90, Size: 16]
	FString drmInfo;//[Offset: 0xa0, Size: 16]
	FString payChannel;//[Offset: 0xb0, Size: 16]
	int serviceType;//[Offset: 0xc0, Size: 4]

--------------------------------
Class: APGoodsPayInfo
	FString offerID;//[Offset: 0x0, Size: 16]
	FString Pf;//[Offset: 0x10, Size: 16]
	FString PfKey;//[Offset: 0x20, Size: 16]
	FString ZoneID;//[Offset: 0x30, Size: 16]
	FString goodsZoneID;//[Offset: 0x40, Size: 16]
	int payItem;//[Offset: 0x50, Size: 4]
	int saveValue;//[Offset: 0x54, Size: 4]
	FString ProductID;//[Offset: 0x58, Size: 16]

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: CustomSettingSaveGame
	FString LayoutSlotName;//[Offset: 0x0, Size: 16]
	SaveGame* SaveGame;//[Offset: 0x10, Size: 8]

--------------------------------
Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 16]
	delegate OnFail;//[Offset: 0x38, Size: 16]
	FString FileURL;//[Offset: 0x48, Size: 16]
	FString FileSavePath;//[Offset: 0x58, Size: 16]
	FString UrlHash;//[Offset: 0x68, Size: 16]
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool LoadDiskImageAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]
	void Start(FString URL);// 0x4864510
	static void SetSubDirTime(int sec);// 0x486449c
	static void SetRootDir(FString rootDir);// 0x48643d4
	static void ResetSubDirTime();// 0x48643c0
	static void ResetRootDir();// 0x48643ac
	void OnLoadImageCompleted(const ASyncLoadFileLoader* Loader, int InParam);// 0x48642f4
	static ImageDownloader* MakeDownloaderInGame();// 0x48642c0
	static ImageDownloader* MakeDownloader();// 0x486428c
	void ImageDownloaderDelegate__DelegateSignature(Texture2D* Texture, ImageDownloader* ImageDownloader);// 0xffffff8f20d162a8
	FString GetImageSavePath(FString URL);// 0x4864168
	static bool CopyCacheFileFromUrl(FString UrlTo, FString UrlFrom);// 0x4863ffc

--------------------------------
Class: ASyncLoadFileLoader.Object
	byte[] ReadBufferData;//[Offset: 0x28, Size: 16]
	FString CacheFilePath;//[Offset: 0x38, Size: 16]
	FString ReadBufferString;//[Offset: 0x48, Size: 16]
	void OnLoadCompleted(bool InResult);// 0x42bfaf8
	bool LoadFileToByteFromDisk(FString FilePath);// 0x42bfa14
	void LoadFileAsync(FString FilePath);// 0x42bf988

--------------------------------
Class: NativeHUDTickContainer
	int WidgetIndex;//[Offset: 0x0, Size: 4]
	UAEUserWidget* pWidget;//[Offset: 0x4, Size: 8]

--------------------------------
Class: GameOverrider.Object
	STExtraPlayerController* CacheController;//[Offset: 0x38, Size: 8]
	GameInstance* OwnerGameInstance;//[Offset: 0x40, Size: 8]
	ConsoleVar[] ConsoleVars;//[Offset: 0x48, Size: 16]
	FString[] WorkOnMaps;//[Offset: 0x58, Size: 16]
	void OnSpectatorChange();// 0x4856314

--------------------------------
Class: ConsoleVar
	FString Key;//[Offset: 0x0, Size: 16]
	float Value;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WebviewInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x8, Size: 16]
	int Extend;//[Offset: 0x18, Size: 4]
	int Extend2;//[Offset: 0x1c, Size: 4]
	FString MsgData;//[Offset: 0x20, Size: 16]

--------------------------------
Class: WakeupInfoWrapper

--------------------------------
Class: LocationInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 4]
	double Longitude;//[Offset: 0x8, Size: 8]
	double Latitude;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GroupInfoWrapper
	int SnsAction;//[Offset: 0x0, Size: 4]
	int flag;//[Offset: 0x4, Size: 4]
	int ErrorCode;//[Offset: 0x8, Size: 4]
	int Platform;//[Offset: 0xc, Size: 4]
	FString Desc;//[Offset: 0x10, Size: 16]
	WechatGroupInfomation wechatGroupInfo;//[Offset: 0x20, Size: 48]

--------------------------------
Class: WechatGroupInfomation
	FString OpenIdList;//[Offset: 0x0, Size: 16]
	FString MemberNum;//[Offset: 0x10, Size: 16]
	FString ChatRoomURL;//[Offset: 0x20, Size: 16]

--------------------------------
Class: UAELoginGameMode.UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
