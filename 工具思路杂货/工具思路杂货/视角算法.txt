.版本 2

.如果真 (开启自瞄 ＝ 真)
    局部_自瞄骨骼坐标.X ＝ 全局_内存读写.读小数型 (全局_进程标识, 局部_自瞄地址)
    局部_自瞄骨骼坐标.Y ＝ 全局_内存读写.读小数型 (全局_进程标识, 局部_自瞄地址 ＋ 16)
    局部_自瞄骨骼坐标.Z ＝ 全局_内存读写.读小数型 (全局_进程标识, 局部_自瞄地址 ＋ 32)

    .如果真 (自瞄类型 ＝ 2)
        .如果真 (热键类型 ＝ 0)
            .如果 (判断_是否按下 (1))

                .如果真 (局部_自瞄骨骼坐标.X ＝ -1 且 局部_自瞄骨骼坐标.Y ＝ -1 且 局部_自瞄骨骼坐标.Z ＝ -1)
                    返回 ()
                .如果真结束

                局部_鼠标坐标 ＝ 取值_自瞄算法 (局部_本人坐标, 局部_自瞄骨骼坐标)


                全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles), 局部_鼠标坐标.Y)
                全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles) ＋ 4, 局部_鼠标坐标.X)

                .如果真 (开启压枪 ＝ 真)

                    局部_鼠标坐标.Y ＝ 局部_鼠标坐标.Y － 全局_内存读写.读小数型 (全局_进程标识, 局部_本人结构 ＋ 进制_十六到十 (#m_aimPunchAngleY)) × 2

                    局部_鼠标坐标.X ＝ 局部_鼠标坐标.X － 全局_内存读写.读小数型 (全局_进程标识, 局部_本人结构 ＋ 进制_十六到十 (#m_aimPunchAngleX)) × 2

                    全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles), 局部_鼠标坐标.Y)
                    全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles) ＋ 4, 局部_鼠标坐标.X)
                .如果真结束

                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9C8”), 还原字节集2 (“90 90 90 90 90 90”))
                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9D1”), 还原字节集2 (“90 90 90 90 90 90”))

            .否则
                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9C8”), 还原字节集2 (“89 81 D8 31 00 00”))
                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9D1”), 还原字节集2 (“89 81 DC 31 00 00”))

            .如果结束

        .如果真结束

        .如果真 (热键类型 ＝ 1)
            .如果 (判断_是否按下 (2))

                .如果真 (局部_自瞄骨骼坐标.X ＝ -1 且 局部_自瞄骨骼坐标.Y ＝ -1 且 局部_自瞄骨骼坐标.Z ＝ -1)
                    返回 ()
                .如果真结束

                局部_鼠标坐标 ＝ 取值_自瞄算法 (局部_本人坐标, 局部_自瞄骨骼坐标)


                全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles), 局部_鼠标坐标.Y)
                全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles) ＋ 4, 局部_鼠标坐标.X)

                .如果真 (开启压枪 ＝ 真)

                    局部_鼠标坐标.Y ＝ 局部_鼠标坐标.Y － 全局_内存读写.读小数型 (全局_进程标识, 局部_本人结构 ＋ 进制_十六到十 (#m_aimPunchAngleY)) × 2

                    局部_鼠标坐标.X ＝ 局部_鼠标坐标.X － 全局_内存读写.读小数型 (全局_进程标识, 局部_本人结构 ＋ 进制_十六到十 (#m_aimPunchAngleX)) × 2

                    全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles), 局部_鼠标坐标.Y)
                    全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles) ＋ 4, 局部_鼠标坐标.X)
                .如果真结束

                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9C8”), 还原字节集2 (“90 90 90 90 90 90”))
                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9D1”), 还原字节集2 (“90 90 90 90 90 90”))

            .否则
                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9C8”), 还原字节集2 (“89 81 D8 31 00 00”))
                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9D1”), 还原字节集2 (“89 81 DC 31 00 00”))
            .如果结束

        .如果真结束




        .如果真 (热键类型 ＝ 2)
            .如果 (判断_是否按下 (#Shift键))

                .如果真 (局部_自瞄骨骼坐标.X ＝ -1 且 局部_自瞄骨骼坐标.Y ＝ -1 且 局部_自瞄骨骼坐标.Z ＝ -1)
                    返回 ()
                .如果真结束

                局部_鼠标坐标 ＝ 取值_自瞄算法 (局部_本人坐标, 局部_自瞄骨骼坐标)


                全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles), 局部_鼠标坐标.Y)
                全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles) ＋ 4, 局部_鼠标坐标.X)

                .如果真 (开启压枪 ＝ 真)

                    局部_鼠标坐标.Y ＝ 局部_鼠标坐标.Y － 全局_内存读写.读小数型 (全局_进程标识, 局部_本人结构 ＋ 进制_十六到十 (#m_aimPunchAngleY)) × 2

                    局部_鼠标坐标.X ＝ 局部_鼠标坐标.X － 全局_内存读写.读小数型 (全局_进程标识, 局部_本人结构 ＋ 进制_十六到十 (#m_aimPunchAngleX)) × 2

                    全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles), 局部_鼠标坐标.Y)
                    全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles) ＋ 4, 局部_鼠标坐标.X)
                .如果真结束

                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9C8”), 还原字节集2 (“90 90 90 90 90 90”))
                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9D1”), 还原字节集2 (“90 90 90 90 90 90”))

            .否则
                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9C8”), 还原字节集2 (“89 81 D8 31 00 00”))
                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9D1”), 还原字节集2 (“89 81 DC 31 00 00”))
            .如果结束

        .如果真结束



        .如果真 (热键类型 ＝ 3)
            .如果 (判断_是否按下 (#Ctrl键))

                .如果真 (局部_自瞄骨骼坐标.X ＝ -1 且 局部_自瞄骨骼坐标.Y ＝ -1 且 局部_自瞄骨骼坐标.Z ＝ -1)
                    返回 ()
                .如果真结束

                局部_鼠标坐标 ＝ 取值_自瞄算法 (局部_本人坐标, 局部_自瞄骨骼坐标)


                全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles), 局部_鼠标坐标.Y)
                全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles) ＋ 4, 局部_鼠标坐标.X)

                .如果真 (开启压枪 ＝ 真)

                    局部_鼠标坐标.Y ＝ 局部_鼠标坐标.Y － 全局_内存读写.读小数型 (全局_进程标识, 局部_本人结构 ＋ 进制_十六到十 (#m_aimPunchAngleY)) × 2

                    局部_鼠标坐标.X ＝ 局部_鼠标坐标.X － 全局_内存读写.读小数型 (全局_进程标识, 局部_本人结构 ＋ 进制_十六到十 (#m_aimPunchAngleX)) × 2

                    全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles), 局部_鼠标坐标.Y)
                    全局_内存读写.写小数型 (全局_进程标识, 局部_鼠标结构 ＋ 进制_十六到十 (#dwClientState_ViewAngles) ＋ 4, 局部_鼠标坐标.X)
                .如果真结束

                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9C8”), 还原字节集2 (“90 90 90 90 90 90”))
                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9D1”), 还原字节集2 (“90 90 90 90 90 90”))

            .否则
                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9C8”), 还原字节集2 (“89 81 D8 31 00 00”))
                全局_内存读写.写字节集 (全局_进程标识, 全局_客户端值 ＋ 进制_十六到十 (“1FE9D1”), 还原字节集2 (“89 81 DC 31 00 00”))
            .如果结束

        .如果真结束

    .如果真结束



